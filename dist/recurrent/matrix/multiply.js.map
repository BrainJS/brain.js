{"version":3,"sources":["../../../src/recurrent/matrix/multiply.js"],"names":["multiply","product","left","right","leftRows","rows","leftColumns","columns","rightColumns","leftRow","leftRowBase","rightRowBase","rightColumn","dot","leftColumn","rightColumnBase","leftIndex","rightIndex","weights","deltas"],"mappings":";;;;;kBAMwBA,Q;AANxB;;;;;;AAMe,SAASA,QAAT,CAAkBC,OAAlB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAwC;AACrD,MAAIC,WAAWF,KAAKG,IAApB;AACA,MAAIC,cAAcJ,KAAKK,OAAvB;AACA,MAAIC,eAAeL,MAAMI,OAAzB;;AAEA;AACA,OAAI,IAAIE,UAAU,CAAlB,EAAqBA,UAAUL,QAA/B,EAAyCK,SAAzC,EAAoD;AAClD,QAAMC,cAAcJ,cAAcG,OAAlC;AACA,QAAME,eAAeH,eAAeC,OAApC;AACA;AACA,SAAI,IAAIG,cAAc,CAAtB,EAAyBA,cAAcJ,YAAvC,EAAqDI,aAArD,EAAoE;;AAElE;AACA,UAAIC,MAAM,CAAV;AACA;AACA,WAAI,IAAIC,aAAa,CAArB,EAAwBA,aAAaR,WAArC,EAAkDQ,YAAlD,EAAgE;AAC9D,YAAMC,kBAAkBP,eAAeM,UAAvC;AACA,YAAME,YAAYN,cAAcI,UAAhC;AACA,YAAMG,aAAaF,kBAAkBH,WAArC;AACAC,eACIX,KAAKgB,OAAL,CAAaF,SAAb,IACAb,MAAMe,OAAN,CAAcD,UAAd,CAFJ;AAGAf,aAAKiB,MAAL,CAAYH,SAAZ,IAAyB,CAAzB;AACAb,cAAMgB,MAAN,CAAaF,UAAb,IAA2B,CAA3B;AACD;AACDhB,cAAQiB,OAAR,CAAgBP,eAAeC,WAA/B,IAA8CC,GAA9C;AACD;AACF;AACF","file":"multiply.js","sourcesContent":["/**\r\n * multiply {left} and {right} matrix weights to {into}\r\n * @param {Matrix} product\r\n * @param {Matrix} left\r\n * @param {Matrix} right\r\n */\r\nexport default function multiply(product, left, right) {\r\n  let leftRows = left.rows;\r\n  let leftColumns = left.columns;\r\n  let rightColumns = right.columns;\r\n\r\n  // loop over rows of left\r\n  for(let leftRow = 0; leftRow < leftRows; leftRow++) {\r\n    const leftRowBase = leftColumns * leftRow;\r\n    const rightRowBase = rightColumns * leftRow;\r\n    // loop over cols of right\r\n    for(let rightColumn = 0; rightColumn < rightColumns; rightColumn++) {\r\n\r\n      // dot product loop\r\n      let dot = 0;\r\n      //loop over columns of left\r\n      for(let leftColumn = 0; leftColumn < leftColumns; leftColumn++) {\r\n        const rightColumnBase = rightColumns * leftColumn;\r\n        const leftIndex = leftRowBase + leftColumn;\r\n        const rightIndex = rightColumnBase + rightColumn;\r\n        dot +=\r\n            left.weights[leftIndex]\r\n          * right.weights[rightIndex];\r\n        left.deltas[leftIndex] = 0;\r\n        right.deltas[rightIndex] = 0;\r\n      }\r\n      product.weights[rightRowBase + rightColumn] = dot;\r\n    }\r\n  }\r\n}\r\n"]}