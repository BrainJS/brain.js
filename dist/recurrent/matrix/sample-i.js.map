{"version":3,"sources":["../../../src/recurrent/matrix/sample-i.js"],"names":["sampleI","randomF","_randomF","m","r","x","i","w","weights"],"mappings":";;;;;kBASwBA,O;;AATxB;;AAEA;AACA,IAAMC,UAAUC,eAAhB;AACA;;;;;AAKe,SAASF,OAAT,CAAiBG,CAAjB,EAAoB;AACjC;AACA;AACA,MAAIC,IAAIH,QAAQ,CAAR,EAAW,CAAX,CAAR;AACA,MAAII,IAAI,CAAR;AACA,MAAIC,IAAI,CAAR;AACA,MAAIC,IAAIJ,EAAEK,OAAV;;AAEA,SAAO,IAAP,EAAa;AACXH,SAAKE,EAAED,CAAF,CAAL;AACA,QAAGD,IAAID,CAAP,EAAU;AACR,aAAOE,CAAP;AACD;AACDA;AACD;AACF","file":"sample-i.js","sourcesContent":["import { randomF as _randomF } from '../../utilities/random';\r\n\r\n//prevent parser from renaming when calling toString() method later\r\nconst randomF = _randomF;\r\n/**\r\n *\r\n * @param {Matrix} m\r\n * @returns {number}\r\n */\r\nexport default function sampleI(m) {\r\n  // sample argmax from w, assuming w are\r\n  // probabilities that sum to one\r\n  let r = randomF(0, 1);\r\n  let x = 0;\r\n  let i = 0;\r\n  let w = m.weights;\r\n\r\n  while (true) {\r\n    x += w[i];\r\n    if(x > r) {\r\n      return i;\r\n    }\r\n    i++;\r\n  }\r\n}"]}