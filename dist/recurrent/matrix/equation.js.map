{"version":3,"sources":["../../../src/recurrent/matrix/equation.js"],"names":["Equation","inputRow","inputValue","states","left","right","weights","length","Error","product","Matrix","rows","columns","push","forwardFn","add","backpropagationFn","addB","allOnes","m","cloneNegative","multiply","multiplyB","multiplyElement","multiplyElementB","relu","reluB","input","self","rowPluck","rowPluckB","sigmoid","sigmoidB","tanh","tanhB","iForward","iBackpropagate","rowIndex","state","i","max","hasOwnProperty"],"mappings":"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","file":"equation.js","sourcesContent":["import Matrix from './';\nimport OnesMatrix from './ones-matrix';\nimport copy from './copy';\nimport cloneNegative from './clone-negative';\nimport add from './add';\nimport addB from './add-b';\nimport allOnes from './all-ones';\nimport multiply from './multiply';\nimport multiplyB from './multiply-b';\nimport multiplyElement from './multiply-element';\nimport multiplyElementB from './multiply-element-b';\nimport relu from './relu';\nimport reluB from './relu-b';\nimport rowPluck from './row-pluck';\nimport rowPluckB from './row-pluck-b';\nimport sigmoid from './sigmoid';\nimport sigmoidB from './sigmoid-b';\nimport tanh from './tanh';\nimport tanhB from './tanh-b';\n\nexport default class Equation {\n  constructor() {\n    this.inputRow = 0;\n    this.inputValue = null;\n    this.states = [];\n  }\n\n  /**\n   * connects two matrices together by add\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  add(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, left.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: add,\n      backpropagationFn: addB\n    });\n    return product;\n  }\n\n  /**\n   *\n   * @param {Number} rows\n   * @param {Number} columns\n   * @returns {Matrix}\n   */\n  allOnes(rows, columns) {\n    let product = new Matrix(rows, columns);\n    this.states.push({\n      left: product,\n      product: product,\n      forwardFn: allOnes\n    });\n    return product;\n  }\n\n  /**\n   *\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  cloneNegative(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: cloneNegative\n    });\n    return product;\n  }\n\n  /**\n   * connects two matrices together by subtract\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  subtract(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    return this.add(this.add(this.allOnes(left.rows, left.columns), this.cloneNegative(left)), right);\n  }\n\n  /**\n   * connects two matrices together by multiply\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  multiply(left, right) {\n    if (left.columns !== right.rows) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, right.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: multiply,\n      backpropagationFn: multiplyB\n    });\n    return product;\n  }\n\n  /**\n   * connects two matrices together by multiplyElement\n   * @param {Matrix} left\n   * @param {Matrix} right\n   * @returns {Matrix}\n   */\n  multiplyElement(left, right) {\n    if (left.weights.length !== right.weights.length) {\n      throw new Error('misaligned matrices');\n    }\n    let product = new Matrix(left.rows, left.columns);\n    this.states.push({\n      left: left,\n      right: right,\n      product: product,\n      forwardFn: multiplyElement,\n      backpropagationFn: multiplyElementB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to relu\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  relu(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: relu,\n      backpropagationFn: reluB\n    });\n    return product;\n  }\n\n  /**\n   * copy a matrix\n   * @param {Matrix} input\n   * @returns {Matrix}\n   */\n  input(input) {\n    const self = this;\n    this.states.push({\n      product: input,\n      forwardFn: () => {\n        input.weights = self.inputValue;\n      }\n    });\n    return input;\n  }\n\n  /**\n   * connects a matrix via a row\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  inputMatrixToRow(m) {\n    let self = this;\n    let product = new Matrix(m.columns, 1);\n    this.states.push({\n      left: m,\n      get right () {\n        return self.inputRow;\n      },\n      product: product,\n      forwardFn: rowPluck,\n      backpropagationFn: rowPluckB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to sigmoid\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  sigmoid(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: sigmoid,\n      backpropagationFn: sigmoidB\n    });\n    return product;\n  }\n\n  /**\n   * connects a matrix to tanh\n   * @param {Matrix} m\n   * @returns {Matrix}\n   */\n  tanh(m) {\n    let product = new Matrix(m.rows, m.columns);\n    this.states.push({\n      left: m,\n      product: product,\n      forwardFn: tanh,\n      backpropagationFn: tanhB\n    });\n    return product;\n  }\n\n  /**\n   *\n   * @param m\n   * @returns {Matrix}\n   */\n  observe(m) {\n    let iForward = 0;\n    let iBackpropagate = 0;\n    this.states.push({\n      forwardFn: function() {\n        iForward++;\n      },\n      backpropagationFn: function() {\n        iBackpropagate++;\n      }\n    });\n    return m;\n  }\n\n  /**\n   * @patam {Number} [rowIndex]\n   * @output {Matrix}\n   */\n  run(rowIndex = 0) {\n    this.inputRow = rowIndex;\n    let state;\n    for (let i = 0, max = this.states.length; i < max; i++) {\n      state = this.states[i];\n      if (!state.hasOwnProperty('forwardFn')) {\n        continue;\n      }\n      state.forwardFn(state.product, state.left, state.right);\n    }\n\n    return state.product;\n  }\n\n  /**\n   * @patam {Number} [rowIndex]\n   * @output {Matrix}\n   */\n  runInput(inputValue) {\n    this.inputValue = inputValue;\n    let state;\n    for (let i = 0, max = this.states.length; i < max; i++) {\n      state = this.states[i];\n      if (!state.hasOwnProperty('forwardFn')) {\n        continue;\n      }\n      state.forwardFn(state.product, state.left, state.right);\n    }\n\n    return state.product;\n  }\n\n  /**\n   * @patam {Number} [rowIndex]\n   * @output {Matrix}\n   */\n  runBackpropagate(rowIndex = 0) {\n    this.inputRow = rowIndex;\n\n    let i = this.states.length;\n    let state;\n    while (i-- > 0) {\n      state = this.states[i];\n      if (!state.hasOwnProperty('backpropagationFn')) {\n        continue;\n      }\n      state.backpropagationFn(state.product, state.left, state.right);\n    }\n\n    return state.product;\n  }\n}\n"]}