{"version":3,"sources":["../../../src/recurrent/matrix/equation.js"],"names":["Equation","inputRow","inputValue","states","left","right","weights","length","Error","product","Matrix","rows","columns","push","forwardFn","add","backpropagationFn","addB","allOnes","m","cloneNegative","multiply","multiplyB","multiplyElement","multiplyElementB","relu","reluB","input","self","rowPluck","rowPluckB","sigmoid","sigmoidB","tanh","tanhB","iForward","iBackpropagate","rowIndex","state","i","max","hasOwnProperty","target","output","runInput","errorSum","error","Math","abs","deltas","runIndex","logProbabilities","probabilities","slice","log2"],"mappings":"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","file":"equation.js","sourcesContent":["import Matrix from './';\r\nimport OnesMatrix from './ones-matrix';\r\nimport copy from './copy';\r\nimport cloneNegative from './clone-negative';\r\nimport add from './add';\r\nimport addB from './add-b';\r\nimport allOnes from './all-ones';\r\nimport multiply from './multiply';\r\nimport multiplyB from './multiply-b';\r\nimport multiplyElement from './multiply-element';\r\nimport multiplyElementB from './multiply-element-b';\r\nimport relu from './relu';\r\nimport reluB from './relu-b';\r\nimport rowPluck from './row-pluck';\r\nimport rowPluckB from './row-pluck-b';\r\nimport sigmoid from './sigmoid';\r\nimport sigmoidB from './sigmoid-b';\r\nimport tanh from './tanh';\r\nimport tanhB from './tanh-b';\r\nimport softmax from './softmax';\r\n\r\nexport default class Equation {\r\n  constructor() {\r\n    this.inputRow = 0;\r\n    this.inputValue = null;\r\n    this.states = [];\r\n  }\r\n\r\n  /**\r\n   * connects two matrices together by add\r\n   * @param {Matrix} left\r\n   * @param {Matrix} right\r\n   * @returns {Matrix}\r\n   */\r\n  add(left, right) {\r\n    if (left.weights.length !== right.weights.length) {\r\n      throw new Error('misaligned matrices');\r\n    }\r\n    let product = new Matrix(left.rows, left.columns);\r\n    this.states.push({\r\n      left: left,\r\n      right: right,\r\n      product: product,\r\n      forwardFn: add,\r\n      backpropagationFn: addB\r\n    });\r\n    return product;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Number} rows\r\n   * @param {Number} columns\r\n   * @returns {Matrix}\r\n   */\r\n  allOnes(rows, columns) {\r\n    let product = new Matrix(rows, columns);\r\n    this.states.push({\r\n      left: product,\r\n      product: product,\r\n      forwardFn: allOnes\r\n    });\r\n    return product;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Matrix} m\r\n   * @returns {Matrix}\r\n   */\r\n  cloneNegative(m) {\r\n    let product = new Matrix(m.rows, m.columns);\r\n    this.states.push({\r\n      left: m,\r\n      product: product,\r\n      forwardFn: cloneNegative\r\n    });\r\n    return product;\r\n  }\r\n\r\n  /**\r\n   * connects two matrices together by subtract\r\n   * @param {Matrix} left\r\n   * @param {Matrix} right\r\n   * @returns {Matrix}\r\n   */\r\n  subtract(left, right) {\r\n    if (left.weights.length !== right.weights.length) {\r\n      throw new Error('misaligned matrices');\r\n    }\r\n    return this.add(this.add(this.allOnes(left.rows, left.columns), this.cloneNegative(left)), right);\r\n  }\r\n\r\n  /**\r\n   * connects two matrices together by multiply\r\n   * @param {Matrix} left\r\n   * @param {Matrix} right\r\n   * @returns {Matrix}\r\n   */\r\n  multiply(left, right) {\r\n    if (left.columns !== right.rows) {\r\n      throw new Error('misaligned matrices');\r\n    }\r\n    let product = new Matrix(left.rows, right.columns);\r\n    this.states.push({\r\n      left: left,\r\n      right: right,\r\n      product: product,\r\n      forwardFn: multiply,\r\n      backpropagationFn: multiplyB\r\n    });\r\n    return product;\r\n  }\r\n\r\n  /**\r\n   * connects two matrices together by multiplyElement\r\n   * @param {Matrix} left\r\n   * @param {Matrix} right\r\n   * @returns {Matrix}\r\n   */\r\n  multiplyElement(left, right) {\r\n    if (left.weights.length !== right.weights.length) {\r\n      throw new Error('misaligned matrices');\r\n    }\r\n    let product = new Matrix(left.rows, left.columns);\r\n    this.states.push({\r\n      left: left,\r\n      right: right,\r\n      product: product,\r\n      forwardFn: multiplyElement,\r\n      backpropagationFn: multiplyElementB\r\n    });\r\n    return product;\r\n  }\r\n\r\n  /**\r\n   * connects a matrix to relu\r\n   * @param {Matrix} m\r\n   * @returns {Matrix}\r\n   */\r\n  relu(m) {\r\n    let product = new Matrix(m.rows, m.columns);\r\n    this.states.push({\r\n      left: m,\r\n      product: product,\r\n      forwardFn: relu,\r\n      backpropagationFn: reluB\r\n    });\r\n    return product;\r\n  }\r\n\r\n  /**\r\n   * copy a matrix\r\n   * @param {Matrix} input\r\n   * @returns {Matrix}\r\n   */\r\n  input(input) {\r\n    this.states.push({\r\n      product: input,\r\n      forwardFn: (product) => {\r\n        product.weights = input.weights = this.inputValue;\r\n      }\r\n    });\r\n    return input;\r\n  }\r\n\r\n  /**\r\n   * connects a matrix via a row\r\n   * @param {Matrix} m\r\n   * @returns {Matrix}\r\n   */\r\n  inputMatrixToRow(m) {\r\n    let self = this;\r\n    let product = new Matrix(m.columns, 1);\r\n    this.states.push({\r\n      left: m,\r\n      get right () {\r\n        return self.inputRow;\r\n      },\r\n      product: product,\r\n      forwardFn: rowPluck,\r\n      backpropagationFn: rowPluckB\r\n    });\r\n    return product;\r\n  }\r\n\r\n  /**\r\n   * connects a matrix to sigmoid\r\n   * @param {Matrix} m\r\n   * @returns {Matrix}\r\n   */\r\n  sigmoid(m) {\r\n    let product = new Matrix(m.rows, m.columns);\r\n    this.states.push({\r\n      left: m,\r\n      product: product,\r\n      forwardFn: sigmoid,\r\n      backpropagationFn: sigmoidB\r\n    });\r\n    return product;\r\n  }\r\n\r\n  /**\r\n   * connects a matrix to tanh\r\n   * @param {Matrix} m\r\n   * @returns {Matrix}\r\n   */\r\n  tanh(m) {\r\n    let product = new Matrix(m.rows, m.columns);\r\n    this.states.push({\r\n      left: m,\r\n      product: product,\r\n      forwardFn: tanh,\r\n      backpropagationFn: tanhB\r\n    });\r\n    return product;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param m\r\n   * @returns {Matrix}\r\n   */\r\n  observe(m) {\r\n    let iForward = 0;\r\n    let iBackpropagate = 0;\r\n    this.states.push({\r\n      forwardFn: function() {\r\n        iForward++;\r\n      },\r\n      backpropagationFn: function() {\r\n        iBackpropagate++;\r\n      }\r\n    });\r\n    return m;\r\n  }\r\n\r\n  /**\r\n   * @patam {Number} [rowIndex]\r\n   * @output {Matrix}\r\n   */\r\n  runIndex(rowIndex = 0) {\r\n    this.inputRow = rowIndex;\r\n    let state;\r\n    for (let i = 0, max = this.states.length; i < max; i++) {\r\n      state = this.states[i];\r\n      if (!state.hasOwnProperty('forwardFn')) {\r\n        continue;\r\n      }\r\n      state.forwardFn(state.product, state.left, state.right);\r\n    }\r\n\r\n    return state.product;\r\n  }\r\n\r\n  /**\r\n   * @patam {Number} [rowIndex]\r\n   * @output {Matrix}\r\n   */\r\n  runInput(inputValue) {\r\n    this.inputValue = inputValue;\r\n    let state;\r\n    for (let i = 0, max = this.states.length; i < max; i++) {\r\n      state = this.states[i];\r\n      if (!state.hasOwnProperty('forwardFn')) {\r\n        continue;\r\n      }\r\n      state.forwardFn(state.product, state.left, state.right);\r\n    }\r\n\r\n    return state.product;\r\n  }\r\n\r\n  /**\r\n   * @patam {Number} [rowIndex]\r\n   * @output {Matrix}\r\n   */\r\n  backpropagate() {\r\n    let i = this.states.length;\r\n    let state;\r\n    while (i-- > 0) {\r\n      state = this.states[i];\r\n      if (!state.hasOwnProperty('backpropagationFn')) {\r\n        continue;\r\n      }\r\n      state.backpropagationFn(state.product, state.left, state.right);\r\n    }\r\n\r\n    return state.product;\r\n  }\r\n\r\n  /**\r\n   * @patam {Number} [rowIndex]\r\n   * @output {Matrix}\r\n   */\r\n  backpropagateIndex(rowIndex = 0) {\r\n    this.inputRow = rowIndex;\r\n\r\n    let i = this.states.length;\r\n    let state;\r\n    while (i-- > 0) {\r\n      state = this.states[i];\r\n      if (!state.hasOwnProperty('backpropagationFn')) {\r\n        continue;\r\n      }\r\n      state.backpropagationFn(state.product, state.left, state.right);\r\n    }\r\n\r\n    return state.product;\r\n  }\r\n\r\n  predictTarget(input, target) {\r\n    const output = this.runInput(input);\r\n    let errorSum = 0;\r\n    for (let i = 0; i < output.weights.length; i++) {\r\n      const error = output.weights[i] - target[i];\r\n      // set gradients into log probabilities\r\n      errorSum += Math.abs(error);\r\n      // write gradients into log probabilities\r\n      output.deltas[i] = error;\r\n    }\r\n    return errorSum;\r\n  }\r\n\r\n  predictTargetIndex(input, target) {\r\n    const output = this.runIndex(input);\r\n    // set gradients into log probabilities\r\n    const logProbabilities = output; // interpret output as log probabilities\r\n    let probabilities = softmax(output); // compute the softmax probabilities\r\n\r\n    // write gradients into log probabilities\r\n    logProbabilities.deltas = probabilities.weights.slice(0);\r\n    logProbabilities.deltas[target] -= 1;\r\n\r\n    // accumulate base 2 log prob and do smoothing\r\n    return -Math.log2(probabilities.weights[target]);\r\n  }\r\n}\r\n"]}