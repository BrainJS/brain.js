{"version":3,"sources":["../../../src/recurrent/matrix/relu-b.js"],"names":["reluB","product","left","i","deltas","length","weights"],"mappings":";;;;;kBAKwBA,K;AALxB;;;;;AAKe,SAASA,KAAT,CAAeC,OAAf,EAAwBC,IAAxB,EAA8B;AAC3C,OAAI,IAAIC,IAAI,CAAZ,EAAeA,IAAIF,QAAQG,MAAR,CAAeC,MAAlC,EAA0CF,GAA1C,EAA+C;AAC7CD,SAAKE,MAAL,CAAYD,CAAZ,IAAiBD,KAAKI,OAAL,CAAaH,CAAb,IAAkB,CAAlB,GAAsBF,QAAQG,MAAR,CAAeD,CAAf,CAAtB,GAA0C,CAA3D;AACD;AACF","file":"relu-b.js","sourcesContent":["/**\r\n * adds {from} deltas to {m} deltas when {m} weights are above other a threshold of 0\r\n * @param {Matrix} product\r\n * @param {Matrix} m\r\n */\r\nexport default function reluB(product, left) {\r\n  for(let i = 0; i < product.deltas.length; i++) {\r\n    left.deltas[i] = left.weights[i] > 0 ? product.deltas[i] : 0;\r\n  }\r\n}\r\n"]}