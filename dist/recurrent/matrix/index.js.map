{"version":3,"sources":["../../../src/recurrent/matrix/index.js"],"names":["Matrix","rows","columns","undefined","weights","deltas","row","col","ix","length","Error","v","slice","column","i","push","json","matrix","max","weightRows","deltasRows","m","rowIndex","weightValues","deltasValues","columnIndex","setWeight","setDeltas"],"mappings":"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","file":"index.js","sourcesContent":["import zeros from '../../utilities/zeros';\r\n\r\n/**\r\n * A matrix\r\n * @param {Number} [rows]\r\n * @param {Number} [columns]\r\n * @constructor\r\n */\r\nexport default class Matrix {\r\n  constructor(rows, columns) {\r\n    if (rows === undefined) return;\r\n    if (columns === undefined) return;\r\n\r\n    this.rows = rows;\r\n    this.columns = columns;\r\n    this.weights = zeros(rows * columns);\r\n    this.deltas = zeros(rows * columns);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Number} row\r\n   * @param {Number} col\r\n   * @returns {Float32Array|Array}\r\n   */\r\n  getWeights(row, col) {\r\n    // slow but careful accessor function\r\n    // we want row-major order\r\n    let ix = (this.columns * row) + col;\r\n    if (ix < 0 && ix >= this.weights.length) throw new Error('get accessor is skewed');\r\n    return this.weights[ix];\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Number} row\r\n   * @param {Number} col\r\n   * @param v\r\n   * @returns {Matrix}\r\n   */\r\n  setWeight(row, col, v) {\r\n    // slow but careful accessor function\r\n    let ix = (this.columns * row) + col;\r\n    if (ix < 0 && ix >= this.weights.length) throw new Error('set accessor is skewed');\r\n    this.weights[ix] = v;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Number} row\r\n   * @param {Number} col\r\n   * @param v\r\n   * @returns {Matrix}\r\n   */\r\n  setDeltas(row, col, v) {\r\n    // slow but careful accessor function\r\n    let ix = (this.columns * row) + col;\r\n    if (ix < 0 && ix >= this.weights.length) throw new Error('set accessor is skewed');\r\n    this.deltas[ix] = v;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {{rows: *, columns: *, weights: Array}}\r\n   */\r\n  toJSON() {\r\n    return {\r\n      rows: this.rows,\r\n      columns: this.columns,\r\n      weights: this.weights.slice(0)\r\n    };\r\n  }\r\n\r\n  static fromJSON(json) {\r\n    let matrix = new Matrix(json.rows, json.columns);\r\n    for (let i = 0, max = json.rows * json.columns; i < max; i++) {\r\n      matrix.weights[i] = json.weights[i]; // copy over weights\r\n    }\r\n    return matrix;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param weightRows\r\n   * @param [deltasRows]\r\n   * @returns {Matrix}\r\n   */\r\n  static fromArray(weightRows, deltasRows) {\r\n    const rows = weightRows.length;\r\n    const columns = weightRows[0].length;\r\n    const m = new Matrix(rows, columns);\r\n\r\n    deltasRows = deltasRows || weightRows;\r\n\r\n    for (let rowIndex = 0; rowIndex < rows; rowIndex++) {\r\n      const weightValues = weightRows[rowIndex];\r\n      const deltasValues = deltasRows[rowIndex];\r\n      for (let columnIndex = 0; columnIndex < columns; columnIndex++) {\r\n        m.setWeight(rowIndex, columnIndex, weightValues[columnIndex]);\r\n        m.setDeltas(rowIndex, columnIndex, deltasValues[columnIndex]);\r\n      }\r\n    }\r\n\r\n    return m;\r\n  }\r\n\r\n  weightsToArray() {\r\n    const deltas = [];\r\n    let row = 0;\r\n    let column = 0;\r\n    for (let i = 0; i < this.weights.length; i++) {\r\n      if (column === 0) {\r\n        deltas.push([]);\r\n      }\r\n      deltas[row].push(this.weights[i]);\r\n      column++;\r\n      if (column >= this.columns) {\r\n        column = 0;\r\n        row++;\r\n      }\r\n    }\r\n    return deltas;\r\n  }\r\n\r\n  deltasToArray() {\r\n    const deltas = [];\r\n    let row = 0;\r\n    let column = 0;\r\n    for (let i = 0; i < this.deltas.length; i++) {\r\n      if (column === 0) {\r\n        deltas.push([]);\r\n      }\r\n      deltas[row].push(this.deltas[i]);\r\n      column++;\r\n      if (column >= this.columns) {\r\n        column = 0;\r\n        row++;\r\n      }\r\n    }\r\n    return deltas;\r\n  }\r\n}\r\n"]}