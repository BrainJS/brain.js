{"version":3,"sources":["../../src/recurrent/rnn-time-step.js"],"names":["RNNTimeStep","options","model","input","RandomMatrix","inputSize","outputSize","lastHiddenSize","hiddenSizes","length","outputConnector","output","Matrix","hiddenLayers","equation","Equation","outputs","equationConnection","equationConnections","initialLayerInputs","getEquation","push","i","max","add","multiply","equations","runs","errorSum","bindEquation","inputIndex","current","next","runInput","weights","error","Math","abs","deltas","totalCost","runBackpropagate","maxPredictionLength","isSampleI","temperature","isRunnable","lastOutput","outputMatrix","Error","RNN","defaults","learningRate","decayRate","smoothEps","regc","clipval","json","dataFormatter","trainDefaults"],"mappings":"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","file":"rnn-time-step.js","sourcesContent":["import Matrix from './matrix';\nimport RandomMatrix from './matrix/random-matrix';\nimport Equation from './matrix/equation';\nimport RNN from './rnn';\n\nexport default class RNNTimeStep extends RNN {\n  constructor(options) {\n    super(options);\n  }\n\n  createInputMatrix() {\n    this.model.input = new RandomMatrix(this.inputSize, 1, 0.08);\n  }\n\n  createOutputMatrix() {\n    let model = this.model;\n    let outputSize = this.outputSize;\n    let lastHiddenSize = this.hiddenSizes[this.hiddenSizes.length - 1];\n\n    //whd\n    model.outputConnector = new RandomMatrix(outputSize, lastHiddenSize, 0.08);\n    //bd\n    model.output = new Matrix(outputSize, 1);\n  }\n\n  bindEquation() {\n    let model = this.model;\n    let hiddenSizes = this.hiddenSizes;\n    let hiddenLayers = model.hiddenLayers;\n    let equation = new Equation();\n    let outputs = [];\n    let equationConnection = model.equationConnections.length > 0\n      ? model.equationConnections[model.equationConnections.length - 1]\n      : this.initialLayerInputs\n      ;\n\n      // 0 index\n    let output = this.getEquation(equation, equation.input(model.input), equationConnection[0], hiddenLayers[0]);\n    outputs.push(output);\n    // 1+ indices\n    for (let i = 1, max = hiddenSizes.length; i < max; i++) {\n      output = this.getEquation(equation, output, equationConnection[i], hiddenLayers[i]);\n      outputs.push(output);\n    }\n\n    model.equationConnections.push(outputs);\n    equation.add(equation.multiply(model.outputConnector, output), model.output);\n    model.equations.push(equation);\n  }\n\n  /**\n   *\n   * @param {Number[]} input\n   * @returns {number}\n   */\n  runInput(input) {\n    this.runs++;\n    let model = this.model;\n    let errorSum = 0;\n    let equation;\n    while (model.equations.length < input.length - 1) {\n      this.bindEquation();\n    }\n    const outputs = [];\n\n    if (this.inputSize === 1) {\n      for (let inputIndex = 0, max = input.length - 1; inputIndex < max; inputIndex++) {\n        // start and end tokens are zeros\n        equation = model.equations[inputIndex];\n\n        const current = input[inputIndex];\n        const next = input[inputIndex + 1];\n        const output = equation.runInput([current]);\n        for (let i = 0; i < output.weights.length; i++) {\n          const error = output.weights[i] - next;\n          // set gradients into log probabilities\n          errorSum += Math.abs(error);\n\n          // write gradients into log probabilities\n          output.deltas[i] = error;\n          outputs.push(output.weights);\n        }\n      }\n    } else {\n      for (let inputIndex = 0, max = input.length - 1; inputIndex < max; inputIndex++) {\n        // start and end tokens are zeros\n        equation = model.equations[inputIndex];\n\n        const current = input[inputIndex];\n        const next = input[inputIndex + 1];\n        const output = equation.runInput(current);\n        for (let i = 0; i < output.weights.length; i++) {\n          const error = output.weights[i] - next[i];\n          // set gradients into log probabilities\n          errorSum += Math.abs(error);\n\n          // write gradients into log probabilities\n          output.deltas[i] = error;\n          outputs.push(output.weights);\n        }\n      }\n    }\n    //this.model.equations.length - 1;\n    this.totalCost = errorSum;\n    return errorSum;\n  }\n\n  runBackpropagate() {\n    for (let i = this.model.equations.length - 1; i > -1; i--) {\n      this.model.equations[i].runBackpropagate();\n    }\n  }\n\n\n  /**\n   *\n   * @param {Number[]|Number} [input]\n   * @param {Number} [maxPredictionLength]\n   * @param {Boolean} [isSampleI]\n   * @param {Number} temperature\n   * @returns {Number[]|Number}\n   */\n  run(input = [], maxPredictionLength = 1, isSampleI = false, temperature = 1) {\n    if (!this.isRunnable) return null;\n    const model = this.model;\n    while (model.equations.length < maxPredictionLength) {\n      this.bindEquation();\n    }\n    let lastOutput;\n    if (this.inputSize === 1) {\n      for (let i = 0; i < input.length; i++) {\n        let outputMatrix = model.equations[i].runInput([input[i]]);\n        lastOutput = outputMatrix.weights;\n      }\n    } else {\n      for (let i = 0; i < input.length; i++) {\n        let outputMatrix = model.equations[i].runInput(input[i]);\n        lastOutput = outputMatrix.weights;\n      }\n    }\n    if (this.outputSize === 1) {\n      return lastOutput[0]\n    }\n    return lastOutput;\n  }\n\n  /**\n   *\n   * @returns {Function}\n   */\n  toFunction() {\n    throw new Error('not implemented');\n  }\n}\n\nRNNTimeStep.defaults = {\n  inputSize: 1,\n  hiddenSizes:[20],\n  outputSize: 1,\n  learningRate: 0.01,\n  decayRate: 0.999,\n  smoothEps: 1e-8,\n  regc: 0.000001,\n  clipval: 5,\n  json: null,\n  dataFormatter: null\n};\n\nRNNTimeStep.trainDefaults = RNN.trainDefaults;"]}