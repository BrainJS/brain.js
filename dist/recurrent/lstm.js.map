{"version":3,"sources":["../../src/recurrent/lstm.js"],"names":["LSTM","hiddenSize","prevSize","inputMatrix","RandomMatrix","inputHidden","inputBias","Matrix","forgetMatrix","forgetHidden","forgetBias","outputMatrix","outputHidden","outputBias","cellActivationMatrix","cellActivationHidden","cellActivationBias","equation","previousResult","hiddenLayer","sigmoid","bind","add","multiply","multiplyElement","tanh","inputGate","forgetGate","outputGate","cellWrite","retainCell","writeCell","cell","RNN"],"mappings":"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","file":"lstm.js","sourcesContent":["import Matrix from './matrix';\nimport RandomMatrix from './matrix/random-matrix';\nimport RNN from './rnn';\n\nexport default class LSTM extends RNN {\n  getModel(hiddenSize, prevSize) {\n    return {\n      // gates parameters\n      //wix\n      inputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wih\n      inputHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bi\n      inputBias: new Matrix(hiddenSize, 1),\n\n      //wfx\n      forgetMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wfh\n      forgetHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bf\n      forgetBias: new Matrix(hiddenSize, 1),\n\n      //wox\n      outputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //woh\n      outputHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bo\n      outputBias: new Matrix(hiddenSize, 1),\n\n      // cell write params\n      //wcx\n      cellActivationMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //wch\n      cellActivationHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bc\n      cellActivationBias: new Matrix(hiddenSize, 1)\n    };\n  }\n\n  /**\n   *\n   * @param {Equation} equation\n   * @param {Matrix} inputMatrix\n   * @param {Matrix} previousResult\n   * @param {Object} hiddenLayer\n   * @returns {Matrix}\n   */\n  getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\n    let sigmoid = equation.sigmoid.bind(equation);\n    let add = equation.add.bind(equation);\n    let multiply = equation.multiply.bind(equation);\n    let multiplyElement = equation.multiplyElement.bind(equation);\n    let tanh = equation.tanh.bind(equation);\n\n    let inputGate = sigmoid(\n      add(\n        add(\n          multiply(\n            hiddenLayer.inputMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.inputHidden,\n            previousResult\n          )\n        ),\n        hiddenLayer.inputBias\n      )\n    );\n\n    let forgetGate = sigmoid(\n      add(\n        add(\n          multiply(\n            hiddenLayer.forgetMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.forgetHidden,\n            previousResult\n          )\n        ),\n        hiddenLayer.forgetBias\n      )\n    );\n\n    // output gate\n    let outputGate = sigmoid(\n      add(\n        add(\n          multiply(\n            hiddenLayer.outputMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.outputHidden,\n            previousResult\n          )\n        ),\n        hiddenLayer.outputBias\n      )\n    );\n\n    // write operation on cells\n    let cellWrite = tanh(\n      add(\n        add(\n          multiply(\n            hiddenLayer.cellActivationMatrix,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.cellActivationHidden,\n            previousResult\n          )\n        ),\n        hiddenLayer.cellActivationBias\n      )\n    );\n\n    // compute new cell activation\n    let retainCell = multiplyElement(forgetGate, previousResult); // what do we keep from cell\n    let writeCell = multiplyElement(inputGate, cellWrite); // what do we write to cell\n    let cell = add(retainCell, writeCell); // new cell contents\n\n    // compute hidden state as gated, saturated cell activations\n    return multiplyElement(\n      outputGate,\n      tanh(cell)\n    );\n  }\n}\n"]}