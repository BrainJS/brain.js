{"version":3,"sources":["../../src/recurrent/lstm.js"],"names":["LSTM","hiddenSize","prevSize","inputMatrix","inputHidden","inputBias","forgetMatrix","forgetHidden","forgetBias","outputMatrix","outputHidden","outputBias","cellActivationMatrix","cellActivationHidden","cellActivationBias","equation","previousResult","hiddenLayer","sigmoid","bind","add","multiply","multiplyElement","tanh","inputGate","forgetGate","outputGate","cellWrite","retainCell","writeCell","cell"],"mappings":"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","file":"lstm.js","sourcesContent":["import Matrix from './matrix';\r\nimport RandomMatrix from './matrix/random-matrix';\r\nimport RNN from './rnn';\r\n\r\nexport default class LSTM extends RNN {\r\n  getModel(hiddenSize, prevSize) {\r\n    return {\r\n      // gates parameters\r\n      //wix\r\n      inputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\r\n      //wih\r\n      inputHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\r\n      //bi\r\n      inputBias: new Matrix(hiddenSize, 1),\r\n\r\n      //wfx\r\n      forgetMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\r\n      //wfh\r\n      forgetHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\r\n      //bf\r\n      forgetBias: new Matrix(hiddenSize, 1),\r\n\r\n      //wox\r\n      outputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\r\n      //woh\r\n      outputHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\r\n      //bo\r\n      outputBias: new Matrix(hiddenSize, 1),\r\n\r\n      // cell write params\r\n      //wcx\r\n      cellActivationMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),\r\n      //wch\r\n      cellActivationHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\r\n      //bc\r\n      cellActivationBias: new Matrix(hiddenSize, 1)\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Equation} equation\r\n   * @param {Matrix} inputMatrix\r\n   * @param {Matrix} previousResult\r\n   * @param {Object} hiddenLayer\r\n   * @returns {Matrix}\r\n   */\r\n  getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\r\n    let sigmoid = equation.sigmoid.bind(equation);\r\n    let add = equation.add.bind(equation);\r\n    let multiply = equation.multiply.bind(equation);\r\n    let multiplyElement = equation.multiplyElement.bind(equation);\r\n    let tanh = equation.tanh.bind(equation);\r\n\r\n    let inputGate = sigmoid(\r\n      add(\r\n        add(\r\n          multiply(\r\n            hiddenLayer.inputMatrix,\r\n            inputMatrix\r\n          ),\r\n          multiply(\r\n            hiddenLayer.inputHidden,\r\n            previousResult\r\n          )\r\n        ),\r\n        hiddenLayer.inputBias\r\n      )\r\n    );\r\n\r\n    let forgetGate = sigmoid(\r\n      add(\r\n        add(\r\n          multiply(\r\n            hiddenLayer.forgetMatrix,\r\n            inputMatrix\r\n          ),\r\n          multiply(\r\n            hiddenLayer.forgetHidden,\r\n            previousResult\r\n          )\r\n        ),\r\n        hiddenLayer.forgetBias\r\n      )\r\n    );\r\n\r\n    // output gate\r\n    let outputGate = sigmoid(\r\n      add(\r\n        add(\r\n          multiply(\r\n            hiddenLayer.outputMatrix,\r\n            inputMatrix\r\n          ),\r\n          multiply(\r\n            hiddenLayer.outputHidden,\r\n            previousResult\r\n          )\r\n        ),\r\n        hiddenLayer.outputBias\r\n      )\r\n    );\r\n\r\n    // write operation on cells\r\n    let cellWrite = tanh(\r\n      add(\r\n        add(\r\n          multiply(\r\n            hiddenLayer.cellActivationMatrix,\r\n            inputMatrix\r\n          ),\r\n          multiply(\r\n            hiddenLayer.cellActivationHidden,\r\n            previousResult\r\n          )\r\n        ),\r\n        hiddenLayer.cellActivationBias\r\n      )\r\n    );\r\n\r\n    // compute new cell activation\r\n    let retainCell = multiplyElement(forgetGate, previousResult); // what do we keep from cell\r\n    let writeCell = multiplyElement(inputGate, cellWrite); // what do we write to cell\r\n    let cell = add(retainCell, writeCell); // new cell contents\r\n\r\n    // compute hidden state as gated, saturated cell activations\r\n    return multiplyElement(\r\n      outputGate,\r\n      tanh(cell)\r\n    );\r\n  }\r\n}\r\n"]}