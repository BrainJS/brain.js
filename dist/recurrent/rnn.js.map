{"version":3,"sources":["../../src/recurrent/rnn.js"],"names":["RNN","options","stepCache","runs","ratioClipped","model","json","fromJSON","input","hiddenLayers","output","equations","allMatrices","equationConnections","outputConnector","dataFormatter","inputSize","inputRange","outputSize","characters","length","mapModel","push","getModel","prevSize","d","hiddenSize","weight","RandomMatrix","transition","bias","Matrix","equation","inputMatrix","previousResult","hiddenLayer","relu","bind","add","multiply","lastHiddenSize","Equation","outputs","equationConnection","initialLayerInputs","getEquation","inputMatrixToRow","i","max","map","size","createInputMatrix","Error","createHiddenLayers","hiddenMatrix","property","hasOwnProperty","createOutputMatrix","logErrorRate","error","trainInput","backpropagate","adjustWeights","log2ppl","bindEquation","inputIndex","inputMax","equationIndex","source","target","predictTargetIndex","Math","pow","backpropagateIndex","regc","clipval","decayRate","smoothEps","trainOpts","learningRate","numClipped","numTot","matrixIndex","matrix","weights","deltas","rows","columns","cache","r","w","sqrt","rawInput","isSampleI","temperature","maxPredictionLength","specialIndexes","isRunnable","formatDataIn","previousIndex","outputMatrix","runIndex","logProbabilities","j","probs","nextIndex","formatDataOut","slice","value","data","initialize","defaults","constructor","p","type","name","toJSON","layers","hiddenSizes","forEach","Object","assign","DataFormatter","states","jsonString","JSON","stringify","matrixOrigin","m","stateIndex","state","previousConnectionIndex","left","right","product","connection","indexOf","matrixToString","toInner","fnString","toString","split","shift","join","pop","replace","fileName","fnName","toLowerCase","statesRaw","usedFunctionNames","innerFunctionsSwitch","forwardFn","src","toFunctionString","zeros","softmax","randomF","sampleI","maxI","Function","console","BaseInterface","setupData","Array","isArray","values","result","fromArrayInputOutput","addUnrecognized","indexTable","toIndexesInputOutput","toIndexes","toCharacters","trainDefaults","iterations","errorThresh","log","logPeriod","callback","callbackPeriod"],"mappings":"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","file":"rnn.js","sourcesContent":["import BaseInterface from '../base-interface';\r\nimport Matrix from './matrix';\r\nimport RandomMatrix from './matrix/random-matrix';\r\nimport Equation from './matrix/equation';\r\nimport sampleI from './matrix/sample-i';\r\nimport maxI from './matrix/max-i';\r\nimport softmax from './matrix/softmax';\r\nimport copy from './matrix/copy';\r\nimport { randomF } from '../utilities/random';\r\nimport zeros from '../utilities/zeros';\r\nimport DataFormatter from '../utilities/data-formatter';\r\nexport default class RNN extends BaseInterface {\r\n  constructor(options = {}) {\r\n    super(options);\r\n\r\n    this.stepCache = {};\r\n    this.runs = 0;\r\n    this.ratioClipped = null;\r\n    this.model = null;\r\n\r\n    if (options.json) {\r\n      this.fromJSON(options.json);\r\n    }\r\n  }\r\n\r\n  initialize() {\r\n    this.model = {\r\n      input: null,\r\n      hiddenLayers: [],\r\n      output: null,\r\n      equations: [],\r\n      allMatrices: [],\r\n      equationConnections: [],\r\n      outputConnector: null,\r\n    };\r\n\r\n    if (this.dataFormatter) {\r\n      this.inputSize =\r\n      this.inputRange =\r\n      this.outputSize = this.dataFormatter.characters.length;\r\n    }\r\n    this.mapModel();\r\n  }\r\n\r\n  createHiddenLayers() {\r\n    //0 is end, so add 1 to offset\r\n    this.model.hiddenLayers.push(this.getModel(this.hiddenLayers[0], this.inputSize));\r\n    let prevSize = this.hiddenLayers[0];\r\n\r\n    for (let d = 1; d < this.hiddenLayers.length; d++) { // loop over depths\r\n      let hiddenSize = this.hiddenLayers[d];\r\n      this.model.hiddenLayers.push(this.getModel(hiddenSize, prevSize));\r\n      prevSize = hiddenSize;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Number} hiddenSize\r\n   * @param {Number} prevSize\r\n   * @returns {object}\r\n   */\r\n  getModel(hiddenSize, prevSize) {\r\n    return {\r\n      //wxh\r\n      weight: new RandomMatrix(hiddenSize, prevSize, 0.08),\r\n      //whh\r\n      transition: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\r\n      //bhh\r\n      bias: new Matrix(hiddenSize, 1)\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Equation} equation\r\n   * @param {Matrix} inputMatrix\r\n   * @param {Matrix} previousResult\r\n   * @param {Object} hiddenLayer\r\n   * @returns {Matrix}\r\n   */\r\n  getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\r\n    let relu = equation.relu.bind(equation);\r\n    let add = equation.add.bind(equation);\r\n    let multiply = equation.multiply.bind(equation);\r\n\r\n    return relu(\r\n      add(\r\n        add(\r\n          multiply(\r\n            hiddenLayer.weight,\r\n            inputMatrix\r\n          ),\r\n          multiply(\r\n            hiddenLayer.transition,\r\n            previousResult\r\n          )\r\n        ),\r\n        hiddenLayer.bias\r\n      )\r\n    );\r\n  }\r\n\r\n  createInputMatrix() {\r\n    //0 is end, so add 1 to offset\r\n    this.model.input = new RandomMatrix(this.inputRange + 1, this.inputSize, 0.08);\r\n  }\r\n\r\n  createOutputMatrix() {\r\n    let model = this.model;\r\n    let outputSize = this.outputSize;\r\n    let lastHiddenSize = this.hiddenLayers[this.hiddenLayers.length - 1];\r\n\r\n    //0 is end, so add 1 to offset\r\n    //whd\r\n    model.outputConnector = new RandomMatrix(outputSize + 1, lastHiddenSize, 0.08);\r\n    //0 is end, so add 1 to offset\r\n    //bd\r\n    model.output = new Matrix(outputSize + 1, 1);\r\n  }\r\n\r\n  bindEquation() {\r\n    const model = this.model;\r\n    const equation = new Equation();\r\n    const outputs = [];\r\n    const equationConnection = model.equationConnections.length > 0\r\n      ? model.equationConnections[model.equationConnections.length - 1]\r\n      : this.initialLayerInputs\r\n      ;\r\n\r\n      // 0 index\r\n    let output = this.getEquation(equation, equation.inputMatrixToRow(model.input), equationConnection[0], model.hiddenLayers[0]);\r\n    outputs.push(output);\r\n    // 1+ indices\r\n    for (let i = 1, max = this.hiddenLayers.length; i < max; i++) {\r\n      output = this.getEquation(equation, output, equationConnection[i], model.hiddenLayers[i]);\r\n      outputs.push(output);\r\n    }\r\n\r\n    model.equationConnections.push(outputs);\r\n    equation.add(equation.multiply(model.outputConnector, output), model.output);\r\n    model.equations.push(equation);\r\n  }\r\n\r\n  mapModel() {\r\n    const model = this.model;\r\n    const hiddenLayers = model.hiddenLayers;\r\n    const allMatrices = model.allMatrices;\r\n    this.initialLayerInputs = this.hiddenLayers.map((size) => new Matrix(size, 1));\r\n\r\n    this.createInputMatrix();\r\n    if (!model.input) throw new Error('net.model.input not set');\r\n    allMatrices.push(model.input);\r\n\r\n    this.createHiddenLayers();\r\n    if (!model.hiddenLayers.length) throw new Error('net.hiddenLayers not set');\r\n    for (let i = 0, max = hiddenLayers.length; i < max; i++) {\r\n      let hiddenMatrix = hiddenLayers[i];\r\n      for (let property in hiddenMatrix) {\r\n        if (!hiddenMatrix.hasOwnProperty(property)) continue;\r\n        allMatrices.push(hiddenMatrix[property]);\r\n      }\r\n    }\r\n\r\n    this.createOutputMatrix();\r\n    if (!model.outputConnector) throw new Error('net.model.outputConnector not set');\r\n    if (!model.output) throw new Error('net.model.output not set');\r\n\r\n    allMatrices.push(model.outputConnector);\r\n    allMatrices.push(model.output);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Number[]|string[]|string} input\r\n   * @param {boolean} [logErrorRate]\r\n   * @returns {number}\r\n   */\r\n  trainPattern(input, logErrorRate) {\r\n    const error = this.trainInput(input);\r\n    this.backpropagate(input);\r\n    this.adjustWeights();\r\n\r\n    if (logErrorRate) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {Number[]} input\r\n   * @returns {number}\r\n   */\r\n  trainInput(input) {\r\n    this.runs++;\r\n    let model = this.model;\r\n    let max = input.length;\r\n    let log2ppl = 0;\r\n    let equation;\r\n    while (model.equations.length <= input.length + 1) {//last is zero\r\n      this.bindEquation();\r\n    }\r\n    for (let inputIndex = -1, inputMax = input.length; inputIndex < inputMax; inputIndex++) {\r\n      // start and end tokens are zeros\r\n      let equationIndex = inputIndex + 1;\r\n      equation = model.equations[equationIndex];\r\n\r\n      let source = (inputIndex === -1 ? 0 : input[inputIndex] + 1); // first step: start with START token\r\n      let target = (inputIndex === max - 1 ? 0 : input[inputIndex + 1] + 1); // last step: end with END token\r\n      log2ppl += equation.predictTargetIndex(source, target);\r\n    }\r\n    return Math.pow(2, log2ppl / (max - 1)) / 100;\r\n  }\r\n\r\n  /**\r\n   * @param {Number[]} input\r\n   */\r\n  backpropagate(input) {\r\n    let i = input.length;\r\n    let model = this.model;\r\n    let equations = model.equations;\r\n    while(i > 0) {\r\n      equations[i].backpropagateIndex(input[i - 1] + 1);\r\n      i--;\r\n    }\r\n    equations[0].backpropagateIndex(0);\r\n  }\r\n\r\n  adjustWeights() {\r\n    const { regc, clipval, model, decayRate, stepCache, smoothEps, trainOpts } = this;\r\n    const { learningRate } = trainOpts;\r\n    const { allMatrices } = model;\r\n    let numClipped = 0;\r\n    let numTot = 0;\r\n    for (let matrixIndex = 0; matrixIndex < allMatrices.length; matrixIndex++) {\r\n      const matrix = allMatrices[matrixIndex];\r\n      const { weights, deltas }  = matrix;\r\n      if (!(matrixIndex in stepCache)) {\r\n        stepCache[matrixIndex] = zeros(matrix.rows * matrix.columns);\r\n      }\r\n      const cache = stepCache[matrixIndex];\r\n      for (let i = 0; i < weights.length; i++) {\r\n        let r = deltas[i];\r\n        let w = weights[i];\r\n        // rmsprop adaptive learning rate\r\n        cache[i] = cache[i] * decayRate + (1 - decayRate) * r * r;\r\n        // gradient clip\r\n        if (r > clipval) {\r\n          r = clipval;\r\n          numClipped++;\r\n        }\r\n        if (r < -clipval) {\r\n          r = -clipval;\r\n          numClipped++;\r\n        }\r\n        numTot++;\r\n        // update (and regularize)\r\n        weights[i] = w + -learningRate * r / Math.sqrt(cache[i] + smoothEps) - regc * w;\r\n      }\r\n    }\r\n    this.ratioClipped = numClipped / numTot;\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @returns boolean\r\n   */\r\n  get isRunnable(){\r\n    if (this.model.equations.length === 0) {\r\n      console.error(`No equations bound, did you run train()?`);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param {Number[]|*} [rawInput]\r\n   * @param {Boolean} [isSampleI]\r\n   * @param {Number} temperature\r\n   * @returns {*}\r\n   */\r\n  run(rawInput = [], isSampleI = false, temperature = 1) {\r\n    const maxPredictionLength = this.maxPredictionLength + rawInput.length + (this.dataFormatter ? this.dataFormatter.specialIndexes.length : 0);\r\n    if (!this.isRunnable) return null;\r\n    const input = this.formatDataIn(rawInput);\r\n    const model = this.model;\r\n    const output = [];\r\n    let i = 0;\r\n    while (true) {\r\n      let previousIndex = (i === 0\r\n        ? 0\r\n        : i < input.length\r\n          ? input[i - 1] + 1\r\n          : output[i - 1])\r\n          ;\r\n      while (model.equations.length <= i) {\r\n        this.bindEquation();\r\n      }\r\n      let equation = model.equations[i];\r\n      // sample predicted letter\r\n      let outputMatrix = equation.runIndex(previousIndex);\r\n      let logProbabilities = new Matrix(model.output.rows, model.output.columns);\r\n      copy(logProbabilities, outputMatrix);\r\n      if (temperature !== 1 && isSampleI) {\r\n        /**\r\n         * scale log probabilities by temperature and re-normalize\r\n         * if temperature is high, logProbabilities will go towards zero\r\n         * and the softmax outputs will be more diffuse. if temperature is\r\n         * very low, the softmax outputs will be more peaky\r\n         */\r\n        for (let j = 0, max = logProbabilities.weights.length; j < max; j++) {\r\n          logProbabilities.weights[j] /= temperature;\r\n        }\r\n      }\r\n\r\n      let probs = softmax(logProbabilities);\r\n      let nextIndex = (isSampleI ? sampleI(probs) : maxI(probs));\r\n\r\n      i++;\r\n      if (nextIndex === 0) {\r\n        // END token predicted, break out\r\n        break;\r\n      }\r\n      if (i >= maxPredictionLength) {\r\n        // something is wrong\r\n        break;\r\n      }\r\n\r\n      output.push(nextIndex);\r\n    }\r\n\r\n    /**\r\n     * we slice the input length here, not because output contains it, but it will be erroneous as we are sending the\r\n     * network what is contained in input, so the data is essentially guessed by the network what could be next, till it\r\n     * locks in on a value.\r\n     * Kind of like this, values are from input:\r\n     * 0 -> 4 (or in English: \"beginning on input\" -> \"I have no idea? I'll guess what they want next!\")\r\n     * 2 -> 2 (oh how interesting, I've narrowed down values...)\r\n     * 1 -> 9 (oh how interesting, I've now know what the values are...)\r\n     * then the output looks like: [4, 2, 9,...]\r\n     * so we then remove the erroneous data to get our true output\r\n     */\r\n    return this.formatDataOut(\r\n      input,\r\n      output\r\n        .slice(input.length)\r\n        .map(value => value - 1)\r\n    );\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * Verifies network sizes are initilaized\r\n   * If they are not it will initialize them based off the data set.\r\n   */\r\n  verifyIsInitialized(data) {\r\n    if (!this.model) {\r\n      this.initialize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Object}\r\n   */\r\n  toJSON() {\r\n    const defaults = this.constructor.defaults;\r\n    if (!this.model) {\r\n      this.initialize();\r\n    }\r\n    let model = this.model;\r\n    let options = {};\r\n    for (let p in defaults) {\r\n      if (defaults.hasOwnProperty(p)) {\r\n        options[p] = this[p];\r\n      }\r\n    }\r\n\r\n    return {\r\n      type: this.constructor.name,\r\n      options: options,\r\n      input: model.input.toJSON(),\r\n      hiddenLayers: model.hiddenLayers.map((hiddenLayer) => {\r\n        let layers = {};\r\n        for (let p in hiddenLayer) {\r\n          layers[p] = hiddenLayer[p].toJSON();\r\n        }\r\n        return layers;\r\n      }),\r\n      outputConnector: this.model.outputConnector.toJSON(),\r\n      output: this.model.output.toJSON()\r\n    };\r\n  }\r\n\r\n  fromJSON(json) {\r\n    const defaults = this.constructor.defaults;\r\n    const options = json.options;\r\n    this.model = null;\r\n    this.hiddenLayers = null;\r\n    const allMatrices = [];\r\n    const input = Matrix.fromJSON(json.input);\r\n    allMatrices.push(input);\r\n    const hiddenLayers = [];\r\n\r\n    // backward compatibility for hiddenSizes\r\n    (json.hiddenLayers || json.hiddenSizes).forEach((hiddenLayer) => {\r\n      let layers = {};\r\n      for (let p in hiddenLayer) {\r\n        layers[p] = Matrix.fromJSON(hiddenLayer[p]);\r\n        allMatrices.push(layers[p]);\r\n      }\r\n      hiddenLayers.push(layers);\r\n    });\r\n\r\n    const outputConnector = Matrix.fromJSON(json.outputConnector);\r\n    allMatrices.push(outputConnector);\r\n    const output = Matrix.fromJSON(json.output);\r\n    allMatrices.push(output);\r\n\r\n    Object.assign(this, defaults, options);\r\n\r\n    // backward compatibility\r\n    if (options.hiddenSizes) {\r\n      this.hiddenLayers = options.hiddenSizes;\r\n    }\r\n\r\n    if (options.dataFormatter) {\r\n      this.dataFormatter = DataFormatter.fromJSON(options.dataFormatter);\r\n    }\r\n\r\n    this.model = {\r\n      input,\r\n      hiddenLayers,\r\n      output,\r\n      allMatrices,\r\n      outputConnector,\r\n      equations: [],\r\n      equationConnections: [],\r\n    };\r\n    this.initialLayerInputs = this.hiddenLayers.map((size) => new Matrix(size, 1));\r\n    this.bindEquation();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Function}\r\n   */\r\n  toFunction() {\r\n    let model = this.model;\r\n    let equations = this.model.equations;\r\n    let equation = equations[1];\r\n    let states = equation.states;\r\n    let jsonString = JSON.stringify(this.toJSON());\r\n\r\n    function matrixOrigin(m, stateIndex) {\r\n      for (let i = 0, max = states.length; i < max; i++) {\r\n        let state = states[i];\r\n\r\n        if (i === stateIndex) {\r\n          let j = previousConnectionIndex(m);\r\n          switch (m) {\r\n            case state.left:\r\n              if (j > -1) {\r\n                return `typeof prevStates[${ j }] === 'object' ? prevStates[${ j }].product : new Matrix(${ m.rows }, ${ m.columns })`;\r\n              }\r\n            case state.right:\r\n              if (j > -1) {\r\n                return `typeof prevStates[${ j }] === 'object' ? prevStates[${ j }].product : new Matrix(${ m.rows }, ${ m.columns })`;\r\n              }\r\n            case state.product:\r\n              return `new Matrix(${ m.rows }, ${ m.columns })`;\r\n            default:\r\n              throw Error('unknown state');\r\n          }\r\n        }\r\n\r\n        if (m === state.product) return `states[${ i }].product`;\r\n        if (m === state.right) return `states[${ i }].right`;\r\n        if (m === state.left) return `states[${ i }].left`;\r\n      }\r\n    }\r\n\r\n    function previousConnectionIndex(m) {\r\n      const connection = model.equationConnections[0];\r\n      const states = equations[0].states;\r\n      for (let i = 0, max = states.length; i < max; i++) {\r\n        if (states[i].product === m) {\r\n          return i;\r\n        }\r\n      }\r\n      return connection.indexOf(m);\r\n    }\r\n\r\n    function matrixToString(m, stateIndex) {\r\n      if (!m || !m.rows || !m.columns) return 'null';\r\n\r\n      if (m === model.input) return `json.input`;\r\n      if (m === model.outputConnector) return `json.outputConnector`;\r\n      if (m === model.output) return `json.output`;\r\n\r\n      for (let i = 0, max = model.hiddenLayers.length; i < max; i++) {\r\n        let hiddenLayer = model.hiddenLayers[i];\r\n        for (let p in hiddenLayer) {\r\n          if (!hiddenLayer.hasOwnProperty(p)) continue;\r\n          if (hiddenLayer[p] !== m) continue;\r\n          return `json.hiddenLayers[${ i }].${ p }`;\r\n        }\r\n      }\r\n\r\n      return matrixOrigin(m, stateIndex);\r\n    }\r\n\r\n    function toInner(fnString) {\r\n      // crude, but should be sufficient for now\r\n      // function() { body }\r\n      fnString = fnString.toString().split('{');\r\n      fnString.shift();\r\n      // body }\r\n      fnString = fnString.join('{');\r\n      fnString = fnString.split('}');\r\n      fnString.pop();\r\n      // body\r\n      return fnString.join('}').split('\\n').join('\\n        ')\r\n        .replace('product.deltas[i] = 0;', '')\r\n        .replace('product.deltas[column] = 0;', '')\r\n        .replace('left.deltas[leftIndex] = 0;', '')\r\n        .replace('right.deltas[rightIndex] = 0;', '')\r\n        .replace('product.deltas = left.deltas.slice(0);', '');\r\n    }\r\n\r\n    function fileName(fnName) {\r\n      return `src/recurrent/matrix/${ fnName.replace(/[A-Z]/g, function(value) { return '-' + value.toLowerCase(); }) }.js`;\r\n    }\r\n\r\n    let statesRaw = [];\r\n    let usedFunctionNames = {};\r\n    let innerFunctionsSwitch = [];\r\n    for (let i = 0, max = states.length; i < max; i++) {\r\n      let state = states[i];\r\n      statesRaw.push(`states[${ i }] = {\r\n      name: '${ state.forwardFn.name }',\r\n      left: ${ matrixToString(state.left, i) },\r\n      right: ${ matrixToString(state.right, i) },\r\n      product: ${ matrixToString(state.product, i) }\r\n    }`);\r\n\r\n      let fnName = state.forwardFn.name;\r\n      if (!usedFunctionNames[fnName]) {\r\n        usedFunctionNames[fnName] = true;\r\n        innerFunctionsSwitch.push(\r\n          `        case '${ fnName }': //compiled from ${ fileName(fnName) }\r\n          ${ toInner(state.forwardFn.toString()) }\r\n          break;`\r\n        );\r\n      }\r\n    }\r\n\r\n    const src = `\r\n  if (typeof rawInput === 'undefined') rawInput = [];\r\n  if (typeof isSampleI === 'undefined') isSampleI = false;\r\n  if (typeof temperature === 'undefined') temperature = 1;\r\n  ${ this.dataFormatter ? this.dataFormatter.toFunctionString() : '' }\r\n  \r\n  var input = ${\r\n      (this.dataFormatter && typeof this.formatDataIn === 'function')\r\n        ? 'formatDataIn(rawInput)' \r\n        : 'rawInput'\r\n    };\r\n  var json = ${ jsonString };\r\n  var maxPredictionLength = input.length + ${ this.maxPredictionLength };\r\n  var _i = 0;\r\n  var output = [];\r\n  var states = [];\r\n  var prevStates;\r\n  while (true) {\r\n    var previousIndex = (_i === 0\r\n        ? 0\r\n        : _i < input.length\r\n          ? input[_i - 1] + 1\r\n          : output[_i - 1])\r\n          ;\r\n    var rowPluckIndex = previousIndex;\r\n    var state;\r\n    prevStates = states;\r\n    states = [];\r\n    ${ statesRaw.join(';\\n    ') };\r\n    for (var stateIndex = 0, stateMax = ${ statesRaw.length }; stateIndex < stateMax; stateIndex++) {\r\n      state = states[stateIndex];\r\n      var product = state.product;\r\n      var left = state.left;\r\n      var right = state.right;\r\n      \r\n      switch (state.name) {\r\n${ innerFunctionsSwitch.join('\\n') }\r\n      }\r\n    }\r\n    \r\n    var logProbabilities = state.product;\r\n    if (temperature !== 1 && isSampleI) {\r\n      for (var q = 0, nq = logProbabilities.weights.length; q < nq; q++) {\r\n        logProbabilities.weights[q] /= temperature;\r\n      }\r\n    }\r\n\r\n    var probs = softmax(logProbabilities);\r\n    var nextIndex = isSampleI ? sampleI(probs) : maxI(probs);\r\n    \r\n    _i++;\r\n    if (nextIndex === 0) {\r\n      break;\r\n    }\r\n    if (_i >= maxPredictionLength) {\r\n      break;\r\n    }\r\n\r\n    output.push(nextIndex);\r\n  }\r\n  ${ (this.dataFormatter && typeof this.formatDataOut === 'function') \r\n      ? 'return formatDataOut(input, output.slice(input.length).map(function(value) { return value - 1; }))'\r\n      : 'return output.slice(input.length).map(function(value) { return value - 1; })' };\r\n  function Matrix(rows, columns) {\r\n    this.rows = rows;\r\n    this.columns = columns;\r\n    this.weights = zeros(rows * columns);\r\n  }\r\n  ${ this.dataFormatter && typeof this.formatDataIn === 'function'\r\n      ? `function formatDataIn(input, output) { ${\r\n          toInner(this.formatDataIn.toString())\r\n            .replace(/this[.]dataFormatter[\\n\\s]+[.]/g, '')\r\n            .replace(/this[.]dataFormatter[.]/g, '')\r\n            .replace(/this[.]dataFormatter/g, 'true')\r\n        } }`\r\n      : '' }\r\n  ${ this.dataFormatter !== null && typeof this.formatDataOut === 'function'\r\n        ? `function formatDataOut(input, output) { ${\r\n            toInner(this.formatDataOut.toString())\r\n              .replace(/this[.]dataFormatter[\\n\\s]+[.]/g, '')\r\n              .replace(/this[.]dataFormatter[.]/g, '')\r\n              .replace(/this[.]dataFormatter/g, 'true')\r\n          } }` \r\n        : '' }\r\n  ${ zeros.toString() }\r\n  ${ softmax.toString().replace('_2.default', 'Matrix') }\r\n  ${ randomF.toString() }\r\n  ${ sampleI.toString() }\r\n  ${ maxI.toString() }`;\r\n    return new Function('rawInput', 'isSampleI', 'temperature', src);\r\n  }\r\n}\r\n\r\nRNN.defaults = {\r\n  inputSize: 20,\r\n  inputRange: 20,\r\n  hiddenLayers: [20,20],\r\n  outputSize: 20,\r\n  decayRate: 0.999,\r\n  smoothEps: 1e-8,\r\n  regc: 0.000001,\r\n  clipval: 5,\r\n  maxPredictionLength: 100,\r\n  /**\r\n   *\r\n   * @param {*[]} data\r\n   * @returns {Number[]}\r\n   */\r\n  setupData: function(data) {\r\n    if (\r\n      typeof data[0] !== 'string'\r\n      && !Array.isArray(data[0])\r\n      && (\r\n        !data[0].hasOwnProperty('input')\r\n        || !data[0].hasOwnProperty('output')\r\n      )\r\n    ) {\r\n      return data;\r\n    }\r\n    let values = [];\r\n    const result = [];\r\n    if (typeof data[0] === 'string' || Array.isArray(data[0])) {\r\n      if (!this.dataFormatter) {\r\n        for (let i = 0; i < data.length; i++) {\r\n          values.push(data[i]);\r\n        }\r\n        this.dataFormatter = new DataFormatter(values);\r\n      }\r\n      for (let i = 0, max = data.length; i < max; i++) {\r\n        result.push(this.formatDataIn(data[i]));\r\n      }\r\n    } else {\r\n      if (!this.dataFormatter) {\r\n        for (let i = 0; i < data.length; i++) {\r\n          values.push(data[i].input);\r\n          values.push(data[i].output);\r\n        }\r\n        this.dataFormatter = DataFormatter.fromArrayInputOutput(values);\r\n        this.dataFormatter.addUnrecognized();\r\n      }\r\n      for (let i = 0, max = data.length; i < max; i++) {\r\n        result.push(this.formatDataIn(data[i].input, data[i].output));\r\n      }\r\n    }\r\n    return result;\r\n  },\r\n  /**\r\n   *\r\n   * @param {*[]} input\r\n   * @param {*[]} output\r\n   * @returns {Number[]}\r\n   */\r\n  formatDataIn: function(input, output = null) {\r\n    if (this.dataFormatter) {\r\n      if (this.dataFormatter.indexTable.hasOwnProperty('stop-input')) {\r\n        return this.dataFormatter.toIndexesInputOutput(input, output);\r\n      } else {\r\n        return this.dataFormatter.toIndexes(input);\r\n      }\r\n    }\r\n    return input;\r\n  },\r\n  /**\r\n   *\r\n   * @param {Number[]} input\r\n   * @param {Number[]} output\r\n   * @returns {*}\r\n   */\r\n  formatDataOut: function(input, output) {\r\n    if (this.dataFormatter) {\r\n      return this.dataFormatter\r\n        .toCharacters(output)\r\n        .join('');\r\n    }\r\n    return output;\r\n  },\r\n  dataFormatter: null\r\n};\r\n\r\nRNN.trainDefaults = {\r\n  iterations: 20000,\r\n  errorThresh: 0.005,\r\n  log: false,\r\n  logPeriod: 10,\r\n  learningRate: 0.01,\r\n  callback: null,\r\n  callbackPeriod: 10\r\n};\r\n"]}