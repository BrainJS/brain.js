{"version":3,"sources":["../../src/recurrent/rnn.js"],"names":["RNN","options","defaults","constructor","Object","assign","stepCache","runs","totalCost","ratioClipped","model","initialLayerInputs","hiddenSizes","map","size","Matrix","inputLookup","outputLookup","initialize","input","hiddenLayers","output","equations","allMatrices","equationConnections","dataFormatter","inputSize","inputRange","outputSize","characters","length","json","fromJSON","mapModel","push","getModel","prevSize","d","hiddenSize","weight","RandomMatrix","transition","bias","equation","inputMatrix","previousResult","hiddenLayer","relu","bind","add","multiply","lastHiddenSize","outputConnector","Equation","outputs","equationConnection","getEquation","inputMatrixToRow","i","max","createInputMatrix","Error","createHiddenLayers","hiddenMatrix","property","hasOwnProperty","createOutputMatrix","learningRate","error","runInput","runBackpropagate","step","log2ppl","cost","bindEquation","inputIndex","inputMax","equationIndex","source","target","run","logProbabilities","probabilities","Math","log2","weights","log","deltas","slice","pow","stepSize","regc","clipval","numClipped","numTot","matrixIndex","matrix","rows","columns","cache","r","w","decayRate","sqrt","smoothEps","rawInput","maxPredictionLength","isSampleI","temperature","isRunnable","formatDataIn","previousIndex","outputMatrix","j","probs","nextIndex","formatDataOut","value","data","trainDefaults","iterations","errorThresh","console","logPeriod","callback","callbackPeriod","Infinity","setupData","keepNetworkIntact","sum","err","trainPattern","isNaN","p","type","name","toJSON","layers","JSON","stringify","DataFormatter","parse","states","jsonString","matrixOrigin","m","stateIndex","state","previousConnectionIndex","left","right","product","connection","indexOf","matrixToString","toInner","fnString","toString","split","shift","join","pop","replace","fileName","fnName","toLowerCase","statesRaw","usedFunctionNames","innerFunctionsSwitch","forwardFn","src","toFunctionString","zeros","softmax","randomF","sampleI","maxI","Function","Array","isArray","values","result","fromArrayInputOutput","indexTable","toIndexesInputOutput","toIndexes","toCharacters"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;IAEqBA,G;AACnB,iBAA0B;AAAA;;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACxB,QAAMC,WAAW,KAAKC,WAAL,CAAiBD,QAAlC;;AAEAE,WAAOC,MAAP,CAAc,IAAd,EAAoBH,QAApB,EAA8BD,OAA9B;;AAEA,SAAKK,SAAL,GAAiB,EAAjB;AACA,SAAKC,IAAL,GAAY,CAAZ;AACA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,KAAL,GAAa,IAAb;;AAEA,SAAKC,kBAAL,GAA0B,KAAKC,WAAL,CAAiBC,GAAjB,CAAqB,UAACC,IAAD;AAAA,aAAU,IAAIC,gBAAJ,CAAW,MAAKH,WAAL,CAAiB,CAAjB,CAAX,EAAgC,CAAhC,CAAV;AAAA,KAArB,CAA1B;AACA,SAAKI,WAAL,GAAmB,IAAnB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,UAAL;AACD;;;;iCAEY;AACX,WAAKR,KAAL,GAAa;AACXS,eAAO,IADI;AAEXC,sBAAc,EAFH;AAGXC,gBAAQ,IAHG;AAIXC,mBAAW,EAJA;AAKXC,qBAAa,EALF;AAMXC,6BAAqB;AANV,OAAb;;AASA,UAAI,KAAKC,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,aAAKC,SAAL,GACA,KAAKC,UAAL,GACA,KAAKC,UAAL,GAAkB,KAAKH,aAAL,CAAmBI,UAAnB,CAA8BC,MAFhD;AAGD;;AAED,UAAI,KAAKC,IAAT,EAAe;AACb,aAAKC,QAAL,CAAc,KAAKD,IAAnB;AACD,OAFD,MAEO;AACL,aAAKE,QAAL;AACD;AACF;;;yCAEoB;AACnB,UAAIrB,cAAc,KAAKA,WAAvB;AACA,UAAIF,QAAQ,KAAKA,KAAjB;AACA,UAAIU,eAAeV,MAAMU,YAAzB;AACA;AACAA,mBAAac,IAAb,CAAkB,KAAKC,QAAL,CAAcvB,YAAY,CAAZ,CAAd,EAA8B,KAAKc,SAAnC,CAAlB;AACA,UAAIU,WAAWxB,YAAY,CAAZ,CAAf;;AAEA,WAAK,IAAIyB,IAAI,CAAb,EAAgBA,IAAIzB,YAAYkB,MAAhC,EAAwCO,GAAxC,EAA6C;AAAE;AAC7C,YAAIC,aAAa1B,YAAYyB,CAAZ,CAAjB;AACAjB,qBAAac,IAAb,CAAkB,KAAKC,QAAL,CAAcG,UAAd,EAA0BF,QAA1B,CAAlB;AACAA,mBAAWE,UAAX;AACD;AACF;;AAED;;;;;;;;;6BAMSA,U,EAAYF,Q,EAAU;AAC7B,aAAO;AACL;AACAG,gBAAQ,IAAIC,sBAAJ,CAAiBF,UAAjB,EAA6BF,QAA7B,EAAuC,IAAvC,CAFH;AAGL;AACAK,oBAAY,IAAID,sBAAJ,CAAiBF,UAAjB,EAA6BA,UAA7B,EAAyC,IAAzC,CAJP;AAKL;AACAI,cAAM,IAAI3B,gBAAJ,CAAWuB,UAAX,EAAuB,CAAvB;AAND,OAAP;AAQD;;AAED;;;;;;;;;;;gCAQYK,Q,EAAUC,W,EAAaC,c,EAAgBC,W,EAAa;AAC9D,UAAIC,OAAOJ,SAASI,IAAT,CAAcC,IAAd,CAAmBL,QAAnB,CAAX;AACA,UAAIM,MAAMN,SAASM,GAAT,CAAaD,IAAb,CAAkBL,QAAlB,CAAV;AACA,UAAIO,WAAWP,SAASO,QAAT,CAAkBF,IAAlB,CAAuBL,QAAvB,CAAf;;AAEA,aAAOI,KACLE,IACEA,IACEC,SACEJ,YAAYP,MADd,EAEEK,WAFF,CADF,EAKEM,SACEJ,YAAYL,UADd,EAEEI,cAFF,CALF,CADF,EAWEC,YAAYJ,IAXd,CADK,CAAP;AAeD;;;wCAEmB;AAClB;AACA,WAAKhC,KAAL,CAAWS,KAAX,GAAmB,IAAIqB,sBAAJ,CAAiB,KAAKb,UAAL,GAAkB,CAAnC,EAAsC,KAAKD,SAA3C,EAAsD,IAAtD,CAAnB;AACD;;;yCAEoB;AACnB,UAAIhB,QAAQ,KAAKA,KAAjB;AACA,UAAIkB,aAAa,KAAKA,UAAtB;AACA,UAAIuB,iBAAiB,KAAKvC,WAAL,CAAiB,KAAKA,WAAL,CAAiBkB,MAAjB,GAA0B,CAA3C,CAArB;;AAEA;AACA;AACApB,YAAM0C,eAAN,GAAwB,IAAIZ,sBAAJ,CAAiBZ,aAAa,CAA9B,EAAiCuB,cAAjC,EAAiD,IAAjD,CAAxB;AACA;AACA;AACAzC,YAAMW,MAAN,GAAe,IAAIN,gBAAJ,CAAWa,aAAa,CAAxB,EAA2B,CAA3B,CAAf;AACD;;;mCAEc;AACb,UAAIlB,QAAQ,KAAKA,KAAjB;AACA,UAAIE,cAAc,KAAKA,WAAvB;AACA,UAAIQ,eAAeV,MAAMU,YAAzB;AACA,UAAIuB,WAAW,IAAIU,kBAAJ,EAAf;AACA,UAAIC,UAAU,EAAd;AACA,UAAIC,qBAAqB7C,MAAMc,mBAAN,CAA0BM,MAA1B,GAAmC,CAAnC,GACrBpB,MAAMc,mBAAN,CAA0Bd,MAAMc,mBAAN,CAA0BM,MAA1B,GAAmC,CAA7D,CADqB,GAErB,KAAKnB,kBAFT;;AAKE;AACF,UAAIU,SAAS,KAAKmC,WAAL,CAAiBb,QAAjB,EAA2BA,SAASc,gBAAT,CAA0B/C,MAAMS,KAAhC,CAA3B,EAAmEoC,mBAAmB,CAAnB,CAAnE,EAA0FnC,aAAa,CAAb,CAA1F,CAAb;AACAkC,cAAQpB,IAAR,CAAab,MAAb;AACA;AACA,WAAK,IAAIqC,IAAI,CAAR,EAAWC,MAAM/C,YAAYkB,MAAlC,EAA0C4B,IAAIC,GAA9C,EAAmDD,GAAnD,EAAwD;AACtDrC,iBAAS,KAAKmC,WAAL,CAAiBb,QAAjB,EAA2BtB,MAA3B,EAAmCkC,mBAAmBG,CAAnB,CAAnC,EAA0DtC,aAAasC,CAAb,CAA1D,CAAT;AACAJ,gBAAQpB,IAAR,CAAab,MAAb;AACD;;AAEDX,YAAMc,mBAAN,CAA0BU,IAA1B,CAA+BoB,OAA/B;AACAX,eAASM,GAAT,CAAaN,SAASO,QAAT,CAAkBxC,MAAM0C,eAAxB,EAAyC/B,MAAzC,CAAb,EAA+DX,MAAMW,MAArE;AACAX,YAAMY,SAAN,CAAgBY,IAAhB,CAAqBS,QAArB;AACD;;;+BAEU;AACT,UAAIjC,QAAQ,KAAKA,KAAjB;AACA,UAAIU,eAAeV,MAAMU,YAAzB;AACA,UAAIG,cAAcb,MAAMa,WAAxB;;AAEA,WAAKqC,iBAAL;AACA,UAAI,CAAClD,MAAMS,KAAX,EAAkB,MAAM,IAAI0C,KAAJ,CAAU,yBAAV,CAAN;AAClBtC,kBAAYW,IAAZ,CAAiBxB,MAAMS,KAAvB;;AAEA,WAAK2C,kBAAL;AACA,UAAI,CAACpD,MAAMU,YAAN,CAAmBU,MAAxB,EAAgC,MAAM,IAAI+B,KAAJ,CAAU,0BAAV,CAAN;AAChC,WAAK,IAAIH,IAAI,CAAR,EAAWC,MAAMvC,aAAaU,MAAnC,EAA2C4B,IAAIC,GAA/C,EAAoDD,GAApD,EAAyD;AACvD,YAAIK,eAAe3C,aAAasC,CAAb,CAAnB;AACA,aAAK,IAAIM,QAAT,IAAqBD,YAArB,EAAmC;AACjC,cAAI,CAACA,aAAaE,cAAb,CAA4BD,QAA5B,CAAL,EAA4C;AAC5CzC,sBAAYW,IAAZ,CAAiB6B,aAAaC,QAAb,CAAjB;AACD;AACF;;AAED,WAAKE,kBAAL;AACA,UAAI,CAACxD,MAAM0C,eAAX,EAA4B,MAAM,IAAIS,KAAJ,CAAU,mCAAV,CAAN;AAC5B,UAAI,CAACnD,MAAMW,MAAX,EAAmB,MAAM,IAAIwC,KAAJ,CAAU,0BAAV,CAAN;;AAEnBtC,kBAAYW,IAAZ,CAAiBxB,MAAM0C,eAAvB;AACA7B,kBAAYW,IAAZ,CAAiBxB,MAAMW,MAAvB;AACD;;AAED;;;;;;;;;iCAMaF,K,EAA4B;AAAA,UAArBgD,YAAqB,uEAAN,IAAM;;AACvC,UAAMC,QAAQ,KAAKC,QAAL,CAAclD,KAAd,CAAd;AACA,WAAKmD,gBAAL,CAAsBnD,KAAtB;AACA,WAAKoD,IAAL,CAAUJ,YAAV;AACA,aAAOC,KAAP;AACD;;AAED;;;;;;;;6BAKSjD,K,EAAO;AACd,WAAKZ,IAAL;AACA,UAAIG,QAAQ,KAAKA,KAAjB;AACA,UAAIiD,MAAMxC,MAAMW,MAAhB;AACA,UAAI0C,UAAU,CAAd;AACA,UAAIC,OAAO,CAAX;AACA,UAAI9B,iBAAJ;AACA,aAAOjC,MAAMY,SAAN,CAAgBQ,MAAhB,IAA0BX,MAAMW,MAAN,GAAe,CAAhD,EAAmD;AAAC;AAClD,aAAK4C,YAAL;AACD;AACD,WAAK,IAAIC,aAAa,CAAC,CAAlB,EAAqBC,WAAWzD,MAAMW,MAA3C,EAAmD6C,aAAaC,QAAhE,EAA0ED,YAA1E,EAAwF;AACtF;AACA,YAAIE,gBAAgBF,aAAa,CAAjC;AACAhC,mBAAWjC,MAAMY,SAAN,CAAgBuD,aAAhB,CAAX;;AAEA,YAAIC,SAAUH,eAAe,CAAC,CAAhB,GAAoB,CAApB,GAAwBxD,MAAMwD,UAAN,IAAoB,CAA1D,CALsF,CAKxB;AAC9D,YAAII,SAAUJ,eAAehB,MAAM,CAArB,GAAyB,CAAzB,GAA6BxC,MAAMwD,aAAa,CAAnB,IAAwB,CAAnE,CANsF,CAMf;AACvE,YAAItD,SAASsB,SAASqC,GAAT,CAAaF,MAAb,CAAb;AACA;AACA,YAAIG,mBAAmB5D,MAAvB,CATsF,CASvD;AAC/B,YAAI6D,gBAAgB,uBAAQ7D,MAAR,CAApB,CAVsF,CAUjD;;AAErCmD,mBAAW,CAACW,KAAKC,IAAL,CAAUF,cAAcG,OAAd,CAAsBN,MAAtB,CAAV,CAAZ,CAZsF,CAYhC;AACtDN,gBAAQ,CAACU,KAAKG,GAAL,CAASJ,cAAcG,OAAd,CAAsBN,MAAtB,CAAT,CAAT;AACA;AACAE,yBAAiBM,MAAjB,GAA0BL,cAAcG,OAAd,CAAsBG,KAAtB,CAA4B,CAA5B,CAA1B;AACAP,yBAAiBM,MAAjB,CAAwBR,MAAxB,KAAmC,CAAnC;AACD;;AAED,WAAKvE,SAAL,GAAiBiE,IAAjB;AACA,aAAOU,KAAKM,GAAL,CAAS,CAAT,EAAYjB,WAAWb,MAAM,CAAjB,CAAZ,CAAP;AACD;;AAED;;;;;;qCAGiBxC,K,EAAO;AACtB,UAAIuC,IAAIvC,MAAMW,MAAd;AACA,UAAIpB,QAAQ,KAAKA,KAAjB;AACA,UAAIY,YAAYZ,MAAMY,SAAtB;AACA,aAAMoC,IAAI,CAAV,EAAa;AACXpC,kBAAUoC,CAAV,EAAaY,gBAAb,CAA8BnD,MAAMuC,IAAI,CAAV,IAAe,CAA7C;AACAA;AACD;AACDpC,gBAAU,CAAV,EAAagD,gBAAb,CAA8B,CAA9B;AACD;;AAED;;;;;;;2BAI0B;AAAA,UAArBH,YAAqB,uEAAN,IAAM;;AACxB;AACA;AACA,UAAIuB,WAAW,KAAKvB,YAApB;AACA,UAAIwB,OAAO,KAAKA,IAAhB;AACA,UAAIC,UAAU,KAAKA,OAAnB;AACA,UAAIlF,QAAQ,KAAKA,KAAjB;AACA,UAAImF,aAAa,CAAjB;AACA,UAAIC,SAAS,CAAb;AACA,UAAIvE,cAAcb,MAAMa,WAAxB;AACA,WAAK,IAAIwE,cAAc,CAAvB,EAA0BA,cAAcxE,YAAYO,MAApD,EAA4DiE,aAA5D,EAA2E;AACzE,YAAMC,SAASzE,YAAYwE,WAAZ,CAAf;AADyE,YAEjEV,OAFiE,GAE5CW,MAF4C,CAEjEX,OAFiE;AAAA,YAExDE,MAFwD,GAE5CS,MAF4C,CAExDT,MAFwD;;AAGzE,YAAI,EAAEQ,eAAe,KAAKzF,SAAtB,CAAJ,EAAsC;AACpC,eAAKA,SAAL,CAAeyF,WAAf,IAA8B,qBAAMC,OAAOC,IAAP,GAAcD,OAAOE,OAA3B,CAA9B;AACD;AACD,YAAMC,QAAQ,KAAK7F,SAAL,CAAeyF,WAAf,CAAd;AACA,aAAK,IAAIrC,IAAI,CAAb,EAAgBA,IAAI2B,QAAQvD,MAA5B,EAAoC4B,GAApC,EAAyC;AACvC,cAAI0C,IAAIb,OAAO7B,CAAP,CAAR;AACA,cAAI2C,IAAIhB,QAAQ3B,CAAR,CAAR;AACA;AACAyC,gBAAMzC,CAAN,IAAWyC,MAAMzC,CAAN,IAAW,KAAK4C,SAAhB,GAA4B,CAAC,IAAI,KAAKA,SAAV,IAAuBF,CAAvB,GAA2BA,CAAlE;AACA;AACA,cAAIA,IAAIR,OAAR,EAAiB;AACfQ,gBAAIR,OAAJ;AACAC;AACD;AACD,cAAIO,IAAI,CAACR,OAAT,EAAkB;AAChBQ,gBAAI,CAACR,OAAL;AACAC;AACD;AACDC;AACA;AACAT,kBAAQ3B,CAAR,IAAa2C,IAAI,CAACX,QAAD,GAAYU,CAAZ,GAAgBjB,KAAKoB,IAAL,CAAUJ,MAAMzC,CAAN,IAAW,KAAK8C,SAA1B,CAApB,GAA2Db,OAAOU,CAA/E;AACD;AACF;AACD,WAAK5F,YAAL,GAAoBoF,aAAaC,MAAjC;AACD;;AAGD;;;;;;;;;AAcA;;;;;;;;0BAQkF;AAAA,UAA9EW,QAA8E,uEAAnE,EAAmE;AAAA,UAA/DC,mBAA+D,uEAAzC,GAAyC;AAAA,UAApCC,SAAoC,uEAAxB,KAAwB;AAAA,UAAjBC,WAAiB,uEAAH,CAAG;;AAChF,UAAI,CAAC,KAAKC,UAAV,EAAsB,OAAO,IAAP;AACtB,UAAM1F,QAAQ,KAAK2F,YAAL,CAAkBL,QAAlB,CAAd;AACA,UAAM/F,QAAQ,KAAKA,KAAnB;AACA,UAAMW,SAAS,EAAf;AACA,UAAIqC,IAAI,CAAR;AACA,aAAOhD,MAAMY,SAAN,CAAgBQ,MAAhB,GAAyB4E,mBAAhC,EAAqD;AACnD,aAAKhC,YAAL;AACD;AACD,aAAO,IAAP,EAAa;AACX,YAAIqC,gBAAiBrD,MAAM,CAAN,GACjB,CADiB,GAEjBA,IAAIvC,MAAMW,MAAV,GACEX,MAAMuC,IAAI,CAAV,IAAe,CADjB,GAEErC,OAAOqC,IAAI,CAAX,CAJN;AAMA,YAAIf,WAAWjC,MAAMY,SAAN,CAAgBoC,CAAhB,CAAf;AACA;AACA,YAAIsD,eAAerE,SAASqC,GAAT,CAAa+B,aAAb,CAAnB;AACA,YAAI9B,mBAAmB,IAAIlE,gBAAJ,CAAWL,MAAMW,MAAN,CAAa4E,IAAxB,EAA8BvF,MAAMW,MAAN,CAAa6E,OAA3C,CAAvB;AACA,4BAAKjB,gBAAL,EAAuB+B,YAAvB;AACA,YAAIJ,gBAAgB,CAAhB,IAAqBD,SAAzB,EAAoC;AAClC;;;;;;AAMA,eAAK,IAAIM,IAAI,CAAR,EAAWtD,MAAMsB,iBAAiBI,OAAjB,CAAyBvD,MAA/C,EAAuDmF,IAAItD,GAA3D,EAAgEsD,GAAhE,EAAqE;AACnEhC,6BAAiBI,OAAjB,CAAyB4B,CAAzB,KAA+BL,WAA/B;AACD;AACF;;AAED,YAAIM,QAAQ,uBAAQjC,gBAAR,CAAZ;AACA,YAAIkC,YAAaR,YAAY,uBAAQO,KAAR,CAAZ,GAA6B,oBAAKA,KAAL,CAA9C;;AAEAxD;AACA,YAAIyD,cAAc,CAAlB,EAAqB;AACnB;AACA;AACD;AACD,YAAIzD,KAAKgD,mBAAT,EAA8B;AAC5B;AACA;AACD;;AAEDrF,eAAOa,IAAP,CAAYiF,SAAZ;AACD;;AAED;;;;;;;;;;;AAWA,aAAO,KAAKC,aAAL,CACLjG,KADK,EAELE,OACGmE,KADH,CACSrE,MAAMW,MADf,EAEGjB,GAFH,CAEO;AAAA,eAASwG,QAAQ,CAAjB;AAAA,OAFP,CAFK,CAAP;AAMD;;AAED;;;;;;;;;0BAMMC,I,EAAoB;AAAA,UAAdrH,OAAc,uEAAJ,EAAI;;AACxBA,gBAAUG,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKF,WAAL,CAAiBoH,aAAnC,EAAkDtH,OAAlD,CAAV;AACA,UAAIuH,aAAavH,QAAQuH,UAAzB;AACA,UAAIC,cAAcxH,QAAQwH,WAA1B;AACA,UAAInC,MAAMrF,QAAQqF,GAAR,KAAgB,IAAhB,GAAuBoC,QAAQpC,GAA/B,GAAqCrF,QAAQqF,GAAvD;AACA,UAAIqC,YAAY1H,QAAQ0H,SAAxB;AACA,UAAIxD,eAAelE,QAAQkE,YAAR,IAAwB,KAAKA,YAAhD;AACA,UAAIyD,WAAW3H,QAAQ2H,QAAvB;AACA,UAAIC,iBAAiB5H,QAAQ4H,cAA7B;AACA,UAAIzD,QAAQ0D,QAAZ;AACA,UAAIpE,UAAJ;;AAEA,UAAI,KAAKO,cAAL,CAAoB,WAApB,CAAJ,EAAsC;AACpCqD,eAAO,KAAKS,SAAL,CAAeT,IAAf,CAAP;AACD;;AAED,UAAI,CAACrH,QAAQ+H,iBAAb,EAAgC;AAC9B,aAAK9G,UAAL;AACD;;AAED,WAAKwC,IAAI,CAAT,EAAYA,IAAI8D,UAAJ,IAAkBpD,QAAQqD,WAAtC,EAAmD/D,GAAnD,EAAwD;AACtD,YAAIuE,MAAM,CAAV;AACA,aAAK,IAAIhB,IAAI,CAAb,EAAgBA,IAAIK,KAAKxF,MAAzB,EAAiCmF,GAAjC,EAAsC;AACpC,cAAIiB,MAAM,KAAKC,YAAL,CAAkBb,KAAKL,CAAL,CAAlB,EAA2B9C,YAA3B,CAAV;AACA8D,iBAAOC,GAAP;AACD;AACD9D,gBAAQ6D,MAAMX,KAAKxF,MAAnB;;AAEA,YAAIsG,MAAMhE,KAAN,CAAJ,EAAkB,MAAM,IAAIP,KAAJ,CAAU,kFAAV,CAAN;AAClB,YAAIyB,OAAQ5B,IAAIiE,SAAJ,IAAiB,CAA7B,EAAiC;AAC/BrC,cAAI,aAAJ,EAAmB5B,CAAnB,EAAsB,iBAAtB,EAAyCU,KAAzC;AACD;AACD,YAAIwD,YAAalE,IAAImE,cAAJ,IAAsB,CAAvC,EAA2C;AACzCD,mBAAS,EAAExD,OAAOA,KAAT,EAAgBoD,YAAY9D,CAA5B,EAAT;AACD;AACF;;AAED,aAAO;AACLU,eAAOA,KADF;AAELoD,oBAAY9D;AAFP,OAAP;AAID;;AAED;;;;;;;;;;;;;yBAUK4D,I,EAAM;AACT,YAAM,IAAIzD,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAED;;;;;;;6BAIS;AACP,UAAM3D,WAAW,KAAKC,WAAL,CAAiBD,QAAlC;AACA,UAAIQ,QAAQ,KAAKA,KAAjB;AACA,UAAIT,UAAU,EAAd;AACA,WAAK,IAAIoI,CAAT,IAAcnI,QAAd,EAAwB;AACtBD,gBAAQoI,CAAR,IAAa,KAAKA,CAAL,CAAb;AACD;;AAED,aAAO;AACLC,cAAM,KAAKnI,WAAL,CAAiBoI,IADlB;AAELtI,iBAASA,OAFJ;AAGLkB,eAAOT,MAAMS,KAAN,CAAYqH,MAAZ,EAHF;AAILpH,sBAAcV,MAAMU,YAAN,CAAmBP,GAAnB,CAAuB,UAACiC,WAAD,EAAiB;AACpD,cAAI2F,SAAS,EAAb;AACA,eAAK,IAAIJ,EAAT,IAAcvF,WAAd,EAA2B;AACzB2F,mBAAOJ,EAAP,IAAYvF,YAAYuF,EAAZ,EAAeG,MAAf,EAAZ;AACD;AACD,iBAAOC,MAAP;AACD,SANa,CAJT;AAWLrF,yBAAiB,KAAK1C,KAAL,CAAW0C,eAAX,CAA2BoF,MAA3B,EAXZ;AAYLnH,gBAAQ,KAAKX,KAAL,CAAWW,MAAX,CAAkBmH,MAAlB;AAZH,OAAP;AAcD;;;mCAEc;AACb,aAAOE,KAAKC,SAAL,CAAe,KAAKH,MAAL,EAAf,CAAP;AACD;;;6BAEQzG,I,EAAM;AACb,WAAKA,IAAL,GAAYA,IAAZ;AACA,UAAM7B,WAAW,KAAKC,WAAL,CAAiBD,QAAlC;AACA,UAAIQ,QAAQ,KAAKA,KAAjB;AACA,UAAIT,UAAU8B,KAAK9B,OAAnB;AACA,UAAIsB,cAAcb,MAAMa,WAAxB;AACAb,YAAMS,KAAN,GAAcJ,iBAAOiB,QAAP,CAAgBD,KAAKZ,KAArB,CAAd;AACAI,kBAAYW,IAAZ,CAAiBxB,MAAMS,KAAvB;AACAT,YAAMU,YAAN,GAAqBW,KAAKX,YAAL,CAAkBP,GAAlB,CAAsB,UAACiC,WAAD,EAAiB;AAC1D,YAAI2F,SAAS,EAAb;AACA,aAAK,IAAIJ,CAAT,IAAcvF,WAAd,EAA2B;AACzB2F,iBAAOJ,CAAP,IAAYtH,iBAAOiB,QAAP,CAAgBc,YAAYuF,CAAZ,CAAhB,CAAZ;AACA9G,sBAAYW,IAAZ,CAAiBuG,OAAOJ,CAAP,CAAjB;AACD;AACD,eAAOI,MAAP;AACD,OAPoB,CAArB;AAQA/H,YAAM0C,eAAN,GAAwBrC,iBAAOiB,QAAP,CAAgBD,KAAKqB,eAArB,CAAxB;AACA1C,YAAMW,MAAN,GAAeN,iBAAOiB,QAAP,CAAgBD,KAAKV,MAArB,CAAf;AACAE,kBAAYW,IAAZ,CAAiBxB,MAAM0C,eAAvB;AACA7B,kBAAYW,IAAZ,CAAiBxB,MAAMW,MAAvB;;AAEA,WAAK,IAAIgH,CAAT,IAAcnI,QAAd,EAAwB;AACtB,YAAI,CAACA,SAAS+D,cAAT,CAAwBoE,CAAxB,CAAL,EAAiC;AACjC,aAAKA,CAAL,IAAUpI,QAAQgE,cAAR,CAAuBoE,CAAvB,IAA4BpI,QAAQoI,CAAR,CAA5B,GAAyCnI,SAASmI,CAAT,CAAnD;AACD;;AAED,UAAIpI,QAAQgE,cAAR,CAAuB,eAAvB,KAA2ChE,QAAQwB,aAAR,KAA0B,IAAzE,EAA+E;AAC7E,aAAKA,aAAL,GAAqBmH,wBAAc5G,QAAd,CAAuB/B,QAAQwB,aAA/B,CAArB;AACA,eAAOxB,QAAQwB,aAAf;AACD;;AAED,WAAKiD,YAAL;AACD;;;mCAEc3C,I,EAAM;AACnB,aAAO,KAAKC,QAAL,CAAc0G,KAAKG,KAAL,CAAW9G,IAAX,CAAd,CAAP;AACD;;AAED;;;;;;;iCAIa;AACX,UAAIrB,QAAQ,KAAKA,KAAjB;AACA,UAAIY,YAAY,KAAKZ,KAAL,CAAWY,SAA3B;AACA,UAAIqB,WAAWrB,UAAU,CAAV,CAAf;AACA,UAAIwH,SAASnG,SAASmG,MAAtB;AACA,UAAIC,aAAaL,KAAKC,SAAL,CAAe,KAAKH,MAAL,EAAf,CAAjB;;AAEA,eAASQ,YAAT,CAAsBC,CAAtB,EAAyBC,UAAzB,EAAqC;AACnC,aAAK,IAAIxF,IAAI,CAAR,EAAWC,MAAMmF,OAAOhH,MAA7B,EAAqC4B,IAAIC,GAAzC,EAA8CD,GAA9C,EAAmD;AACjD,cAAIyF,QAAQL,OAAOpF,CAAP,CAAZ;;AAEA,cAAIA,MAAMwF,UAAV,EAAsB;AACpB,gBAAIjC,IAAImC,wBAAwBH,CAAxB,CAAR;AACA,oBAAQA,CAAR;AACE,mBAAKE,MAAME,IAAX;AACE,oBAAIpC,IAAI,CAAC,CAAT,EAAY;AACV,gDAA6BA,CAA7B,sCAA+DA,CAA/D,+BAA4FgC,EAAEhD,IAA9F,UAAyGgD,EAAE/C,OAA3G;AACD;AACH,mBAAKiD,MAAMG,KAAX;AACE,oBAAIrC,IAAI,CAAC,CAAT,EAAY;AACV,gDAA6BA,CAA7B,sCAA+DA,CAA/D,+BAA4FgC,EAAEhD,IAA9F,UAAyGgD,EAAE/C,OAA3G;AACD;AACH,mBAAKiD,MAAMI,OAAX;AACE,uCAAsBN,EAAEhD,IAAxB,UAAmCgD,EAAE/C,OAArC;AACF;AACE,sBAAMrC,MAAM,eAAN,CAAN;AAZJ;AAcD;;AAED,cAAIoF,MAAME,MAAMI,OAAhB,EAAyB,mBAAkB7F,CAAlB;AACzB,cAAIuF,MAAME,MAAMG,KAAhB,EAAuB,mBAAkB5F,CAAlB;AACvB,cAAIuF,MAAME,MAAME,IAAhB,EAAsB,mBAAkB3F,CAAlB;AACvB;AACF;;AAED,eAAS0F,uBAAT,CAAiCH,CAAjC,EAAoC;AAClC,YAAMO,aAAa9I,MAAMc,mBAAN,CAA0B,CAA1B,CAAnB;AACA,YAAMsH,SAASxH,UAAU,CAAV,EAAawH,MAA5B;AACA,aAAK,IAAIpF,IAAI,CAAR,EAAWC,MAAMmF,OAAOhH,MAA7B,EAAqC4B,IAAIC,GAAzC,EAA8CD,GAA9C,EAAmD;AACjD,cAAIoF,OAAOpF,CAAP,EAAU6F,OAAV,KAAsBN,CAA1B,EAA6B;AAC3B,mBAAOvF,CAAP;AACD;AACF;AACD,eAAO8F,WAAWC,OAAX,CAAmBR,CAAnB,CAAP;AACD;;AAED,eAASS,cAAT,CAAwBT,CAAxB,EAA2BC,UAA3B,EAAuC;AACrC,YAAI,CAACD,CAAD,IAAM,CAACA,EAAEhD,IAAT,IAAiB,CAACgD,EAAE/C,OAAxB,EAAiC,OAAO,MAAP;;AAEjC,YAAI+C,MAAMvI,MAAMS,KAAhB,EAAuB;AACvB,YAAI8H,MAAMvI,MAAM0C,eAAhB,EAAiC;AACjC,YAAI6F,MAAMvI,MAAMW,MAAhB,EAAwB;;AAExB,aAAK,IAAIqC,IAAI,CAAR,EAAWC,MAAMjD,MAAMU,YAAN,CAAmBU,MAAzC,EAAiD4B,IAAIC,GAArD,EAA0DD,GAA1D,EAA+D;AAC7D,cAAIZ,cAAcpC,MAAMU,YAAN,CAAmBsC,CAAnB,CAAlB;AACA,eAAK,IAAI2E,CAAT,IAAcvF,WAAd,EAA2B;AACzB,gBAAI,CAACA,YAAYmB,cAAZ,CAA2BoE,CAA3B,CAAL,EAAoC;AACpC,gBAAIvF,YAAYuF,CAAZ,MAAmBY,CAAvB,EAA0B;AAC1B,0CAA6BvF,CAA7B,UAAqC2E,CAArC;AACD;AACF;;AAED,eAAOW,aAAaC,CAAb,EAAgBC,UAAhB,CAAP;AACD;;AAED,eAASS,OAAT,CAAiBC,QAAjB,EAA2B;AACzB;AACA;AACAA,mBAAWA,SAASC,QAAT,GAAoBC,KAApB,CAA0B,GAA1B,CAAX;AACAF,iBAASG,KAAT;AACA;AACAH,mBAAWA,SAASI,IAAT,CAAc,GAAd,CAAX;AACAJ,mBAAWA,SAASE,KAAT,CAAe,GAAf,CAAX;AACAF,iBAASK,GAAT;AACA;AACA,eAAOL,SAASI,IAAT,CAAc,GAAd,EAAmBF,KAAnB,CAAyB,IAAzB,EAA+BE,IAA/B,CAAoC,YAApC,EACJE,OADI,CACI,wBADJ,EAC8B,EAD9B,EAEJA,OAFI,CAEI,6BAFJ,EAEmC,EAFnC,EAGJA,OAHI,CAGI,6BAHJ,EAGmC,EAHnC,EAIJA,OAJI,CAII,+BAJJ,EAIqC,EAJrC,EAKJA,OALI,CAKI,wCALJ,EAK8C,EAL9C,CAAP;AAMD;;AAED,eAASC,QAAT,CAAkBC,MAAlB,EAA0B;AACxB,yCAAgCA,OAAOF,OAAP,CAAe,QAAf,EAAyB,UAAS7C,KAAT,EAAgB;AAAE,iBAAO,MAAMA,MAAMgD,WAAN,EAAb;AAAmC,SAA9E,CAAhC;AACD;;AAED,UAAIC,YAAY,EAAhB;AACA,UAAIC,oBAAoB,EAAxB;AACA,UAAIC,uBAAuB,EAA3B;AACA,WAAK,IAAI9G,IAAI,CAAR,EAAWC,MAAMmF,OAAOhH,MAA7B,EAAqC4B,IAAIC,GAAzC,EAA8CD,GAA9C,EAAmD;AACjD,YAAIyF,QAAQL,OAAOpF,CAAP,CAAZ;AACA4G,kBAAUpI,IAAV,aAA0BwB,CAA1B,6BACUyF,MAAMsB,SAAN,CAAgBlC,IAD1B,yBAESmB,eAAeP,MAAME,IAArB,EAA2B3F,CAA3B,CAFT,wBAGUgG,eAAeP,MAAMG,KAArB,EAA4B5F,CAA5B,CAHV,0BAIYgG,eAAeP,MAAMI,OAArB,EAA8B7F,CAA9B,CAJZ;;AAOA,YAAI0G,SAASjB,MAAMsB,SAAN,CAAgBlC,IAA7B;AACA,YAAI,CAACgC,kBAAkBH,MAAlB,CAAL,EAAgC;AAC9BG,4BAAkBH,MAAlB,IAA4B,IAA5B;AACAI,+BAAqBtI,IAArB,qBACoBkI,MADpB,4BACkDD,SAASC,MAAT,CADlD,oBAEKT,QAAQR,MAAMsB,SAAN,CAAgBZ,QAAhB,EAAR,CAFL;AAKD;AACF;;AAED,UAAMa,qRAKJ,KAAKjJ,aAAL,KAAuB,IAAxB,GAAgC,KAAKA,aAAL,CAAmBkJ,gBAAnB,EAAhC,GAAwE,EALnE,8BAQH,KAAKlJ,aAAL,KAAuB,IAAvB,IAA+B,OAAO,KAAKqF,YAAZ,KAA6B,UAA7D,GACI,wBADJ,GAEI,UAVA,yBAYMiC,UAZN,qVA2BHuB,UAAUN,IAAV,CAAe,SAAf,CA3BG,mDA4BiCM,UAAUxI,MA5B3C,gOAmCP0I,qBAAqBR,IAArB,CAA0B,IAA1B,CAnCO,whBA2DJ,KAAKvI,aAAL,KAAuB,IAAvB,IAA+B,OAAO,KAAK2F,aAAZ,KAA8B,UAA9D,GACG,oGADH,GAEG,8EA7DE,uJAmEL,KAAK3F,aAAL,KAAuB,IAAvB,IAA+B,OAAO,KAAKqF,YAAZ,KAA6B,UAA5D,+CAEK6C,QAAQ,KAAK7C,YAAL,CAAkB+C,QAAlB,EAAR,EACGK,OADH,CACW,iCADX,EAC8C,EAD9C,EAEGA,OAFH,CAEW,0BAFX,EAEuC,EAFvC,EAGGA,OAHH,CAGW,uBAHX,EAGoC,MAHpC,CAFL,UAOG,EA1EE,cA2EL,KAAKzI,aAAL,KAAuB,IAAvB,IAA+B,OAAO,KAAK2F,aAAZ,KAA8B,UAA7D,gDAEOuC,QAAQ,KAAKvC,aAAL,CAAmByC,QAAnB,EAAR,EACGK,OADH,CACW,iCADX,EAC8C,EAD9C,EAEGA,OAFH,CAEW,0BAFX,EAEuC,EAFvC,EAGGA,OAHH,CAGW,uBAHX,EAGoC,MAHpC,CAFP,UAOK,EAlFA,aAmFLU,gBAAMf,QAAN,EAnFK,YAoFLgB,kBAAQhB,QAAR,GAAmBK,OAAnB,CAA2B,YAA3B,EAAyC,QAAzC,CApFK,YAqFLY,gBAAQjB,QAAR,EArFK,YAsFLkB,kBAAQlB,QAAR,EAtFK,YAuFLmB,eAAKnB,QAAL,EAvFD;AAwFA,aAAO,IAAIoB,QAAJ,CAAa,UAAb,EAAyB,qBAAzB,EAAgD,WAAhD,EAA6D,aAA7D,EAA4EP,GAA5E,CAAP;AACD;;;wBAtae;AACd,UAAG,KAAKhK,KAAL,CAAWY,SAAX,CAAqBQ,MAArB,KAAgC,CAAnC,EAAqC;AACnC4F,gBAAQtD,KAAR;AACA,eAAO,KAAP;AACD;;AAED,aAAO,IAAP;AACD;;;;;;kBArSkBpE,G;;;AAusBrBA,IAAIE,QAAJ,GAAe;AACbwB,aAAW,EADE;AAEbC,cAAY,EAFC;AAGbf,eAAY,CAAC,EAAD,EAAI,EAAJ,CAHC;AAIbgB,cAAY,EAJC;AAKbuC,gBAAc,IALD;AAMbmC,aAAW,KANE;AAObE,aAAW,IAPE;AAQbb,QAAM,QARO;AASbC,WAAS,CATI;AAUb7D,QAAM,IAVO;AAWb;;;;;AAKAgG,aAAW,mBAAST,IAAT,EAAe;AACxB,QACE,OAAOA,KAAK,CAAL,CAAP,KAAmB,QAAnB,IACG,CAAC4D,MAAMC,OAAN,CAAc7D,KAAK,CAAL,CAAd,CADJ,KAGE,CAACA,KAAK,CAAL,EAAQrD,cAAR,CAAuB,OAAvB,CAAD,IACG,CAACqD,KAAK,CAAL,EAAQrD,cAAR,CAAuB,QAAvB,CAJN,CADF,EAOE;AACA,aAAOqD,IAAP;AACD;AACD,QAAI8D,SAAS,EAAb;AACA,QAAMC,SAAS,EAAf;AACA,QAAI,OAAO/D,KAAK,CAAL,CAAP,KAAmB,QAAnB,IAA+B4D,MAAMC,OAAN,CAAc7D,KAAK,CAAL,CAAd,CAAnC,EAA2D;AACzD,UAAI,KAAK7F,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,aAAK,IAAIiC,IAAI,CAAb,EAAgBA,IAAI4D,KAAKxF,MAAzB,EAAiC4B,GAAjC,EAAsC;AACpC0H,iBAAOlJ,IAAP,CAAYoF,KAAK5D,CAAL,CAAZ;AACD;AACD,aAAKjC,aAAL,GAAqB,IAAImH,uBAAJ,CAAkBwC,MAAlB,CAArB;AACD;AACD,WAAK,IAAI1H,KAAI,CAAR,EAAWC,MAAM2D,KAAKxF,MAA3B,EAAmC4B,KAAIC,GAAvC,EAA4CD,IAA5C,EAAiD;AAC/C2H,eAAOnJ,IAAP,CAAY,KAAK4E,YAAL,CAAkBQ,KAAK5D,EAAL,CAAlB,CAAZ;AACD;AACF,KAVD,MAUO;AACL,UAAI,KAAKjC,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,aAAK,IAAIiC,MAAI,CAAb,EAAgBA,MAAI4D,KAAKxF,MAAzB,EAAiC4B,KAAjC,EAAsC;AACpC0H,iBAAOlJ,IAAP,CAAYoF,KAAK5D,GAAL,EAAQvC,KAApB;AACAiK,iBAAOlJ,IAAP,CAAYoF,KAAK5D,GAAL,EAAQrC,MAApB;AACD;AACD,aAAKI,aAAL,GAAqBmH,wBAAc0C,oBAAd,CAAmCF,MAAnC,CAArB;AACD;AACD,WAAK,IAAI1H,MAAI,CAAR,EAAWC,OAAM2D,KAAKxF,MAA3B,EAAmC4B,MAAIC,IAAvC,EAA4CD,KAA5C,EAAiD;AAC/C2H,eAAOnJ,IAAP,CAAY,KAAK4E,YAAL,CAAkBQ,KAAK5D,GAAL,EAAQvC,KAA1B,EAAiCmG,KAAK5D,GAAL,EAAQrC,MAAzC,CAAZ;AACD;AACF;AACD,WAAOgK,MAAP;AACD,GApDY;AAqDb;;;;;;AAMAvE,gBAAc,sBAAS3F,KAAT,EAA+B;AAAA,QAAfE,MAAe,uEAAN,IAAM;;AAC3C,QAAI,KAAKI,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,UAAI,KAAKA,aAAL,CAAmB8J,UAAnB,CAA8BtH,cAA9B,CAA6C,YAA7C,CAAJ,EAAgE;AAC9D,eAAO,KAAKxC,aAAL,CAAmB+J,oBAAnB,CAAwCrK,KAAxC,EAA+CE,MAA/C,CAAP;AACD,OAFD,MAEO;AACL,eAAO,KAAKI,aAAL,CAAmBgK,SAAnB,CAA6BtK,KAA7B,CAAP;AACD;AACF;AACD,WAAOA,KAAP;AACD,GApEY;AAqEb;;;;;;AAMAiG,iBAAe,uBAASjG,KAAT,EAAgBE,MAAhB,EAAwB;AACrC,QAAI,KAAKI,aAAL,KAAuB,IAA3B,EAAiC;AAC/B,aAAO,KAAKA,aAAL,CACJiK,YADI,CACSrK,MADT,EAEJ2I,IAFI,CAEC,EAFD,CAAP;AAGD;AACD,WAAO3I,MAAP;AACD,GAlFY;AAmFbI,iBAAe;AAnFF,CAAf;;AAsFAzB,IAAIuH,aAAJ,GAAoB;AAClBC,cAAY,KADM;AAElBC,eAAa,KAFK;AAGlBnC,OAAK,KAHa;AAIlBqC,aAAW,EAJO;AAKlBxD,gBAAc,GALI;AAMlByD,YAAU,IANQ;AAOlBC,kBAAgB,EAPE;AAQlBG,qBAAmB;AARD,CAApB","file":"rnn.js","sourcesContent":["import Matrix from './matrix';\nimport RandomMatrix from './matrix/random-matrix';\nimport Equation from './matrix/equation';\nimport sampleI from './matrix/sample-i';\nimport maxI from './matrix/max-i';\nimport softmax from './matrix/softmax';\nimport copy from './matrix/copy';\nimport { randomF } from '../utilities/random';\nimport zeros from '../utilities/zeros';\nimport DataFormatter from '../utilities/data-formatter';\n\nexport default class RNN {\n  constructor(options = {}) {\n    const defaults = this.constructor.defaults;\n\n    Object.assign(this, defaults, options)\n\n    this.stepCache = {};\n    this.runs = 0;\n    this.totalCost = null;\n    this.ratioClipped = null;\n    this.model = null;\n\n    this.initialLayerInputs = this.hiddenSizes.map((size) => new Matrix(this.hiddenSizes[0], 1));\n    this.inputLookup = null;\n    this.outputLookup = null;\n    this.initialize();\n  }\n\n  initialize() {\n    this.model = {\n      input: null,\n      hiddenLayers: [],\n      output: null,\n      equations: [],\n      allMatrices: [],\n      equationConnections: []\n    };\n\n    if (this.dataFormatter !== null) {\n      this.inputSize =\n      this.inputRange =\n      this.outputSize = this.dataFormatter.characters.length;\n    }\n\n    if (this.json) {\n      this.fromJSON(this.json);\n    } else {\n      this.mapModel();\n    }\n  }\n\n  createHiddenLayers() {\n    let hiddenSizes = this.hiddenSizes;\n    let model = this.model;\n    let hiddenLayers = model.hiddenLayers;\n    //0 is end, so add 1 to offset\n    hiddenLayers.push(this.getModel(hiddenSizes[0], this.inputSize));\n    let prevSize = hiddenSizes[0];\n\n    for (let d = 1; d < hiddenSizes.length; d++) { // loop over depths\n      let hiddenSize = hiddenSizes[d];\n      hiddenLayers.push(this.getModel(hiddenSize, prevSize));\n      prevSize = hiddenSize;\n    }\n  }\n\n  /**\n   *\n   * @param {Number} hiddenSize\n   * @param {Number} prevSize\n   * @returns {object}\n   */\n  getModel(hiddenSize, prevSize) {\n    return {\n      //wxh\n      weight: new RandomMatrix(hiddenSize, prevSize, 0.08),\n      //whh\n      transition: new RandomMatrix(hiddenSize, hiddenSize, 0.08),\n      //bhh\n      bias: new Matrix(hiddenSize, 1)\n    };\n  }\n\n  /**\n   *\n   * @param {Equation} equation\n   * @param {Matrix} inputMatrix\n   * @param {Matrix} previousResult\n   * @param {Object} hiddenLayer\n   * @returns {Matrix}\n   */\n  getEquation(equation, inputMatrix, previousResult, hiddenLayer) {\n    let relu = equation.relu.bind(equation);\n    let add = equation.add.bind(equation);\n    let multiply = equation.multiply.bind(equation);\n\n    return relu(\n      add(\n        add(\n          multiply(\n            hiddenLayer.weight,\n            inputMatrix\n          ),\n          multiply(\n            hiddenLayer.transition,\n            previousResult\n          )\n        ),\n        hiddenLayer.bias\n      )\n    );\n  }\n\n  createInputMatrix() {\n    //0 is end, so add 1 to offset\n    this.model.input = new RandomMatrix(this.inputRange + 1, this.inputSize, 0.08);\n  }\n\n  createOutputMatrix() {\n    let model = this.model;\n    let outputSize = this.outputSize;\n    let lastHiddenSize = this.hiddenSizes[this.hiddenSizes.length - 1];\n\n    //0 is end, so add 1 to offset\n    //whd\n    model.outputConnector = new RandomMatrix(outputSize + 1, lastHiddenSize, 0.08);\n    //0 is end, so add 1 to offset\n    //bd\n    model.output = new Matrix(outputSize + 1, 1);\n  }\n\n  bindEquation() {\n    let model = this.model;\n    let hiddenSizes = this.hiddenSizes;\n    let hiddenLayers = model.hiddenLayers;\n    let equation = new Equation();\n    let outputs = [];\n    let equationConnection = model.equationConnections.length > 0\n      ? model.equationConnections[model.equationConnections.length - 1]\n      : this.initialLayerInputs\n      ;\n\n      // 0 index\n    let output = this.getEquation(equation, equation.inputMatrixToRow(model.input), equationConnection[0], hiddenLayers[0]);\n    outputs.push(output);\n    // 1+ indices\n    for (let i = 1, max = hiddenSizes.length; i < max; i++) {\n      output = this.getEquation(equation, output, equationConnection[i], hiddenLayers[i]);\n      outputs.push(output);\n    }\n\n    model.equationConnections.push(outputs);\n    equation.add(equation.multiply(model.outputConnector, output), model.output);\n    model.equations.push(equation);\n  }\n\n  mapModel() {\n    let model = this.model;\n    let hiddenLayers = model.hiddenLayers;\n    let allMatrices = model.allMatrices;\n\n    this.createInputMatrix();\n    if (!model.input) throw new Error('net.model.input not set');\n    allMatrices.push(model.input);\n\n    this.createHiddenLayers();\n    if (!model.hiddenLayers.length) throw new Error('net.hiddenLayers not set');\n    for (let i = 0, max = hiddenLayers.length; i < max; i++) {\n      let hiddenMatrix = hiddenLayers[i];\n      for (let property in hiddenMatrix) {\n        if (!hiddenMatrix.hasOwnProperty(property)) continue;\n        allMatrices.push(hiddenMatrix[property]);\n      }\n    }\n\n    this.createOutputMatrix();\n    if (!model.outputConnector) throw new Error('net.model.outputConnector not set');\n    if (!model.output) throw new Error('net.model.output not set');\n\n    allMatrices.push(model.outputConnector);\n    allMatrices.push(model.output);\n  }\n\n  /**\n   *\n   * @param {Number[]} input\n   * @param {Number} [learningRate]\n   * @returns {number}\n   */\n  trainPattern(input, learningRate = null) {\n    const error = this.runInput(input);\n    this.runBackpropagate(input);\n    this.step(learningRate);\n    return error;\n  }\n\n  /**\n   *\n   * @param {Number[]} input\n   * @returns {number}\n   */\n  runInput(input) {\n    this.runs++;\n    let model = this.model;\n    let max = input.length;\n    let log2ppl = 0;\n    let cost = 0;\n    let equation;\n    while (model.equations.length <= input.length + 1) {//last is zero\n      this.bindEquation();\n    }\n    for (let inputIndex = -1, inputMax = input.length; inputIndex < inputMax; inputIndex++) {\n      // start and end tokens are zeros\n      let equationIndex = inputIndex + 1;\n      equation = model.equations[equationIndex];\n\n      let source = (inputIndex === -1 ? 0 : input[inputIndex] + 1); // first step: start with START token\n      let target = (inputIndex === max - 1 ? 0 : input[inputIndex + 1] + 1); // last step: end with END token\n      let output = equation.run(source);\n      // set gradients into log probabilities\n      let logProbabilities = output; // interpret output as log probabilities\n      let probabilities = softmax(output); // compute the softmax probabilities\n\n      log2ppl += -Math.log2(probabilities.weights[target]); // accumulate base 2 log prob and do smoothing\n      cost += -Math.log(probabilities.weights[target]);\n      // write gradients into log probabilities\n      logProbabilities.deltas = probabilities.weights.slice(0);\n      logProbabilities.deltas[target] -= 1;\n    }\n\n    this.totalCost = cost;\n    return Math.pow(2, log2ppl / (max - 1));\n  }\n\n  /**\n   * @param {Number[]} input\n   */\n  runBackpropagate(input) {\n    let i = input.length;\n    let model = this.model;\n    let equations = model.equations;\n    while(i > 0) {\n      equations[i].runBackpropagate(input[i - 1] + 1);\n      i--;\n    }\n    equations[0].runBackpropagate(0);\n  }\n\n  /**\n   *\n   * @param {Number} [learningRate]\n   */\n  step(learningRate = null) {\n    // perform parameter update\n    //TODO: still not sure if this is ready for learningRate\n    let stepSize = this.learningRate;\n    let regc = this.regc;\n    let clipval = this.clipval;\n    let model = this.model;\n    let numClipped = 0;\n    let numTot = 0;\n    let allMatrices = model.allMatrices;\n    for (let matrixIndex = 0; matrixIndex < allMatrices.length; matrixIndex++) {\n      const matrix = allMatrices[matrixIndex];\n      const { weights, deltas }  = matrix;\n      if (!(matrixIndex in this.stepCache)) {\n        this.stepCache[matrixIndex] = zeros(matrix.rows * matrix.columns);\n      }\n      const cache = this.stepCache[matrixIndex];\n      for (let i = 0; i < weights.length; i++) {\n        let r = deltas[i];\n        let w = weights[i];\n        // rmsprop adaptive learning rate\n        cache[i] = cache[i] * this.decayRate + (1 - this.decayRate) * r * r;\n        // gradient clip\n        if (r > clipval) {\n          r = clipval;\n          numClipped++;\n        }\n        if (r < -clipval) {\n          r = -clipval;\n          numClipped++;\n        }\n        numTot++;\n        // update (and regularize)\n        weights[i] = w + -stepSize * r / Math.sqrt(cache[i] + this.smoothEps) - regc * w;\n      }\n    }\n    this.ratioClipped = numClipped / numTot;\n  }\n\n\n  /**\n   *\n   * @returns boolean\n   */\n  get isRunnable(){\n    if(this.model.equations.length === 0){\n      console.error(`No equations bound, did you run train()?`);\n      return false;\n    }\n\n    return true;\n  }\n\n\n  /**\n   *\n   * @param {Number[]|*} [rawInput]\n   * @param {Number} [maxPredictionLength]\n   * @param {Boolean} [isSampleI]\n   * @param {Number} temperature\n   * @returns {*}\n   */\n  run(rawInput = [], maxPredictionLength = 100, isSampleI = false, temperature = 1) {\n    if (!this.isRunnable) return null;\n    const input = this.formatDataIn(rawInput);\n    const model = this.model;\n    const output = [];\n    let i = 0;\n    while (model.equations.length < maxPredictionLength) {\n      this.bindEquation();\n    }\n    while (true) {\n      let previousIndex = (i === 0\n        ? 0\n        : i < input.length\n          ? input[i - 1] + 1\n          : output[i - 1])\n          ;\n      let equation = model.equations[i];\n      // sample predicted letter\n      let outputMatrix = equation.run(previousIndex);\n      let logProbabilities = new Matrix(model.output.rows, model.output.columns);\n      copy(logProbabilities, outputMatrix);\n      if (temperature !== 1 && isSampleI) {\n        /**\n         * scale log probabilities by temperature and re-normalize\n         * if temperature is high, logProbabilities will go towards zero\n         * and the softmax outputs will be more diffuse. if temperature is\n         * very low, the softmax outputs will be more peaky\n         */\n        for (let j = 0, max = logProbabilities.weights.length; j < max; j++) {\n          logProbabilities.weights[j] /= temperature;\n        }\n      }\n\n      let probs = softmax(logProbabilities);\n      let nextIndex = (isSampleI ? sampleI(probs) : maxI(probs));\n\n      i++;\n      if (nextIndex === 0) {\n        // END token predicted, break out\n        break;\n      }\n      if (i >= maxPredictionLength) {\n        // something is wrong\n        break;\n      }\n\n      output.push(nextIndex);\n    }\n\n    /**\n     * we slice the input length here, not because output contains it, but it will be erroneous as we are sending the\n     * network what is contained in input, so the data is essentially guessed by the network what could be next, till it\n     * locks in on a value.\n     * Kind of like this, values are from input:\n     * 0 -> 4 (or in English: \"beginning on input\" -> \"I have no idea? I'll guess what they want next!\")\n     * 2 -> 2 (oh how interesting, I've narrowed down values...)\n     * 1 -> 9 (oh how interesting, I've now know what the values are...)\n     * then the output looks like: [4, 2, 9,...]\n     * so we then remove the erroneous data to get our true output\n     */\n    return this.formatDataOut(\n      input,\n      output\n        .slice(input.length)\n        .map(value => value - 1)\n    );\n  }\n\n  /**\n   *\n   * @param {Object[]|String[]} data an array of objects: `{input: 'string', output: 'string'}` or an array of strings\n   * @param {Object} [options]\n   * @returns {{error: number, iterations: number}}\n   */\n  train(data, options = {}) {\n    options = Object.assign({}, this.constructor.trainDefaults, options);\n    let iterations = options.iterations;\n    let errorThresh = options.errorThresh;\n    let log = options.log === true ? console.log : options.log;\n    let logPeriod = options.logPeriod;\n    let learningRate = options.learningRate || this.learningRate;\n    let callback = options.callback;\n    let callbackPeriod = options.callbackPeriod;\n    let error = Infinity;\n    let i;\n\n    if (this.hasOwnProperty('setupData')) {\n      data = this.setupData(data);\n    }\n\n    if (!options.keepNetworkIntact) {\n      this.initialize();\n    }\n\n    for (i = 0; i < iterations && error > errorThresh; i++) {\n      let sum = 0;\n      for (let j = 0; j < data.length; j++) {\n        let err = this.trainPattern(data[j], learningRate);\n        sum += err;\n      }\n      error = sum / data.length;\n\n      if (isNaN(error)) throw new Error('network error rate is unexpected NaN, check network configurations and try again');\n      if (log && (i % logPeriod == 0)) {\n        log('iterations:', i, 'training error:', error);\n      }\n      if (callback && (i % callbackPeriod == 0)) {\n        callback({ error: error, iterations: i });\n      }\n    }\n\n    return {\n      error: error,\n      iterations: i\n    };\n  }\n\n  /**\n   *\n   * @param data\n   * @returns {\n   *  {\n   *    error: number,\n   *    misclasses: Array\n   *  }\n   * }\n   */\n  test(data) {\n    throw new Error('not yet implemented');\n  }\n\n  /**\n   *\n   * @returns {Object}\n   */\n  toJSON() {\n    const defaults = this.constructor.defaults;\n    let model = this.model;\n    let options = {};\n    for (let p in defaults) {\n      options[p] = this[p];\n    }\n\n    return {\n      type: this.constructor.name,\n      options: options,\n      input: model.input.toJSON(),\n      hiddenLayers: model.hiddenLayers.map((hiddenLayer) => {\n        let layers = {};\n        for (let p in hiddenLayer) {\n          layers[p] = hiddenLayer[p].toJSON();\n        }\n        return layers;\n      }),\n      outputConnector: this.model.outputConnector.toJSON(),\n      output: this.model.output.toJSON()\n    };\n  }\n\n  toJSONString() {\n    return JSON.stringify(this.toJSON());\n  }\n\n  fromJSON(json) {\n    this.json = json;\n    const defaults = this.constructor.defaults;\n    let model = this.model;\n    let options = json.options;\n    let allMatrices = model.allMatrices;\n    model.input = Matrix.fromJSON(json.input);\n    allMatrices.push(model.input);\n    model.hiddenLayers = json.hiddenLayers.map((hiddenLayer) => {\n      let layers = {};\n      for (let p in hiddenLayer) {\n        layers[p] = Matrix.fromJSON(hiddenLayer[p]);\n        allMatrices.push(layers[p]);\n      }\n      return layers;\n    });\n    model.outputConnector = Matrix.fromJSON(json.outputConnector);\n    model.output = Matrix.fromJSON(json.output);\n    allMatrices.push(model.outputConnector);\n    allMatrices.push(model.output);\n\n    for (let p in defaults) {\n      if (!defaults.hasOwnProperty(p)) continue;\n      this[p] = options.hasOwnProperty(p) ? options[p] : defaults[p];\n    }\n\n    if (options.hasOwnProperty('dataFormatter') && options.dataFormatter !== null) {\n      this.dataFormatter = DataFormatter.fromJSON(options.dataFormatter);\n      delete options.dataFormatter;\n    }\n\n    this.bindEquation();\n  }\n\n  fromJSONString(json) {\n    return this.fromJSON(JSON.parse(json));\n  }\n\n  /**\n   *\n   * @returns {Function}\n   */\n  toFunction() {\n    let model = this.model;\n    let equations = this.model.equations;\n    let equation = equations[1];\n    let states = equation.states;\n    let jsonString = JSON.stringify(this.toJSON());\n\n    function matrixOrigin(m, stateIndex) {\n      for (let i = 0, max = states.length; i < max; i++) {\n        let state = states[i];\n\n        if (i === stateIndex) {\n          let j = previousConnectionIndex(m);\n          switch (m) {\n            case state.left:\n              if (j > -1) {\n                return `typeof prevStates[${ j }] === 'object' ? prevStates[${ j }].product : new Matrix(${ m.rows }, ${ m.columns })`;\n              }\n            case state.right:\n              if (j > -1) {\n                return `typeof prevStates[${ j }] === 'object' ? prevStates[${ j }].product : new Matrix(${ m.rows }, ${ m.columns })`;\n              }\n            case state.product:\n              return `new Matrix(${ m.rows }, ${ m.columns })`;\n            default:\n              throw Error('unknown state');\n          }\n        }\n\n        if (m === state.product) return `states[${ i }].product`;\n        if (m === state.right) return `states[${ i }].right`;\n        if (m === state.left) return `states[${ i }].left`;\n      }\n    }\n\n    function previousConnectionIndex(m) {\n      const connection = model.equationConnections[0];\n      const states = equations[0].states;\n      for (let i = 0, max = states.length; i < max; i++) {\n        if (states[i].product === m) {\n          return i;\n        }\n      }\n      return connection.indexOf(m);\n    }\n\n    function matrixToString(m, stateIndex) {\n      if (!m || !m.rows || !m.columns) return 'null';\n\n      if (m === model.input) return `json.input`;\n      if (m === model.outputConnector) return `json.outputConnector`;\n      if (m === model.output) return `json.output`;\n\n      for (let i = 0, max = model.hiddenLayers.length; i < max; i++) {\n        let hiddenLayer = model.hiddenLayers[i];\n        for (let p in hiddenLayer) {\n          if (!hiddenLayer.hasOwnProperty(p)) continue;\n          if (hiddenLayer[p] !== m) continue;\n          return `json.hiddenLayers[${ i }].${ p }`;\n        }\n      }\n\n      return matrixOrigin(m, stateIndex);\n    }\n\n    function toInner(fnString) {\n      // crude, but should be sufficient for now\n      // function() { body }\n      fnString = fnString.toString().split('{');\n      fnString.shift();\n      // body }\n      fnString = fnString.join('{');\n      fnString = fnString.split('}');\n      fnString.pop();\n      // body\n      return fnString.join('}').split('\\n').join('\\n        ')\n        .replace('product.deltas[i] = 0;', '')\n        .replace('product.deltas[column] = 0;', '')\n        .replace('left.deltas[leftIndex] = 0;', '')\n        .replace('right.deltas[rightIndex] = 0;', '')\n        .replace('product.deltas = left.deltas.slice(0);', '');\n    }\n\n    function fileName(fnName) {\n      return `src/recurrent/matrix/${ fnName.replace(/[A-Z]/g, function(value) { return '-' + value.toLowerCase(); }) }.js`;\n    }\n\n    let statesRaw = [];\n    let usedFunctionNames = {};\n    let innerFunctionsSwitch = [];\n    for (let i = 0, max = states.length; i < max; i++) {\n      let state = states[i];\n      statesRaw.push(`states[${ i }] = {\n      name: '${ state.forwardFn.name }',\n      left: ${ matrixToString(state.left, i) },\n      right: ${ matrixToString(state.right, i) },\n      product: ${ matrixToString(state.product, i) }\n    }`);\n\n      let fnName = state.forwardFn.name;\n      if (!usedFunctionNames[fnName]) {\n        usedFunctionNames[fnName] = true;\n        innerFunctionsSwitch.push(\n          `        case '${ fnName }': //compiled from ${ fileName(fnName) }\n          ${ toInner(state.forwardFn.toString()) }\n          break;`\n        );\n      }\n    }\n\n    const src = `\n  if (typeof rawInput === 'undefined') rawInput = [];\n  if (typeof maxPredictionLength === 'undefined') maxPredictionLength = 100;\n  if (typeof isSampleI === 'undefined') isSampleI = false;\n  if (typeof temperature === 'undefined') temperature = 1;\n  ${ (this.dataFormatter !== null) ? this.dataFormatter.toFunctionString() : '' }\n  \n  var input = ${\n      (this.dataFormatter !== null && typeof this.formatDataIn === 'function')\n        ? 'formatDataIn(rawInput)' \n        : 'rawInput'\n    };\n  var json = ${ jsonString };\n  var _i = 0;\n  var output = [];\n  var states = [];\n  var prevStates;\n  while (true) {\n    var previousIndex = (_i === 0\n        ? 0\n        : _i < input.length\n          ? input[_i - 1] + 1\n          : output[_i - 1])\n          ;\n    var rowPluckIndex = previousIndex;\n    prevStates = states;\n    states = [];\n    ${ statesRaw.join(';\\n    ') };\n    for (var stateIndex = 0, stateMax = ${ statesRaw.length }; stateIndex < stateMax; stateIndex++) {\n      var state = states[stateIndex];\n      var product = state.product;\n      var left = state.left;\n      var right = state.right;\n      \n      switch (state.name) {\n${ innerFunctionsSwitch.join('\\n') }\n      }\n    }\n    \n    var logProbabilities = state.product;\n    if (temperature !== 1 && isSampleI) {\n      for (var q = 0, nq = logProbabilities.weights.length; q < nq; q++) {\n        logProbabilities.weights[q] /= temperature;\n      }\n    }\n\n    var probs = softmax(logProbabilities);\n    var nextIndex = isSampleI ? sampleI(probs) : maxI(probs);\n    \n    _i++;\n    if (nextIndex === 0) {\n      break;\n    }\n    if (_i >= maxPredictionLength) {\n      break;\n    }\n\n    output.push(nextIndex);\n  }\n  ${ (this.dataFormatter !== null && typeof this.formatDataOut === 'function') \n      ? 'return formatDataOut(input, output.slice(input.length).map(function(value) { return value - 1; }))'\n      : 'return output.slice(input.length).map(function(value) { return value - 1; })' };\n  function Matrix(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    this.weights = zeros(rows * columns);\n  }\n  ${ this.dataFormatter !== null && typeof this.formatDataIn === 'function'\n      ? `function formatDataIn(input, output) { ${\n          toInner(this.formatDataIn.toString())\n            .replace(/this[.]dataFormatter[\\n\\s]+[.]/g, '')\n            .replace(/this[.]dataFormatter[.]/g, '')\n            .replace(/this[.]dataFormatter/g, 'true')\n        } }`\n      : '' }\n  ${ this.dataFormatter !== null && typeof this.formatDataOut === 'function'\n        ? `function formatDataOut(input, output) { ${\n            toInner(this.formatDataOut.toString())\n              .replace(/this[.]dataFormatter[\\n\\s]+[.]/g, '')\n              .replace(/this[.]dataFormatter[.]/g, '')\n              .replace(/this[.]dataFormatter/g, 'true')\n          } }` \n        : '' }\n  ${ zeros.toString() }\n  ${ softmax.toString().replace('_2.default', 'Matrix') }\n  ${ randomF.toString() }\n  ${ sampleI.toString() }\n  ${ maxI.toString() }`;\n    return new Function('rawInput', 'maxPredictionLength', 'isSampleI', 'temperature', src);\n  }\n}\n\nRNN.defaults = {\n  inputSize: 20,\n  inputRange: 20,\n  hiddenSizes:[20,20],\n  outputSize: 20,\n  learningRate: 0.01,\n  decayRate: 0.999,\n  smoothEps: 1e-8,\n  regc: 0.000001,\n  clipval: 5,\n  json: null,\n  /**\n   *\n   * @param {*[]} data\n   * @returns {Number[]}\n   */\n  setupData: function(data) {\n    if (\n      typeof data[0] !== 'string'\n      && !Array.isArray(data[0])\n      && (\n        !data[0].hasOwnProperty('input')\n        || !data[0].hasOwnProperty('output')\n      )\n    ) {\n      return data;\n    }\n    let values = [];\n    const result = [];\n    if (typeof data[0] === 'string' || Array.isArray(data[0])) {\n      if (this.dataFormatter === null) {\n        for (let i = 0; i < data.length; i++) {\n          values.push(data[i]);\n        }\n        this.dataFormatter = new DataFormatter(values);\n      }\n      for (let i = 0, max = data.length; i < max; i++) {\n        result.push(this.formatDataIn(data[i]));\n      }\n    } else {\n      if (this.dataFormatter === null) {\n        for (let i = 0; i < data.length; i++) {\n          values.push(data[i].input);\n          values.push(data[i].output);\n        }\n        this.dataFormatter = DataFormatter.fromArrayInputOutput(values);\n      }\n      for (let i = 0, max = data.length; i < max; i++) {\n        result.push(this.formatDataIn(data[i].input, data[i].output));\n      }\n    }\n    return result;\n  },\n  /**\n   *\n   * @param {*[]} input\n   * @param {*[]} output\n   * @returns {Number[]}\n   */\n  formatDataIn: function(input, output = null) {\n    if (this.dataFormatter !== null) {\n      if (this.dataFormatter.indexTable.hasOwnProperty('stop-input')) {\n        return this.dataFormatter.toIndexesInputOutput(input, output);\n      } else {\n        return this.dataFormatter.toIndexes(input);\n      }\n    }\n    return input;\n  },\n  /**\n   *\n   * @param {Number[]} input\n   * @param {Number[]} output\n   * @returns {*}\n   */\n  formatDataOut: function(input, output) {\n    if (this.dataFormatter !== null) {\n      return this.dataFormatter\n        .toCharacters(output)\n        .join('');\n    }\n    return output;\n  },\n  dataFormatter: null\n};\n\nRNN.trainDefaults = {\n  iterations: 20000,\n  errorThresh: 0.005,\n  log: false,\n  logPeriod: 10,\n  learningRate: 0.3,\n  callback: null,\n  callbackPeriod: 10,\n  keepNetworkIntact: false\n};\n"]}