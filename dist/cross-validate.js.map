{"version":3,"sources":["../src/cross-validate.js"],"names":["CrossValidate","Classifier","options","json","trainOpts","trainSet","testSet","classifier","beginTrain","Date","now","trainingStats","train","beginTest","testStats","test","endTest","stats","Object","assign","trainTime","testTime","iterations","error","total","learningRate","hiddenLayers","network","toJSON","array","i","length","j","Math","floor","random","temp","data","k","Error","size","constructor","Array","shuffleArray","newData","keys","forEach","key","avgs","binaryStats","truePos","trueNeg","falsePos","falseNeg","results","stat","isBinary","dclone","slice","splice","result","testPartition","hasOwnProperty","push","precision","recall","accuracy","testSize","trainSize","sets","fromJSON","crossValidateJson","reduce","prev","cur","Infinity","instance"],"mappings":"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","file":"cross-validate.js","sourcesContent":["export default class CrossValidate {\r\n\r\n  /**\r\n   *\r\n   * @param {NeuralNetwork|constructor} Classifier\r\n   * @param {object} [options]\r\n   */\r\n  constructor(Classifier, options) {\r\n    this.Classifier = Classifier;\r\n    this.options = options;\r\n    this.json = null;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} trainOpts\r\n   * @param {object} trainSet\r\n   * @param {object} testSet\r\n   * @returns {void|*}\r\n   */\r\n  testPartition(trainOpts, trainSet, testSet) {\r\n    const classifier = new this.Classifier(this.options);\r\n    const beginTrain = Date.now();\r\n    const trainingStats = classifier.train(trainSet, trainOpts);\r\n    const beginTest = Date.now();\r\n    const testStats = classifier.test(testSet);\r\n    const endTest = Date.now();\r\n    const stats = Object.assign({}, testStats, {\r\n      trainTime: beginTest - beginTrain,\r\n      testTime: endTest - beginTest,\r\n      iterations: trainingStats.iterations,\r\n      error: trainingStats.error,\r\n      total: testStats.total,\r\n      learningRate: classifier.trainOpts.learningRate,\r\n      hiddenLayers: classifier.hiddenLayers,\r\n      network: classifier.toJSON()\r\n    });\r\n\r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   * Randomize array element order in-place.\r\n   * Using Durstenfeld shuffle algorithm.\r\n   * source: http://stackoverflow.com/a/12646864/1324039\r\n   */\r\n  shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n      let j = Math.floor(Math.random() * (i + 1));\r\n      let temp = array[i];\r\n      array[i] = array[j];\r\n      array[j] = temp;\r\n    }\r\n    return array;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} trainOpts\r\n   * @param {number} [k]\r\n   * @returns {\r\n   *  {\r\n   *    avgs: {\r\n   *      error: number,\r\n   *      trainTime: number,\r\n   *      testTime: number,\r\n   *      iterations: number,\r\n   *      error: number\r\n   *    },\r\n   *    stats: {\r\n   *      truePos: number,\r\n   *      trueNeg: number,\r\n   *      falsePos: number,\r\n   *      falseNeg: number,\r\n   *      total: number\r\n   *    },\r\n   *    sets: Array\r\n   *  }\r\n   * }\r\n   */\r\n  train(data, trainOpts = {}, k = 4) {\r\n    if (data.length < k) {\r\n      throw new Error(`Training set size is too small for ${ data.length } k folds of ${ k }`);\r\n    }\r\n\r\n    const size = data.length / k;\r\n\r\n    if (data.constructor === Array) {\r\n      this.shuffleArray(data);\r\n    } else {\r\n      const newData = {};\r\n      this.shuffleArray(Object.keys(data)).forEach((key) => {\r\n        newData[key] = data[key];\r\n      });\r\n      data = newData;\r\n    }\r\n\r\n    const avgs = {\r\n      trainTime: 0,\r\n      testTime: 0,\r\n      iterations: 0,\r\n      error: 0\r\n    };\r\n\r\n    const stats = {\r\n      total: 0\r\n    };\r\n\r\n    const binaryStats = {\r\n      total: 0,\r\n      truePos: 0,\r\n      trueNeg: 0,\r\n      falsePos: 0,\r\n      falseNeg: 0\r\n    };\r\n\r\n    const results = [];\r\n    let stat;\r\n    let isBinary = null;\r\n\r\n    for (let i = 0; i < k; i++) {\r\n      const dclone = data.slice(0);\r\n      const testSet = dclone.splice(i * size, size);\r\n      const trainSet = dclone;\r\n      const result = this.testPartition(trainOpts, trainSet, testSet);\r\n\r\n      if (isBinary === null) {\r\n        isBinary =\r\n          result.hasOwnProperty('falseNeg')\r\n          && result.hasOwnProperty('falsePos')\r\n          && result.hasOwnProperty('trueNeg')\r\n          && result.hasOwnProperty('truePos');\r\n        if (isBinary) {\r\n          Object.assign(stats, binaryStats);\r\n        }\r\n      }\r\n\r\n      for (stat in avgs) {\r\n        if (stat in avgs) {\r\n          avgs[stat] += result[stat];\r\n        }\r\n      }\r\n\r\n      for (stat in stats) {\r\n        if (stat in stats) {\r\n          stats[stat] += result[stat];\r\n        }\r\n      }\r\n\r\n      results.push(result);\r\n    }\r\n\r\n    for (stat in avgs) {\r\n      if (stat in avgs) {\r\n        avgs[stat] /= k;\r\n      }\r\n    }\r\n\r\n    if (isBinary) {\r\n      stats.precision = stats.truePos / (stats.truePos + stats.falsePos);\r\n      stats.recall = stats.truePos / (stats.truePos + stats.falseNeg);\r\n      stats.accuracy = (stats.trueNeg + stats.truePos) / stats.total;\r\n    }\r\n\r\n    stats.testSize = size;\r\n    stats.trainSize = data.length - size;\r\n\r\n\r\n    return this.json = {\r\n      avgs: avgs,\r\n      stats: stats,\r\n      sets: results\r\n    };\r\n  }\r\n\r\n  toNeuralNetwork() {\r\n    return this.fromJSON(this.json);\r\n  }\r\n\r\n  toJSON() {\r\n    return this.json;\r\n  }\r\n\r\n  fromJSON(crossValidateJson) {\r\n    const Classifier = this.Classifier;\r\n    const json = crossValidateJson.sets.reduce((prev, cur) => prev.error < cur.error ? prev : cur, {error: Infinity}).network;\r\n    if (Classifier.fromJSON) {\r\n      return Classifier.fromJSON(json);\r\n    }\r\n    const instance = new Classifier();\r\n    instance.fromJSON(json);\r\n    return instance;\r\n  }\r\n}\r\n"]}