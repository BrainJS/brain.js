{"version":3,"sources":["../../src/utilities/data-formatter.js"],"names":["DataFormatter","values","maxThreshold","undefined","indexTable","characterTable","characters","specialIndexes","buildCharactersFromIterable","buildTables","tempCharactersTable","dataFormatterIndex","dataFormatterLength","length","hasOwnProperty","characterIndex","charactersLength","character","push","value","result","i","max","index","Error","value1","value2","toIndexes","split","concat","indices","toCharacters","join","addSpecial","special","specialIndex","output","sum","indexOf","JSON","stringify","toString","replace","toIndexesInputOutput","String","fromCharCode","dataFormatter","fromAllPrintable","addInputOutput","string","prototype","Set","array","filter","v","a","sort","json"],"mappings":"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","file":"data-formatter.js","sourcesContent":["/**\r\n *\r\n * @param {String[]|Number[]} values\r\n * @param maxThreshold\r\n * @constructor\r\n */\r\nexport default class DataFormatter {\r\n  constructor(values, maxThreshold = 0) {\r\n    if (values === undefined) return;\r\n\r\n    this.values = values;\r\n    // go over all characters and keep track of all unique ones seen\r\n    // count up all characters\r\n    this.indexTable = {};\r\n    this.characterTable = {};\r\n    this.characters = [];\r\n    this.specialIndexes = [];\r\n    this.buildCharactersFromIterable(values);\r\n    this.buildTables(maxThreshold);\r\n  }\r\n\r\n  buildCharactersFromIterable(values) {\r\n    let tempCharactersTable = {};\r\n    for (let dataFormatterIndex = 0, dataFormatterLength = values.length; dataFormatterIndex < dataFormatterLength; dataFormatterIndex++) {\r\n      let characters = values[dataFormatterIndex];\r\n\r\n      if (characters.hasOwnProperty('length')) {\r\n        for (let characterIndex = 0, charactersLength = characters.length; characterIndex < charactersLength; characterIndex++) {\r\n          let character = characters[characterIndex];\r\n          if (tempCharactersTable.hasOwnProperty(character)) continue;\r\n          tempCharactersTable[character] = true;\r\n          this.characters.push(character);\r\n        }\r\n      } else {\r\n        let character = values[dataFormatterIndex];\r\n        if (tempCharactersTable.hasOwnProperty(character)) continue;\r\n        tempCharactersTable[dataFormatterIndex] = true;\r\n        this.characters.push(character);\r\n      }\r\n    }\r\n  }\r\n\r\n  buildTables(maxThreshold) {\r\n    // filter by count threshold and create pointers\r\n    let charactersLength = this.characters.length;\r\n    for(let characterIndex = 0; characterIndex < charactersLength; characterIndex++) {\r\n      let character = this.characters[characterIndex];\r\n      if(characterIndex >= maxThreshold) {\r\n        // add character to dataFormatter\r\n        this.indexTable[character] = characterIndex;\r\n        this.characterTable[characterIndex] = character;\r\n      }\r\n    }\r\n  }\r\n\r\n  toIndexes(value, maxThreshold = 0) {\r\n    let result = [];\r\n    let indexTable = this.indexTable;\r\n\r\n    for (let i = 0, max = value.length; i < max; i++) {\r\n      let character = value[i];\r\n      let index = indexTable[character];\r\n      if (index === undefined) {\r\n        if (indexTable['unrecognized']) {\r\n          index = indexTable['unrecognized'];\r\n        } else {\r\n          throw new Error(`unrecognized character \"${ character }\"`);\r\n        }\r\n      }\r\n      if (index < maxThreshold) continue;\r\n      result.push(index);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  toIndexesInputOutput(value1, value2 = null, maxThreshold = 0) {\r\n    let result;\r\n    if (typeof value1 === 'string') {\r\n      result = this.toIndexes(value1.split('').concat(['stop-input', 'start-output']), maxThreshold);\r\n    } else {\r\n      result = this.toIndexes(value1.concat(['stop-input', 'start-output']), maxThreshold);\r\n    }\r\n    \r\n    if (value2 === null) return result;\r\n\r\n    if (typeof value2 === 'string') {\r\n      return result.concat(this.toIndexes(value2.split(''), maxThreshold));\r\n    } else {\r\n      return result.concat(this.toIndexes(value2, maxThreshold));\r\n    }\r\n  }\r\n\r\n  toCharacters(indices, maxThreshold = 0) {\r\n    const result = [];\r\n    const characterTable = this.characterTable;\r\n    const indexTable = this.indexTable;\r\n\r\n    for (let i = 0, max = indices.length; i < max; i++) {\r\n      let index = indices[i];\r\n      if (index < maxThreshold) continue;\r\n      let character = characterTable[index];\r\n      if (character === undefined) {\r\n        if (indexTable['unrecognized']) {\r\n          character = characterTable[indexTable['unrecognized']];\r\n        } else {\r\n          throw new Error(`unrecognized index \"${ index }\"`);\r\n        }\r\n      } else if (character !== null) {\r\n        result.push(character);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  toString(indices, maxThreshold) {\r\n    return this.toCharacters(indices, maxThreshold).join('');\r\n  }\r\n\r\n  addInputOutput() {\r\n    this.addSpecial('stop-input');\r\n    this.addSpecial('start-output');\r\n  }\r\n\r\n  addUnrecognized() {\r\n    this.addSpecial('unrecognized');\r\n  }\r\n\r\n  static fromAllPrintable(maxThreshold, values = ['\\n']) {\r\n    for(let i = 32; i <= 126; i++) {\r\n      values.push(String.fromCharCode(i));\r\n    }\r\n    return new DataFormatter(values, maxThreshold);\r\n  }\r\n\r\n  static fromAllPrintableInputOutput(maxThreshold, values = ['\\n']) {\r\n    const dataFormatter = DataFormatter.fromAllPrintable(maxThreshold, values);\r\n    dataFormatter.addInputOutput();\r\n    return dataFormatter;\r\n  }\r\n\r\n  static fromStringInputOutput(string, maxThreshold) {\r\n    const values = String.prototype.concat(...new Set(string));\r\n    const dataFormatter = new DataFormatter(values, maxThreshold);\r\n    dataFormatter.addInputOutput();\r\n    return dataFormatter;\r\n  }\r\n\r\n  static fromArrayInputOutput(array, maxThreshold) {\r\n    const dataFormatter = new DataFormatter(array.filter((v, i, a) => a.indexOf(v) === i).sort(), maxThreshold);\r\n    dataFormatter.addInputOutput();\r\n    return dataFormatter;\r\n  }\r\n\r\n  static fromString(string, maxThreshold) {\r\n    const values = String.prototype.concat(...new Set(string));\r\n    return new DataFormatter(values, maxThreshold);\r\n  }\r\n\r\n  static fromJSON(json) {\r\n    const dataFormatter = new DataFormatter();\r\n    dataFormatter.indexTable = json.indexTable;\r\n    dataFormatter.characterTable = json.characterTable;\r\n    dataFormatter.values = json.values;\r\n    dataFormatter.characters = json.characters;\r\n    dataFormatter.specialIndexes = json.specialIndexes;\r\n    return dataFormatter;\r\n  }\r\n\r\n  addSpecial(special, character = null) {\r\n    let specialIndex = this.indexTable[special] = this.characters.length;\r\n    this.characterTable[specialIndex] = character;\r\n    this.specialIndexes.push(this.characters.length);\r\n    this.characters.push(special);\r\n  }\r\n\r\n  countSpecial(output) {\r\n    let sum = 0;\r\n    for (let i = 0; i < this.specialIndexes; i++) {\r\n      let index = -1;\r\n      while (index = output.indexOf(this.specialIndexes[i], index) > -1) {\r\n        sum++;\r\n      }\r\n    }\r\n    return sum;\r\n  }\r\n\r\n  toFunctionString() {\r\n    return `\r\nvar characterTable = ${ JSON.stringify(this.characterTable) };\r\nvar indexTable = ${ JSON.stringify(this.indexTable) };\r\nvar characters = ${ JSON.stringify(this.characters) };\r\n${ this.toIndexes.toString()\r\n      .replace(/(let|var) indexTable = this[.]indexTable;\\n/, '')\r\n      .replace(/this[.]/g, '') }\r\n${ this.toIndexesInputOutput.toString().replace(/this[.]/g, '') }\r\n${ this.toCharacters.toString()\r\n      .replace(/(let|var) characterTable = this[.]characterTable;\\n/g, '')\r\n      .replace(/this[.]/, '') }\r\n`;\r\n  }\r\n}\r\n"]}