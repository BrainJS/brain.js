// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"I3OM":[function(require,module,exports) {
/**
 * Leaky Relu Activation, aka Leaky Rectified Linear Unit Activation
 * @description https://en.wikipedia.org/wiki/Rectifier_(neural_networks)
 * @param weight
 * @returns {number}
 */
function activate(weight) {
  return weight > 0 ? weight : 0.01 * weight;
}
/**
 * Leaky Relu derivative
 * @param weight
 * @param error
 * @returns {number}
 */


function measure(weight, error) {
  return weight > 0 ? error : 0.01 * error;
}

module.exports = {
  activate: activate,
  measure: measure
};
},{}],"kBuR":[function(require,module,exports) {
/**
 * Relu Activation, aka Rectified Linear Unit Activation
 * @description https://en.wikipedia.org/wiki/Rectifier_(neural_networks)
 * @param weight
 * @returns {number}
 */
function activate(weight) {
  return Math.max(0, weight);
}
/**
 * Relu derivative
 * @param weight
 * @param delta
 * @returns {number}
 */


function measure(weight, delta) {
  if (weight <= 0) {
    return 0;
  }

  return delta;
}

module.exports = {
  activate: activate,
  measure: measure
};
},{}],"thFH":[function(require,module,exports) {
/**
 * sigmoid activation
 * @param value
 * @returns {number}
 */
function activate(value) {
  return 1 / (1 + Math.exp(-value));
}
/**
 * sigmoid derivative
 * @param weight
 * @param error
 * @returns {number}
 */


function measure(weight, error) {
  return weight * (1 - weight) * error;
}

module.exports = {
  activate: activate,
  measure: measure
};
},{}],"v3MV":[function(require,module,exports) {
/**
 *
 * @param weight
 * @returns {number}
 */
function activate(weight) {
  return Math.tanh(weight);
}
/**
 * @description grad for z = tanh(x) is (1 - z^2)
 * @param weight
 * @param error
 * @returns {number}
 */


function measure(weight, error) {
  return (1 - weight * weight) * error;
}

module.exports = {
  activate: activate,
  measure: measure
};
},{}],"l4UD":[function(require,module,exports) {
var leakyRelu = require('./leaky-relu');

var relu = require('./relu');

var sigmoid = require('./sigmoid');

var tanh = require('./tanh');

module.exports = {
  leakyRelu: leakyRelu,
  relu: relu,
  sigmoid: sigmoid,
  tanh: tanh
};
},{"./leaky-relu":"I3OM","./relu":"kBuR","./sigmoid":"thFH","./tanh":"v3MV"}],"wYjf":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CrossValidate =
/*#__PURE__*/
function () {
  /**
   *
   * @param {NeuralNetwork|constructor} Classifier
   * @param {object} [options]
   */
  function CrossValidate(Classifier, options) {
    _classCallCheck(this, CrossValidate);

    this.Classifier = Classifier;
    this.options = options;
    this.json = null;
  }
  /**
   *
   * @param {object} trainOpts
   * @param {object} trainSet
   * @param {object} testSet
   * @returns {void|*}
   */


  _createClass(CrossValidate, [{
    key: "testPartition",
    value: function testPartition(trainOpts, trainSet, testSet) {
      var classifier = new this.Classifier(this.options);
      var beginTrain = Date.now();
      var trainingStats = classifier.train(trainSet, trainOpts);
      var beginTest = Date.now();
      var testStats = classifier.test(testSet);
      var endTest = Date.now();
      var stats = Object.assign({}, testStats, {
        trainTime: beginTest - beginTrain,
        testTime: endTest - beginTest,
        iterations: trainingStats.iterations,
        error: trainingStats.error,
        total: testStats.total,
        learningRate: classifier.trainOpts.learningRate,
        hiddenLayers: classifier.hiddenLayers,
        network: classifier.toJSON()
      });
      return stats;
    }
    /**
     * Randomize array element order in-place.
     * Using Durstenfeld shuffle algorithm.
     * source: http://stackoverflow.com/a/12646864/1324039
     */

  }, {
    key: "shuffleArray",
    value: function shuffleArray(array) {
      for (var i = array.length - 1; i > 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = array[i];
        array[i] = array[j];
        array[j] = temp;
      }

      return array;
    }
    /**
     *
     * @param {object} data
     * @param {object} trainOpts
     * @param {number} [k]
     * @returns {
     *  {
     *    avgs: {
     *      error: number,
     *      trainTime: number,
     *      testTime: number,
     *      iterations: number,
     *      error: number
     *    },
     *    stats: {
     *      truePos: number,
     *      trueNeg: number,
     *      falsePos: number,
     *      falseNeg: number,
     *      total: number
     *    },
     *    sets: Array
     *  }
     * }
     */

  }, {
    key: "train",
    value: function train(data) {
      var trainOpts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var k = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;

      if (data.length < k) {
        throw new Error("Training set size is too small for ".concat(data.length, " k folds of ").concat(k));
      }

      var size = data.length / k;

      if (data.constructor === Array) {
        this.shuffleArray(data);
      } else {
        var newData = {};
        this.shuffleArray(Object.keys(data)).forEach(function (key) {
          newData[key] = data[key];
        });
        data = newData;
      }

      var avgs = {
        trainTime: 0,
        testTime: 0,
        iterations: 0,
        error: 0
      };
      var stats = {
        total: 0
      };
      var binaryStats = {
        total: 0,
        truePos: 0,
        trueNeg: 0,
        falsePos: 0,
        falseNeg: 0
      };
      var results = [];
      var stat;
      var isBinary = null;

      for (var i = 0; i < k; i++) {
        var dclone = data.slice(0);
        var testSet = dclone.splice(i * size, size);
        var trainSet = dclone;
        var result = this.testPartition(trainOpts, trainSet, testSet);

        if (isBinary === null) {
          isBinary = result.hasOwnProperty('falseNeg') && result.hasOwnProperty('falsePos') && result.hasOwnProperty('trueNeg') && result.hasOwnProperty('truePos');

          if (isBinary) {
            Object.assign(stats, binaryStats);
          }
        }

        for (stat in avgs) {
          if (stat in avgs) {
            avgs[stat] += result[stat];
          }
        }

        for (stat in stats) {
          if (stat in stats) {
            stats[stat] += result[stat];
          }
        }

        results.push(result);
      }

      for (stat in avgs) {
        if (stat in avgs) {
          avgs[stat] /= k;
        }
      }

      if (isBinary) {
        stats.precision = stats.truePos / (stats.truePos + stats.falsePos);
        stats.recall = stats.truePos / (stats.truePos + stats.falseNeg);
        stats.accuracy = (stats.trueNeg + stats.truePos) / stats.total;
      }

      stats.testSize = size;
      stats.trainSize = data.length - size;
      return this.json = {
        avgs: avgs,
        stats: stats,
        sets: results
      };
    }
  }, {
    key: "toNeuralNetwork",
    value: function toNeuralNetwork() {
      return this.fromJSON(this.json);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.json;
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(crossValidateJson) {
      var Classifier = this.Classifier;
      var json = crossValidateJson.sets.reduce(function (prev, cur) {
        return prev.error < cur.error ? prev : cur;
      }, {
        error: Infinity
      }).network;

      if (Classifier.fromJSON) {
        return Classifier.fromJSON(json);
      }

      var instance = new Classifier();
      instance.fromJSON(json);
      return instance;
    }
  }]);

  return CrossValidate;
}();

module.exports = CrossValidate;
},{}],"GwyX":[function(require,module,exports) {
var define;
var global = arguments[3];
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * gpu.js
 * http://gpu.rocks/
 *
 * GPU Accelerated JavaScript
 *
 * @version 2.6.2
 * @date Sun Jan 19 2020 07:44:57 GMT-0500 (Eastern Standard Time)
 *
 * @license MIT
 * The MIT License
 *
 * Copyright (c) 2020 gpu.js Team
 */
(function (f) {
  if ((typeof exports === "undefined" ? "undefined" : _typeof(exports)) === "object" && typeof module !== "undefined") {
    module.exports = f();
  } else if (typeof define === "function" && define.amd) {
    define([], f);
  } else {
    var g;

    if (typeof window !== "undefined") {
      g = window;
    } else if (typeof global !== "undefined") {
      g = global;
    } else if (typeof self !== "undefined") {
      g = self;
    } else {
      g = this;
    }

    g.GPU = f();
  }
})(function () {
  var define, module, exports;
  return function () {
    function r(e, n, t) {
      function o(i, f) {
        if (!n[i]) {
          if (!e[i]) {
            var c = "function" == typeof require && require;
            if (!f && c) return c(i, !0);
            if (u) return u(i, !0);
            var a = new Error("Cannot find module '" + i + "'");
            throw a.code = "MODULE_NOT_FOUND", a;
          }

          var p = n[i] = {
            exports: {}
          };
          e[i][0].call(p.exports, function (r) {
            var n = e[i][1][r];
            return o(n || r);
          }, p, p.exports, r, e, n, t);
        }

        return n[i].exports;
      }

      for (var u = "function" == typeof require && require, i = 0; i < t.length; i++) {
        o(t[i]);
      }

      return o;
    }

    return r;
  }()({
    1: [function (require, module, exports) {
      (function (global, factory) {
        _typeof(exports) === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global.acorn = {}));
      })(this, function (exports) {
        'use strict';

        var reservedWords = {
          3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
          5: "class enum extends super const export import",
          6: "enum",
          strict: "implements interface let package private protected public static yield",
          strictBind: "eval arguments"
        };
        var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
        var keywords = {
          5: ecma5AndLessKeywords,
          "5module": ecma5AndLessKeywords + " export import",
          6: ecma5AndLessKeywords + " const class extends export import super"
        };
        var keywordRelationalOperator = /^in(stanceof)?$/;
        var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEF\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7C6\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB67\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
        var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
        var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
        var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
        nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
        var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 477, 28, 11, 0, 9, 21, 155, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 12, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 0, 33, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 0, 161, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 270, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 754, 9486, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541];
        var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 525, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 4, 9, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 232, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 792487, 239];

        function isInAstralSet(code, set) {
          var pos = 0x10000;

          for (var i = 0; i < set.length; i += 2) {
            pos += set[i];

            if (pos > code) {
              return false;
            }

            pos += set[i + 1];

            if (pos >= code) {
              return true;
            }
          }
        }

        function isIdentifierStart(code, astral) {
          if (code < 65) {
            return code === 36;
          }

          if (code < 91) {
            return true;
          }

          if (code < 97) {
            return code === 95;
          }

          if (code < 123) {
            return true;
          }

          if (code <= 0xffff) {
            return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
          }

          if (astral === false) {
            return false;
          }

          return isInAstralSet(code, astralIdentifierStartCodes);
        }

        function isIdentifierChar(code, astral) {
          if (code < 48) {
            return code === 36;
          }

          if (code < 58) {
            return true;
          }

          if (code < 65) {
            return false;
          }

          if (code < 91) {
            return true;
          }

          if (code < 97) {
            return code === 95;
          }

          if (code < 123) {
            return true;
          }

          if (code <= 0xffff) {
            return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
          }

          if (astral === false) {
            return false;
          }

          return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
        }

        var TokenType = function TokenType(label, conf) {
          if (conf === void 0) conf = {};
          this.label = label;
          this.keyword = conf.keyword;
          this.beforeExpr = !!conf.beforeExpr;
          this.startsExpr = !!conf.startsExpr;
          this.isLoop = !!conf.isLoop;
          this.isAssign = !!conf.isAssign;
          this.prefix = !!conf.prefix;
          this.postfix = !!conf.postfix;
          this.binop = conf.binop || null;
          this.updateContext = null;
        };

        function binop(name, prec) {
          return new TokenType(name, {
            beforeExpr: true,
            binop: prec
          });
        }

        var beforeExpr = {
          beforeExpr: true
        },
            startsExpr = {
          startsExpr: true
        };
        var keywords$1 = {};

        function kw(name, options) {
          if (options === void 0) options = {};
          options.keyword = name;
          return keywords$1[name] = new TokenType(name, options);
        }

        var types = {
          num: new TokenType("num", startsExpr),
          regexp: new TokenType("regexp", startsExpr),
          string: new TokenType("string", startsExpr),
          name: new TokenType("name", startsExpr),
          eof: new TokenType("eof"),
          bracketL: new TokenType("[", {
            beforeExpr: true,
            startsExpr: true
          }),
          bracketR: new TokenType("]"),
          braceL: new TokenType("{", {
            beforeExpr: true,
            startsExpr: true
          }),
          braceR: new TokenType("}"),
          parenL: new TokenType("(", {
            beforeExpr: true,
            startsExpr: true
          }),
          parenR: new TokenType(")"),
          comma: new TokenType(",", beforeExpr),
          semi: new TokenType(";", beforeExpr),
          colon: new TokenType(":", beforeExpr),
          dot: new TokenType("."),
          question: new TokenType("?", beforeExpr),
          arrow: new TokenType("=>", beforeExpr),
          template: new TokenType("template"),
          invalidTemplate: new TokenType("invalidTemplate"),
          ellipsis: new TokenType("...", beforeExpr),
          backQuote: new TokenType("`", startsExpr),
          dollarBraceL: new TokenType("${", {
            beforeExpr: true,
            startsExpr: true
          }),
          eq: new TokenType("=", {
            beforeExpr: true,
            isAssign: true
          }),
          assign: new TokenType("_=", {
            beforeExpr: true,
            isAssign: true
          }),
          incDec: new TokenType("++/--", {
            prefix: true,
            postfix: true,
            startsExpr: true
          }),
          prefix: new TokenType("!/~", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          logicalOR: binop("||", 1),
          logicalAND: binop("&&", 2),
          bitwiseOR: binop("|", 3),
          bitwiseXOR: binop("^", 4),
          bitwiseAND: binop("&", 5),
          equality: binop("==/!=/===/!==", 6),
          relational: binop("</>/<=/>=", 7),
          bitShift: binop("<</>>/>>>", 8),
          plusMin: new TokenType("+/-", {
            beforeExpr: true,
            binop: 9,
            prefix: true,
            startsExpr: true
          }),
          modulo: binop("%", 10),
          star: binop("*", 10),
          slash: binop("/", 10),
          starstar: new TokenType("**", {
            beforeExpr: true
          }),
          _break: kw("break"),
          _case: kw("case", beforeExpr),
          _catch: kw("catch"),
          _continue: kw("continue"),
          _debugger: kw("debugger"),
          _default: kw("default", beforeExpr),
          _do: kw("do", {
            isLoop: true,
            beforeExpr: true
          }),
          _else: kw("else", beforeExpr),
          _finally: kw("finally"),
          _for: kw("for", {
            isLoop: true
          }),
          _function: kw("function", startsExpr),
          _if: kw("if"),
          _return: kw("return", beforeExpr),
          _switch: kw("switch"),
          _throw: kw("throw", beforeExpr),
          _try: kw("try"),
          _var: kw("var"),
          _const: kw("const"),
          _while: kw("while", {
            isLoop: true
          }),
          _with: kw("with"),
          _new: kw("new", {
            beforeExpr: true,
            startsExpr: true
          }),
          _this: kw("this", startsExpr),
          _super: kw("super", startsExpr),
          _class: kw("class", startsExpr),
          _extends: kw("extends", beforeExpr),
          _export: kw("export"),
          _import: kw("import", startsExpr),
          _null: kw("null", startsExpr),
          _true: kw("true", startsExpr),
          _false: kw("false", startsExpr),
          _in: kw("in", {
            beforeExpr: true,
            binop: 7
          }),
          _instanceof: kw("instanceof", {
            beforeExpr: true,
            binop: 7
          }),
          _typeof: kw("typeof", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          _void: kw("void", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          }),
          _delete: kw("delete", {
            beforeExpr: true,
            prefix: true,
            startsExpr: true
          })
        };
        var lineBreak = /\r\n?|\n|\u2028|\u2029/;
        var lineBreakG = new RegExp(lineBreak.source, "g");

        function isNewLine(code, ecma2019String) {
          return code === 10 || code === 13 || !ecma2019String && (code === 0x2028 || code === 0x2029);
        }

        var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
        var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
        var ref = Object.prototype;
        var hasOwnProperty = ref.hasOwnProperty;
        var toString = ref.toString;

        function has(obj, propName) {
          return hasOwnProperty.call(obj, propName);
        }

        var isArray = Array.isArray || function (obj) {
          return toString.call(obj) === "[object Array]";
        };

        function wordsRegexp(words) {
          return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
        }

        var Position = function Position(line, col) {
          this.line = line;
          this.column = col;
        };

        Position.prototype.offset = function offset(n) {
          return new Position(this.line, this.column + n);
        };

        var SourceLocation = function SourceLocation(p, start, end) {
          this.start = start;
          this.end = end;

          if (p.sourceFile !== null) {
            this.source = p.sourceFile;
          }
        };

        function getLineInfo(input, offset) {
          for (var line = 1, cur = 0;;) {
            lineBreakG.lastIndex = cur;
            var match = lineBreakG.exec(input);

            if (match && match.index < offset) {
              ++line;
              cur = match.index + match[0].length;
            } else {
              return new Position(line, offset - cur);
            }
          }
        }

        var defaultOptions = {
          ecmaVersion: 10,
          sourceType: "script",
          onInsertedSemicolon: null,
          onTrailingComma: null,
          allowReserved: null,
          allowReturnOutsideFunction: false,
          allowImportExportEverywhere: false,
          allowAwaitOutsideFunction: false,
          allowHashBang: false,
          locations: false,
          onToken: null,
          onComment: null,
          ranges: false,
          program: null,
          sourceFile: null,
          directSourceFile: null,
          preserveParens: false
        };

        function getOptions(opts) {
          var options = {};

          for (var opt in defaultOptions) {
            options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
          }

          if (options.ecmaVersion >= 2015) {
            options.ecmaVersion -= 2009;
          }

          if (options.allowReserved == null) {
            options.allowReserved = options.ecmaVersion < 5;
          }

          if (isArray(options.onToken)) {
            var tokens = options.onToken;

            options.onToken = function (token) {
              return tokens.push(token);
            };
          }

          if (isArray(options.onComment)) {
            options.onComment = pushComment(options, options.onComment);
          }

          return options;
        }

        function pushComment(options, array) {
          return function (block, text, start, end, startLoc, endLoc) {
            var comment = {
              type: block ? "Block" : "Line",
              value: text,
              start: start,
              end: end
            };

            if (options.locations) {
              comment.loc = new SourceLocation(this, startLoc, endLoc);
            }

            if (options.ranges) {
              comment.range = [start, end];
            }

            array.push(comment);
          };
        }

        var SCOPE_TOP = 1,
            SCOPE_FUNCTION = 2,
            SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION,
            SCOPE_ASYNC = 4,
            SCOPE_GENERATOR = 8,
            SCOPE_ARROW = 16,
            SCOPE_SIMPLE_CATCH = 32,
            SCOPE_SUPER = 64,
            SCOPE_DIRECT_SUPER = 128;

        function functionFlags(async, generator) {
          return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
        }

        var BIND_NONE = 0,
            BIND_VAR = 1,
            BIND_LEXICAL = 2,
            BIND_FUNCTION = 3,
            BIND_SIMPLE_CATCH = 4,
            BIND_OUTSIDE = 5;

        var Parser = function Parser(options, input, startPos) {
          this.options = options = getOptions(options);
          this.sourceFile = options.sourceFile;
          this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
          var reserved = "";

          if (options.allowReserved !== true) {
            for (var v = options.ecmaVersion;; v--) {
              if (reserved = reservedWords[v]) {
                break;
              }
            }

            if (options.sourceType === "module") {
              reserved += " await";
            }
          }

          this.reservedWords = wordsRegexp(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
          this.reservedWordsStrict = wordsRegexp(reservedStrict);
          this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
          this.input = String(input);
          this.containsEsc = false;

          if (startPos) {
            this.pos = startPos;
            this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
            this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
          } else {
            this.pos = this.lineStart = 0;
            this.curLine = 1;
          }

          this.type = types.eof;
          this.value = null;
          this.start = this.end = this.pos;
          this.startLoc = this.endLoc = this.curPosition();
          this.lastTokEndLoc = this.lastTokStartLoc = null;
          this.lastTokStart = this.lastTokEnd = this.pos;
          this.context = this.initialContext();
          this.exprAllowed = true;
          this.inModule = options.sourceType === "module";
          this.strict = this.inModule || this.strictDirective(this.pos);
          this.potentialArrowAt = -1;
          this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
          this.labels = [];
          this.undefinedExports = {};

          if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
            this.skipLineComment(2);
          }

          this.scopeStack = [];
          this.enterScope(SCOPE_TOP);
          this.regexpState = null;
        };

        var prototypeAccessors = {
          inFunction: {
            configurable: true
          },
          inGenerator: {
            configurable: true
          },
          inAsync: {
            configurable: true
          },
          allowSuper: {
            configurable: true
          },
          allowDirectSuper: {
            configurable: true
          },
          treatFunctionsAsVar: {
            configurable: true
          }
        };

        Parser.prototype.parse = function parse() {
          var node = this.options.program || this.startNode();
          this.nextToken();
          return this.parseTopLevel(node);
        };

        prototypeAccessors.inFunction.get = function () {
          return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
        };

        prototypeAccessors.inGenerator.get = function () {
          return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;
        };

        prototypeAccessors.inAsync.get = function () {
          return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;
        };

        prototypeAccessors.allowSuper.get = function () {
          return (this.currentThisScope().flags & SCOPE_SUPER) > 0;
        };

        prototypeAccessors.allowDirectSuper.get = function () {
          return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
        };

        prototypeAccessors.treatFunctionsAsVar.get = function () {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        };

        Parser.prototype.inNonArrowFunction = function inNonArrowFunction() {
          return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;
        };

        Parser.extend = function extend() {
          var plugins = [],
              len = arguments.length;

          while (len--) {
            plugins[len] = arguments[len];
          }

          var cls = this;

          for (var i = 0; i < plugins.length; i++) {
            cls = plugins[i](cls);
          }

          return cls;
        };

        Parser.parse = function parse(input, options) {
          return new this(options, input).parse();
        };

        Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
          var parser = new this(options, input, pos);
          parser.nextToken();
          return parser.parseExpression();
        };

        Parser.tokenizer = function tokenizer(input, options) {
          return new this(options, input);
        };

        Object.defineProperties(Parser.prototype, prototypeAccessors);
        var pp = Parser.prototype;
        var literal = /^(?:'((?:\\.|[^'])*?)'|"((?:\\.|[^"])*?)")/;

        pp.strictDirective = function (start) {
          for (;;) {
            skipWhiteSpace.lastIndex = start;
            start += skipWhiteSpace.exec(this.input)[0].length;
            var match = literal.exec(this.input.slice(start));

            if (!match) {
              return false;
            }

            if ((match[1] || match[2]) === "use strict") {
              return true;
            }

            start += match[0].length;
            skipWhiteSpace.lastIndex = start;
            start += skipWhiteSpace.exec(this.input)[0].length;

            if (this.input[start] === ";") {
              start++;
            }
          }
        };

        pp.eat = function (type) {
          if (this.type === type) {
            this.next();
            return true;
          } else {
            return false;
          }
        };

        pp.isContextual = function (name) {
          return this.type === types.name && this.value === name && !this.containsEsc;
        };

        pp.eatContextual = function (name) {
          if (!this.isContextual(name)) {
            return false;
          }

          this.next();
          return true;
        };

        pp.expectContextual = function (name) {
          if (!this.eatContextual(name)) {
            this.unexpected();
          }
        };

        pp.canInsertSemicolon = function () {
          return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        };

        pp.insertSemicolon = function () {
          if (this.canInsertSemicolon()) {
            if (this.options.onInsertedSemicolon) {
              this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
            }

            return true;
          }
        };

        pp.semicolon = function () {
          if (!this.eat(types.semi) && !this.insertSemicolon()) {
            this.unexpected();
          }
        };

        pp.afterTrailingComma = function (tokType, notNext) {
          if (this.type === tokType) {
            if (this.options.onTrailingComma) {
              this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
            }

            if (!notNext) {
              this.next();
            }

            return true;
          }
        };

        pp.expect = function (type) {
          this.eat(type) || this.unexpected();
        };

        pp.unexpected = function (pos) {
          this.raise(pos != null ? pos : this.start, "Unexpected token");
        };

        function DestructuringErrors() {
          this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
        }

        pp.checkPatternErrors = function (refDestructuringErrors, isAssign) {
          if (!refDestructuringErrors) {
            return;
          }

          if (refDestructuringErrors.trailingComma > -1) {
            this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
          }

          var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;

          if (parens > -1) {
            this.raiseRecoverable(parens, "Parenthesized pattern");
          }
        };

        pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors) {
            return false;
          }

          var shorthandAssign = refDestructuringErrors.shorthandAssign;
          var doubleProto = refDestructuringErrors.doubleProto;

          if (!andThrow) {
            return shorthandAssign >= 0 || doubleProto >= 0;
          }

          if (shorthandAssign >= 0) {
            this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
          }

          if (doubleProto >= 0) {
            this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
          }
        };

        pp.checkYieldAwaitInDefaultParams = function () {
          if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
            this.raise(this.yieldPos, "Yield expression cannot be a default value");
          }

          if (this.awaitPos) {
            this.raise(this.awaitPos, "Await expression cannot be a default value");
          }
        };

        pp.isSimpleAssignTarget = function (expr) {
          if (expr.type === "ParenthesizedExpression") {
            return this.isSimpleAssignTarget(expr.expression);
          }

          return expr.type === "Identifier" || expr.type === "MemberExpression";
        };

        var pp$1 = Parser.prototype;

        pp$1.parseTopLevel = function (node) {
          var exports = {};

          if (!node.body) {
            node.body = [];
          }

          while (this.type !== types.eof) {
            var stmt = this.parseStatement(null, true, exports);
            node.body.push(stmt);
          }

          if (this.inModule) {
            for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {
              var name = list[i];
              this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
            }
          }

          this.adaptDirectivePrologue(node.body);
          this.next();
          node.sourceType = this.options.sourceType;
          return this.finishNode(node, "Program");
        };

        var loopLabel = {
          kind: "loop"
        },
            switchLabel = {
          kind: "switch"
        };

        pp$1.isLet = function (context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
            return false;
          }

          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length,
              nextCh = this.input.charCodeAt(next);

          if (nextCh === 91) {
            return true;
          }

          if (context) {
            return false;
          }

          if (nextCh === 123) {
            return true;
          }

          if (isIdentifierStart(nextCh, true)) {
            var pos = next + 1;

            while (isIdentifierChar(this.input.charCodeAt(pos), true)) {
              ++pos;
            }

            var ident = this.input.slice(next, pos);

            if (!keywordRelationalOperator.test(ident)) {
              return true;
            }
          }

          return false;
        };

        pp$1.isAsyncFunction = function () {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
            return false;
          }

          skipWhiteSpace.lastIndex = this.pos;
          var skip = skipWhiteSpace.exec(this.input);
          var next = this.pos + skip[0].length;
          return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));
        };

        pp$1.parseStatement = function (context, topLevel, exports) {
          var starttype = this.type,
              node = this.startNode(),
              kind;

          if (this.isLet(context)) {
            starttype = types._var;
            kind = "let";
          }

          switch (starttype) {
            case types._break:
            case types._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword);

            case types._debugger:
              return this.parseDebuggerStatement(node);

            case types._do:
              return this.parseDoStatement(node);

            case types._for:
              return this.parseForStatement(node);

            case types._function:
              if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
                this.unexpected();
              }

              return this.parseFunctionStatement(node, false, !context);

            case types._class:
              if (context) {
                this.unexpected();
              }

              return this.parseClass(node, true);

            case types._if:
              return this.parseIfStatement(node);

            case types._return:
              return this.parseReturnStatement(node);

            case types._switch:
              return this.parseSwitchStatement(node);

            case types._throw:
              return this.parseThrowStatement(node);

            case types._try:
              return this.parseTryStatement(node);

            case types._const:
            case types._var:
              kind = kind || this.value;

              if (context && kind !== "var") {
                this.unexpected();
              }

              return this.parseVarStatement(node, kind);

            case types._while:
              return this.parseWhileStatement(node);

            case types._with:
              return this.parseWithStatement(node);

            case types.braceL:
              return this.parseBlock(true, node);

            case types.semi:
              return this.parseEmptyStatement(node);

            case types._export:
            case types._import:
              if (this.options.ecmaVersion > 10 && starttype === types._import) {
                skipWhiteSpace.lastIndex = this.pos;
                var skip = skipWhiteSpace.exec(this.input);
                var next = this.pos + skip[0].length,
                    nextCh = this.input.charCodeAt(next);

                if (nextCh === 40) {
                  return this.parseExpressionStatement(node, this.parseExpression());
                }
              }

              if (!this.options.allowImportExportEverywhere) {
                if (!topLevel) {
                  this.raise(this.start, "'import' and 'export' may only appear at the top level");
                }

                if (!this.inModule) {
                  this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
                }
              }

              return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports);

            default:
              if (this.isAsyncFunction()) {
                if (context) {
                  this.unexpected();
                }

                this.next();
                return this.parseFunctionStatement(node, true, !context);
              }

              var maybeName = this.value,
                  expr = this.parseExpression();

              if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
                return this.parseLabeledStatement(node, maybeName, expr, context);
              } else {
                return this.parseExpressionStatement(node, expr);
              }

          }
        };

        pp$1.parseBreakContinueStatement = function (node, keyword) {
          var isBreak = keyword === "break";
          this.next();

          if (this.eat(types.semi) || this.insertSemicolon()) {
            node.label = null;
          } else if (this.type !== types.name) {
            this.unexpected();
          } else {
            node.label = this.parseIdent();
            this.semicolon();
          }

          var i = 0;

          for (; i < this.labels.length; ++i) {
            var lab = this.labels[i];

            if (node.label == null || lab.name === node.label.name) {
              if (lab.kind != null && (isBreak || lab.kind === "loop")) {
                break;
              }

              if (node.label && isBreak) {
                break;
              }
            }
          }

          if (i === this.labels.length) {
            this.raise(node.start, "Unsyntactic " + keyword);
          }

          return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        };

        pp$1.parseDebuggerStatement = function (node) {
          this.next();
          this.semicolon();
          return this.finishNode(node, "DebuggerStatement");
        };

        pp$1.parseDoStatement = function (node) {
          this.next();
          this.labels.push(loopLabel);
          node.body = this.parseStatement("do");
          this.labels.pop();
          this.expect(types._while);
          node.test = this.parseParenExpression();

          if (this.options.ecmaVersion >= 6) {
            this.eat(types.semi);
          } else {
            this.semicolon();
          }

          return this.finishNode(node, "DoWhileStatement");
        };

        pp$1.parseForStatement = function (node) {
          this.next();
          var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
          this.labels.push(loopLabel);
          this.enterScope(0);
          this.expect(types.parenL);

          if (this.type === types.semi) {
            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }

            return this.parseFor(node, null);
          }

          var isLet = this.isLet();

          if (this.type === types._var || this.type === types._const || isLet) {
            var init$1 = this.startNode(),
                kind = isLet ? "let" : this.value;
            this.next();
            this.parseVar(init$1, true, kind);
            this.finishNode(init$1, "VariableDeclaration");

            if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
              if (this.options.ecmaVersion >= 9) {
                if (this.type === types._in) {
                  if (awaitAt > -1) {
                    this.unexpected(awaitAt);
                  }
                } else {
                  node.await = awaitAt > -1;
                }
              }

              return this.parseForIn(node, init$1);
            }

            if (awaitAt > -1) {
              this.unexpected(awaitAt);
            }

            return this.parseFor(node, init$1);
          }

          var refDestructuringErrors = new DestructuringErrors();
          var init = this.parseExpression(true, refDestructuringErrors);

          if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
            if (this.options.ecmaVersion >= 9) {
              if (this.type === types._in) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
              } else {
                node.await = awaitAt > -1;
              }
            }

            this.toAssignable(init, false, refDestructuringErrors);
            this.checkLVal(init);
            return this.parseForIn(node, init);
          } else {
            this.checkExpressionErrors(refDestructuringErrors, true);
          }

          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }

          return this.parseFor(node, init);
        };

        pp$1.parseFunctionStatement = function (node, isAsync, declarationPosition) {
          this.next();
          return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
        };

        pp$1.parseIfStatement = function (node) {
          this.next();
          node.test = this.parseParenExpression();
          node.consequent = this.parseStatement("if");
          node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
          return this.finishNode(node, "IfStatement");
        };

        pp$1.parseReturnStatement = function (node) {
          if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
            this.raise(this.start, "'return' outside of function");
          }

          this.next();

          if (this.eat(types.semi) || this.insertSemicolon()) {
            node.argument = null;
          } else {
            node.argument = this.parseExpression();
            this.semicolon();
          }

          return this.finishNode(node, "ReturnStatement");
        };

        pp$1.parseSwitchStatement = function (node) {
          this.next();
          node.discriminant = this.parseParenExpression();
          node.cases = [];
          this.expect(types.braceL);
          this.labels.push(switchLabel);
          this.enterScope(0);
          var cur;

          for (var sawDefault = false; this.type !== types.braceR;) {
            if (this.type === types._case || this.type === types._default) {
              var isCase = this.type === types._case;

              if (cur) {
                this.finishNode(cur, "SwitchCase");
              }

              node.cases.push(cur = this.startNode());
              cur.consequent = [];
              this.next();

              if (isCase) {
                cur.test = this.parseExpression();
              } else {
                if (sawDefault) {
                  this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
                }

                sawDefault = true;
                cur.test = null;
              }

              this.expect(types.colon);
            } else {
              if (!cur) {
                this.unexpected();
              }

              cur.consequent.push(this.parseStatement(null));
            }
          }

          this.exitScope();

          if (cur) {
            this.finishNode(cur, "SwitchCase");
          }

          this.next();
          this.labels.pop();
          return this.finishNode(node, "SwitchStatement");
        };

        pp$1.parseThrowStatement = function (node) {
          this.next();

          if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
            this.raise(this.lastTokEnd, "Illegal newline after throw");
          }

          node.argument = this.parseExpression();
          this.semicolon();
          return this.finishNode(node, "ThrowStatement");
        };

        var empty = [];

        pp$1.parseTryStatement = function (node) {
          this.next();
          node.block = this.parseBlock();
          node.handler = null;

          if (this.type === types._catch) {
            var clause = this.startNode();
            this.next();

            if (this.eat(types.parenL)) {
              clause.param = this.parseBindingAtom();
              var simple = clause.param.type === "Identifier";
              this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
              this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
              this.expect(types.parenR);
            } else {
              if (this.options.ecmaVersion < 10) {
                this.unexpected();
              }

              clause.param = null;
              this.enterScope(0);
            }

            clause.body = this.parseBlock(false);
            this.exitScope();
            node.handler = this.finishNode(clause, "CatchClause");
          }

          node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;

          if (!node.handler && !node.finalizer) {
            this.raise(node.start, "Missing catch or finally clause");
          }

          return this.finishNode(node, "TryStatement");
        };

        pp$1.parseVarStatement = function (node, kind) {
          this.next();
          this.parseVar(node, false, kind);
          this.semicolon();
          return this.finishNode(node, "VariableDeclaration");
        };

        pp$1.parseWhileStatement = function (node) {
          this.next();
          node.test = this.parseParenExpression();
          this.labels.push(loopLabel);
          node.body = this.parseStatement("while");
          this.labels.pop();
          return this.finishNode(node, "WhileStatement");
        };

        pp$1.parseWithStatement = function (node) {
          if (this.strict) {
            this.raise(this.start, "'with' in strict mode");
          }

          this.next();
          node.object = this.parseParenExpression();
          node.body = this.parseStatement("with");
          return this.finishNode(node, "WithStatement");
        };

        pp$1.parseEmptyStatement = function (node) {
          this.next();
          return this.finishNode(node, "EmptyStatement");
        };

        pp$1.parseLabeledStatement = function (node, maybeName, expr, context) {
          for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {
            var label = list[i$1];

            if (label.name === maybeName) {
              this.raise(expr.start, "Label '" + maybeName + "' is already declared");
            }
          }

          var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;

          for (var i = this.labels.length - 1; i >= 0; i--) {
            var label$1 = this.labels[i];

            if (label$1.statementStart === node.start) {
              label$1.statementStart = this.start;
              label$1.kind = kind;
            } else {
              break;
            }
          }

          this.labels.push({
            name: maybeName,
            kind: kind,
            statementStart: this.start
          });
          node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
          this.labels.pop();
          node.label = expr;
          return this.finishNode(node, "LabeledStatement");
        };

        pp$1.parseExpressionStatement = function (node, expr) {
          node.expression = expr;
          this.semicolon();
          return this.finishNode(node, "ExpressionStatement");
        };

        pp$1.parseBlock = function (createNewLexicalScope, node) {
          if (createNewLexicalScope === void 0) createNewLexicalScope = true;
          if (node === void 0) node = this.startNode();
          node.body = [];
          this.expect(types.braceL);

          if (createNewLexicalScope) {
            this.enterScope(0);
          }

          while (!this.eat(types.braceR)) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }

          if (createNewLexicalScope) {
            this.exitScope();
          }

          return this.finishNode(node, "BlockStatement");
        };

        pp$1.parseFor = function (node, init) {
          node.init = init;
          this.expect(types.semi);
          node.test = this.type === types.semi ? null : this.parseExpression();
          this.expect(types.semi);
          node.update = this.type === types.parenR ? null : this.parseExpression();
          this.expect(types.parenR);
          node.body = this.parseStatement("for");
          this.exitScope();
          this.labels.pop();
          return this.finishNode(node, "ForStatement");
        };

        pp$1.parseForIn = function (node, init) {
          var isForIn = this.type === types._in;
          this.next();

          if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
            this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
          } else if (init.type === "AssignmentPattern") {
            this.raise(init.start, "Invalid left-hand side in for-loop");
          }

          node.left = init;
          node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
          this.expect(types.parenR);
          node.body = this.parseStatement("for");
          this.exitScope();
          this.labels.pop();
          return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        };

        pp$1.parseVar = function (node, isFor, kind) {
          node.declarations = [];
          node.kind = kind;

          for (;;) {
            var decl = this.startNode();
            this.parseVarId(decl, kind);

            if (this.eat(types.eq)) {
              decl.init = this.parseMaybeAssign(isFor);
            } else if (kind === "const" && !(this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
              this.unexpected();
            } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types._in || this.isContextual("of")))) {
              this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
            } else {
              decl.init = null;
            }

            node.declarations.push(this.finishNode(decl, "VariableDeclarator"));

            if (!this.eat(types.comma)) {
              break;
            }
          }

          return node;
        };

        pp$1.parseVarId = function (decl, kind) {
          decl.id = this.parseBindingAtom();
          this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
        };

        var FUNC_STATEMENT = 1,
            FUNC_HANGING_STATEMENT = 2,
            FUNC_NULLABLE_ID = 4;

        pp$1.parseFunction = function (node, statement, allowExpressionBody, isAsync) {
          this.initFunction(node);

          if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
            if (this.type === types.star && statement & FUNC_HANGING_STATEMENT) {
              this.unexpected();
            }

            node.generator = this.eat(types.star);
          }

          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }

          if (statement & FUNC_STATEMENT) {
            node.id = statement & FUNC_NULLABLE_ID && this.type !== types.name ? null : this.parseIdent();

            if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
              this.checkLVal(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
            }
          }

          var oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          this.enterScope(functionFlags(node.async, node.generator));

          if (!(statement & FUNC_STATEMENT)) {
            node.id = this.type === types.name ? this.parseIdent() : null;
          }

          this.parseFunctionParams(node);
          this.parseFunctionBody(node, allowExpressionBody, false);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
        };

        pp$1.parseFunctionParams = function (node) {
          this.expect(types.parenL);
          node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
          this.checkYieldAwaitInDefaultParams();
        };

        pp$1.parseClass = function (node, isStatement) {
          this.next();
          var oldStrict = this.strict;
          this.strict = true;
          this.parseClassId(node, isStatement);
          this.parseClassSuper(node);
          var classBody = this.startNode();
          var hadConstructor = false;
          classBody.body = [];
          this.expect(types.braceL);

          while (!this.eat(types.braceR)) {
            var element = this.parseClassElement(node.superClass !== null);

            if (element) {
              classBody.body.push(element);

              if (element.type === "MethodDefinition" && element.kind === "constructor") {
                if (hadConstructor) {
                  this.raise(element.start, "Duplicate constructor in the same class");
                }

                hadConstructor = true;
              }
            }
          }

          node.body = this.finishNode(classBody, "ClassBody");
          this.strict = oldStrict;
          return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        };

        pp$1.parseClassElement = function (constructorAllowsSuper) {
          var this$1 = this;

          if (this.eat(types.semi)) {
            return null;
          }

          var method = this.startNode();

          var tryContextual = function tryContextual(k, noLineBreak) {
            if (noLineBreak === void 0) noLineBreak = false;
            var start = this$1.start,
                startLoc = this$1.startLoc;

            if (!this$1.eatContextual(k)) {
              return false;
            }

            if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) {
              return true;
            }

            if (method.key) {
              this$1.unexpected();
            }

            method.computed = false;
            method.key = this$1.startNodeAt(start, startLoc);
            method.key.name = k;
            this$1.finishNode(method.key, "Identifier");
            return false;
          };

          method.kind = "method";
          method.static = tryContextual("static");
          var isGenerator = this.eat(types.star);
          var isAsync = false;

          if (!isGenerator) {
            if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
              isAsync = true;
              isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
            } else if (tryContextual("get")) {
              method.kind = "get";
            } else if (tryContextual("set")) {
              method.kind = "set";
            }
          }

          if (!method.key) {
            this.parsePropertyName(method);
          }

          var key = method.key;
          var allowsDirectSuper = false;

          if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
            if (method.kind !== "method") {
              this.raise(key.start, "Constructor can't have get/set modifier");
            }

            if (isGenerator) {
              this.raise(key.start, "Constructor can't be a generator");
            }

            if (isAsync) {
              this.raise(key.start, "Constructor can't be an async method");
            }

            method.kind = "constructor";
            allowsDirectSuper = constructorAllowsSuper;
          } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
            this.raise(key.start, "Classes may not have a static property named prototype");
          }

          this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);

          if (method.kind === "get" && method.value.params.length !== 0) {
            this.raiseRecoverable(method.value.start, "getter should have no params");
          }

          if (method.kind === "set" && method.value.params.length !== 1) {
            this.raiseRecoverable(method.value.start, "setter should have exactly one param");
          }

          if (method.kind === "set" && method.value.params[0].type === "RestElement") {
            this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
          }

          return method;
        };

        pp$1.parseClassMethod = function (method, isGenerator, isAsync, allowsDirectSuper) {
          method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
          return this.finishNode(method, "MethodDefinition");
        };

        pp$1.parseClassId = function (node, isStatement) {
          if (this.type === types.name) {
            node.id = this.parseIdent();

            if (isStatement) {
              this.checkLVal(node.id, BIND_LEXICAL, false);
            }
          } else {
            if (isStatement === true) {
              this.unexpected();
            }

            node.id = null;
          }
        };

        pp$1.parseClassSuper = function (node) {
          node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
        };

        pp$1.parseExport = function (node, exports) {
          this.next();

          if (this.eat(types.star)) {
            this.expectContextual("from");

            if (this.type !== types.string) {
              this.unexpected();
            }

            node.source = this.parseExprAtom();
            this.semicolon();
            return this.finishNode(node, "ExportAllDeclaration");
          }

          if (this.eat(types._default)) {
            this.checkExport(exports, "default", this.lastTokStart);
            var isAsync;

            if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
              var fNode = this.startNode();
              this.next();

              if (isAsync) {
                this.next();
              }

              node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
            } else if (this.type === types._class) {
              var cNode = this.startNode();
              node.declaration = this.parseClass(cNode, "nullableID");
            } else {
              node.declaration = this.parseMaybeAssign();
              this.semicolon();
            }

            return this.finishNode(node, "ExportDefaultDeclaration");
          }

          if (this.shouldParseExportStatement()) {
            node.declaration = this.parseStatement(null);

            if (node.declaration.type === "VariableDeclaration") {
              this.checkVariableExport(exports, node.declaration.declarations);
            } else {
              this.checkExport(exports, node.declaration.id.name, node.declaration.id.start);
            }

            node.specifiers = [];
            node.source = null;
          } else {
            node.declaration = null;
            node.specifiers = this.parseExportSpecifiers(exports);

            if (this.eatContextual("from")) {
              if (this.type !== types.string) {
                this.unexpected();
              }

              node.source = this.parseExprAtom();
            } else {
              for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
                var spec = list[i];
                this.checkUnreserved(spec.local);
                this.checkLocalExport(spec.local);
              }

              node.source = null;
            }

            this.semicolon();
          }

          return this.finishNode(node, "ExportNamedDeclaration");
        };

        pp$1.checkExport = function (exports, name, pos) {
          if (!exports) {
            return;
          }

          if (has(exports, name)) {
            this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
          }

          exports[name] = true;
        };

        pp$1.checkPatternExport = function (exports, pat) {
          var type = pat.type;

          if (type === "Identifier") {
            this.checkExport(exports, pat.name, pat.start);
          } else if (type === "ObjectPattern") {
            for (var i = 0, list = pat.properties; i < list.length; i += 1) {
              var prop = list[i];
              this.checkPatternExport(exports, prop);
            }
          } else if (type === "ArrayPattern") {
            for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
              var elt = list$1[i$1];

              if (elt) {
                this.checkPatternExport(exports, elt);
              }
            }
          } else if (type === "Property") {
            this.checkPatternExport(exports, pat.value);
          } else if (type === "AssignmentPattern") {
            this.checkPatternExport(exports, pat.left);
          } else if (type === "RestElement") {
            this.checkPatternExport(exports, pat.argument);
          } else if (type === "ParenthesizedExpression") {
            this.checkPatternExport(exports, pat.expression);
          }
        };

        pp$1.checkVariableExport = function (exports, decls) {
          if (!exports) {
            return;
          }

          for (var i = 0, list = decls; i < list.length; i += 1) {
            var decl = list[i];
            this.checkPatternExport(exports, decl.id);
          }
        };

        pp$1.shouldParseExportStatement = function () {
          return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
        };

        pp$1.parseExportSpecifiers = function (exports) {
          var nodes = [],
              first = true;
          this.expect(types.braceL);

          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);

              if (this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }

            var node = this.startNode();
            node.local = this.parseIdent(true);
            node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
            this.checkExport(exports, node.exported.name, node.exported.start);
            nodes.push(this.finishNode(node, "ExportSpecifier"));
          }

          return nodes;
        };

        pp$1.parseImport = function (node) {
          this.next();

          if (this.type === types.string) {
            node.specifiers = empty;
            node.source = this.parseExprAtom();
          } else {
            node.specifiers = this.parseImportSpecifiers();
            this.expectContextual("from");
            node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
          }

          this.semicolon();
          return this.finishNode(node, "ImportDeclaration");
        };

        pp$1.parseImportSpecifiers = function () {
          var nodes = [],
              first = true;

          if (this.type === types.name) {
            var node = this.startNode();
            node.local = this.parseIdent();
            this.checkLVal(node.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));

            if (!this.eat(types.comma)) {
              return nodes;
            }
          }

          if (this.type === types.star) {
            var node$1 = this.startNode();
            this.next();
            this.expectContextual("as");
            node$1.local = this.parseIdent();
            this.checkLVal(node$1.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
            return nodes;
          }

          this.expect(types.braceL);

          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);

              if (this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }

            var node$2 = this.startNode();
            node$2.imported = this.parseIdent(true);

            if (this.eatContextual("as")) {
              node$2.local = this.parseIdent();
            } else {
              this.checkUnreserved(node$2.imported);
              node$2.local = node$2.imported;
            }

            this.checkLVal(node$2.local, BIND_LEXICAL);
            nodes.push(this.finishNode(node$2, "ImportSpecifier"));
          }

          return nodes;
        };

        pp$1.adaptDirectivePrologue = function (statements) {
          for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
            statements[i].directive = statements[i].expression.raw.slice(1, -1);
          }
        };

        pp$1.isDirectiveCandidate = function (statement) {
          return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && (this.input[statement.start] === "\"" || this.input[statement.start] === "'");
        };

        var pp$2 = Parser.prototype;

        pp$2.toAssignable = function (node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node) {
            switch (node.type) {
              case "Identifier":
                if (this.inAsync && node.name === "await") {
                  this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
                }

                break;

              case "ObjectPattern":
              case "ArrayPattern":
              case "RestElement":
                break;

              case "ObjectExpression":
                node.type = "ObjectPattern";

                if (refDestructuringErrors) {
                  this.checkPatternErrors(refDestructuringErrors, true);
                }

                for (var i = 0, list = node.properties; i < list.length; i += 1) {
                  var prop = list[i];
                  this.toAssignable(prop, isBinding);

                  if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                    this.raise(prop.argument.start, "Unexpected token");
                  }
                }

                break;

              case "Property":
                if (node.kind !== "init") {
                  this.raise(node.key.start, "Object pattern can't contain getter or setter");
                }

                this.toAssignable(node.value, isBinding);
                break;

              case "ArrayExpression":
                node.type = "ArrayPattern";

                if (refDestructuringErrors) {
                  this.checkPatternErrors(refDestructuringErrors, true);
                }

                this.toAssignableList(node.elements, isBinding);
                break;

              case "SpreadElement":
                node.type = "RestElement";
                this.toAssignable(node.argument, isBinding);

                if (node.argument.type === "AssignmentPattern") {
                  this.raise(node.argument.start, "Rest elements cannot have a default value");
                }

                break;

              case "AssignmentExpression":
                if (node.operator !== "=") {
                  this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
                }

                node.type = "AssignmentPattern";
                delete node.operator;
                this.toAssignable(node.left, isBinding);

              case "AssignmentPattern":
                break;

              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isBinding, refDestructuringErrors);
                break;

              case "MemberExpression":
                if (!isBinding) {
                  break;
                }

              default:
                this.raise(node.start, "Assigning to rvalue");
            }
          } else if (refDestructuringErrors) {
            this.checkPatternErrors(refDestructuringErrors, true);
          }

          return node;
        };

        pp$2.toAssignableList = function (exprList, isBinding) {
          var end = exprList.length;

          for (var i = 0; i < end; i++) {
            var elt = exprList[i];

            if (elt) {
              this.toAssignable(elt, isBinding);
            }
          }

          if (end) {
            var last = exprList[end - 1];

            if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
              this.unexpected(last.argument.start);
            }
          }

          return exprList;
        };

        pp$2.parseSpread = function (refDestructuringErrors) {
          var node = this.startNode();
          this.next();
          node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
          return this.finishNode(node, "SpreadElement");
        };

        pp$2.parseRestBinding = function () {
          var node = this.startNode();
          this.next();

          if (this.options.ecmaVersion === 6 && this.type !== types.name) {
            this.unexpected();
          }

          node.argument = this.parseBindingAtom();
          return this.finishNode(node, "RestElement");
        };

        pp$2.parseBindingAtom = function () {
          if (this.options.ecmaVersion >= 6) {
            switch (this.type) {
              case types.bracketL:
                var node = this.startNode();
                this.next();
                node.elements = this.parseBindingList(types.bracketR, true, true);
                return this.finishNode(node, "ArrayPattern");

              case types.braceL:
                return this.parseObj(true);
            }
          }

          return this.parseIdent();
        };

        pp$2.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
          var elts = [],
              first = true;

          while (!this.eat(close)) {
            if (first) {
              first = false;
            } else {
              this.expect(types.comma);
            }

            if (allowEmpty && this.type === types.comma) {
              elts.push(null);
            } else if (allowTrailingComma && this.afterTrailingComma(close)) {
              break;
            } else if (this.type === types.ellipsis) {
              var rest = this.parseRestBinding();
              this.parseBindingListItem(rest);
              elts.push(rest);

              if (this.type === types.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element");
              }

              this.expect(close);
              break;
            } else {
              var elem = this.parseMaybeDefault(this.start, this.startLoc);
              this.parseBindingListItem(elem);
              elts.push(elem);
            }
          }

          return elts;
        };

        pp$2.parseBindingListItem = function (param) {
          return param;
        };

        pp$2.parseMaybeDefault = function (startPos, startLoc, left) {
          left = left || this.parseBindingAtom();

          if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
            return left;
          }

          var node = this.startNodeAt(startPos, startLoc);
          node.left = left;
          node.right = this.parseMaybeAssign();
          return this.finishNode(node, "AssignmentPattern");
        };

        pp$2.checkLVal = function (expr, bindingType, checkClashes) {
          if (bindingType === void 0) bindingType = BIND_NONE;

          switch (expr.type) {
            case "Identifier":
              if (bindingType === BIND_LEXICAL && expr.name === "let") {
                this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
              }

              if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
                this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
              }

              if (checkClashes) {
                if (has(checkClashes, expr.name)) {
                  this.raiseRecoverable(expr.start, "Argument name clash");
                }

                checkClashes[expr.name] = true;
              }

              if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) {
                this.declareName(expr.name, bindingType, expr.start);
              }

              break;

            case "MemberExpression":
              if (bindingType) {
                this.raiseRecoverable(expr.start, "Binding member expression");
              }

              break;

            case "ObjectPattern":
              for (var i = 0, list = expr.properties; i < list.length; i += 1) {
                var prop = list[i];
                this.checkLVal(prop, bindingType, checkClashes);
              }

              break;

            case "Property":
              this.checkLVal(expr.value, bindingType, checkClashes);
              break;

            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1];

                if (elem) {
                  this.checkLVal(elem, bindingType, checkClashes);
                }
              }

              break;

            case "AssignmentPattern":
              this.checkLVal(expr.left, bindingType, checkClashes);
              break;

            case "RestElement":
              this.checkLVal(expr.argument, bindingType, checkClashes);
              break;

            case "ParenthesizedExpression":
              this.checkLVal(expr.expression, bindingType, checkClashes);
              break;

            default:
              this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
          }
        };

        var pp$3 = Parser.prototype;

        pp$3.checkPropClash = function (prop, propHash, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
            return;
          }

          if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
            return;
          }

          var key = prop.key;
          var name;

          switch (key.type) {
            case "Identifier":
              name = key.name;
              break;

            case "Literal":
              name = String(key.value);
              break;

            default:
              return;
          }

          var kind = prop.kind;

          if (this.options.ecmaVersion >= 6) {
            if (name === "__proto__" && kind === "init") {
              if (propHash.proto) {
                if (refDestructuringErrors && refDestructuringErrors.doubleProto < 0) {
                  refDestructuringErrors.doubleProto = key.start;
                } else {
                  this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
                }
              }

              propHash.proto = true;
            }

            return;
          }

          name = "$" + name;
          var other = propHash[name];

          if (other) {
            var redefinition;

            if (kind === "init") {
              redefinition = this.strict && other.init || other.get || other.set;
            } else {
              redefinition = other.init || other[kind];
            }

            if (redefinition) {
              this.raiseRecoverable(key.start, "Redefinition of property");
            }
          } else {
            other = propHash[name] = {
              init: false,
              get: false,
              set: false
            };
          }

          other[kind] = true;
        };

        pp$3.parseExpression = function (noIn, refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);

          if (this.type === types.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            node.expressions = [expr];

            while (this.eat(types.comma)) {
              node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
            }

            return this.finishNode(node, "SequenceExpression");
          }

          return expr;
        };

        pp$3.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator) {
              return this.parseYield(noIn);
            } else {
              this.exprAllowed = false;
            }
          }

          var ownDestructuringErrors = false,
              oldParenAssign = -1,
              oldTrailingComma = -1,
              oldShorthandAssign = -1;

          if (refDestructuringErrors) {
            oldParenAssign = refDestructuringErrors.parenthesizedAssign;
            oldTrailingComma = refDestructuringErrors.trailingComma;
            oldShorthandAssign = refDestructuringErrors.shorthandAssign;
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.shorthandAssign = -1;
          } else {
            refDestructuringErrors = new DestructuringErrors();
            ownDestructuringErrors = true;
          }

          var startPos = this.start,
              startLoc = this.startLoc;

          if (this.type === types.parenL || this.type === types.name) {
            this.potentialArrowAt = this.start;
          }

          var left = this.parseMaybeConditional(noIn, refDestructuringErrors);

          if (afterLeftParse) {
            left = afterLeftParse.call(this, left, startPos, startLoc);
          }

          if (this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            node.operator = this.value;
            node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;

            if (!ownDestructuringErrors) {
              DestructuringErrors.call(refDestructuringErrors);
            }

            refDestructuringErrors.shorthandAssign = -1;
            this.checkLVal(left);
            this.next();
            node.right = this.parseMaybeAssign(noIn);
            return this.finishNode(node, "AssignmentExpression");
          } else {
            if (ownDestructuringErrors) {
              this.checkExpressionErrors(refDestructuringErrors, true);
            }
          }

          if (oldParenAssign > -1) {
            refDestructuringErrors.parenthesizedAssign = oldParenAssign;
          }

          if (oldTrailingComma > -1) {
            refDestructuringErrors.trailingComma = oldTrailingComma;
          }

          if (oldShorthandAssign > -1) {
            refDestructuringErrors.shorthandAssign = oldShorthandAssign;
          }

          return left;
        };

        pp$3.parseMaybeConditional = function (noIn, refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseExprOps(noIn, refDestructuringErrors);

          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }

          if (this.eat(types.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.test = expr;
            node.consequent = this.parseMaybeAssign();
            this.expect(types.colon);
            node.alternate = this.parseMaybeAssign(noIn);
            return this.finishNode(node, "ConditionalExpression");
          }

          return expr;
        };

        pp$3.parseExprOps = function (noIn, refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseMaybeUnary(refDestructuringErrors, false);

          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }

          return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
        };

        pp$3.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
          var prec = this.type.binop;

          if (prec != null && (!noIn || this.type !== types._in)) {
            if (prec > minPrec) {
              var logical = this.type === types.logicalOR || this.type === types.logicalAND;
              var op = this.value;
              this.next();
              var startPos = this.start,
                  startLoc = this.startLoc;
              var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
              var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical);
              return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
            }
          }

          return left;
        };

        pp$3.buildBinary = function (startPos, startLoc, left, right, op, logical) {
          var node = this.startNodeAt(startPos, startLoc);
          node.left = left;
          node.operator = op;
          node.right = right;
          return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        };

        pp$3.parseMaybeUnary = function (refDestructuringErrors, sawUnary) {
          var startPos = this.start,
              startLoc = this.startLoc,
              expr;

          if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {
            expr = this.parseAwait();
            sawUnary = true;
          } else if (this.type.prefix) {
            var node = this.startNode(),
                update = this.type === types.incDec;
            node.operator = this.value;
            node.prefix = true;
            this.next();
            node.argument = this.parseMaybeUnary(null, true);
            this.checkExpressionErrors(refDestructuringErrors, true);

            if (update) {
              this.checkLVal(node.argument);
            } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
              this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
            } else {
              sawUnary = true;
            }

            expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else {
            expr = this.parseExprSubscripts(refDestructuringErrors);

            if (this.checkExpressionErrors(refDestructuringErrors)) {
              return expr;
            }

            while (this.type.postfix && !this.canInsertSemicolon()) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = this.value;
              node$1.prefix = false;
              node$1.argument = expr;
              this.checkLVal(expr);
              this.next();
              expr = this.finishNode(node$1, "UpdateExpression");
            }
          }

          if (!sawUnary && this.eat(types.starstar)) {
            return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
          } else {
            return expr;
          }
        };

        pp$3.parseExprSubscripts = function (refDestructuringErrors) {
          var startPos = this.start,
              startLoc = this.startLoc;
          var expr = this.parseExprAtom(refDestructuringErrors);
          var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";

          if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) {
            return expr;
          }

          var result = this.parseSubscripts(expr, startPos, startLoc);

          if (refDestructuringErrors && result.type === "MemberExpression") {
            if (refDestructuringErrors.parenthesizedAssign >= result.start) {
              refDestructuringErrors.parenthesizedAssign = -1;
            }

            if (refDestructuringErrors.parenthesizedBind >= result.start) {
              refDestructuringErrors.parenthesizedBind = -1;
            }
          }

          return result;
        };

        pp$3.parseSubscripts = function (base, startPos, startLoc, noCalls) {
          var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && this.input.slice(base.start, base.end) === "async";

          while (true) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow);

            if (element === base || element.type === "ArrowFunctionExpression") {
              return element;
            }

            base = element;
          }
        };

        pp$3.parseSubscript = function (base, startPos, startLoc, noCalls, maybeAsyncArrow) {
          var computed = this.eat(types.bracketL);

          if (computed || this.eat(types.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base;
            node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never");
            node.computed = !!computed;

            if (computed) {
              this.expect(types.bracketR);
            }

            base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types.parenL)) {
            var refDestructuringErrors = new DestructuringErrors(),
                oldYieldPos = this.yieldPos,
                oldAwaitPos = this.awaitPos,
                oldAwaitIdentPos = this.awaitIdentPos;
            this.yieldPos = 0;
            this.awaitPos = 0;
            this.awaitIdentPos = 0;
            var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);

            if (maybeAsyncArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false);
              this.checkYieldAwaitInDefaultParams();

              if (this.awaitIdentPos > 0) {
                this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
              }

              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              this.awaitIdentPos = oldAwaitIdentPos;
              return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
            }

            this.checkExpressionErrors(refDestructuringErrors, true);
            this.yieldPos = oldYieldPos || this.yieldPos;
            this.awaitPos = oldAwaitPos || this.awaitPos;
            this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base;
            node$1.arguments = exprList;
            base = this.finishNode(node$1, "CallExpression");
          } else if (this.type === types.backQuote) {
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base;
            node$2.quasi = this.parseTemplate({
              isTagged: true
            });
            base = this.finishNode(node$2, "TaggedTemplateExpression");
          }

          return base;
        };

        pp$3.parseExprAtom = function (refDestructuringErrors) {
          if (this.type === types.slash) {
            this.readRegexp();
          }

          var node,
              canBeArrow = this.potentialArrowAt === this.start;

          switch (this.type) {
            case types._super:
              if (!this.allowSuper) {
                this.raise(this.start, "'super' keyword outside a method");
              }

              node = this.startNode();
              this.next();

              if (this.type === types.parenL && !this.allowDirectSuper) {
                this.raise(node.start, "super() call outside constructor of a subclass");
              }

              if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) {
                this.unexpected();
              }

              return this.finishNode(node, "Super");

            case types._this:
              node = this.startNode();
              this.next();
              return this.finishNode(node, "ThisExpression");

            case types.name:
              var startPos = this.start,
                  startLoc = this.startLoc,
                  containsEsc = this.containsEsc;
              var id = this.parseIdent(false);

              if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
                return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);
              }

              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types.arrow)) {
                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
                }

                if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) {
                  id = this.parseIdent(false);

                  if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
                    this.unexpected();
                  }

                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
                }
              }

              return id;

            case types.regexp:
              var value = this.value;
              node = this.parseLiteral(value.value);
              node.regex = {
                pattern: value.pattern,
                flags: value.flags
              };
              return node;

            case types.num:
            case types.string:
              return this.parseLiteral(this.value);

            case types._null:
            case types._true:
            case types._false:
              node = this.startNode();
              node.value = this.type === types._null ? null : this.type === types._true;
              node.raw = this.type.keyword;
              this.next();
              return this.finishNode(node, "Literal");

            case types.parenL:
              var start = this.start,
                  expr = this.parseParenAndDistinguishExpression(canBeArrow);

              if (refDestructuringErrors) {
                if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                  refDestructuringErrors.parenthesizedAssign = start;
                }

                if (refDestructuringErrors.parenthesizedBind < 0) {
                  refDestructuringErrors.parenthesizedBind = start;
                }
              }

              return expr;

            case types.bracketL:
              node = this.startNode();
              this.next();
              node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
              return this.finishNode(node, "ArrayExpression");

            case types.braceL:
              return this.parseObj(false, refDestructuringErrors);

            case types._function:
              node = this.startNode();
              this.next();
              return this.parseFunction(node, 0);

            case types._class:
              return this.parseClass(this.startNode(), false);

            case types._new:
              return this.parseNew();

            case types.backQuote:
              return this.parseTemplate();

            case types._import:
              if (this.options.ecmaVersion >= 11) {
                return this.parseExprImport();
              } else {
                return this.unexpected();
              }

            default:
              this.unexpected();
          }
        };

        pp$3.parseExprImport = function () {
          var node = this.startNode();
          this.next();

          switch (this.type) {
            case types.parenL:
              return this.parseDynamicImport(node);

            default:
              this.unexpected();
          }
        };

        pp$3.parseDynamicImport = function (node) {
          this.next();
          node.source = this.parseMaybeAssign();

          if (!this.eat(types.parenR)) {
            var errorPos = this.start;

            if (this.eat(types.comma) && this.eat(types.parenR)) {
              this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
            } else {
              this.unexpected(errorPos);
            }
          }

          return this.finishNode(node, "ImportExpression");
        };

        pp$3.parseLiteral = function (value) {
          var node = this.startNode();
          node.value = value;
          node.raw = this.input.slice(this.start, this.end);

          if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
            node.bigint = node.raw.slice(0, -1);
          }

          this.next();
          return this.finishNode(node, "Literal");
        };

        pp$3.parseParenExpression = function () {
          this.expect(types.parenL);
          var val = this.parseExpression();
          this.expect(types.parenR);
          return val;
        };

        pp$3.parseParenAndDistinguishExpression = function (canBeArrow) {
          var startPos = this.start,
              startLoc = this.startLoc,
              val,
              allowTrailingComma = this.options.ecmaVersion >= 8;

          if (this.options.ecmaVersion >= 6) {
            this.next();
            var innerStartPos = this.start,
                innerStartLoc = this.startLoc;
            var exprList = [],
                first = true,
                lastIsComma = false;
            var refDestructuringErrors = new DestructuringErrors(),
                oldYieldPos = this.yieldPos,
                oldAwaitPos = this.awaitPos,
                spreadStart;
            this.yieldPos = 0;
            this.awaitPos = 0;

            while (this.type !== types.parenR) {
              first ? first = false : this.expect(types.comma);

              if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {
                lastIsComma = true;
                break;
              } else if (this.type === types.ellipsis) {
                spreadStart = this.start;
                exprList.push(this.parseParenItem(this.parseRestBinding()));

                if (this.type === types.comma) {
                  this.raise(this.start, "Comma is not permitted after the rest element");
                }

                break;
              } else {
                exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
              }
            }

            var innerEndPos = this.start,
                innerEndLoc = this.startLoc;
            this.expect(types.parenR);

            if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
              this.checkPatternErrors(refDestructuringErrors, false);
              this.checkYieldAwaitInDefaultParams();
              this.yieldPos = oldYieldPos;
              this.awaitPos = oldAwaitPos;
              return this.parseParenArrowList(startPos, startLoc, exprList);
            }

            if (!exprList.length || lastIsComma) {
              this.unexpected(this.lastTokStart);
            }

            if (spreadStart) {
              this.unexpected(spreadStart);
            }

            this.checkExpressionErrors(refDestructuringErrors, true);
            this.yieldPos = oldYieldPos || this.yieldPos;
            this.awaitPos = oldAwaitPos || this.awaitPos;

            if (exprList.length > 1) {
              val = this.startNodeAt(innerStartPos, innerStartLoc);
              val.expressions = exprList;
              this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
            } else {
              val = exprList[0];
            }
          } else {
            val = this.parseParenExpression();
          }

          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            par.expression = val;
            return this.finishNode(par, "ParenthesizedExpression");
          } else {
            return val;
          }
        };

        pp$3.parseParenItem = function (item) {
          return item;
        };

        pp$3.parseParenArrowList = function (startPos, startLoc, exprList) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
        };

        var empty$1 = [];

        pp$3.parseNew = function () {
          var node = this.startNode();
          var meta = this.parseIdent(true);

          if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
            node.meta = meta;
            var containsEsc = this.containsEsc;
            node.property = this.parseIdent(true);

            if (node.property.name !== "target" || containsEsc) {
              this.raiseRecoverable(node.property.start, "The only valid meta property for new is new.target");
            }

            if (!this.inNonArrowFunction()) {
              this.raiseRecoverable(node.start, "new.target can only be used in functions");
            }

            return this.finishNode(node, "MetaProperty");
          }

          var startPos = this.start,
              startLoc = this.startLoc,
              isImport = this.type === types._import;
          node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);

          if (isImport && node.callee.type === "ImportExpression") {
            this.raise(startPos, "Cannot use new with import()");
          }

          if (this.eat(types.parenL)) {
            node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
          } else {
            node.arguments = empty$1;
          }

          return this.finishNode(node, "NewExpression");
        };

        pp$3.parseTemplateElement = function (ref) {
          var isTagged = ref.isTagged;
          var elem = this.startNode();

          if (this.type === types.invalidTemplate) {
            if (!isTagged) {
              this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
            }

            elem.value = {
              raw: this.value,
              cooked: null
            };
          } else {
            elem.value = {
              raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
              cooked: this.value
            };
          }

          this.next();
          elem.tail = this.type === types.backQuote;
          return this.finishNode(elem, "TemplateElement");
        };

        pp$3.parseTemplate = function (ref) {
          if (ref === void 0) ref = {};
          var isTagged = ref.isTagged;
          if (isTagged === void 0) isTagged = false;
          var node = this.startNode();
          this.next();
          node.expressions = [];
          var curElt = this.parseTemplateElement({
            isTagged: isTagged
          });
          node.quasis = [curElt];

          while (!curElt.tail) {
            if (this.type === types.eof) {
              this.raise(this.pos, "Unterminated template literal");
            }

            this.expect(types.dollarBraceL);
            node.expressions.push(this.parseExpression());
            this.expect(types.braceR);
            node.quasis.push(curElt = this.parseTemplateElement({
              isTagged: isTagged
            }));
          }

          this.next();
          return this.finishNode(node, "TemplateLiteral");
        };

        pp$3.isAsyncProp = function (prop) {
          return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        };

        pp$3.parseObj = function (isPattern, refDestructuringErrors) {
          var node = this.startNode(),
              first = true,
              propHash = {};
          node.properties = [];
          this.next();

          while (!this.eat(types.braceR)) {
            if (!first) {
              this.expect(types.comma);

              if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) {
                break;
              }
            } else {
              first = false;
            }

            var prop = this.parseProperty(isPattern, refDestructuringErrors);

            if (!isPattern) {
              this.checkPropClash(prop, propHash, refDestructuringErrors);
            }

            node.properties.push(prop);
          }

          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        };

        pp$3.parseProperty = function (isPattern, refDestructuringErrors) {
          var prop = this.startNode(),
              isGenerator,
              isAsync,
              startPos,
              startLoc;

          if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
            if (isPattern) {
              prop.argument = this.parseIdent(false);

              if (this.type === types.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element");
              }

              return this.finishNode(prop, "RestElement");
            }

            if (this.type === types.parenL && refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0) {
                refDestructuringErrors.parenthesizedAssign = this.start;
              }

              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = this.start;
              }
            }

            prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);

            if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
              refDestructuringErrors.trailingComma = this.start;
            }

            return this.finishNode(prop, "SpreadElement");
          }

          if (this.options.ecmaVersion >= 6) {
            prop.method = false;
            prop.shorthand = false;

            if (isPattern || refDestructuringErrors) {
              startPos = this.start;
              startLoc = this.startLoc;
            }

            if (!isPattern) {
              isGenerator = this.eat(types.star);
            }
          }

          var containsEsc = this.containsEsc;
          this.parsePropertyName(prop);

          if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
            isAsync = true;
            isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
            this.parsePropertyName(prop, refDestructuringErrors);
          } else {
            isAsync = false;
          }

          this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
          return this.finishNode(prop, "Property");
        };

        pp$3.parsePropertyValue = function (prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          if ((isGenerator || isAsync) && this.type === types.colon) {
            this.unexpected();
          }

          if (this.eat(types.colon)) {
            prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
            prop.kind = "init";
          } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
            if (isPattern) {
              this.unexpected();
            }

            prop.kind = "init";
            prop.method = true;
            prop.value = this.parseMethod(isGenerator, isAsync);
          } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && this.type !== types.comma && this.type !== types.braceR) {
            if (isGenerator || isAsync) {
              this.unexpected();
            }

            prop.kind = prop.key.name;
            this.parsePropertyName(prop);
            prop.value = this.parseMethod(false);
            var paramCount = prop.kind === "get" ? 0 : 1;

            if (prop.value.params.length !== paramCount) {
              var start = prop.value.start;

              if (prop.kind === "get") {
                this.raiseRecoverable(start, "getter should have no params");
              } else {
                this.raiseRecoverable(start, "setter should have exactly one param");
              }
            } else {
              if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
                this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
              }
            }
          } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
            if (isGenerator || isAsync) {
              this.unexpected();
            }

            this.checkUnreserved(prop.key);

            if (prop.key.name === "await" && !this.awaitIdentPos) {
              this.awaitIdentPos = startPos;
            }

            prop.kind = "init";

            if (isPattern) {
              prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
            } else if (this.type === types.eq && refDestructuringErrors) {
              if (refDestructuringErrors.shorthandAssign < 0) {
                refDestructuringErrors.shorthandAssign = this.start;
              }

              prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
            } else {
              prop.value = prop.key;
            }

            prop.shorthand = true;
          } else {
            this.unexpected();
          }
        };

        pp$3.parsePropertyName = function (prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types.bracketL)) {
              prop.computed = true;
              prop.key = this.parseMaybeAssign();
              this.expect(types.bracketR);
              return prop.key;
            } else {
              prop.computed = false;
            }
          }

          return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
        };

        pp$3.initFunction = function (node) {
          node.id = null;

          if (this.options.ecmaVersion >= 6) {
            node.generator = node.expression = false;
          }

          if (this.options.ecmaVersion >= 8) {
            node.async = false;
          }
        };

        pp$3.parseMethod = function (isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(),
              oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              oldAwaitIdentPos = this.awaitIdentPos;
          this.initFunction(node);

          if (this.options.ecmaVersion >= 6) {
            node.generator = isGenerator;
          }

          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }

          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
          this.expect(types.parenL);
          node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
          this.checkYieldAwaitInDefaultParams();
          this.parseFunctionBody(node, false, true);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, "FunctionExpression");
        };

        pp$3.parseArrowExpression = function (node, params, isAsync) {
          var oldYieldPos = this.yieldPos,
              oldAwaitPos = this.awaitPos,
              oldAwaitIdentPos = this.awaitIdentPos;
          this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
          this.initFunction(node);

          if (this.options.ecmaVersion >= 8) {
            node.async = !!isAsync;
          }

          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          node.params = this.toAssignableList(params, true);
          this.parseFunctionBody(node, true, false);
          this.yieldPos = oldYieldPos;
          this.awaitPos = oldAwaitPos;
          this.awaitIdentPos = oldAwaitIdentPos;
          return this.finishNode(node, "ArrowFunctionExpression");
        };

        pp$3.parseFunctionBody = function (node, isArrowFunction, isMethod) {
          var isExpression = isArrowFunction && this.type !== types.braceL;
          var oldStrict = this.strict,
              useStrict = false;

          if (isExpression) {
            node.body = this.parseMaybeAssign();
            node.expression = true;
            this.checkParams(node, false);
          } else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);

            if (!oldStrict || nonSimple) {
              useStrict = this.strictDirective(this.end);

              if (useStrict && nonSimple) {
                this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
              }
            }

            var oldLabels = this.labels;
            this.labels = [];

            if (useStrict) {
              this.strict = true;
            }

            this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
            node.body = this.parseBlock(false);
            node.expression = false;
            this.adaptDirectivePrologue(node.body.body);
            this.labels = oldLabels;
          }

          this.exitScope();

          if (this.strict && node.id) {
            this.checkLVal(node.id, BIND_OUTSIDE);
          }

          this.strict = oldStrict;
        };

        pp$3.isSimpleParamList = function (params) {
          for (var i = 0, list = params; i < list.length; i += 1) {
            var param = list[i];

            if (param.type !== "Identifier") {
              return false;
            }
          }

          return true;
        };

        pp$3.checkParams = function (node, allowDuplicates) {
          var nameHash = {};

          for (var i = 0, list = node.params; i < list.length; i += 1) {
            var param = list[i];
            this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
          }
        };

        pp$3.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          var elts = [],
              first = true;

          while (!this.eat(close)) {
            if (!first) {
              this.expect(types.comma);

              if (allowTrailingComma && this.afterTrailingComma(close)) {
                break;
              }
            } else {
              first = false;
            }

            var elt = void 0;

            if (allowEmpty && this.type === types.comma) {
              elt = null;
            } else if (this.type === types.ellipsis) {
              elt = this.parseSpread(refDestructuringErrors);

              if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0) {
                refDestructuringErrors.trailingComma = this.start;
              }
            } else {
              elt = this.parseMaybeAssign(false, refDestructuringErrors);
            }

            elts.push(elt);
          }

          return elts;
        };

        pp$3.checkUnreserved = function (ref) {
          var start = ref.start;
          var end = ref.end;
          var name = ref.name;

          if (this.inGenerator && name === "yield") {
            this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
          }

          if (this.inAsync && name === "await") {
            this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
          }

          if (this.keywords.test(name)) {
            this.raise(start, "Unexpected keyword '" + name + "'");
          }

          if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
            return;
          }

          var re = this.strict ? this.reservedWordsStrict : this.reservedWords;

          if (re.test(name)) {
            if (!this.inAsync && name === "await") {
              this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
            }

            this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
          }
        };

        pp$3.parseIdent = function (liberal, isBinding) {
          var node = this.startNode();

          if (this.type === types.name) {
            node.name = this.value;
          } else if (this.type.keyword) {
            node.name = this.type.keyword;

            if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
              this.context.pop();
            }
          } else {
            this.unexpected();
          }

          this.next();
          this.finishNode(node, "Identifier");

          if (!liberal) {
            this.checkUnreserved(node);

            if (node.name === "await" && !this.awaitIdentPos) {
              this.awaitIdentPos = node.start;
            }
          }

          return node;
        };

        pp$3.parseYield = function (noIn) {
          if (!this.yieldPos) {
            this.yieldPos = this.start;
          }

          var node = this.startNode();
          this.next();

          if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {
            node.delegate = false;
            node.argument = null;
          } else {
            node.delegate = this.eat(types.star);
            node.argument = this.parseMaybeAssign(noIn);
          }

          return this.finishNode(node, "YieldExpression");
        };

        pp$3.parseAwait = function () {
          if (!this.awaitPos) {
            this.awaitPos = this.start;
          }

          var node = this.startNode();
          this.next();
          node.argument = this.parseMaybeUnary(null, true);
          return this.finishNode(node, "AwaitExpression");
        };

        var pp$4 = Parser.prototype;

        pp$4.raise = function (pos, message) {
          var loc = getLineInfo(this.input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          err.pos = pos;
          err.loc = loc;
          err.raisedAt = this.pos;
          throw err;
        };

        pp$4.raiseRecoverable = pp$4.raise;

        pp$4.curPosition = function () {
          if (this.options.locations) {
            return new Position(this.curLine, this.pos - this.lineStart);
          }
        };

        var pp$5 = Parser.prototype;

        var Scope = function Scope(flags) {
          this.flags = flags;
          this.var = [];
          this.lexical = [];
          this.functions = [];
        };

        pp$5.enterScope = function (flags) {
          this.scopeStack.push(new Scope(flags));
        };

        pp$5.exitScope = function () {
          this.scopeStack.pop();
        };

        pp$5.treatFunctionsAsVarInScope = function (scope) {
          return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
        };

        pp$5.declareName = function (name, bindingType, pos) {
          var redeclared = false;

          if (bindingType === BIND_LEXICAL) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
            scope.lexical.push(name);

            if (this.inModule && scope.flags & SCOPE_TOP) {
              delete this.undefinedExports[name];
            }
          } else if (bindingType === BIND_SIMPLE_CATCH) {
            var scope$1 = this.currentScope();
            scope$1.lexical.push(name);
          } else if (bindingType === BIND_FUNCTION) {
            var scope$2 = this.currentScope();

            if (this.treatFunctionsAsVar) {
              redeclared = scope$2.lexical.indexOf(name) > -1;
            } else {
              redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
            }

            scope$2.functions.push(name);
          } else {
            for (var i = this.scopeStack.length - 1; i >= 0; --i) {
              var scope$3 = this.scopeStack[i];

              if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
                redeclared = true;
                break;
              }

              scope$3.var.push(name);

              if (this.inModule && scope$3.flags & SCOPE_TOP) {
                delete this.undefinedExports[name];
              }

              if (scope$3.flags & SCOPE_VAR) {
                break;
              }
            }
          }

          if (redeclared) {
            this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
          }
        };

        pp$5.checkLocalExport = function (id) {
          if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
            this.undefinedExports[id.name] = id;
          }
        };

        pp$5.currentScope = function () {
          return this.scopeStack[this.scopeStack.length - 1];
        };

        pp$5.currentVarScope = function () {
          for (var i = this.scopeStack.length - 1;; i--) {
            var scope = this.scopeStack[i];

            if (scope.flags & SCOPE_VAR) {
              return scope;
            }
          }
        };

        pp$5.currentThisScope = function () {
          for (var i = this.scopeStack.length - 1;; i--) {
            var scope = this.scopeStack[i];

            if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
              return scope;
            }
          }
        };

        var Node = function Node(parser, pos, loc) {
          this.type = "";
          this.start = pos;
          this.end = 0;

          if (parser.options.locations) {
            this.loc = new SourceLocation(parser, loc);
          }

          if (parser.options.directSourceFile) {
            this.sourceFile = parser.options.directSourceFile;
          }

          if (parser.options.ranges) {
            this.range = [pos, 0];
          }
        };

        var pp$6 = Parser.prototype;

        pp$6.startNode = function () {
          return new Node(this, this.start, this.startLoc);
        };

        pp$6.startNodeAt = function (pos, loc) {
          return new Node(this, pos, loc);
        };

        function finishNodeAt(node, type, pos, loc) {
          node.type = type;
          node.end = pos;

          if (this.options.locations) {
            node.loc.end = loc;
          }

          if (this.options.ranges) {
            node.range[1] = pos;
          }

          return node;
        }

        pp$6.finishNode = function (node, type) {
          return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
        };

        pp$6.finishNodeAt = function (node, type, pos, loc) {
          return finishNodeAt.call(this, node, type, pos, loc);
        };

        var TokContext = function TokContext(token, isExpr, preserveSpace, override, generator) {
          this.token = token;
          this.isExpr = !!isExpr;
          this.preserveSpace = !!preserveSpace;
          this.override = override;
          this.generator = !!generator;
        };

        var types$1 = {
          b_stat: new TokContext("{", false),
          b_expr: new TokContext("{", true),
          b_tmpl: new TokContext("${", false),
          p_stat: new TokContext("(", false),
          p_expr: new TokContext("(", true),
          q_tmpl: new TokContext("`", true, true, function (p) {
            return p.tryReadTemplateToken();
          }),
          f_stat: new TokContext("function", false),
          f_expr: new TokContext("function", true),
          f_expr_gen: new TokContext("function", true, false, null, true),
          f_gen: new TokContext("function", false, false, null, true)
        };
        var pp$7 = Parser.prototype;

        pp$7.initialContext = function () {
          return [types$1.b_stat];
        };

        pp$7.braceIsBlock = function (prevType) {
          var parent = this.curContext();

          if (parent === types$1.f_expr || parent === types$1.f_stat) {
            return true;
          }

          if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
            return !parent.isExpr;
          }

          if (prevType === types._return || prevType === types.name && this.exprAllowed) {
            return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
          }

          if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {
            return true;
          }

          if (prevType === types.braceL) {
            return parent === types$1.b_stat;
          }

          if (prevType === types._var || prevType === types._const || prevType === types.name) {
            return false;
          }

          return !this.exprAllowed;
        };

        pp$7.inGeneratorContext = function () {
          for (var i = this.context.length - 1; i >= 1; i--) {
            var context = this.context[i];

            if (context.token === "function") {
              return context.generator;
            }
          }

          return false;
        };

        pp$7.updateContext = function (prevType) {
          var update,
              type = this.type;

          if (type.keyword && prevType === types.dot) {
            this.exprAllowed = false;
          } else if (update = type.updateContext) {
            update.call(this, prevType);
          } else {
            this.exprAllowed = type.beforeExpr;
          }
        };

        types.parenR.updateContext = types.braceR.updateContext = function () {
          if (this.context.length === 1) {
            this.exprAllowed = true;
            return;
          }

          var out = this.context.pop();

          if (out === types$1.b_stat && this.curContext().token === "function") {
            out = this.context.pop();
          }

          this.exprAllowed = !out.isExpr;
        };

        types.braceL.updateContext = function (prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
          this.exprAllowed = true;
        };

        types.dollarBraceL.updateContext = function () {
          this.context.push(types$1.b_tmpl);
          this.exprAllowed = true;
        };

        types.parenL.updateContext = function (prevType) {
          var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
          this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
          this.exprAllowed = true;
        };

        types.incDec.updateContext = function () {};

        types._function.updateContext = types._class.updateContext = function (prevType) {
          if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
            this.context.push(types$1.f_expr);
          } else {
            this.context.push(types$1.f_stat);
          }

          this.exprAllowed = false;
        };

        types.backQuote.updateContext = function () {
          if (this.curContext() === types$1.q_tmpl) {
            this.context.pop();
          } else {
            this.context.push(types$1.q_tmpl);
          }

          this.exprAllowed = false;
        };

        types.star.updateContext = function (prevType) {
          if (prevType === types._function) {
            var index = this.context.length - 1;

            if (this.context[index] === types$1.f_expr) {
              this.context[index] = types$1.f_expr_gen;
            } else {
              this.context[index] = types$1.f_gen;
            }
          }

          this.exprAllowed = true;
        };

        types.name.updateContext = function (prevType) {
          var allowed = false;

          if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
            if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
              allowed = true;
            }
          }

          this.exprAllowed = allowed;
        };

        var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
        var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
        var ecma11BinaryProperties = ecma10BinaryProperties;
        var unicodeBinaryProperties = {
          9: ecma9BinaryProperties,
          10: ecma10BinaryProperties,
          11: ecma11BinaryProperties
        };
        var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
        var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
        var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
        var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
        var unicodeScriptValues = {
          9: ecma9ScriptValues,
          10: ecma10ScriptValues,
          11: ecma11ScriptValues
        };
        var data = {};

        function buildUnicodeData(ecmaVersion) {
          var d = data[ecmaVersion] = {
            binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
            nonBinary: {
              General_Category: wordsRegexp(unicodeGeneralCategoryValues),
              Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
            }
          };
          d.nonBinary.Script_Extensions = d.nonBinary.Script;
          d.nonBinary.gc = d.nonBinary.General_Category;
          d.nonBinary.sc = d.nonBinary.Script;
          d.nonBinary.scx = d.nonBinary.Script_Extensions;
        }

        buildUnicodeData(9);
        buildUnicodeData(10);
        buildUnicodeData(11);
        var pp$8 = Parser.prototype;

        var RegExpValidationState = function RegExpValidationState(parser) {
          this.parser = parser;
          this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
          this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];
          this.source = "";
          this.flags = "";
          this.start = 0;
          this.switchU = false;
          this.switchN = false;
          this.pos = 0;
          this.lastIntValue = 0;
          this.lastStringValue = "";
          this.lastAssertionIsQuantifiable = false;
          this.numCapturingParens = 0;
          this.maxBackReference = 0;
          this.groupNames = [];
          this.backReferenceNames = [];
        };

        RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
          var unicode = flags.indexOf("u") !== -1;
          this.start = start | 0;
          this.source = pattern + "";
          this.flags = flags;
          this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
          this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
        };

        RegExpValidationState.prototype.raise = function raise(message) {
          this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
        };

        RegExpValidationState.prototype.at = function at(i) {
          var s = this.source;
          var l = s.length;

          if (i >= l) {
            return -1;
          }

          var c = s.charCodeAt(i);

          if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
            return c;
          }

          return (c << 10) + s.charCodeAt(i + 1) - 0x35FDC00;
        };

        RegExpValidationState.prototype.nextIndex = function nextIndex(i) {
          var s = this.source;
          var l = s.length;

          if (i >= l) {
            return l;
          }

          var c = s.charCodeAt(i);

          if (!this.switchU || c <= 0xD7FF || c >= 0xE000 || i + 1 >= l) {
            return i + 1;
          }

          return i + 2;
        };

        RegExpValidationState.prototype.current = function current() {
          return this.at(this.pos);
        };

        RegExpValidationState.prototype.lookahead = function lookahead() {
          return this.at(this.nextIndex(this.pos));
        };

        RegExpValidationState.prototype.advance = function advance() {
          this.pos = this.nextIndex(this.pos);
        };

        RegExpValidationState.prototype.eat = function eat(ch) {
          if (this.current() === ch) {
            this.advance();
            return true;
          }

          return false;
        };

        function codePointToString(ch) {
          if (ch <= 0xFFFF) {
            return String.fromCharCode(ch);
          }

          ch -= 0x10000;
          return String.fromCharCode((ch >> 10) + 0xD800, (ch & 0x03FF) + 0xDC00);
        }

        pp$8.validateRegExpFlags = function (state) {
          var validFlags = state.validFlags;
          var flags = state.flags;

          for (var i = 0; i < flags.length; i++) {
            var flag = flags.charAt(i);

            if (validFlags.indexOf(flag) === -1) {
              this.raise(state.start, "Invalid regular expression flag");
            }

            if (flags.indexOf(flag, i + 1) > -1) {
              this.raise(state.start, "Duplicate regular expression flag");
            }
          }
        };

        pp$8.validateRegExpPattern = function (state) {
          this.regexp_pattern(state);

          if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
            state.switchN = true;
            this.regexp_pattern(state);
          }
        };

        pp$8.regexp_pattern = function (state) {
          state.pos = 0;
          state.lastIntValue = 0;
          state.lastStringValue = "";
          state.lastAssertionIsQuantifiable = false;
          state.numCapturingParens = 0;
          state.maxBackReference = 0;
          state.groupNames.length = 0;
          state.backReferenceNames.length = 0;
          this.regexp_disjunction(state);

          if (state.pos !== state.source.length) {
            if (state.eat(0x29)) {
              state.raise("Unmatched ')'");
            }

            if (state.eat(0x5D) || state.eat(0x7D)) {
              state.raise("Lone quantifier brackets");
            }
          }

          if (state.maxBackReference > state.numCapturingParens) {
            state.raise("Invalid escape");
          }

          for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
            var name = list[i];

            if (state.groupNames.indexOf(name) === -1) {
              state.raise("Invalid named capture referenced");
            }
          }
        };

        pp$8.regexp_disjunction = function (state) {
          this.regexp_alternative(state);

          while (state.eat(0x7C)) {
            this.regexp_alternative(state);
          }

          if (this.regexp_eatQuantifier(state, true)) {
            state.raise("Nothing to repeat");
          }

          if (state.eat(0x7B)) {
            state.raise("Lone quantifier brackets");
          }
        };

        pp$8.regexp_alternative = function (state) {
          while (state.pos < state.source.length && this.regexp_eatTerm(state)) {}
        };

        pp$8.regexp_eatTerm = function (state) {
          if (this.regexp_eatAssertion(state)) {
            if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
              if (state.switchU) {
                state.raise("Invalid quantifier");
              }
            }

            return true;
          }

          if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
            this.regexp_eatQuantifier(state);
            return true;
          }

          return false;
        };

        pp$8.regexp_eatAssertion = function (state) {
          var start = state.pos;
          state.lastAssertionIsQuantifiable = false;

          if (state.eat(0x5E) || state.eat(0x24)) {
            return true;
          }

          if (state.eat(0x5C)) {
            if (state.eat(0x42) || state.eat(0x62)) {
              return true;
            }

            state.pos = start;
          }

          if (state.eat(0x28) && state.eat(0x3F)) {
            var lookbehind = false;

            if (this.options.ecmaVersion >= 9) {
              lookbehind = state.eat(0x3C);
            }

            if (state.eat(0x3D) || state.eat(0x21)) {
              this.regexp_disjunction(state);

              if (!state.eat(0x29)) {
                state.raise("Unterminated group");
              }

              state.lastAssertionIsQuantifiable = !lookbehind;
              return true;
            }
          }

          state.pos = start;
          return false;
        };

        pp$8.regexp_eatQuantifier = function (state, noError) {
          if (noError === void 0) noError = false;

          if (this.regexp_eatQuantifierPrefix(state, noError)) {
            state.eat(0x3F);
            return true;
          }

          return false;
        };

        pp$8.regexp_eatQuantifierPrefix = function (state, noError) {
          return state.eat(0x2A) || state.eat(0x2B) || state.eat(0x3F) || this.regexp_eatBracedQuantifier(state, noError);
        };

        pp$8.regexp_eatBracedQuantifier = function (state, noError) {
          var start = state.pos;

          if (state.eat(0x7B)) {
            var min = 0,
                max = -1;

            if (this.regexp_eatDecimalDigits(state)) {
              min = state.lastIntValue;

              if (state.eat(0x2C) && this.regexp_eatDecimalDigits(state)) {
                max = state.lastIntValue;
              }

              if (state.eat(0x7D)) {
                if (max !== -1 && max < min && !noError) {
                  state.raise("numbers out of order in {} quantifier");
                }

                return true;
              }
            }

            if (state.switchU && !noError) {
              state.raise("Incomplete quantifier");
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatAtom = function (state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(0x2E) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        };

        pp$8.regexp_eatReverseSolidusAtomEscape = function (state) {
          var start = state.pos;

          if (state.eat(0x5C)) {
            if (this.regexp_eatAtomEscape(state)) {
              return true;
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatUncapturingGroup = function (state) {
          var start = state.pos;

          if (state.eat(0x28)) {
            if (state.eat(0x3F) && state.eat(0x3A)) {
              this.regexp_disjunction(state);

              if (state.eat(0x29)) {
                return true;
              }

              state.raise("Unterminated group");
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatCapturingGroup = function (state) {
          if (state.eat(0x28)) {
            if (this.options.ecmaVersion >= 9) {
              this.regexp_groupSpecifier(state);
            } else if (state.current() === 0x3F) {
              state.raise("Invalid group");
            }

            this.regexp_disjunction(state);

            if (state.eat(0x29)) {
              state.numCapturingParens += 1;
              return true;
            }

            state.raise("Unterminated group");
          }

          return false;
        };

        pp$8.regexp_eatExtendedAtom = function (state) {
          return state.eat(0x2E) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        };

        pp$8.regexp_eatInvalidBracedQuantifier = function (state) {
          if (this.regexp_eatBracedQuantifier(state, true)) {
            state.raise("Nothing to repeat");
          }

          return false;
        };

        pp$8.regexp_eatSyntaxCharacter = function (state) {
          var ch = state.current();

          if (isSyntaxCharacter(ch)) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }

          return false;
        };

        function isSyntaxCharacter(ch) {
          return ch === 0x24 || ch >= 0x28 && ch <= 0x2B || ch === 0x2E || ch === 0x3F || ch >= 0x5B && ch <= 0x5E || ch >= 0x7B && ch <= 0x7D;
        }

        pp$8.regexp_eatPatternCharacters = function (state) {
          var start = state.pos;
          var ch = 0;

          while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
            state.advance();
          }

          return state.pos !== start;
        };

        pp$8.regexp_eatExtendedPatternCharacter = function (state) {
          var ch = state.current();

          if (ch !== -1 && ch !== 0x24 && !(ch >= 0x28 && ch <= 0x2B) && ch !== 0x2E && ch !== 0x3F && ch !== 0x5B && ch !== 0x5E && ch !== 0x7C) {
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_groupSpecifier = function (state) {
          if (state.eat(0x3F)) {
            if (this.regexp_eatGroupName(state)) {
              if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
                state.raise("Duplicate capture group name");
              }

              state.groupNames.push(state.lastStringValue);
              return;
            }

            state.raise("Invalid group");
          }
        };

        pp$8.regexp_eatGroupName = function (state) {
          state.lastStringValue = "";

          if (state.eat(0x3C)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(0x3E)) {
              return true;
            }

            state.raise("Invalid capture group name");
          }

          return false;
        };

        pp$8.regexp_eatRegExpIdentifierName = function (state) {
          state.lastStringValue = "";

          if (this.regexp_eatRegExpIdentifierStart(state)) {
            state.lastStringValue += codePointToString(state.lastIntValue);

            while (this.regexp_eatRegExpIdentifierPart(state)) {
              state.lastStringValue += codePointToString(state.lastIntValue);
            }

            return true;
          }

          return false;
        };

        pp$8.regexp_eatRegExpIdentifierStart = function (state) {
          var start = state.pos;
          var ch = state.current();
          state.advance();

          if (ch === 0x5C && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
            ch = state.lastIntValue;
          }

          if (isRegExpIdentifierStart(ch)) {
            state.lastIntValue = ch;
            return true;
          }

          state.pos = start;
          return false;
        };

        function isRegExpIdentifierStart(ch) {
          return isIdentifierStart(ch, true) || ch === 0x24 || ch === 0x5F;
        }

        pp$8.regexp_eatRegExpIdentifierPart = function (state) {
          var start = state.pos;
          var ch = state.current();
          state.advance();

          if (ch === 0x5C && this.regexp_eatRegExpUnicodeEscapeSequence(state)) {
            ch = state.lastIntValue;
          }

          if (isRegExpIdentifierPart(ch)) {
            state.lastIntValue = ch;
            return true;
          }

          state.pos = start;
          return false;
        };

        function isRegExpIdentifierPart(ch) {
          return isIdentifierChar(ch, true) || ch === 0x24 || ch === 0x5F || ch === 0x200C || ch === 0x200D;
        }

        pp$8.regexp_eatAtomEscape = function (state) {
          if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
            return true;
          }

          if (state.switchU) {
            if (state.current() === 0x63) {
              state.raise("Invalid unicode escape");
            }

            state.raise("Invalid escape");
          }

          return false;
        };

        pp$8.regexp_eatBackReference = function (state) {
          var start = state.pos;

          if (this.regexp_eatDecimalEscape(state)) {
            var n = state.lastIntValue;

            if (state.switchU) {
              if (n > state.maxBackReference) {
                state.maxBackReference = n;
              }

              return true;
            }

            if (n <= state.numCapturingParens) {
              return true;
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatKGroupName = function (state) {
          if (state.eat(0x6B)) {
            if (this.regexp_eatGroupName(state)) {
              state.backReferenceNames.push(state.lastStringValue);
              return true;
            }

            state.raise("Invalid named reference");
          }

          return false;
        };

        pp$8.regexp_eatCharacterEscape = function (state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        };

        pp$8.regexp_eatCControlLetter = function (state) {
          var start = state.pos;

          if (state.eat(0x63)) {
            if (this.regexp_eatControlLetter(state)) {
              return true;
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatZero = function (state) {
          if (state.current() === 0x30 && !isDecimalDigit(state.lookahead())) {
            state.lastIntValue = 0;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatControlEscape = function (state) {
          var ch = state.current();

          if (ch === 0x74) {
            state.lastIntValue = 0x09;
            state.advance();
            return true;
          }

          if (ch === 0x6E) {
            state.lastIntValue = 0x0A;
            state.advance();
            return true;
          }

          if (ch === 0x76) {
            state.lastIntValue = 0x0B;
            state.advance();
            return true;
          }

          if (ch === 0x66) {
            state.lastIntValue = 0x0C;
            state.advance();
            return true;
          }

          if (ch === 0x72) {
            state.lastIntValue = 0x0D;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatControlLetter = function (state) {
          var ch = state.current();

          if (isControlLetter(ch)) {
            state.lastIntValue = ch % 0x20;
            state.advance();
            return true;
          }

          return false;
        };

        function isControlLetter(ch) {
          return ch >= 0x41 && ch <= 0x5A || ch >= 0x61 && ch <= 0x7A;
        }

        pp$8.regexp_eatRegExpUnicodeEscapeSequence = function (state) {
          var start = state.pos;

          if (state.eat(0x75)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;

              if (state.switchU && lead >= 0xD800 && lead <= 0xDBFF) {
                var leadSurrogateEnd = state.pos;

                if (state.eat(0x5C) && state.eat(0x75) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;

                  if (trail >= 0xDC00 && trail <= 0xDFFF) {
                    state.lastIntValue = (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
                    return true;
                  }
                }

                state.pos = leadSurrogateEnd;
                state.lastIntValue = lead;
              }

              return true;
            }

            if (state.switchU && state.eat(0x7B) && this.regexp_eatHexDigits(state) && state.eat(0x7D) && isValidUnicode(state.lastIntValue)) {
              return true;
            }

            if (state.switchU) {
              state.raise("Invalid unicode escape");
            }

            state.pos = start;
          }

          return false;
        };

        function isValidUnicode(ch) {
          return ch >= 0 && ch <= 0x10FFFF;
        }

        pp$8.regexp_eatIdentityEscape = function (state) {
          if (state.switchU) {
            if (this.regexp_eatSyntaxCharacter(state)) {
              return true;
            }

            if (state.eat(0x2F)) {
              state.lastIntValue = 0x2F;
              return true;
            }

            return false;
          }

          var ch = state.current();

          if (ch !== 0x63 && (!state.switchN || ch !== 0x6B)) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatDecimalEscape = function (state) {
          state.lastIntValue = 0;
          var ch = state.current();

          if (ch >= 0x31 && ch <= 0x39) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30);
              state.advance();
            } while ((ch = state.current()) >= 0x30 && ch <= 0x39);

            return true;
          }

          return false;
        };

        pp$8.regexp_eatCharacterClassEscape = function (state) {
          var ch = state.current();

          if (isCharacterClassEscape(ch)) {
            state.lastIntValue = -1;
            state.advance();
            return true;
          }

          if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 0x50 || ch === 0x70)) {
            state.lastIntValue = -1;
            state.advance();

            if (state.eat(0x7B) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(0x7D)) {
              return true;
            }

            state.raise("Invalid property name");
          }

          return false;
        };

        function isCharacterClassEscape(ch) {
          return ch === 0x64 || ch === 0x44 || ch === 0x73 || ch === 0x53 || ch === 0x77 || ch === 0x57;
        }

        pp$8.regexp_eatUnicodePropertyValueExpression = function (state) {
          var start = state.pos;

          if (this.regexp_eatUnicodePropertyName(state) && state.eat(0x3D)) {
            var name = state.lastStringValue;

            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value = state.lastStringValue;
              this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
              return true;
            }
          }

          state.pos = start;

          if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
            return true;
          }

          return false;
        };

        pp$8.regexp_validateUnicodePropertyNameAndValue = function (state, name, value) {
          if (!has(state.unicodeProperties.nonBinary, name)) {
            state.raise("Invalid property name");
          }

          if (!state.unicodeProperties.nonBinary[name].test(value)) {
            state.raise("Invalid property value");
          }
        };

        pp$8.regexp_validateUnicodePropertyNameOrValue = function (state, nameOrValue) {
          if (!state.unicodeProperties.binary.test(nameOrValue)) {
            state.raise("Invalid property name");
          }
        };

        pp$8.regexp_eatUnicodePropertyName = function (state) {
          var ch = 0;
          state.lastStringValue = "";

          while (isUnicodePropertyNameCharacter(ch = state.current())) {
            state.lastStringValue += codePointToString(ch);
            state.advance();
          }

          return state.lastStringValue !== "";
        };

        function isUnicodePropertyNameCharacter(ch) {
          return isControlLetter(ch) || ch === 0x5F;
        }

        pp$8.regexp_eatUnicodePropertyValue = function (state) {
          var ch = 0;
          state.lastStringValue = "";

          while (isUnicodePropertyValueCharacter(ch = state.current())) {
            state.lastStringValue += codePointToString(ch);
            state.advance();
          }

          return state.lastStringValue !== "";
        };

        function isUnicodePropertyValueCharacter(ch) {
          return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
        }

        pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function (state) {
          return this.regexp_eatUnicodePropertyValue(state);
        };

        pp$8.regexp_eatCharacterClass = function (state) {
          if (state.eat(0x5B)) {
            state.eat(0x5E);
            this.regexp_classRanges(state);

            if (state.eat(0x5D)) {
              return true;
            }

            state.raise("Unterminated character class");
          }

          return false;
        };

        pp$8.regexp_classRanges = function (state) {
          while (this.regexp_eatClassAtom(state)) {
            var left = state.lastIntValue;

            if (state.eat(0x2D) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;

              if (state.switchU && (left === -1 || right === -1)) {
                state.raise("Invalid character class");
              }

              if (left !== -1 && right !== -1 && left > right) {
                state.raise("Range out of order in character class");
              }
            }
          }
        };

        pp$8.regexp_eatClassAtom = function (state) {
          var start = state.pos;

          if (state.eat(0x5C)) {
            if (this.regexp_eatClassEscape(state)) {
              return true;
            }

            if (state.switchU) {
              var ch$1 = state.current();

              if (ch$1 === 0x63 || isOctalDigit(ch$1)) {
                state.raise("Invalid class escape");
              }

              state.raise("Invalid escape");
            }

            state.pos = start;
          }

          var ch = state.current();

          if (ch !== 0x5D) {
            state.lastIntValue = ch;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatClassEscape = function (state) {
          var start = state.pos;

          if (state.eat(0x62)) {
            state.lastIntValue = 0x08;
            return true;
          }

          if (state.switchU && state.eat(0x2D)) {
            state.lastIntValue = 0x2D;
            return true;
          }

          if (!state.switchU && state.eat(0x63)) {
            if (this.regexp_eatClassControlLetter(state)) {
              return true;
            }

            state.pos = start;
          }

          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        };

        pp$8.regexp_eatClassControlLetter = function (state) {
          var ch = state.current();

          if (isDecimalDigit(ch) || ch === 0x5F) {
            state.lastIntValue = ch % 0x20;
            state.advance();
            return true;
          }

          return false;
        };

        pp$8.regexp_eatHexEscapeSequence = function (state) {
          var start = state.pos;

          if (state.eat(0x78)) {
            if (this.regexp_eatFixedHexDigits(state, 2)) {
              return true;
            }

            if (state.switchU) {
              state.raise("Invalid escape");
            }

            state.pos = start;
          }

          return false;
        };

        pp$8.regexp_eatDecimalDigits = function (state) {
          var start = state.pos;
          var ch = 0;
          state.lastIntValue = 0;

          while (isDecimalDigit(ch = state.current())) {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 0x30);
            state.advance();
          }

          return state.pos !== start;
        };

        function isDecimalDigit(ch) {
          return ch >= 0x30 && ch <= 0x39;
        }

        pp$8.regexp_eatHexDigits = function (state) {
          var start = state.pos;
          var ch = 0;
          state.lastIntValue = 0;

          while (isHexDigit(ch = state.current())) {
            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
            state.advance();
          }

          return state.pos !== start;
        };

        function isHexDigit(ch) {
          return ch >= 0x30 && ch <= 0x39 || ch >= 0x41 && ch <= 0x46 || ch >= 0x61 && ch <= 0x66;
        }

        function hexToInt(ch) {
          if (ch >= 0x41 && ch <= 0x46) {
            return 10 + (ch - 0x41);
          }

          if (ch >= 0x61 && ch <= 0x66) {
            return 10 + (ch - 0x61);
          }

          return ch - 0x30;
        }

        pp$8.regexp_eatLegacyOctalEscapeSequence = function (state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;

            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;

              if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
                state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
              } else {
                state.lastIntValue = n1 * 8 + n2;
              }
            } else {
              state.lastIntValue = n1;
            }

            return true;
          }

          return false;
        };

        pp$8.regexp_eatOctalDigit = function (state) {
          var ch = state.current();

          if (isOctalDigit(ch)) {
            state.lastIntValue = ch - 0x30;
            state.advance();
            return true;
          }

          state.lastIntValue = 0;
          return false;
        };

        function isOctalDigit(ch) {
          return ch >= 0x30 && ch <= 0x37;
        }

        pp$8.regexp_eatFixedHexDigits = function (state, length) {
          var start = state.pos;
          state.lastIntValue = 0;

          for (var i = 0; i < length; ++i) {
            var ch = state.current();

            if (!isHexDigit(ch)) {
              state.pos = start;
              return false;
            }

            state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
            state.advance();
          }

          return true;
        };

        var Token = function Token(p) {
          this.type = p.type;
          this.value = p.value;
          this.start = p.start;
          this.end = p.end;

          if (p.options.locations) {
            this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
          }

          if (p.options.ranges) {
            this.range = [p.start, p.end];
          }
        };

        var pp$9 = Parser.prototype;

        pp$9.next = function () {
          if (this.options.onToken) {
            this.options.onToken(new Token(this));
          }

          this.lastTokEnd = this.end;
          this.lastTokStart = this.start;
          this.lastTokEndLoc = this.endLoc;
          this.lastTokStartLoc = this.startLoc;
          this.nextToken();
        };

        pp$9.getToken = function () {
          this.next();
          return new Token(this);
        };

        if (typeof Symbol !== "undefined") {
          pp$9[Symbol.iterator] = function () {
            var this$1 = this;
            return {
              next: function next() {
                var token = this$1.getToken();
                return {
                  done: token.type === types.eof,
                  value: token
                };
              }
            };
          };
        }

        pp$9.curContext = function () {
          return this.context[this.context.length - 1];
        };

        pp$9.nextToken = function () {
          var curContext = this.curContext();

          if (!curContext || !curContext.preserveSpace) {
            this.skipSpace();
          }

          this.start = this.pos;

          if (this.options.locations) {
            this.startLoc = this.curPosition();
          }

          if (this.pos >= this.input.length) {
            return this.finishToken(types.eof);
          }

          if (curContext.override) {
            return curContext.override(this);
          } else {
            this.readToken(this.fullCharCodeAtPos());
          }
        };

        pp$9.readToken = function (code) {
          if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
            return this.readWord();
          }

          return this.getTokenFromCode(code);
        };

        pp$9.fullCharCodeAtPos = function () {
          var code = this.input.charCodeAt(this.pos);

          if (code <= 0xd7ff || code >= 0xe000) {
            return code;
          }

          var next = this.input.charCodeAt(this.pos + 1);
          return (code << 10) + next - 0x35fdc00;
        };

        pp$9.skipBlockComment = function () {
          var startLoc = this.options.onComment && this.curPosition();
          var start = this.pos,
              end = this.input.indexOf("*/", this.pos += 2);

          if (end === -1) {
            this.raise(this.pos - 2, "Unterminated comment");
          }

          this.pos = end + 2;

          if (this.options.locations) {
            lineBreakG.lastIndex = start;
            var match;

            while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
              ++this.curLine;
              this.lineStart = match.index + match[0].length;
            }
          }

          if (this.options.onComment) {
            this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
          }
        };

        pp$9.skipLineComment = function (startSkip) {
          var start = this.pos;
          var startLoc = this.options.onComment && this.curPosition();
          var ch = this.input.charCodeAt(this.pos += startSkip);

          while (this.pos < this.input.length && !isNewLine(ch)) {
            ch = this.input.charCodeAt(++this.pos);
          }

          if (this.options.onComment) {
            this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
          }
        };

        pp$9.skipSpace = function () {
          loop: while (this.pos < this.input.length) {
            var ch = this.input.charCodeAt(this.pos);

            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;

              case 13:
                if (this.input.charCodeAt(this.pos + 1) === 10) {
                  ++this.pos;
                }

              case 10:
              case 8232:
              case 8233:
                ++this.pos;

                if (this.options.locations) {
                  ++this.curLine;
                  this.lineStart = this.pos;
                }

                break;

              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;

                  case 47:
                    this.skipLineComment(2);
                    break;

                  default:
                    break loop;
                }

                break;

              default:
                if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                  ++this.pos;
                } else {
                  break loop;
                }

            }
          }
        };

        pp$9.finishToken = function (type, val) {
          this.end = this.pos;

          if (this.options.locations) {
            this.endLoc = this.curPosition();
          }

          var prevType = this.type;
          this.type = type;
          this.value = val;
          this.updateContext(prevType);
        };

        pp$9.readToken_dot = function () {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next >= 48 && next <= 57) {
            return this.readNumber(true);
          }

          var next2 = this.input.charCodeAt(this.pos + 2);

          if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
            this.pos += 3;
            return this.finishToken(types.ellipsis);
          } else {
            ++this.pos;
            return this.finishToken(types.dot);
          }
        };

        pp$9.readToken_slash = function () {
          var next = this.input.charCodeAt(this.pos + 1);

          if (this.exprAllowed) {
            ++this.pos;
            return this.readRegexp();
          }

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(types.slash, 1);
        };

        pp$9.readToken_mult_modulo_exp = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);
          var size = 1;
          var tokentype = code === 42 ? types.star : types.modulo;

          if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
            ++size;
            tokentype = types.starstar;
            next = this.input.charCodeAt(this.pos + 2);
          }

          if (next === 61) {
            return this.finishOp(types.assign, size + 1);
          }

          return this.finishOp(tokentype, size);
        };

        pp$9.readToken_pipe_amp = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === code) {
            return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
          }

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
        };

        pp$9.readToken_caret = function () {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(types.bitwiseXOR, 1);
        };

        pp$9.readToken_plus_min = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === code) {
            if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
              this.skipLineComment(3);
              this.skipSpace();
              return this.nextToken();
            }

            return this.finishOp(types.incDec, 2);
          }

          if (next === 61) {
            return this.finishOp(types.assign, 2);
          }

          return this.finishOp(types.plusMin, 1);
        };

        pp$9.readToken_lt_gt = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);
          var size = 1;

          if (next === code) {
            size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;

            if (this.input.charCodeAt(this.pos + size) === 61) {
              return this.finishOp(types.assign, size + 1);
            }

            return this.finishOp(types.bitShift, size);
          }

          if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
            this.skipLineComment(4);
            this.skipSpace();
            return this.nextToken();
          }

          if (next === 61) {
            size = 2;
          }

          return this.finishOp(types.relational, size);
        };

        pp$9.readToken_eq_excl = function (code) {
          var next = this.input.charCodeAt(this.pos + 1);

          if (next === 61) {
            return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
          }

          if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
            this.pos += 2;
            return this.finishToken(types.arrow);
          }

          return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
        };

        pp$9.getTokenFromCode = function (code) {
          switch (code) {
            case 46:
              return this.readToken_dot();

            case 40:
              ++this.pos;
              return this.finishToken(types.parenL);

            case 41:
              ++this.pos;
              return this.finishToken(types.parenR);

            case 59:
              ++this.pos;
              return this.finishToken(types.semi);

            case 44:
              ++this.pos;
              return this.finishToken(types.comma);

            case 91:
              ++this.pos;
              return this.finishToken(types.bracketL);

            case 93:
              ++this.pos;
              return this.finishToken(types.bracketR);

            case 123:
              ++this.pos;
              return this.finishToken(types.braceL);

            case 125:
              ++this.pos;
              return this.finishToken(types.braceR);

            case 58:
              ++this.pos;
              return this.finishToken(types.colon);

            case 63:
              ++this.pos;
              return this.finishToken(types.question);

            case 96:
              if (this.options.ecmaVersion < 6) {
                break;
              }

              ++this.pos;
              return this.finishToken(types.backQuote);

            case 48:
              var next = this.input.charCodeAt(this.pos + 1);

              if (next === 120 || next === 88) {
                return this.readRadixNumber(16);
              }

              if (this.options.ecmaVersion >= 6) {
                if (next === 111 || next === 79) {
                  return this.readRadixNumber(8);
                }

                if (next === 98 || next === 66) {
                  return this.readRadixNumber(2);
                }
              }

            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return this.readNumber(false);

            case 34:
            case 39:
              return this.readString(code);

            case 47:
              return this.readToken_slash();

            case 37:
            case 42:
              return this.readToken_mult_modulo_exp(code);

            case 124:
            case 38:
              return this.readToken_pipe_amp(code);

            case 94:
              return this.readToken_caret();

            case 43:
            case 45:
              return this.readToken_plus_min(code);

            case 60:
            case 62:
              return this.readToken_lt_gt(code);

            case 61:
            case 33:
              return this.readToken_eq_excl(code);

            case 126:
              return this.finishOp(types.prefix, 1);
          }

          this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
        };

        pp$9.finishOp = function (type, size) {
          var str = this.input.slice(this.pos, this.pos + size);
          this.pos += size;
          return this.finishToken(type, str);
        };

        pp$9.readRegexp = function () {
          var escaped,
              inClass,
              start = this.pos;

          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(start, "Unterminated regular expression");
            }

            var ch = this.input.charAt(this.pos);

            if (lineBreak.test(ch)) {
              this.raise(start, "Unterminated regular expression");
            }

            if (!escaped) {
              if (ch === "[") {
                inClass = true;
              } else if (ch === "]" && inClass) {
                inClass = false;
              } else if (ch === "/" && !inClass) {
                break;
              }

              escaped = ch === "\\";
            } else {
              escaped = false;
            }

            ++this.pos;
          }

          var pattern = this.input.slice(start, this.pos);
          ++this.pos;
          var flagsStart = this.pos;
          var flags = this.readWord1();

          if (this.containsEsc) {
            this.unexpected(flagsStart);
          }

          var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
          state.reset(start, pattern, flags);
          this.validateRegExpFlags(state);
          this.validateRegExpPattern(state);
          var value = null;

          try {
            value = new RegExp(pattern, flags);
          } catch (e) {}

          return this.finishToken(types.regexp, {
            pattern: pattern,
            flags: flags,
            value: value
          });
        };

        pp$9.readInt = function (radix, len) {
          var start = this.pos,
              total = 0;

          for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
            var code = this.input.charCodeAt(this.pos),
                val = void 0;

            if (code >= 97) {
              val = code - 97 + 10;
            } else if (code >= 65) {
              val = code - 65 + 10;
            } else if (code >= 48 && code <= 57) {
              val = code - 48;
            } else {
              val = Infinity;
            }

            if (val >= radix) {
              break;
            }

            ++this.pos;
            total = total * radix + val;
          }

          if (this.pos === start || len != null && this.pos - start !== len) {
            return null;
          }

          return total;
        };

        pp$9.readRadixNumber = function (radix) {
          var start = this.pos;
          this.pos += 2;
          var val = this.readInt(radix);

          if (val == null) {
            this.raise(this.start + 2, "Expected number in radix " + radix);
          }

          if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
            val = typeof BigInt !== "undefined" ? BigInt(this.input.slice(start, this.pos)) : null;
            ++this.pos;
          } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }

          return this.finishToken(types.num, val);
        };

        pp$9.readNumber = function (startsWithDot) {
          var start = this.pos;

          if (!startsWithDot && this.readInt(10) === null) {
            this.raise(start, "Invalid number");
          }

          var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;

          if (octal && this.strict) {
            this.raise(start, "Invalid number");
          }

          if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
            octal = false;
          }

          var next = this.input.charCodeAt(this.pos);

          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
            var str$1 = this.input.slice(start, this.pos);
            var val$1 = typeof BigInt !== "undefined" ? BigInt(str$1) : null;
            ++this.pos;

            if (isIdentifierStart(this.fullCharCodeAtPos())) {
              this.raise(this.pos, "Identifier directly after number");
            }

            return this.finishToken(types.num, val$1);
          }

          if (next === 46 && !octal) {
            ++this.pos;
            this.readInt(10);
            next = this.input.charCodeAt(this.pos);
          }

          if ((next === 69 || next === 101) && !octal) {
            next = this.input.charCodeAt(++this.pos);

            if (next === 43 || next === 45) {
              ++this.pos;
            }

            if (this.readInt(10) === null) {
              this.raise(start, "Invalid number");
            }
          }

          if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }

          var str = this.input.slice(start, this.pos);
          var val = octal ? parseInt(str, 8) : parseFloat(str);
          return this.finishToken(types.num, val);
        };

        pp$9.readCodePoint = function () {
          var ch = this.input.charCodeAt(this.pos),
              code;

          if (ch === 123) {
            if (this.options.ecmaVersion < 6) {
              this.unexpected();
            }

            var codePos = ++this.pos;
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
            ++this.pos;

            if (code > 0x10FFFF) {
              this.invalidStringToken(codePos, "Code point out of bounds");
            }
          } else {
            code = this.readHexChar(4);
          }

          return code;
        };

        function codePointToString$1(code) {
          if (code <= 0xFFFF) {
            return String.fromCharCode(code);
          }

          code -= 0x10000;
          return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
        }

        pp$9.readString = function (quote) {
          var out = "",
              chunkStart = ++this.pos;

          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(this.start, "Unterminated string constant");
            }

            var ch = this.input.charCodeAt(this.pos);

            if (ch === quote) {
              break;
            }

            if (ch === 92) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.readEscapedChar(false);
              chunkStart = this.pos;
            } else {
              if (isNewLine(ch, this.options.ecmaVersion >= 10)) {
                this.raise(this.start, "Unterminated string constant");
              }

              ++this.pos;
            }
          }

          out += this.input.slice(chunkStart, this.pos++);
          return this.finishToken(types.string, out);
        };

        var INVALID_TEMPLATE_ESCAPE_ERROR = {};

        pp$9.tryReadTemplateToken = function () {
          this.inTemplateElement = true;

          try {
            this.readTmplToken();
          } catch (err) {
            if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
              this.readInvalidTemplateToken();
            } else {
              throw err;
            }
          }

          this.inTemplateElement = false;
        };

        pp$9.invalidStringToken = function (position, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
            throw INVALID_TEMPLATE_ESCAPE_ERROR;
          } else {
            this.raise(position, message);
          }
        };

        pp$9.readTmplToken = function () {
          var out = "",
              chunkStart = this.pos;

          for (;;) {
            if (this.pos >= this.input.length) {
              this.raise(this.start, "Unterminated template");
            }

            var ch = this.input.charCodeAt(this.pos);

            if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
              if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {
                if (ch === 36) {
                  this.pos += 2;
                  return this.finishToken(types.dollarBraceL);
                } else {
                  ++this.pos;
                  return this.finishToken(types.backQuote);
                }
              }

              out += this.input.slice(chunkStart, this.pos);
              return this.finishToken(types.template, out);
            }

            if (ch === 92) {
              out += this.input.slice(chunkStart, this.pos);
              out += this.readEscapedChar(true);
              chunkStart = this.pos;
            } else if (isNewLine(ch)) {
              out += this.input.slice(chunkStart, this.pos);
              ++this.pos;

              switch (ch) {
                case 13:
                  if (this.input.charCodeAt(this.pos) === 10) {
                    ++this.pos;
                  }

                case 10:
                  out += "\n";
                  break;

                default:
                  out += String.fromCharCode(ch);
                  break;
              }

              if (this.options.locations) {
                ++this.curLine;
                this.lineStart = this.pos;
              }

              chunkStart = this.pos;
            } else {
              ++this.pos;
            }
          }
        };

        pp$9.readInvalidTemplateToken = function () {
          for (; this.pos < this.input.length; this.pos++) {
            switch (this.input[this.pos]) {
              case "\\":
                ++this.pos;
                break;

              case "$":
                if (this.input[this.pos + 1] !== "{") {
                  break;
                }

              case "`":
                return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos));
            }
          }

          this.raise(this.start, "Unterminated template");
        };

        pp$9.readEscapedChar = function (inTemplate) {
          var ch = this.input.charCodeAt(++this.pos);
          ++this.pos;

          switch (ch) {
            case 110:
              return "\n";

            case 114:
              return "\r";

            case 120:
              return String.fromCharCode(this.readHexChar(2));

            case 117:
              return codePointToString$1(this.readCodePoint());

            case 116:
              return "\t";

            case 98:
              return "\b";

            case 118:
              return "\x0B";

            case 102:
              return "\f";

            case 13:
              if (this.input.charCodeAt(this.pos) === 10) {
                ++this.pos;
              }

            case 10:
              if (this.options.locations) {
                this.lineStart = this.pos;
                ++this.curLine;
              }

              return "";

            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
                var octal = parseInt(octalStr, 8);

                if (octal > 255) {
                  octalStr = octalStr.slice(0, -1);
                  octal = parseInt(octalStr, 8);
                }

                this.pos += octalStr.length - 1;
                ch = this.input.charCodeAt(this.pos);

                if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                  this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
                }

                return String.fromCharCode(octal);
              }

              if (isNewLine(ch)) {
                return "";
              }

              return String.fromCharCode(ch);
          }
        };

        pp$9.readHexChar = function (len) {
          var codePos = this.pos;
          var n = this.readInt(16, len);

          if (n === null) {
            this.invalidStringToken(codePos, "Bad character escape sequence");
          }

          return n;
        };

        pp$9.readWord1 = function () {
          this.containsEsc = false;
          var word = "",
              first = true,
              chunkStart = this.pos;
          var astral = this.options.ecmaVersion >= 6;

          while (this.pos < this.input.length) {
            var ch = this.fullCharCodeAtPos();

            if (isIdentifierChar(ch, astral)) {
              this.pos += ch <= 0xffff ? 1 : 2;
            } else if (ch === 92) {
              this.containsEsc = true;
              word += this.input.slice(chunkStart, this.pos);
              var escStart = this.pos;

              if (this.input.charCodeAt(++this.pos) !== 117) {
                this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
              }

              ++this.pos;
              var esc = this.readCodePoint();

              if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
                this.invalidStringToken(escStart, "Invalid Unicode escape");
              }

              word += codePointToString$1(esc);
              chunkStart = this.pos;
            } else {
              break;
            }

            first = false;
          }

          return word + this.input.slice(chunkStart, this.pos);
        };

        pp$9.readWord = function () {
          var word = this.readWord1();
          var type = types.name;

          if (this.keywords.test(word)) {
            if (this.containsEsc) {
              this.raiseRecoverable(this.start, "Escape sequence in keyword " + word);
            }

            type = keywords$1[word];
          }

          return this.finishToken(type, word);
        };

        var version = "7.1.0";
        Parser.acorn = {
          Parser: Parser,
          version: version,
          defaultOptions: defaultOptions,
          Position: Position,
          SourceLocation: SourceLocation,
          getLineInfo: getLineInfo,
          Node: Node,
          TokenType: TokenType,
          tokTypes: types,
          keywordTypes: keywords$1,
          TokContext: TokContext,
          tokContexts: types$1,
          isIdentifierChar: isIdentifierChar,
          isIdentifierStart: isIdentifierStart,
          Token: Token,
          isNewLine: isNewLine,
          lineBreak: lineBreak,
          lineBreakG: lineBreakG,
          nonASCIIwhitespace: nonASCIIwhitespace
        };

        function parse(input, options) {
          return Parser.parse(input, options);
        }

        function parseExpressionAt(input, pos, options) {
          return Parser.parseExpressionAt(input, pos, options);
        }

        function tokenizer(input, options) {
          return Parser.tokenizer(input, options);
        }

        exports.Node = Node;
        exports.Parser = Parser;
        exports.Position = Position;
        exports.SourceLocation = SourceLocation;
        exports.TokContext = TokContext;
        exports.Token = Token;
        exports.TokenType = TokenType;
        exports.defaultOptions = defaultOptions;
        exports.getLineInfo = getLineInfo;
        exports.isIdentifierChar = isIdentifierChar;
        exports.isIdentifierStart = isIdentifierStart;
        exports.isNewLine = isNewLine;
        exports.keywordTypes = keywords$1;
        exports.lineBreak = lineBreak;
        exports.lineBreakG = lineBreakG;
        exports.nonASCIIwhitespace = nonASCIIwhitespace;
        exports.parse = parse;
        exports.parseExpressionAt = parseExpressionAt;
        exports.tokContexts = types$1;
        exports.tokTypes = types;
        exports.tokenizer = tokenizer;
        exports.version = version;
        Object.defineProperty(exports, '__esModule', {
          value: true
        });
      });
    }, {}],
    2: [function (require, module, exports) {}, {}],
    3: [function (require, module, exports) {
      function glWiretap(gl) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var _options$contextName = options.contextName,
            contextName = _options$contextName === void 0 ? 'gl' : _options$contextName,
            throwGetError = options.throwGetError,
            useTrackablePrimitives = options.useTrackablePrimitives,
            readPixelsFile = options.readPixelsFile,
            _options$recording = options.recording,
            recording = _options$recording === void 0 ? [] : _options$recording,
            _options$variables = options.variables,
            variables = _options$variables === void 0 ? {} : _options$variables,
            onReadPixels = options.onReadPixels,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;
        var proxy = new Proxy(gl, {
          get: listen
        });
        var contextVariables = [];
        var entityNames = {};
        var imageCount = 0;
        var indent = '';
        var readPixelsVariableName;
        return proxy;

        function listen(obj, property) {
          switch (property) {
            case 'addComment':
              return addComment;

            case 'checkThrowError':
              return checkThrowError;

            case 'getReadPixelsVariableName':
              return readPixelsVariableName;

            case 'insertVariable':
              return insertVariable;

            case 'reset':
              return reset;

            case 'setIndent':
              return setIndent;

            case 'toString':
              return toString;

            case 'getContextVariableName':
              return getContextVariableName;
          }

          if (typeof gl[property] === 'function') {
            return function () {
              switch (property) {
                case 'getError':
                  if (throwGetError) {
                    recording.push("".concat(indent, "if (").concat(contextName, ".getError() !== ").concat(contextName, ".NONE) throw new Error('error');"));
                  } else {
                    recording.push("".concat(indent).concat(contextName, ".getError();"));
                  }

                  return gl.getError();

                case 'getExtension':
                  {
                    var variableName = "".concat(contextName, "Variables").concat(contextVariables.length);
                    recording.push("".concat(indent, "const ").concat(variableName, " = ").concat(contextName, ".getExtension('").concat(arguments[0], "');"));
                    var extension = gl.getExtension(arguments[0]);

                    if (extension && _typeof(extension) === 'object') {
                      var tappedExtension = glExtensionWiretap(extension, {
                        getEntity: getEntity,
                        useTrackablePrimitives: useTrackablePrimitives,
                        recording: recording,
                        contextName: variableName,
                        contextVariables: contextVariables,
                        variables: variables,
                        indent: indent,
                        onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
                      });
                      contextVariables.push(tappedExtension);
                      return tappedExtension;
                    } else {
                      contextVariables.push(null);
                    }

                    return extension;
                  }

                case 'readPixels':
                  var i = contextVariables.indexOf(arguments[6]);
                  var targetVariableName;

                  if (i === -1) {
                    var _variableName = getVariableName(arguments[6]);

                    if (_variableName) {
                      targetVariableName = _variableName;
                      recording.push("".concat(indent).concat(_variableName));
                    } else {
                      targetVariableName = "".concat(contextName, "Variable").concat(contextVariables.length);
                      contextVariables.push(arguments[6]);
                      recording.push("".concat(indent, "const ").concat(targetVariableName, " = new ").concat(arguments[6].constructor.name, "(").concat(arguments[6].length, ");"));
                    }
                  } else {
                    targetVariableName = "".concat(contextName, "Variable").concat(i);
                  }

                  readPixelsVariableName = targetVariableName;
                  var argumentAsStrings = [arguments[0], arguments[1], arguments[2], arguments[3], getEntity(arguments[4]), getEntity(arguments[5]), targetVariableName];
                  recording.push("".concat(indent).concat(contextName, ".readPixels(").concat(argumentAsStrings.join(', '), ");"));

                  if (readPixelsFile) {
                    writePPM(arguments[2], arguments[3]);
                  }

                  if (onReadPixels) {
                    onReadPixels(targetVariableName, argumentAsStrings);
                  }

                  return gl.readPixels.apply(gl, arguments);

                case 'drawBuffers':
                  recording.push("".concat(indent).concat(contextName, ".drawBuffers([").concat(argumentsToString(arguments[0], {
                    contextName: contextName,
                    contextVariables: contextVariables,
                    getEntity: getEntity,
                    addVariable: addVariable,
                    variables: variables,
                    onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
                  }), "]);"));
                  return gl.drawBuffers(arguments[0]);
              }

              var result = gl[property].apply(gl, arguments);

              switch (_typeof(result)) {
                case 'undefined':
                  recording.push("".concat(indent).concat(methodCallToString(property, arguments), ";"));
                  return;

                case 'number':
                case 'boolean':
                  if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                    contextVariables.push(result = trackablePrimitive(result));
                    break;
                  }

                default:
                  if (result === null) {
                    recording.push("".concat(methodCallToString(property, arguments), ";"));
                  } else {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                  }

                  contextVariables.push(result);
              }

              return result;
            };
          }

          entityNames[gl[property]] = property;
          return gl[property];
        }

        function toString() {
          return recording.join('\n');
        }

        function reset() {
          while (recording.length > 0) {
            recording.pop();
          }
        }

        function insertVariable(name, value) {
          variables[name] = value;
        }

        function getEntity(value) {
          var name = entityNames[value];

          if (name) {
            return contextName + '.' + name;
          }

          return value;
        }

        function setIndent(spaces) {
          indent = ' '.repeat(spaces);
        }

        function addVariable(value, source) {
          var variableName = "".concat(contextName, "Variable").concat(contextVariables.length);
          recording.push("".concat(indent, "const ").concat(variableName, " = ").concat(source, ";"));
          contextVariables.push(value);
          return variableName;
        }

        function writePPM(width, height) {
          var sourceVariable = "".concat(contextName, "Variable").concat(contextVariables.length);
          var imageVariable = "imageDatum".concat(imageCount);
          recording.push("".concat(indent, "let ").concat(imageVariable, " = [\"P3\\n# ").concat(readPixelsFile, ".ppm\\n\", ").concat(width, ", ' ', ").concat(height, ", \"\\n255\\n\"].join(\"\");"));
          recording.push("".concat(indent, "for (let i = 0; i < ").concat(imageVariable, ".length; i += 4) {"));
          recording.push("".concat(indent, "  ").concat(imageVariable, " += ").concat(sourceVariable, "[i] + ' ' + ").concat(sourceVariable, "[i + 1] + ' ' + ").concat(sourceVariable, "[i + 2] + ' ';"));
          recording.push("".concat(indent, "}"));
          recording.push("".concat(indent, "if (typeof require !== \"undefined\") {"));
          recording.push("".concat(indent, "  require('fs').writeFileSync('./").concat(readPixelsFile, ".ppm', ").concat(imageVariable, ");"));
          recording.push("".concat(indent, "}"));
          imageCount++;
        }

        function addComment(value) {
          recording.push("".concat(indent, "// ").concat(value));
        }

        function checkThrowError() {
          recording.push("".concat(indent, "(() => {\n").concat(indent, "const error = ").concat(contextName, ".getError();\n").concat(indent, "if (error !== ").concat(contextName, ".NONE) {\n").concat(indent, "  const names = Object.getOwnPropertyNames(gl);\n").concat(indent, "  for (let i = 0; i < names.length; i++) {\n").concat(indent, "    const name = names[i];\n").concat(indent, "    if (").concat(contextName, "[name] === error) {\n").concat(indent, "      throw new Error('").concat(contextName, " threw ' + name);\n").concat(indent, "    }\n").concat(indent, "  }\n").concat(indent, "}\n").concat(indent, "})();"));
        }

        function methodCallToString(method, args) {
          return "".concat(contextName, ".").concat(method, "(").concat(argumentsToString(args, {
            contextName: contextName,
            contextVariables: contextVariables,
            getEntity: getEntity,
            addVariable: addVariable,
            variables: variables,
            onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
          }), ")");
        }

        function getVariableName(value) {
          if (variables) {
            for (var _name in variables) {
              if (variables[_name] === value) {
                return _name;
              }
            }
          }

          return null;
        }

        function getContextVariableName(value) {
          var i = contextVariables.indexOf(value);

          if (i !== -1) {
            return "".concat(contextName, "Variable").concat(i);
          }

          return null;
        }
      }

      function glExtensionWiretap(extension, options) {
        var proxy = new Proxy(extension, {
          get: listen
        });
        var extensionEntityNames = {};
        var contextName = options.contextName,
            contextVariables = options.contextVariables,
            getEntity = options.getEntity,
            useTrackablePrimitives = options.useTrackablePrimitives,
            recording = options.recording,
            variables = options.variables,
            indent = options.indent,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;
        return proxy;

        function listen(obj, property) {
          if (typeof obj[property] === 'function') {
            return function () {
              switch (property) {
                case 'drawBuffersWEBGL':
                  recording.push("".concat(indent).concat(contextName, ".drawBuffersWEBGL([").concat(argumentsToString(arguments[0], {
                    contextName: contextName,
                    contextVariables: contextVariables,
                    getEntity: getExtensionEntity,
                    addVariable: addVariable,
                    variables: variables,
                    onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
                  }), "]);"));
                  return extension.drawBuffersWEBGL(arguments[0]);
              }

              var result = extension[property].apply(extension, arguments);

              switch (_typeof(result)) {
                case 'undefined':
                  recording.push("".concat(indent).concat(methodCallToString(property, arguments), ";"));
                  return;

                case 'number':
                case 'boolean':
                  if (useTrackablePrimitives && contextVariables.indexOf(trackablePrimitive(result)) === -1) {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                    contextVariables.push(result = trackablePrimitive(result));
                  } else {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                    contextVariables.push(result);
                  }

                  break;

                default:
                  if (result === null) {
                    recording.push("".concat(methodCallToString(property, arguments), ";"));
                  } else {
                    recording.push("".concat(indent, "const ").concat(contextName, "Variable").concat(contextVariables.length, " = ").concat(methodCallToString(property, arguments), ";"));
                  }

                  contextVariables.push(result);
              }

              return result;
            };
          }

          extensionEntityNames[extension[property]] = property;
          return extension[property];
        }

        function getExtensionEntity(value) {
          if (extensionEntityNames.hasOwnProperty(value)) {
            return "".concat(contextName, ".").concat(extensionEntityNames[value]);
          }

          return getEntity(value);
        }

        function methodCallToString(method, args) {
          return "".concat(contextName, ".").concat(method, "(").concat(argumentsToString(args, {
            contextName: contextName,
            contextVariables: contextVariables,
            getEntity: getExtensionEntity,
            addVariable: addVariable,
            variables: variables,
            onUnrecognizedArgumentLookup: onUnrecognizedArgumentLookup
          }), ")");
        }

        function addVariable(value, source) {
          var variableName = "".concat(contextName, "Variable").concat(contextVariables.length);
          contextVariables.push(value);
          recording.push("".concat(indent, "const ").concat(variableName, " = ").concat(source, ";"));
          return variableName;
        }
      }

      function argumentsToString(args, options) {
        var variables = options.variables,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;
        return Array.from(args).map(function (arg) {
          var variableName = getVariableName(arg);

          if (variableName) {
            return variableName;
          }

          return argumentToString(arg, options);
        }).join(', ');

        function getVariableName(value) {
          if (variables) {
            for (var _name2 in variables) {
              if (!variables.hasOwnProperty(_name2)) continue;

              if (variables[_name2] === value) {
                return _name2;
              }
            }
          }

          if (onUnrecognizedArgumentLookup) {
            return onUnrecognizedArgumentLookup(value);
          }

          return null;
        }
      }

      function argumentToString(arg, options) {
        var contextName = options.contextName,
            contextVariables = options.contextVariables,
            getEntity = options.getEntity,
            addVariable = options.addVariable,
            onUnrecognizedArgumentLookup = options.onUnrecognizedArgumentLookup;

        if (typeof arg === 'undefined') {
          return 'undefined';
        }

        if (arg === null) {
          return 'null';
        }

        var i = contextVariables.indexOf(arg);

        if (i > -1) {
          return "".concat(contextName, "Variable").concat(i);
        }

        switch (arg.constructor.name) {
          case 'String':
            var hasLines = /\n/.test(arg);
            var hasSingleQuotes = /'/.test(arg);
            var hasDoubleQuotes = /"/.test(arg);

            if (hasLines) {
              return '`' + arg + '`';
            } else if (hasSingleQuotes && !hasDoubleQuotes) {
              return '"' + arg + '"';
            } else if (!hasSingleQuotes && hasDoubleQuotes) {
              return "'" + arg + "'";
            } else {
              return '\'' + arg + '\'';
            }

          case 'Number':
            return getEntity(arg);

          case 'Boolean':
            return getEntity(arg);

          case 'Array':
            return addVariable(arg, "new ".concat(arg.constructor.name, "([").concat(Array.from(arg).join(','), "])"));

          case 'Float32Array':
          case 'Uint8Array':
          case 'Uint16Array':
          case 'Int32Array':
            return addVariable(arg, "new ".concat(arg.constructor.name, "(").concat(JSON.stringify(Array.from(arg)), ")"));

          default:
            if (onUnrecognizedArgumentLookup) {
              var instantiationString = onUnrecognizedArgumentLookup(arg);

              if (instantiationString) {
                return instantiationString;
              }
            }

            throw new Error("unrecognized argument type ".concat(arg.constructor.name));
        }
      }

      function trackablePrimitive(value) {
        return new value.constructor(value);
      }

      if (typeof module !== 'undefined') {
        module.exports = {
          glWiretap: glWiretap,
          glExtensionWiretap: glExtensionWiretap
        };
      }

      if (typeof window !== 'undefined') {
        glWiretap.glExtensionWiretap = glExtensionWiretap;
        window.glWiretap = glWiretap;
      }
    }, {}],
    4: [function (require, module, exports) {
      function setupArguments(args) {
        var newArguments = new Array(args.length);

        for (var i = 0; i < args.length; i++) {
          var arg = args[i];

          if (arg.toArray) {
            newArguments[i] = arg.toArray();
          } else {
            newArguments[i] = arg;
          }
        }

        return newArguments;
      }

      function mock1D() {
        var args = setupArguments(arguments);
        var row = new Float32Array(this.output.x);

        for (var x = 0; x < this.output.x; x++) {
          this.thread.x = x;
          this.thread.y = 0;
          this.thread.z = 0;
          row[x] = this._fn.apply(this, args);
        }

        return row;
      }

      function mock2D() {
        var args = setupArguments(arguments);
        var matrix = new Array(this.output.y);

        for (var y = 0; y < this.output.y; y++) {
          var row = new Float32Array(this.output.x);

          for (var x = 0; x < this.output.x; x++) {
            this.thread.x = x;
            this.thread.y = y;
            this.thread.z = 0;
            row[x] = this._fn.apply(this, args);
          }

          matrix[y] = row;
        }

        return matrix;
      }

      function mock2DGraphical() {
        var args = setupArguments(arguments);

        for (var y = 0; y < this.output.y; y++) {
          for (var x = 0; x < this.output.x; x++) {
            this.thread.x = x;
            this.thread.y = y;
            this.thread.z = 0;

            this._fn.apply(this, args);
          }
        }
      }

      function mock3D() {
        var args = setupArguments(arguments);
        var cube = new Array(this.output.z);

        for (var z = 0; z < this.output.z; z++) {
          var matrix = new Array(this.output.y);

          for (var y = 0; y < this.output.y; y++) {
            var row = new Float32Array(this.output.x);

            for (var x = 0; x < this.output.x; x++) {
              this.thread.x = x;
              this.thread.y = y;
              this.thread.z = z;
              row[x] = this._fn.apply(this, args);
            }

            matrix[y] = row;
          }

          cube[z] = matrix;
        }

        return cube;
      }

      function apiDecorate(kernel) {
        kernel.setOutput = function (output) {
          kernel.output = setupOutput(output);

          if (kernel.graphical) {
            setupGraphical(kernel);
          }
        };

        kernel.toJSON = function () {
          throw new Error('Not usable with gpuMock');
        };

        kernel.setConstants = function (flag) {
          kernel.constants = flag;
          return kernel;
        };

        kernel.setGraphical = function (flag) {
          kernel.graphical = flag;
          return kernel;
        };

        kernel.setCanvas = function (flag) {
          kernel.canvas = flag;
          return kernel;
        };

        kernel.setContext = function (flag) {
          kernel.context = flag;
          return kernel;
        };

        kernel.destroy = function () {};

        kernel.validateSettings = function () {};

        if (kernel.graphical && kernel.output) {
          setupGraphical(kernel);
        }

        kernel.exec = function () {
          var _arguments = arguments;
          return new Promise(function (resolve, reject) {
            try {
              resolve(kernel.apply(kernel, _arguments));
            } catch (e) {
              reject(e);
            }
          });
        };

        kernel.getPixels = function (flip) {
          var _kernel$output = kernel.output,
              x = _kernel$output.x,
              y = _kernel$output.y;
          return flip ? flipPixels(kernel._imageData.data, x, y) : kernel._imageData.data.slice(0);
        };

        kernel.color = function (r, g, b, a) {
          if (typeof a === 'undefined') {
            a = 1;
          }

          r = Math.floor(r * 255);
          g = Math.floor(g * 255);
          b = Math.floor(b * 255);
          a = Math.floor(a * 255);
          var width = kernel.output.x;
          var height = kernel.output.y;
          var x = kernel.thread.x;
          var y = height - kernel.thread.y - 1;
          var index = x + y * width;
          kernel._colorData[index * 4 + 0] = r;
          kernel._colorData[index * 4 + 1] = g;
          kernel._colorData[index * 4 + 2] = b;
          kernel._colorData[index * 4 + 3] = a;
        };

        var mockMethod = function mockMethod() {
          return kernel;
        };

        var methods = ['setWarnVarUsage', 'setArgumentTypes', 'setTactic', 'setOptimizeFloatMemory', 'setDebug', 'setLoopMaxIterations', 'setConstantTypes', 'setFunctions', 'setNativeFunctions', 'setInjectedNative', 'setPipeline', 'setPrecision', 'setOutputToTexture', 'setImmutable', 'setStrictIntegers', 'setDynamicOutput', 'setHardcodeConstants', 'setDynamicArguments', 'setUseLegacyEncoder', 'setWarnVarUsage', 'addSubKernel'];

        for (var i = 0; i < methods.length; i++) {
          kernel[methods[i]] = mockMethod;
        }

        return kernel;
      }

      function setupGraphical(kernel) {
        var _kernel$output2 = kernel.output,
            x = _kernel$output2.x,
            y = _kernel$output2.y;

        if (kernel.context && kernel.context.createImageData) {
          var data = new Uint8ClampedArray(x * y * 4);
          kernel._imageData = kernel.context.createImageData(x, y);
          kernel._colorData = data;
        } else {
          var _data = new Uint8ClampedArray(x * y * 4);

          kernel._imageData = {
            data: _data
          };
          kernel._colorData = _data;
        }
      }

      function setupOutput(output) {
        var result = null;

        if (output.length) {
          if (output.length === 3) {
            var _output = _slicedToArray(output, 3),
                x = _output[0],
                y = _output[1],
                z = _output[2];

            result = {
              x: x,
              y: y,
              z: z
            };
          } else if (output.length === 2) {
            var _output2 = _slicedToArray(output, 2),
                _x = _output2[0],
                _y = _output2[1];

            result = {
              x: _x,
              y: _y
            };
          } else {
            var _output3 = _slicedToArray(output, 1),
                _x2 = _output3[0];

            result = {
              x: _x2
            };
          }
        } else {
          result = output;
        }

        return result;
      }

      function gpuMock(fn) {
        var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var output = settings.output ? setupOutput(settings.output) : null;

        function kernel() {
          if (kernel.output.z) {
            return mock3D.apply(kernel, arguments);
          } else if (kernel.output.y) {
            if (kernel.graphical) {
              return mock2DGraphical.apply(kernel, arguments);
            }

            return mock2D.apply(kernel, arguments);
          } else {
            return mock1D.apply(kernel, arguments);
          }
        }

        kernel._fn = fn;
        kernel.constants = settings.constants || null;
        kernel.context = settings.context || null;
        kernel.canvas = settings.canvas || null;
        kernel.graphical = settings.graphical || false;
        kernel._imageData = null;
        kernel._colorData = null;
        kernel.output = output;
        kernel.thread = {
          x: 0,
          y: 0,
          z: 0
        };
        return apiDecorate(kernel);
      }

      function flipPixels(pixels, width, height) {
        var halfHeight = height / 2 | 0;
        var bytesPerRow = width * 4;
        var temp = new Uint8ClampedArray(width * 4);
        var result = pixels.slice(0);

        for (var y = 0; y < halfHeight; ++y) {
          var topOffset = y * bytesPerRow;
          var bottomOffset = (height - y - 1) * bytesPerRow;
          temp.set(result.subarray(topOffset, topOffset + bytesPerRow));
          result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
          result.set(temp, bottomOffset);
        }

        return result;
      }

      module.exports = {
        gpuMock: gpuMock
      };
    }, {}],
    5: [function (require, module, exports) {
      var _require = require('./utils'),
          utils = _require.utils;

      function alias(name, source) {
        var fnString = source.toString();
        return new Function("return function ".concat(name, " (").concat(utils.getArgumentNamesFromString(fnString).join(', '), ") {\n  ").concat(utils.getFunctionBodyFromString(fnString), "\n}"))();
      }

      module.exports = {
        alias: alias
      };
    }, {
      "./utils": 114
    }],
    6: [function (require, module, exports) {
      var _require2 = require('../function-node'),
          FunctionNode = _require2.FunctionNode;

      var CPUFunctionNode =
      /*#__PURE__*/
      function (_FunctionNode) {
        _inherits(CPUFunctionNode, _FunctionNode);

        function CPUFunctionNode() {
          _classCallCheck(this, CPUFunctionNode);

          return _possibleConstructorReturn(this, _getPrototypeOf(CPUFunctionNode).apply(this, arguments));
        }

        _createClass(CPUFunctionNode, [{
          key: "astFunction",
          value: function astFunction(ast, retArr) {
            if (!this.isRootKernel) {
              retArr.push('function');
              retArr.push(' ');
              retArr.push(this.name);
              retArr.push('(');

              for (var i = 0; i < this.argumentNames.length; ++i) {
                var argumentName = this.argumentNames[i];

                if (i > 0) {
                  retArr.push(', ');
                }

                retArr.push('user_');
                retArr.push(argumentName);
              }

              retArr.push(') {\n');
            }

            for (var _i2 = 0; _i2 < ast.body.body.length; ++_i2) {
              this.astGeneric(ast.body.body[_i2], retArr);
              retArr.push('\n');
            }

            if (!this.isRootKernel) {
              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astReturnStatement",
          value: function astReturnStatement(ast, retArr) {
            var type = this.returnType || this.getType(ast.argument);

            if (!this.returnType) {
              this.returnType = type;
            }

            if (this.isRootKernel) {
              retArr.push(this.leadingReturnStatement);
              this.astGeneric(ast.argument, retArr);
              retArr.push(';\n');
              retArr.push(this.followingReturnStatement);
              retArr.push('continue;\n');
            } else if (this.isSubKernel) {
              retArr.push("subKernelResult_".concat(this.name, " = "));
              this.astGeneric(ast.argument, retArr);
              retArr.push(';');
              retArr.push("return subKernelResult_".concat(this.name, ";"));
            } else {
              retArr.push('return ');
              this.astGeneric(ast.argument, retArr);
              retArr.push(';');
            }

            return retArr;
          }
        }, {
          key: "astLiteral",
          value: function astLiteral(ast, retArr) {
            if (isNaN(ast.value)) {
              throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast);
            }

            retArr.push(ast.value);
            return retArr;
          }
        }, {
          key: "astBinaryExpression",
          value: function astBinaryExpression(ast, retArr) {
            retArr.push('(');
            this.astGeneric(ast.left, retArr);
            retArr.push(ast.operator);
            this.astGeneric(ast.right, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(idtNode, retArr) {
            if (idtNode.type !== 'Identifier') {
              throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);
            }

            switch (idtNode.name) {
              case 'Infinity':
                retArr.push('Infinity');
                break;

              default:
                if (this.constants && this.constants.hasOwnProperty(idtNode.name)) {
                  retArr.push('constants_' + idtNode.name);
                } else {
                  retArr.push('user_' + idtNode.name);
                }

            }

            return retArr;
          }
        }, {
          key: "astForStatement",
          value: function astForStatement(forNode, retArr) {
            if (forNode.type !== 'ForStatement') {
              throw this.astErrorOutput('Invalid for statement', forNode);
            }

            var initArr = [];
            var testArr = [];
            var updateArr = [];
            var bodyArr = [];
            var isSafe = null;

            if (forNode.init) {
              this.pushState('in-for-loop-init');
              this.astGeneric(forNode.init, initArr);

              for (var i = 0; i < initArr.length; i++) {
                if (initArr[i].includes && initArr[i].includes(',')) {
                  isSafe = false;
                }
              }

              this.popState('in-for-loop-init');
            } else {
              isSafe = false;
            }

            if (forNode.test) {
              this.astGeneric(forNode.test, testArr);
            } else {
              isSafe = false;
            }

            if (forNode.update) {
              this.astGeneric(forNode.update, updateArr);
            } else {
              isSafe = false;
            }

            if (forNode.body) {
              this.pushState('loop-body');
              this.astGeneric(forNode.body, bodyArr);
              this.popState('loop-body');
            }

            if (isSafe === null) {
              isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);
            }

            if (isSafe) {
              retArr.push("for (".concat(initArr.join(''), ";").concat(testArr.join(''), ";").concat(updateArr.join(''), "){\n"));
              retArr.push(bodyArr.join(''));
              retArr.push('}\n');
            } else {
              var iVariableName = this.getInternalVariableName('safeI');

              if (initArr.length > 0) {
                retArr.push(initArr.join(''), ';\n');
              }

              retArr.push("for (let ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));

              if (testArr.length > 0) {
                retArr.push("if (!".concat(testArr.join(''), ") break;\n"));
              }

              retArr.push(bodyArr.join(''));
              retArr.push("\n".concat(updateArr.join(''), ";"));
              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astWhileStatement",
          value: function astWhileStatement(whileNode, retArr) {
            if (whileNode.type !== 'WhileStatement') {
              throw this.astErrorOutput('Invalid while statement', whileNode);
            }

            retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');
            retArr.push('if (');
            this.astGeneric(whileNode.test, retArr);
            retArr.push(') {\n');
            this.astGeneric(whileNode.body, retArr);
            retArr.push('} else {\n');
            retArr.push('break;\n');
            retArr.push('}\n');
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astDoWhileStatement",
          value: function astDoWhileStatement(doWhileNode, retArr) {
            if (doWhileNode.type !== 'DoWhileStatement') {
              throw this.astErrorOutput('Invalid while statement', doWhileNode);
            }

            retArr.push('for (let i = 0; i < LOOP_MAX; i++) {');
            this.astGeneric(doWhileNode.body, retArr);
            retArr.push('if (!');
            this.astGeneric(doWhileNode.test, retArr);
            retArr.push(') {\n');
            retArr.push('break;\n');
            retArr.push('}\n');
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astAssignmentExpression",
          value: function astAssignmentExpression(assNode, retArr) {
            var declaration = this.getDeclaration(assNode.left);

            if (declaration && !declaration.assignable) {
              throw this.astErrorOutput("Variable ".concat(assNode.left.name, " is not assignable here"), assNode);
            }

            this.astGeneric(assNode.left, retArr);
            retArr.push(assNode.operator);
            this.astGeneric(assNode.right, retArr);
            return retArr;
          }
        }, {
          key: "astBlockStatement",
          value: function astBlockStatement(bNode, retArr) {
            if (this.isState('loop-body')) {
              this.pushState('block-body');

              for (var i = 0; i < bNode.body.length; i++) {
                this.astGeneric(bNode.body[i], retArr);
              }

              this.popState('block-body');
            } else {
              retArr.push('{\n');

              for (var _i3 = 0; _i3 < bNode.body.length; _i3++) {
                this.astGeneric(bNode.body[_i3], retArr);
              }

              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astVariableDeclaration",
          value: function astVariableDeclaration(varDecNode, retArr) {
            retArr.push("".concat(varDecNode.kind, " "));
            var declarations = varDecNode.declarations;

            for (var i = 0; i < declarations.length; i++) {
              if (i > 0) {
                retArr.push(',');
              }

              this.astGeneric(declarations[i], retArr);
            }

            if (!this.isState('in-for-loop-init')) {
              retArr.push(';');
            }

            return retArr;
          }
        }, {
          key: "astIfStatement",
          value: function astIfStatement(ifNode, retArr) {
            retArr.push('if (');
            this.astGeneric(ifNode.test, retArr);
            retArr.push(')');

            if (ifNode.consequent.type === 'BlockStatement') {
              this.astGeneric(ifNode.consequent, retArr);
            } else {
              retArr.push(' {\n');
              this.astGeneric(ifNode.consequent, retArr);
              retArr.push('\n}\n');
            }

            if (ifNode.alternate) {
              retArr.push('else ');

              if (ifNode.alternate.type === 'BlockStatement' || ifNode.alternate.type === 'IfStatement') {
                this.astGeneric(ifNode.alternate, retArr);
              } else {
                retArr.push(' {\n');
                this.astGeneric(ifNode.alternate, retArr);
                retArr.push('\n}\n');
              }
            }

            return retArr;
          }
        }, {
          key: "astSwitchStatement",
          value: function astSwitchStatement(ast, retArr) {
            var discriminant = ast.discriminant,
                cases = ast.cases;
            retArr.push('switch (');
            this.astGeneric(discriminant, retArr);
            retArr.push(') {\n');

            for (var i = 0; i < cases.length; i++) {
              if (cases[i].test === null) {
                retArr.push('default:\n');
                this.astGeneric(cases[i].consequent, retArr);

                if (cases[i].consequent && cases[i].consequent.length > 0) {
                  retArr.push('break;\n');
                }

                continue;
              }

              retArr.push('case ');
              this.astGeneric(cases[i].test, retArr);
              retArr.push(':\n');

              if (cases[i].consequent && cases[i].consequent.length > 0) {
                this.astGeneric(cases[i].consequent, retArr);
                retArr.push('break;\n');
              }
            }

            retArr.push('\n}');
          }
        }, {
          key: "astThisExpression",
          value: function astThisExpression(tNode, retArr) {
            retArr.push('_this');
            return retArr;
          }
        }, {
          key: "astMemberExpression",
          value: function astMemberExpression(mNode, retArr) {
            var _this$getMemberExpres = this.getMemberExpressionDetails(mNode),
                signature = _this$getMemberExpres.signature,
                type = _this$getMemberExpres.type,
                property = _this$getMemberExpres.property,
                xProperty = _this$getMemberExpres.xProperty,
                yProperty = _this$getMemberExpres.yProperty,
                zProperty = _this$getMemberExpres.zProperty,
                name = _this$getMemberExpres.name,
                origin = _this$getMemberExpres.origin;

            switch (signature) {
              case 'this.thread.value':
                retArr.push("_this.thread.".concat(name));
                return retArr;

              case 'this.output.value':
                switch (name) {
                  case 'x':
                    retArr.push('outputX');
                    break;

                  case 'y':
                    retArr.push('outputY');
                    break;

                  case 'z':
                    retArr.push('outputZ');
                    break;

                  default:
                    throw this.astErrorOutput('Unexpected expression', mNode);
                }

                return retArr;

              case 'value':
                throw this.astErrorOutput('Unexpected expression', mNode);

              case 'value[]':
              case 'value[][]':
              case 'value[][][]':
              case 'value.value':
                if (origin === 'Math') {
                  retArr.push(Math[name]);
                  return retArr;
                }

                switch (property) {
                  case 'r':
                    retArr.push("user_".concat(name, "[0]"));
                    return retArr;

                  case 'g':
                    retArr.push("user_".concat(name, "[1]"));
                    return retArr;

                  case 'b':
                    retArr.push("user_".concat(name, "[2]"));
                    return retArr;

                  case 'a':
                    retArr.push("user_".concat(name, "[3]"));
                    return retArr;
                }

                break;

              case 'value.value[]':
                if (this.removeIstanbulCoverage) {
                  return retArr;
                }

                retArr.push("".concat(mNode.object.object.name, ".").concat(mNode.object.property.name, "[").concat(mNode.property.value, "]"));
                return retArr;

              case 'value.value[][]':
                if (this.removeIstanbulCoverage) {
                  return retArr;
                }

                retArr.push("".concat(mNode.object.object.object.name, ".").concat(mNode.object.object.property.name, "[").concat(mNode.object.property.value, "][").concat(mNode.property.value, "]"));
                return retArr;

              case 'this.constants.value':
              case 'this.constants.value[]':
              case 'this.constants.value[][]':
              case 'this.constants.value[][][]':
                break;

              case 'fn()[]':
                this.astGeneric(mNode.object, retArr);
                retArr.push('[');
                this.astGeneric(mNode.property, retArr);
                retArr.push(']');
                return retArr;

              default:
                throw this.astErrorOutput('Unexpected expression', mNode);
            }

            if (!mNode.computed) {
              switch (type) {
                case 'Number':
                case 'Integer':
                case 'Float':
                case 'Boolean':
                  retArr.push("".concat(origin, "_").concat(name));
                  return retArr;
              }
            }

            var markupName = "".concat(origin, "_").concat(name);

            switch (type) {
              case 'Array(2)':
              case 'Array(3)':
              case 'Array(4)':
              case 'HTMLImageArray':
              case 'ArrayTexture(1)':
              case 'ArrayTexture(2)':
              case 'ArrayTexture(3)':
              case 'ArrayTexture(4)':
              case 'HTMLImage':
              default:
                var size;
                var isInput;

                if (origin === 'constants') {
                  var constant = this.constants[name];
                  isInput = this.constantTypes[name] === 'Input';
                  size = isInput ? constant.size : null;
                } else {
                  isInput = this.isInput(name);
                  size = isInput ? this.argumentSizes[this.argumentNames.indexOf(name)] : null;
                }

                retArr.push("".concat(markupName));

                if (zProperty && yProperty) {
                  if (isInput) {
                    retArr.push('[(');
                    this.astGeneric(zProperty, retArr);
                    retArr.push("*".concat(this.dynamicArguments ? '(outputY * outputX)' : size[1] * size[0], ")+("));
                    this.astGeneric(yProperty, retArr);
                    retArr.push("*".concat(this.dynamicArguments ? 'outputX' : size[0], ")+"));
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  } else {
                    retArr.push('[');
                    this.astGeneric(zProperty, retArr);
                    retArr.push(']');
                    retArr.push('[');
                    this.astGeneric(yProperty, retArr);
                    retArr.push(']');
                    retArr.push('[');
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  }
                } else if (yProperty) {
                  if (isInput) {
                    retArr.push('[(');
                    this.astGeneric(yProperty, retArr);
                    retArr.push("*".concat(this.dynamicArguments ? 'outputX' : size[0], ")+"));
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  } else {
                    retArr.push('[');
                    this.astGeneric(yProperty, retArr);
                    retArr.push(']');
                    retArr.push('[');
                    this.astGeneric(xProperty, retArr);
                    retArr.push(']');
                  }
                } else if (typeof xProperty !== 'undefined') {
                  retArr.push('[');
                  this.astGeneric(xProperty, retArr);
                  retArr.push(']');
                }

            }

            return retArr;
          }
        }, {
          key: "astCallExpression",
          value: function astCallExpression(ast, retArr) {
            if (ast.type !== 'CallExpression') {
              throw this.astErrorOutput('Unknown CallExpression', ast);
            }

            var functionName = this.astMemberExpressionUnroll(ast.callee);

            if (this.calledFunctions.indexOf(functionName) < 0) {
              this.calledFunctions.push(functionName);
            }

            var isMathFunction = this.isAstMathFunction(ast);

            if (this.onFunctionCall) {
              this.onFunctionCall(this.name, functionName, ast.arguments);
            }

            retArr.push(functionName);
            retArr.push('(');
            var targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];

            for (var i = 0; i < ast.arguments.length; ++i) {
              var argument = ast.arguments[i];
              var argumentType = this.getType(argument);

              if (!targetTypes[i]) {
                this.triggerImplyArgumentType(functionName, i, argumentType, this);
              }

              if (i > 0) {
                retArr.push(', ');
              }

              this.astGeneric(argument, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astArrayExpression",
          value: function astArrayExpression(arrNode, retArr) {
            var arrLen = arrNode.elements.length;
            retArr.push('new Float32Array([');

            for (var i = 0; i < arrLen; ++i) {
              if (i > 0) {
                retArr.push(', ');
              }

              var subNode = arrNode.elements[i];
              this.astGeneric(subNode, retArr);
            }

            retArr.push('])');
            return retArr;
          }
        }, {
          key: "astDebuggerStatement",
          value: function astDebuggerStatement(arrNode, retArr) {
            retArr.push('debugger;');
            return retArr;
          }
        }]);

        return CPUFunctionNode;
      }(FunctionNode);

      module.exports = {
        CPUFunctionNode: CPUFunctionNode
      };
    }, {
      "../function-node": 10
    }],
    7: [function (require, module, exports) {
      var _require3 = require('../../utils'),
          utils = _require3.utils;

      function constantsToString(constants, types) {
        var results = [];

        for (var _name3 in types) {
          if (!types.hasOwnProperty(_name3)) continue;
          var type = types[_name3];
          var constant = constants[_name3];

          switch (type) {
            case 'Number':
            case 'Integer':
            case 'Float':
            case 'Boolean':
              results.push("".concat(_name3, ":").concat(constant));
              break;

            case 'Array(2)':
            case 'Array(3)':
            case 'Array(4)':
              results.push("".concat(_name3, ":new ").concat(constant.constructor.name, "(").concat(JSON.stringify(Array.from(constant)), ")"));
              break;
          }
        }

        return "{ ".concat(results.join(), " }");
      }

      function cpuKernelString(cpuKernel, name) {
        var header = [];
        var thisProperties = [];
        var beforeReturn = [];
        var useFunctionKeyword = !/^function/.test(cpuKernel.color.toString());
        header.push('  const { context, canvas, constants: incomingConstants } = settings;', "  const output = new Int32Array(".concat(JSON.stringify(Array.from(cpuKernel.output)), ");"), "  const _constantTypes = ".concat(JSON.stringify(cpuKernel.constantTypes), ";"), "  const _constants = ".concat(constantsToString(cpuKernel.constants, cpuKernel.constantTypes), ";"));
        thisProperties.push('    constants: _constants,', '    context,', '    output,', '    thread: {x: 0, y: 0, z: 0},');

        if (cpuKernel.graphical) {
          header.push("  const _imageData = context.createImageData(".concat(cpuKernel.output[0], ", ").concat(cpuKernel.output[1], ");"));
          header.push("  const _colorData = new Uint8ClampedArray(".concat(cpuKernel.output[0], " * ").concat(cpuKernel.output[1], " * 4);"));
          var colorFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.color.toString(), {
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case '_colorData':
                  return '_colorData';

                case '_imageData':
                  return '_imageData';

                case 'output':
                  return 'output';

                case 'thread':
                  return 'this.thread';
              }

              return JSON.stringify(cpuKernel[propertyName]);
            },
            findDependency: function findDependency(object, name) {
              return null;
            }
          });
          var getPixelsFn = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel.getPixels.toString(), {
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case '_colorData':
                  return '_colorData';

                case '_imageData':
                  return '_imageData';

                case 'output':
                  return 'output';

                case 'thread':
                  return 'this.thread';
              }

              return JSON.stringify(cpuKernel[propertyName]);
            },
            findDependency: function findDependency() {
              return null;
            }
          });
          thisProperties.push('    _imageData,', '    _colorData,', "    color: ".concat(colorFn, ","));
          beforeReturn.push("  kernel.getPixels = ".concat(getPixelsFn, ";"));
        }

        var constantTypes = [];
        var constantKeys = Object.keys(cpuKernel.constantTypes);

        for (var i = 0; i < constantKeys.length; i++) {
          constantTypes.push(cpuKernel.constantTypes[constantKeys]);
        }

        if (cpuKernel.argumentTypes.indexOf('HTMLImageArray') !== -1 || constantTypes.indexOf('HTMLImageArray') !== -1) {
          var flattenedImageTo3DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._imageTo3DArray.toString(), {
            doNotDefine: ['canvas'],
            findDependency: function findDependency(object, name) {
              if (object === 'this') {
                return (useFunctionKeyword ? 'function ' : '') + cpuKernel[name].toString();
              }

              return null;
            },
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case 'canvas':
                  return;

                case 'context':
                  return 'context';
              }
            }
          });
          beforeReturn.push(flattenedImageTo3DArray);
          thisProperties.push("    _mediaTo2DArray,");
          thisProperties.push("    _imageTo3DArray,");
        } else if (cpuKernel.argumentTypes.indexOf('HTMLImage') !== -1 || constantTypes.indexOf('HTMLImage') !== -1) {
          var flattenedImageTo2DArray = utils.flattenFunctionToString((useFunctionKeyword ? 'function ' : '') + cpuKernel._mediaTo2DArray.toString(), {
            findDependency: function findDependency(object, name) {
              return null;
            },
            thisLookup: function thisLookup(propertyName) {
              switch (propertyName) {
                case 'canvas':
                  return 'settings.canvas';

                case 'context':
                  return 'settings.context';
              }

              throw new Error('unhandled thisLookup');
            }
          });
          beforeReturn.push(flattenedImageTo2DArray);
          thisProperties.push("    _mediaTo2DArray,");
        }

        return "function(settings) {\n".concat(header.join('\n'), "\n  for (const p in _constantTypes) {\n    if (!_constantTypes.hasOwnProperty(p)) continue;\n    const type = _constantTypes[p];\n    switch (type) {\n      case 'Number':\n      case 'Integer':\n      case 'Float':\n      case 'Boolean':\n      case 'Array(2)':\n      case 'Array(3)':\n      case 'Array(4)':\n        if (incomingConstants.hasOwnProperty(p)) {\n          console.warn('constant ' + p + ' of type ' + type + ' cannot be resigned');\n        }\n        continue;\n    }\n    if (!incomingConstants.hasOwnProperty(p)) {\n      throw new Error('constant ' + p + ' not found');\n    }\n    _constants[p] = incomingConstants[p];\n  }\n  const kernel = (function() {\n").concat(cpuKernel._kernelString, "\n  })\n    .apply({ ").concat(thisProperties.join('\n'), " });\n  ").concat(beforeReturn.join('\n'), "\n  return kernel;\n}");
      }

      module.exports = {
        cpuKernelString: cpuKernelString
      };
    }, {
      "../../utils": 114
    }],
    8: [function (require, module, exports) {
      var _require4 = require('../kernel'),
          Kernel = _require4.Kernel;

      var _require5 = require('../function-builder'),
          FunctionBuilder = _require5.FunctionBuilder;

      var _require6 = require('./function-node'),
          CPUFunctionNode = _require6.CPUFunctionNode;

      var _require7 = require('../../utils'),
          utils = _require7.utils;

      var _require8 = require('./kernel-string'),
          cpuKernelString = _require8.cpuKernelString;

      var CPUKernel =
      /*#__PURE__*/
      function (_Kernel) {
        _inherits(CPUKernel, _Kernel);

        _createClass(CPUKernel, null, [{
          key: "getFeatures",
          value: function getFeatures() {
            return this.features;
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            return false;
          }
        }, {
          key: "nativeFunctionArguments",
          value: function nativeFunctionArguments() {
            return null;
          }
        }, {
          key: "nativeFunctionReturnType",
          value: function nativeFunctionReturnType() {
            throw new Error("Looking up native function return type not supported on ".concat(this.name));
          }
        }, {
          key: "combineKernels",
          value: function combineKernels(combinedKernel) {
            return combinedKernel;
          }
        }, {
          key: "getSignature",
          value: function getSignature(kernel, argumentTypes) {
            return 'cpu' + (argumentTypes.length > 0 ? ':' + argumentTypes.join(',') : '');
          }
        }, {
          key: "features",
          get: function get() {
            return Object.freeze({
              kernelMap: true,
              isIntegerDivisionAccurate: true
            });
          }
        }, {
          key: "isSupported",
          get: function get() {
            return true;
          }
        }, {
          key: "mode",
          get: function get() {
            return 'cpu';
          }
        }]);

        function CPUKernel(source, settings) {
          var _this;

          _classCallCheck(this, CPUKernel);

          _this = _possibleConstructorReturn(this, _getPrototypeOf(CPUKernel).call(this, source, settings));

          _this.mergeSettings(source.settings || settings);

          _this._imageData = null;
          _this._colorData = null;
          _this._kernelString = null;
          _this._prependedString = [];
          _this.thread = {
            x: 0,
            y: 0,
            z: 0
          };
          _this.translatedSources = null;
          return _this;
        }

        _createClass(CPUKernel, [{
          key: "initCanvas",
          value: function initCanvas() {
            if (typeof document !== 'undefined') {
              return document.createElement('canvas');
            } else if (typeof OffscreenCanvas !== 'undefined') {
              return new OffscreenCanvas(0, 0);
            }
          }
        }, {
          key: "initContext",
          value: function initContext() {
            if (!this.canvas) return null;
            return this.canvas.getContext('2d');
          }
        }, {
          key: "initPlugins",
          value: function initPlugins(settings) {
            return [];
          }
        }, {
          key: "validateSettings",
          value: function validateSettings(args) {
            if (!this.output || this.output.length === 0) {
              if (args.length !== 1) {
                throw new Error('Auto output only supported for kernels with only one input');
              }

              var argType = utils.getVariableType(args[0], this.strictIntegers);

              if (argType === 'Array') {
                this.output = utils.getDimensions(argType);
              } else if (argType === 'NumberTexture' || argType === 'ArrayTexture(4)') {
                this.output = args[0].output;
              } else {
                throw new Error('Auto output not supported for input type: ' + argType);
              }
            }

            if (this.graphical) {
              if (this.output.length !== 2) {
                throw new Error('Output must have 2 dimensions on graphical mode');
              }
            }

            this.checkOutput();
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            this.leadingReturnStatement = this.output.length > 1 ? 'resultX[x] = ' : 'result[x] = ';

            if (this.subKernels) {
              var followingReturnStatement = [];

              for (var i = 0; i < this.subKernels.length; i++) {
                var _name4 = this.subKernels[i].name;
                followingReturnStatement.push(this.output.length > 1 ? "resultX_".concat(_name4, "[x] = subKernelResult_").concat(_name4, ";\n") : "result_".concat(_name4, "[x] = subKernelResult_").concat(_name4, ";\n"));
              }

              this.followingReturnStatement = followingReturnStatement.join('');
            }

            var functionBuilder = FunctionBuilder.fromKernel(this, CPUFunctionNode);
            this.translatedSources = functionBuilder.getPrototypes('kernel');

            if (!this.graphical && !this.returnType) {
              this.returnType = functionBuilder.getKernelResultType();
            }
          }
        }, {
          key: "build",
          value: function build() {
            this.setupConstants();
            this.setupArguments(arguments);
            this.validateSettings(arguments);
            this.translateSource();

            if (this.graphical) {
              var canvas = this.canvas,
                  output = this.output;

              if (!canvas) {
                throw new Error('no canvas available for using graphical output');
              }

              var width = output[0];
              var height = output[1] || 1;
              canvas.width = width;
              canvas.height = height;
              this._imageData = this.context.createImageData(width, height);
              this._colorData = new Uint8ClampedArray(width * height * 4);
            }

            var kernelString = this.getKernelString();
            this.kernelString = kernelString;

            if (this.debug) {
              console.log('Function output:');
              console.log(kernelString);
            }

            try {
              this.run = new Function([], kernelString).bind(this)();
            } catch (e) {
              console.error('An error occurred compiling the javascript: ', e);
            }

            this.buildSignature(arguments);
            this.built = true;
          }
        }, {
          key: "color",
          value: function color(r, g, b, a) {
            if (typeof a === 'undefined') {
              a = 1;
            }

            r = Math.floor(r * 255);
            g = Math.floor(g * 255);
            b = Math.floor(b * 255);
            a = Math.floor(a * 255);
            var width = this.output[0];
            var height = this.output[1];
            var x = this.thread.x;
            var y = height - this.thread.y - 1;
            var index = x + y * width;
            this._colorData[index * 4 + 0] = r;
            this._colorData[index * 4 + 1] = g;
            this._colorData[index * 4 + 2] = b;
            this._colorData[index * 4 + 3] = a;
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            if (this._kernelString !== null) return this._kernelString;
            var kernelThreadString = null;
            var translatedSources = this.translatedSources;

            if (translatedSources.length > 1) {
              translatedSources = translatedSources.filter(function (fn) {
                if (/^function/.test(fn)) return fn;
                kernelThreadString = fn;
                return false;
              });
            } else {
              kernelThreadString = translatedSources.shift();
            }

            return this._kernelString = "  const LOOP_MAX = ".concat(this._getLoopMaxString(), ";\n  ").concat(this.injectedNative || '', "\n  const _this = this;\n  ").concat(this._processConstants(), "\n  return (").concat(this.argumentNames.map(function (argumentName) {
              return 'user_' + argumentName;
            }).join(', '), ") => {\n    ").concat(this._prependedString.join(''), "\n    ").concat(this._processArguments(), "\n    ").concat(this.graphical ? this._graphicalKernelBody(kernelThreadString) : this._resultKernelBody(kernelThreadString), "\n    ").concat(translatedSources.length > 0 ? translatedSources.join('\n') : '', "\n  };");
          }
        }, {
          key: "toString",
          value: function toString() {
            return cpuKernelString(this);
          }
        }, {
          key: "_getLoopMaxString",
          value: function _getLoopMaxString() {
            return this.loopMaxIterations ? " ".concat(parseInt(this.loopMaxIterations), ";") : ' 1000;';
          }
        }, {
          key: "_processConstants",
          value: function _processConstants() {
            if (!this.constants) return '';
            var result = [];

            for (var p in this.constants) {
              var type = this.constantTypes[p];

              switch (type) {
                case 'HTMLCanvas':
                case 'HTMLImage':
                case 'HTMLVideo':
                  result.push("    const constants_".concat(p, " = this._mediaTo2DArray(this.constants.").concat(p, ");\n"));
                  break;

                case 'HTMLImageArray':
                  result.push("    const constants_".concat(p, " = this._imageTo3DArray(this.constants.").concat(p, ");\n"));
                  break;

                case 'Input':
                  result.push("    const constants_".concat(p, " = this.constants.").concat(p, ".value;\n"));
                  break;

                default:
                  result.push("    const constants_".concat(p, " = this.constants.").concat(p, ";\n"));
              }
            }

            return result.join('');
          }
        }, {
          key: "_processArguments",
          value: function _processArguments() {
            var result = [];

            for (var i = 0; i < this.argumentTypes.length; i++) {
              var variableName = "user_".concat(this.argumentNames[i]);

              switch (this.argumentTypes[i]) {
                case 'HTMLCanvas':
                case 'HTMLImage':
                case 'HTMLVideo':
                  result.push("    ".concat(variableName, " = this._mediaTo2DArray(").concat(variableName, ");\n"));
                  break;

                case 'HTMLImageArray':
                  result.push("    ".concat(variableName, " = this._imageTo3DArray(").concat(variableName, ");\n"));
                  break;

                case 'Input':
                  result.push("    ".concat(variableName, " = ").concat(variableName, ".value;\n"));
                  break;

                case 'ArrayTexture(1)':
                case 'ArrayTexture(2)':
                case 'ArrayTexture(3)':
                case 'ArrayTexture(4)':
                case 'NumberTexture':
                case 'MemoryOptimizedNumberTexture':
                  result.push("\n    if (".concat(variableName, ".toArray) {\n      if (!_this.textureCache) {\n        _this.textureCache = [];\n        _this.arrayCache = [];\n      }\n      const textureIndex = _this.textureCache.indexOf(").concat(variableName, ");\n      if (textureIndex !== -1) {\n        ").concat(variableName, " = _this.arrayCache[textureIndex];\n      } else {\n        _this.textureCache.push(").concat(variableName, ");\n        ").concat(variableName, " = ").concat(variableName, ".toArray();\n        _this.arrayCache.push(").concat(variableName, ");\n      }\n    }"));
                  break;
              }
            }

            return result.join('');
          }
        }, {
          key: "_mediaTo2DArray",
          value: function _mediaTo2DArray(media) {
            var canvas = this.canvas;
            var width = media.width > 0 ? media.width : media.videoWidth;
            var height = media.height > 0 ? media.height : media.videoHeight;

            if (canvas.width < width) {
              canvas.width = width;
            }

            if (canvas.height < height) {
              canvas.height = height;
            }

            var ctx = this.context;
            ctx.drawImage(media, 0, 0, width, height);
            var pixelsData = ctx.getImageData(0, 0, width, height).data;
            var imageArray = new Array(height);
            var index = 0;

            for (var y = height - 1; y >= 0; y--) {
              var row = imageArray[y] = new Array(width);

              for (var x = 0; x < width; x++) {
                var pixel = new Float32Array(4);
                pixel[0] = pixelsData[index++] / 255;
                pixel[1] = pixelsData[index++] / 255;
                pixel[2] = pixelsData[index++] / 255;
                pixel[3] = pixelsData[index++] / 255;
                row[x] = pixel;
              }
            }

            return imageArray;
          }
        }, {
          key: "getPixels",
          value: function getPixels(flip) {
            var _this$output = _slicedToArray(this.output, 2),
                width = _this$output[0],
                height = _this$output[1];

            return flip ? utils.flipPixels(this._imageData.data, width, height) : this._imageData.data.slice(0);
          }
        }, {
          key: "_imageTo3DArray",
          value: function _imageTo3DArray(images) {
            var imagesArray = new Array(images.length);

            for (var i = 0; i < images.length; i++) {
              imagesArray[i] = this._mediaTo2DArray(images[i]);
            }

            return imagesArray;
          }
        }, {
          key: "_resultKernelBody",
          value: function _resultKernelBody(kernelString) {
            switch (this.output.length) {
              case 1:
                return this._resultKernel1DLoop(kernelString) + this._kernelOutput();

              case 2:
                return this._resultKernel2DLoop(kernelString) + this._kernelOutput();

              case 3:
                return this._resultKernel3DLoop(kernelString) + this._kernelOutput();

              default:
                throw new Error('unsupported size kernel');
            }
          }
        }, {
          key: "_graphicalKernelBody",
          value: function _graphicalKernelBody(kernelThreadString) {
            switch (this.output.length) {
              case 2:
                return this._graphicalKernel2DLoop(kernelThreadString) + this._graphicalOutput();

              default:
                throw new Error('unsupported size kernel');
            }
          }
        }, {
          key: "_graphicalOutput",
          value: function _graphicalOutput() {
            return "\n    this._imageData.data.set(this._colorData);\n    this.context.putImageData(this._imageData, 0, 0);\n    return;";
          }
        }, {
          key: "_getKernelResultTypeConstructorString",
          value: function _getKernelResultTypeConstructorString() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Integer':
              case 'Float':
                return 'Float32Array';

              case 'Array(2)':
              case 'Array(3)':
              case 'Array(4)':
                return 'Array';

              default:
                if (this.graphical) {
                  return 'Float32Array';
                }

                throw new Error("unhandled returnType ".concat(this.returnType));
            }
          }
        }, {
          key: "_resultKernel1DLoop",
          value: function _resultKernel1DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const result = new ".concat(constructorString, "(outputX);\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new ").concat(constructorString, "(outputX);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let x = 0; x < outputX; x++) {\n      this.thread.x = x;\n      this.thread.y = 0;\n      this.thread.z = 0;\n      ").concat(kernelString, "\n    }");
          }
        }, {
          key: "_resultKernel2DLoop",
          value: function _resultKernel2DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const result = new Array(outputY);\n    ".concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new Array(outputY);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      const resultX = result[y] = new ").concat(constructorString, "(outputX);\n      ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = result_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join(''), "\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ").concat(kernelString, "\n      }\n    }");
          }
        }, {
          key: "_graphicalKernel2DLoop",
          value: function _graphicalKernel2DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    ".concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new Array(outputY);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let y = 0; y < outputY; y++) {\n      this.thread.z = 0;\n      this.thread.y = y;\n      ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = result_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join(''), "\n      for (let x = 0; x < outputX; x++) {\n        this.thread.x = x;\n        ").concat(kernelString, "\n      }\n    }");
          }
        }, {
          key: "_resultKernel3DLoop",
          value: function _resultKernel3DLoop(kernelString) {
            var constructorString = this._getKernelResultTypeConstructorString();

            return "  const outputX = _this.output[0];\n    const outputY = _this.output[1];\n    const outputZ = _this.output[2];\n    const result = new Array(outputZ);\n    ".concat(this._mapSubKernels(function (subKernel) {
              return "const result_".concat(subKernel.name, " = new Array(outputZ);\n");
            }).join('    '), "\n    ").concat(this._mapSubKernels(function (subKernel) {
              return "let subKernelResult_".concat(subKernel.name, ";\n");
            }).join('    '), "\n    for (let z = 0; z < outputZ; z++) {\n      this.thread.z = z;\n      const resultY = result[z] = new Array(outputY);\n      ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultY_".concat(subKernel.name, " = result_").concat(subKernel.name, "[z] = new Array(outputY);\n");
            }).join('      '), "\n      for (let y = 0; y < outputY; y++) {\n        this.thread.y = y;\n        const resultX = resultY[y] = new ").concat(constructorString, "(outputX);\n        ").concat(this._mapSubKernels(function (subKernel) {
              return "const resultX_".concat(subKernel.name, " = resultY_").concat(subKernel.name, "[y] = new ").concat(constructorString, "(outputX);\n");
            }).join('        '), "\n        for (let x = 0; x < outputX; x++) {\n          this.thread.x = x;\n          ").concat(kernelString, "\n        }\n      }\n    }");
          }
        }, {
          key: "_kernelOutput",
          value: function _kernelOutput() {
            if (!this.subKernels) {
              return '\n    return result;';
            }

            return "\n    return {\n      result: result,\n      ".concat(this.subKernels.map(function (subKernel) {
              return "".concat(subKernel.property, ": result_").concat(subKernel.name);
            }).join(',\n      '), "\n    };");
          }
        }, {
          key: "_mapSubKernels",
          value: function _mapSubKernels(fn) {
            return this.subKernels === null ? [''] : this.subKernels.map(fn);
          }
        }, {
          key: "destroy",
          value: function destroy(removeCanvasReference) {
            if (removeCanvasReference) {
              delete this.canvas;
            }
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var json = _get(_getPrototypeOf(CPUKernel.prototype), "toJSON", this).call(this);

            json.functionNodes = FunctionBuilder.fromKernel(this, CPUFunctionNode).toJSON();
            return json;
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            _get(_getPrototypeOf(CPUKernel.prototype), "setOutput", this).call(this, output);

            var _this$output2 = _slicedToArray(this.output, 2),
                width = _this$output2[0],
                height = _this$output2[1];

            if (this.graphical) {
              this._imageData = this.context.createImageData(width, height);
              this._colorData = new Uint8ClampedArray(width * height * 4);
            }
          }
        }, {
          key: "prependString",
          value: function prependString(value) {
            if (this._kernelString) throw new Error('Kernel already built');

            this._prependedString.push(value);
          }
        }, {
          key: "hasPrependString",
          value: function hasPrependString(value) {
            return this._prependedString.indexOf(value) > -1;
          }
        }], [{
          key: "destroyContext",
          value: function destroyContext(context) {}
        }]);

        return CPUKernel;
      }(Kernel);

      module.exports = {
        CPUKernel: CPUKernel
      };
    }, {
      "../../utils": 114,
      "../function-builder": 9,
      "../kernel": 36,
      "./function-node": 6,
      "./kernel-string": 7
    }],
    9: [function (require, module, exports) {
      var FunctionBuilder =
      /*#__PURE__*/
      function () {
        _createClass(FunctionBuilder, null, [{
          key: "fromKernel",
          value: function fromKernel(kernel, FunctionNode, extraNodeOptions) {
            var kernelArguments = kernel.kernelArguments,
                kernelConstants = kernel.kernelConstants,
                argumentNames = kernel.argumentNames,
                argumentSizes = kernel.argumentSizes,
                argumentBitRatios = kernel.argumentBitRatios,
                constants = kernel.constants,
                constantBitRatios = kernel.constantBitRatios,
                debug = kernel.debug,
                loopMaxIterations = kernel.loopMaxIterations,
                nativeFunctions = kernel.nativeFunctions,
                output = kernel.output,
                optimizeFloatMemory = kernel.optimizeFloatMemory,
                precision = kernel.precision,
                plugins = kernel.plugins,
                source = kernel.source,
                subKernels = kernel.subKernels,
                functions = kernel.functions,
                leadingReturnStatement = kernel.leadingReturnStatement,
                followingReturnStatement = kernel.followingReturnStatement,
                dynamicArguments = kernel.dynamicArguments,
                dynamicOutput = kernel.dynamicOutput,
                onIstanbulCoverageVariable = kernel.onIstanbulCoverageVariable,
                removeIstanbulCoverage = kernel.removeIstanbulCoverage;
            var argumentTypes = new Array(kernelArguments.length);
            var constantTypes = {};

            for (var i = 0; i < kernelArguments.length; i++) {
              argumentTypes[i] = kernelArguments[i].type;
            }

            for (var _i4 = 0; _i4 < kernelConstants.length; _i4++) {
              var kernelConstant = kernelConstants[_i4];
              constantTypes[kernelConstant.name] = kernelConstant.type;
            }

            var needsArgumentType = function needsArgumentType(functionName, index) {
              return functionBuilder.needsArgumentType(functionName, index);
            };

            var assignArgumentType = function assignArgumentType(functionName, index, type) {
              functionBuilder.assignArgumentType(functionName, index, type);
            };

            var lookupReturnType = function lookupReturnType(functionName, ast, requestingNode) {
              return functionBuilder.lookupReturnType(functionName, ast, requestingNode);
            };

            var lookupFunctionArgumentTypes = function lookupFunctionArgumentTypes(functionName) {
              return functionBuilder.lookupFunctionArgumentTypes(functionName);
            };

            var lookupFunctionArgumentName = function lookupFunctionArgumentName(functionName, argumentIndex) {
              return functionBuilder.lookupFunctionArgumentName(functionName, argumentIndex);
            };

            var lookupFunctionArgumentBitRatio = function lookupFunctionArgumentBitRatio(functionName, argumentName) {
              return functionBuilder.lookupFunctionArgumentBitRatio(functionName, argumentName);
            };

            var triggerImplyArgumentType = function triggerImplyArgumentType(functionName, i, argumentType, requestingNode) {
              functionBuilder.assignArgumentType(functionName, i, argumentType, requestingNode);
            };

            var triggerImplyArgumentBitRatio = function triggerImplyArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex) {
              functionBuilder.assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex);
            };

            var onFunctionCall = function onFunctionCall(functionName, calleeFunctionName, args) {
              functionBuilder.trackFunctionCall(functionName, calleeFunctionName, args);
            };

            var onNestedFunction = function onNestedFunction(ast, returnType) {
              var argumentNames = [];

              for (var _i5 = 0; _i5 < ast.params.length; _i5++) {
                argumentNames.push(ast.params[_i5].name);
              }

              var nestedFunction = new FunctionNode(null, Object.assign({}, nodeOptions, {
                returnType: null,
                ast: ast,
                name: ast.id.name,
                argumentNames: argumentNames,
                lookupReturnType: lookupReturnType,
                lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,
                lookupFunctionArgumentName: lookupFunctionArgumentName,
                lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,
                needsArgumentType: needsArgumentType,
                assignArgumentType: assignArgumentType,
                triggerImplyArgumentType: triggerImplyArgumentType,
                triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,
                onFunctionCall: onFunctionCall
              }));
              nestedFunction.traceFunctionAST(ast);
              functionBuilder.addFunctionNode(nestedFunction);
            };

            var nodeOptions = Object.assign({
              isRootKernel: false,
              onNestedFunction: onNestedFunction,
              lookupReturnType: lookupReturnType,
              lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,
              lookupFunctionArgumentName: lookupFunctionArgumentName,
              lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,
              needsArgumentType: needsArgumentType,
              assignArgumentType: assignArgumentType,
              triggerImplyArgumentType: triggerImplyArgumentType,
              triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,
              onFunctionCall: onFunctionCall,
              onIstanbulCoverageVariable: onIstanbulCoverageVariable ? function (name) {
                return onIstanbulCoverageVariable(name, kernel);
              } : null,
              removeIstanbulCoverage: removeIstanbulCoverage,
              optimizeFloatMemory: optimizeFloatMemory,
              precision: precision,
              constants: constants,
              constantTypes: constantTypes,
              constantBitRatios: constantBitRatios,
              debug: debug,
              loopMaxIterations: loopMaxIterations,
              output: output,
              plugins: plugins,
              dynamicArguments: dynamicArguments,
              dynamicOutput: dynamicOutput
            }, extraNodeOptions || {});
            var rootNodeOptions = Object.assign({}, nodeOptions, {
              isRootKernel: true,
              name: 'kernel',
              argumentNames: argumentNames,
              argumentTypes: argumentTypes,
              argumentSizes: argumentSizes,
              argumentBitRatios: argumentBitRatios,
              leadingReturnStatement: leadingReturnStatement,
              followingReturnStatement: followingReturnStatement
            });

            if (_typeof(source) === 'object' && source.functionNodes) {
              return new FunctionBuilder().fromJSON(source.functionNodes, FunctionNode);
            }

            var rootNode = new FunctionNode(source, rootNodeOptions);
            var functionNodes = null;

            if (functions) {
              functionNodes = functions.map(function (fn) {
                return new FunctionNode(fn.source, {
                  returnType: fn.returnType,
                  argumentTypes: fn.argumentTypes,
                  output: output,
                  plugins: plugins,
                  constants: constants,
                  constantTypes: constantTypes,
                  constantBitRatios: constantBitRatios,
                  optimizeFloatMemory: optimizeFloatMemory,
                  precision: precision,
                  lookupReturnType: lookupReturnType,
                  lookupFunctionArgumentTypes: lookupFunctionArgumentTypes,
                  lookupFunctionArgumentName: lookupFunctionArgumentName,
                  lookupFunctionArgumentBitRatio: lookupFunctionArgumentBitRatio,
                  needsArgumentType: needsArgumentType,
                  assignArgumentType: assignArgumentType,
                  triggerImplyArgumentType: triggerImplyArgumentType,
                  triggerImplyArgumentBitRatio: triggerImplyArgumentBitRatio,
                  onFunctionCall: onFunctionCall,
                  onNestedFunction: onNestedFunction,
                  onIstanbulCoverageVariable: onIstanbulCoverageVariable ? function (name) {
                    return onIstanbulCoverageVariable(name, kernel);
                  } : null,
                  removeIstanbulCoverage: removeIstanbulCoverage
                });
              });
            }

            var subKernelNodes = null;

            if (subKernels) {
              subKernelNodes = subKernels.map(function (subKernel) {
                var name = subKernel.name,
                    source = subKernel.source;
                return new FunctionNode(source, Object.assign({}, nodeOptions, {
                  name: name,
                  isSubKernel: true,
                  isRootKernel: false
                }));
              });
            }

            var functionBuilder = new FunctionBuilder({
              kernel: kernel,
              rootNode: rootNode,
              functionNodes: functionNodes,
              nativeFunctions: nativeFunctions,
              subKernelNodes: subKernelNodes
            });
            return functionBuilder;
          }
        }]);

        function FunctionBuilder(settings) {
          _classCallCheck(this, FunctionBuilder);

          settings = settings || {};
          this.kernel = settings.kernel;
          this.rootNode = settings.rootNode;
          this.functionNodes = settings.functionNodes || [];
          this.subKernelNodes = settings.subKernelNodes || [];
          this.nativeFunctions = settings.nativeFunctions || [];
          this.functionMap = {};
          this.nativeFunctionNames = [];
          this.lookupChain = [];
          this.functionNodeDependencies = {};
          this.functionCalls = {};

          if (this.rootNode) {
            this.functionMap['kernel'] = this.rootNode;
          }

          if (this.functionNodes) {
            for (var i = 0; i < this.functionNodes.length; i++) {
              this.functionMap[this.functionNodes[i].name] = this.functionNodes[i];
            }
          }

          if (this.subKernelNodes) {
            for (var _i6 = 0; _i6 < this.subKernelNodes.length; _i6++) {
              this.functionMap[this.subKernelNodes[_i6].name] = this.subKernelNodes[_i6];
            }
          }

          if (this.nativeFunctions) {
            for (var _i7 = 0; _i7 < this.nativeFunctions.length; _i7++) {
              var nativeFunction = this.nativeFunctions[_i7];
              this.nativeFunctionNames.push(nativeFunction.name);
            }
          }
        }

        _createClass(FunctionBuilder, [{
          key: "addFunctionNode",
          value: function addFunctionNode(functionNode) {
            if (!functionNode.name) throw new Error('functionNode.name needs set');
            this.functionMap[functionNode.name] = functionNode;

            if (functionNode.isRootKernel) {
              this.rootNode = functionNode;
            }
          }
        }, {
          key: "traceFunctionCalls",
          value: function traceFunctionCalls(functionName, retList) {
            functionName = functionName || 'kernel';
            retList = retList || [];

            if (this.nativeFunctionNames.indexOf(functionName) > -1) {
              if (retList.indexOf(functionName) === -1) {
                retList.push(functionName);
              }

              return retList;
            }

            var functionNode = this.functionMap[functionName];

            if (functionNode) {
              var functionIndex = retList.indexOf(functionName);

              if (functionIndex === -1) {
                retList.push(functionName);
                functionNode.toString();

                for (var i = 0; i < functionNode.calledFunctions.length; ++i) {
                  this.traceFunctionCalls(functionNode.calledFunctions[i], retList);
                }
              } else {
                var dependantFunctionName = retList.splice(functionIndex, 1)[0];
                retList.push(dependantFunctionName);
              }
            }

            return retList;
          }
        }, {
          key: "getPrototypeString",
          value: function getPrototypeString(functionName) {
            return this.getPrototypes(functionName).join('\n');
          }
        }, {
          key: "getPrototypes",
          value: function getPrototypes(functionName) {
            if (this.rootNode) {
              this.rootNode.toString();
            }

            if (functionName) {
              return this.getPrototypesFromFunctionNames(this.traceFunctionCalls(functionName, []).reverse());
            }

            return this.getPrototypesFromFunctionNames(Object.keys(this.functionMap));
          }
        }, {
          key: "getStringFromFunctionNames",
          value: function getStringFromFunctionNames(functionList) {
            var ret = [];

            for (var i = 0; i < functionList.length; ++i) {
              var node = this.functionMap[functionList[i]];

              if (node) {
                ret.push(this.functionMap[functionList[i]].toString());
              }
            }

            return ret.join('\n');
          }
        }, {
          key: "getPrototypesFromFunctionNames",
          value: function getPrototypesFromFunctionNames(functionList) {
            var ret = [];

            for (var i = 0; i < functionList.length; ++i) {
              var functionName = functionList[i];
              var functionIndex = this.nativeFunctionNames.indexOf(functionName);

              if (functionIndex > -1) {
                ret.push(this.nativeFunctions[functionIndex].source);
                continue;
              }

              var node = this.functionMap[functionName];

              if (node) {
                ret.push(node.toString());
              }
            }

            return ret;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var _this2 = this;

            return this.traceFunctionCalls(this.rootNode.name).reverse().map(function (name) {
              var nativeIndex = _this2.nativeFunctions.indexOf(name);

              if (nativeIndex > -1) {
                return {
                  name: name,
                  source: _this2.nativeFunctions[nativeIndex].source
                };
              } else if (_this2.functionMap[name]) {
                return _this2.functionMap[name].toJSON();
              } else {
                throw new Error("function ".concat(name, " not found"));
              }
            });
          }
        }, {
          key: "fromJSON",
          value: function fromJSON(jsonFunctionNodes, FunctionNode) {
            this.functionMap = {};

            for (var i = 0; i < jsonFunctionNodes.length; i++) {
              var jsonFunctionNode = jsonFunctionNodes[i];
              this.functionMap[jsonFunctionNode.settings.name] = new FunctionNode(jsonFunctionNode.ast, jsonFunctionNode.settings);
            }

            return this;
          }
        }, {
          key: "getString",
          value: function getString(functionName) {
            if (functionName) {
              return this.getStringFromFunctionNames(this.traceFunctionCalls(functionName).reverse());
            }

            return this.getStringFromFunctionNames(Object.keys(this.functionMap));
          }
        }, {
          key: "lookupReturnType",
          value: function lookupReturnType(functionName, ast, requestingNode) {
            if (ast.type !== 'CallExpression') {
              throw new Error("expected ast type of \"CallExpression\", but is ".concat(ast.type));
            }

            if (this._isNativeFunction(functionName)) {
              return this._lookupNativeFunctionReturnType(functionName);
            } else if (this._isFunction(functionName)) {
              var node = this._getFunction(functionName);

              if (node.returnType) {
                return node.returnType;
              } else {
                for (var i = 0; i < this.lookupChain.length; i++) {
                  if (this.lookupChain[i].ast === ast) {
                    if (node.argumentTypes.length === 0 && ast.arguments.length > 0) {
                      var args = ast.arguments;

                      for (var j = 0; j < args.length; j++) {
                        this.lookupChain.push({
                          name: requestingNode.name,
                          ast: args[i],
                          requestingNode: requestingNode
                        });
                        node.argumentTypes[j] = requestingNode.getType(args[j]);
                        this.lookupChain.pop();
                      }

                      return node.returnType = node.getType(node.getJsAST());
                    }

                    throw new Error('circlical logic detected!');
                  }
                }

                this.lookupChain.push({
                  name: requestingNode.name,
                  ast: ast,
                  requestingNode: requestingNode
                });
                var type = node.getType(node.getJsAST());
                this.lookupChain.pop();
                return node.returnType = type;
              }
            }

            return null;
          }
        }, {
          key: "_getFunction",
          value: function _getFunction(functionName) {
            if (!this._isFunction(functionName)) {
              new Error("Function ".concat(functionName, " not found"));
            }

            return this.functionMap[functionName];
          }
        }, {
          key: "_isFunction",
          value: function _isFunction(functionName) {
            return Boolean(this.functionMap[functionName]);
          }
        }, {
          key: "_getNativeFunction",
          value: function _getNativeFunction(functionName) {
            for (var i = 0; i < this.nativeFunctions.length; i++) {
              if (this.nativeFunctions[i].name === functionName) return this.nativeFunctions[i];
            }

            return null;
          }
        }, {
          key: "_isNativeFunction",
          value: function _isNativeFunction(functionName) {
            return Boolean(this._getNativeFunction(functionName));
          }
        }, {
          key: "_lookupNativeFunctionReturnType",
          value: function _lookupNativeFunctionReturnType(functionName) {
            var nativeFunction = this._getNativeFunction(functionName);

            if (nativeFunction) {
              return nativeFunction.returnType;
            }

            throw new Error("Native function ".concat(functionName, " not found"));
          }
        }, {
          key: "lookupFunctionArgumentTypes",
          value: function lookupFunctionArgumentTypes(functionName) {
            if (this._isNativeFunction(functionName)) {
              return this._getNativeFunction(functionName).argumentTypes;
            } else if (this._isFunction(functionName)) {
              return this._getFunction(functionName).argumentTypes;
            }

            return null;
          }
        }, {
          key: "lookupFunctionArgumentName",
          value: function lookupFunctionArgumentName(functionName, argumentIndex) {
            return this._getFunction(functionName).argumentNames[argumentIndex];
          }
        }, {
          key: "lookupFunctionArgumentBitRatio",
          value: function lookupFunctionArgumentBitRatio(functionName, argumentName) {
            if (!this._isFunction(functionName)) {
              throw new Error('function not found');
            }

            if (this.rootNode.name === functionName) {
              var _i8 = this.rootNode.argumentNames.indexOf(argumentName);

              if (_i8 !== -1) {
                return this.rootNode.argumentBitRatios[_i8];
              }
            }

            var node = this._getFunction(functionName);

            var i = node.argumentNames.indexOf(argumentName);

            if (i === -1) {
              throw new Error('argument not found');
            }

            var bitRatio = node.argumentBitRatios[i];

            if (typeof bitRatio !== 'number') {
              throw new Error('argument bit ratio not found');
            }

            return bitRatio;
          }
        }, {
          key: "needsArgumentType",
          value: function needsArgumentType(functionName, i) {
            if (!this._isFunction(functionName)) return false;

            var fnNode = this._getFunction(functionName);

            return !fnNode.argumentTypes[i];
          }
        }, {
          key: "assignArgumentType",
          value: function assignArgumentType(functionName, i, argumentType, requestingNode) {
            if (!this._isFunction(functionName)) return;

            var fnNode = this._getFunction(functionName);

            if (!fnNode.argumentTypes[i]) {
              fnNode.argumentTypes[i] = argumentType;
            }
          }
        }, {
          key: "assignArgumentBitRatio",
          value: function assignArgumentBitRatio(functionName, argumentName, calleeFunctionName, argumentIndex) {
            var node = this._getFunction(functionName);

            if (this._isNativeFunction(calleeFunctionName)) return null;

            var calleeNode = this._getFunction(calleeFunctionName);

            var i = node.argumentNames.indexOf(argumentName);

            if (i === -1) {
              throw new Error("Argument ".concat(argumentName, " not found in arguments from function ").concat(functionName));
            }

            var bitRatio = node.argumentBitRatios[i];

            if (typeof bitRatio !== 'number') {
              throw new Error("Bit ratio for argument ".concat(argumentName, " not found in function ").concat(functionName));
            }

            if (!calleeNode.argumentBitRatios) {
              calleeNode.argumentBitRatios = new Array(calleeNode.argumentNames.length);
            }

            var calleeBitRatio = calleeNode.argumentBitRatios[i];

            if (typeof calleeBitRatio === 'number') {
              if (calleeBitRatio !== bitRatio) {
                throw new Error("Incompatible bit ratio found at function ".concat(functionName, " at argument ").concat(argumentName));
              }

              return calleeBitRatio;
            }

            calleeNode.argumentBitRatios[i] = bitRatio;
            return bitRatio;
          }
        }, {
          key: "trackFunctionCall",
          value: function trackFunctionCall(functionName, calleeFunctionName, args) {
            if (!this.functionNodeDependencies[functionName]) {
              this.functionNodeDependencies[functionName] = new Set();
              this.functionCalls[functionName] = [];
            }

            this.functionNodeDependencies[functionName].add(calleeFunctionName);
            this.functionCalls[functionName].push(args);
          }
        }, {
          key: "getKernelResultType",
          value: function getKernelResultType() {
            return this.rootNode.returnType || this.rootNode.getType(this.rootNode.ast);
          }
        }, {
          key: "getSubKernelResultType",
          value: function getSubKernelResultType(index) {
            var subKernelNode = this.subKernelNodes[index];
            var called = false;

            for (var functionCallIndex = 0; functionCallIndex < this.rootNode.functionCalls.length; functionCallIndex++) {
              var functionCall = this.rootNode.functionCalls[functionCallIndex];

              if (functionCall.ast.callee.name === subKernelNode.name) {
                called = true;
              }
            }

            if (!called) {
              throw new Error("SubKernel ".concat(subKernelNode.name, " never called by kernel"));
            }

            return subKernelNode.returnType || subKernelNode.getType(subKernelNode.getJsAST());
          }
        }, {
          key: "getReturnTypes",
          value: function getReturnTypes() {
            var result = _defineProperty({}, this.rootNode.name, this.rootNode.getType(this.rootNode.ast));

            var list = this.traceFunctionCalls(this.rootNode.name);

            for (var i = 0; i < list.length; i++) {
              var functionName = list[i];
              var functionNode = this.functionMap[functionName];
              result[functionName] = functionNode.getType(functionNode.ast);
            }

            return result;
          }
        }]);

        return FunctionBuilder;
      }();

      module.exports = {
        FunctionBuilder: FunctionBuilder
      };
    }, {}],
    10: [function (require, module, exports) {
      var acorn = require('acorn');

      var _require9 = require('../utils'),
          utils = _require9.utils;

      var _require10 = require('./function-tracer'),
          FunctionTracer = _require10.FunctionTracer;

      var FunctionNode =
      /*#__PURE__*/
      function () {
        function FunctionNode(source, settings) {
          _classCallCheck(this, FunctionNode);

          if (!source && !settings.ast) {
            throw new Error('source parameter is missing');
          }

          settings = settings || {};
          this.source = source;
          this.ast = null;
          this.name = typeof source === 'string' ? settings.isRootKernel ? 'kernel' : settings.name || utils.getFunctionNameFromString(source) : null;
          this.calledFunctions = [];
          this.constants = {};
          this.constantTypes = {};
          this.constantBitRatios = {};
          this.isRootKernel = false;
          this.isSubKernel = false;
          this.debug = null;
          this.functions = null;
          this.identifiers = null;
          this.contexts = null;
          this.functionCalls = null;
          this.states = [];
          this.needsArgumentType = null;
          this.assignArgumentType = null;
          this.lookupReturnType = null;
          this.lookupFunctionArgumentTypes = null;
          this.lookupFunctionArgumentBitRatio = null;
          this.triggerImplyArgumentType = null;
          this.triggerImplyArgumentBitRatio = null;
          this.onNestedFunction = null;
          this.onFunctionCall = null;
          this.optimizeFloatMemory = null;
          this.precision = null;
          this.loopMaxIterations = null;
          this.argumentNames = typeof this.source === 'string' ? utils.getArgumentNamesFromString(this.source) : null;
          this.argumentTypes = [];
          this.argumentSizes = [];
          this.argumentBitRatios = null;
          this.returnType = null;
          this.output = [];
          this.plugins = null;
          this.leadingReturnStatement = null;
          this.followingReturnStatement = null;
          this.dynamicOutput = null;
          this.dynamicArguments = null;
          this.strictTypingChecking = false;
          this.fixIntegerDivisionAccuracy = null;
          this.onIstanbulCoverageVariable = null;
          this.removeIstanbulCoverage = false;

          if (settings) {
            for (var p in settings) {
              if (!settings.hasOwnProperty(p)) continue;
              if (!this.hasOwnProperty(p)) continue;
              this[p] = settings[p];
            }
          }

          this.literalTypes = {};
          this.validate();
          this._string = null;
          this._internalVariableNames = {};
        }

        _createClass(FunctionNode, [{
          key: "validate",
          value: function validate() {
            if (typeof this.source !== 'string' && !this.ast) {
              throw new Error('this.source not a string');
            }

            if (!this.ast && !utils.isFunctionString(this.source)) {
              throw new Error('this.source not a function string');
            }

            if (!this.name) {
              throw new Error('this.name could not be set');
            }

            if (this.argumentTypes.length > 0 && this.argumentTypes.length !== this.argumentNames.length) {
              throw new Error("argumentTypes count of ".concat(this.argumentTypes.length, " exceeds ").concat(this.argumentNames.length));
            }

            if (this.output.length < 1) {
              throw new Error('this.output is not big enough');
            }
          }
        }, {
          key: "isIdentifierConstant",
          value: function isIdentifierConstant(name) {
            if (!this.constants) return false;
            return this.constants.hasOwnProperty(name);
          }
        }, {
          key: "isInput",
          value: function isInput(argumentName) {
            return this.argumentTypes[this.argumentNames.indexOf(argumentName)] === 'Input';
          }
        }, {
          key: "pushState",
          value: function pushState(state) {
            this.states.push(state);
          }
        }, {
          key: "popState",
          value: function popState(state) {
            if (this.state !== state) {
              throw new Error("Cannot popState ".concat(state, " when in ").concat(this.state));
            }

            this.states.pop();
          }
        }, {
          key: "isState",
          value: function isState(state) {
            return this.state === state;
          }
        }, {
          key: "astMemberExpressionUnroll",
          value: function astMemberExpressionUnroll(ast) {
            if (ast.type === 'Identifier') {
              return ast.name;
            } else if (ast.type === 'ThisExpression') {
              return 'this';
            }

            if (ast.type === 'MemberExpression') {
              if (ast.object && ast.property) {
                if (ast.object.hasOwnProperty('name') && ast.object.name[0] === '_') {
                  return this.astMemberExpressionUnroll(ast.property);
                }

                return this.astMemberExpressionUnroll(ast.object) + '.' + this.astMemberExpressionUnroll(ast.property);
              }
            }

            if (ast.hasOwnProperty('expressions')) {
              var firstExpression = ast.expressions[0];

              if (firstExpression.type === 'Literal' && firstExpression.value === 0 && ast.expressions.length === 2) {
                return this.astMemberExpressionUnroll(ast.expressions[1]);
              }
            }

            throw this.astErrorOutput('Unknown astMemberExpressionUnroll', ast);
          }
        }, {
          key: "getJsAST",
          value: function getJsAST(inParser) {
            if (this.ast) {
              return this.ast;
            }

            if (_typeof(this.source) === 'object') {
              this.traceFunctionAST(this.source);
              return this.ast = this.source;
            }

            inParser = inParser || acorn;

            if (inParser === null) {
              throw new Error('Missing JS to AST parser');
            }

            var ast = Object.freeze(inParser.parse("const parser_".concat(this.name, " = ").concat(this.source, ";"), {
              locations: true
            }));
            var functionAST = ast.body[0].declarations[0].init;
            this.traceFunctionAST(functionAST);

            if (!ast) {
              throw new Error('Failed to parse JS code');
            }

            return this.ast = functionAST;
          }
        }, {
          key: "traceFunctionAST",
          value: function traceFunctionAST(ast) {
            var _ref = new FunctionTracer(ast),
                contexts = _ref.contexts,
                declarations = _ref.declarations,
                functions = _ref.functions,
                identifiers = _ref.identifiers,
                functionCalls = _ref.functionCalls;

            this.contexts = contexts;
            this.identifiers = identifiers;
            this.functionCalls = functionCalls;
            this.functions = functions;

            for (var i = 0; i < declarations.length; i++) {
              var declaration = declarations[i];
              var _ast = declaration.ast,
                  inForLoopInit = declaration.inForLoopInit,
                  inForLoopTest = declaration.inForLoopTest;
              var init = _ast.init;
              var dependencies = this.getDependencies(init);
              var valueType = null;

              if (inForLoopInit && inForLoopTest) {
                valueType = 'Integer';
              } else {
                if (init) {
                  var realType = this.getType(init);

                  switch (realType) {
                    case 'Integer':
                    case 'Float':
                    case 'Number':
                      if (init.type === 'MemberExpression') {
                        valueType = realType;
                      } else {
                        valueType = 'Number';
                      }

                      break;

                    case 'LiteralInteger':
                      valueType = 'Number';
                      break;

                    default:
                      valueType = realType;
                  }
                }
              }

              declaration.valueType = valueType;
              declaration.dependencies = dependencies;
              declaration.isSafe = this.isSafeDependencies(dependencies);
            }

            for (var _i9 = 0; _i9 < functions.length; _i9++) {
              this.onNestedFunction(functions[_i9]);
            }
          }
        }, {
          key: "getDeclaration",
          value: function getDeclaration(ast) {
            for (var i = 0; i < this.identifiers.length; i++) {
              var identifier = this.identifiers[i];

              if (ast === identifier.ast) {
                return identifier.declaration;
              }
            }

            return null;
          }
        }, {
          key: "getVariableType",
          value: function getVariableType(ast) {
            if (ast.type !== 'Identifier') {
              throw new Error("ast of ".concat(ast.type, " not \"Identifier\""));
            }

            var type = null;
            var argumentIndex = this.argumentNames.indexOf(ast.name);

            if (argumentIndex === -1) {
              var declaration = this.getDeclaration(ast);

              if (declaration) {
                return declaration.valueType;
              }
            } else {
              var argumentType = this.argumentTypes[argumentIndex];

              if (argumentType) {
                type = argumentType;
              }
            }

            if (!type && this.strictTypingChecking) {
              throw new Error("Declaration of ".concat(name, " not found"));
            }

            return type;
          }
        }, {
          key: "getLookupType",
          value: function getLookupType(type) {
            if (!typeLookupMap.hasOwnProperty(type)) {
              throw new Error("unknown typeLookupMap ".concat(type));
            }

            return typeLookupMap[type];
          }
        }, {
          key: "getConstantType",
          value: function getConstantType(constantName) {
            if (this.constantTypes[constantName]) {
              var type = this.constantTypes[constantName];

              if (type === 'Float') {
                return 'Number';
              } else {
                return type;
              }
            }

            throw new Error("Type for constant \"".concat(constantName, "\" not declared"));
          }
        }, {
          key: "toString",
          value: function toString() {
            if (this._string) return this._string;
            return this._string = this.astGeneric(this.getJsAST(), []).join('').trim();
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var settings = {
              source: this.source,
              name: this.name,
              constants: this.constants,
              constantTypes: this.constantTypes,
              isRootKernel: this.isRootKernel,
              isSubKernel: this.isSubKernel,
              debug: this.debug,
              output: this.output,
              loopMaxIterations: this.loopMaxIterations,
              argumentNames: this.argumentNames,
              argumentTypes: this.argumentTypes,
              argumentSizes: this.argumentSizes,
              returnType: this.returnType,
              leadingReturnStatement: this.leadingReturnStatement,
              followingReturnStatement: this.followingReturnStatement
            };
            return {
              ast: this.ast,
              settings: settings
            };
          }
        }, {
          key: "getType",
          value: function getType(ast) {
            if (Array.isArray(ast)) {
              return this.getType(ast[ast.length - 1]);
            }

            switch (ast.type) {
              case 'BlockStatement':
                return this.getType(ast.body);

              case 'ArrayExpression':
                return "Array(".concat(ast.elements.length, ")");

              case 'Literal':
                var literalKey = this.astKey(ast);

                if (this.literalTypes[literalKey]) {
                  return this.literalTypes[literalKey];
                }

                if (Number.isInteger(ast.value)) {
                  return 'LiteralInteger';
                } else if (ast.value === true || ast.value === false) {
                  return 'Boolean';
                } else {
                  return 'Number';
                }

              case 'AssignmentExpression':
                return this.getType(ast.left);

              case 'CallExpression':
                if (this.isAstMathFunction(ast)) {
                  return 'Number';
                }

                if (!ast.callee || !ast.callee.name) {
                  if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[ast.callee.expressions.length - 1].property.name) {
                    var functionName = ast.callee.expressions[ast.callee.expressions.length - 1].property.name;
                    this.inferArgumentTypesIfNeeded(functionName, ast.arguments);
                    return this.lookupReturnType(functionName, ast, this);
                  }

                  if (this.getVariableSignature(ast.callee, true) === 'this.color') {
                    return null;
                  }

                  throw this.astErrorOutput('Unknown call expression', ast);
                }

                if (ast.callee && ast.callee.name) {
                  var _functionName = ast.callee.name;
                  this.inferArgumentTypesIfNeeded(_functionName, ast.arguments);
                  return this.lookupReturnType(_functionName, ast, this);
                }

                throw this.astErrorOutput("Unhandled getType Type \"".concat(ast.type, "\""), ast);

              case 'LogicalExpression':
                return 'Boolean';

              case 'BinaryExpression':
                switch (ast.operator) {
                  case '%':
                  case '/':
                    if (this.fixIntegerDivisionAccuracy) {
                      return 'Number';
                    } else {
                      break;
                    }

                  case '>':
                  case '<':
                    return 'Boolean';

                  case '&':
                  case '|':
                  case '^':
                  case '<<':
                  case '>>':
                  case '>>>':
                    return 'Integer';
                }

                var type = this.getType(ast.left);
                if (this.isState('skip-literal-correction')) return type;

                if (type === 'LiteralInteger') {
                  var rightType = this.getType(ast.right);

                  if (rightType === 'LiteralInteger') {
                    if (ast.left.value % 1 === 0) {
                      return 'Integer';
                    } else {
                      return 'Float';
                    }
                  }

                  return rightType;
                }

                return typeLookupMap[type] || type;

              case 'UpdateExpression':
                return this.getType(ast.argument);

              case 'UnaryExpression':
                if (ast.operator === '~') {
                  return 'Integer';
                }

                return this.getType(ast.argument);

              case 'VariableDeclaration':
                {
                  var declarations = ast.declarations;
                  var lastType;

                  for (var i = 0; i < declarations.length; i++) {
                    var _declaration = declarations[i];
                    lastType = this.getType(_declaration);
                  }

                  if (!lastType) {
                    throw this.astErrorOutput("Unable to find type for declaration", ast);
                  }

                  return lastType;
                }

              case 'VariableDeclarator':
                var declaration = this.getDeclaration(ast.id);

                if (!declaration) {
                  throw this.astErrorOutput("Unable to find declarator", ast);
                }

                if (!declaration.valueType) {
                  throw this.astErrorOutput("Unable to find declarator valueType", ast);
                }

                return declaration.valueType;

              case 'Identifier':
                if (ast.name === 'Infinity') {
                  return 'Number';
                }

                if (this.isAstVariable(ast)) {
                  var signature = this.getVariableSignature(ast);

                  if (signature === 'value') {
                    var _type = this.getVariableType(ast);

                    if (!_type) {
                      throw this.astErrorOutput("Unable to find identifier valueType", ast);
                    }

                    return _type;
                  }
                }

                var origin = this.findIdentifierOrigin(ast);

                if (origin && origin.init) {
                  return this.getType(origin.init);
                }

                return null;

              case 'ReturnStatement':
                return this.getType(ast.argument);

              case 'MemberExpression':
                if (this.isAstMathFunction(ast)) {
                  switch (ast.property.name) {
                    case 'ceil':
                      return 'Integer';

                    case 'floor':
                      return 'Integer';

                    case 'round':
                      return 'Integer';
                  }

                  return 'Number';
                }

                if (this.isAstVariable(ast)) {
                  var variableSignature = this.getVariableSignature(ast);

                  switch (variableSignature) {
                    case 'value[]':
                      return this.getLookupType(this.getVariableType(ast.object));

                    case 'value[][]':
                      return this.getLookupType(this.getVariableType(ast.object.object));

                    case 'value[][][]':
                      return this.getLookupType(this.getVariableType(ast.object.object.object));

                    case 'value[][][][]':
                      return this.getLookupType(this.getVariableType(ast.object.object.object.object));

                    case 'value.thread.value':
                    case 'this.thread.value':
                      return 'Integer';

                    case 'this.output.value':
                      return this.dynamicOutput ? 'Integer' : 'LiteralInteger';

                    case 'this.constants.value':
                      return this.getConstantType(ast.property.name);

                    case 'this.constants.value[]':
                      return this.getLookupType(this.getConstantType(ast.object.property.name));

                    case 'this.constants.value[][]':
                      return this.getLookupType(this.getConstantType(ast.object.object.property.name));

                    case 'this.constants.value[][][]':
                      return this.getLookupType(this.getConstantType(ast.object.object.object.property.name));

                    case 'this.constants.value[][][][]':
                      return this.getLookupType(this.getConstantType(ast.object.object.object.object.property.name));

                    case 'fn()[]':
                      return this.getLookupType(this.getType(ast.object));

                    case 'fn()[][]':
                      return this.getLookupType(this.getType(ast.object));

                    case 'fn()[][][]':
                      return this.getLookupType(this.getType(ast.object));

                    case 'value.value':
                      if (this.isAstMathVariable(ast)) {
                        return 'Number';
                      }

                      switch (ast.property.name) {
                        case 'r':
                          return this.getLookupType(this.getVariableType(ast.object));

                        case 'g':
                          return this.getLookupType(this.getVariableType(ast.object));

                        case 'b':
                          return this.getLookupType(this.getVariableType(ast.object));

                        case 'a':
                          return this.getLookupType(this.getVariableType(ast.object));
                      }

                    case '[][]':
                      return 'Number';
                  }

                  throw this.astErrorOutput('Unhandled getType MemberExpression', ast);
                }

                throw this.astErrorOutput('Unhandled getType MemberExpression', ast);

              case 'ConditionalExpression':
                return this.getType(ast.consequent);

              case 'FunctionDeclaration':
              case 'FunctionExpression':
                var lastReturn = this.findLastReturn(ast.body);

                if (lastReturn) {
                  return this.getType(lastReturn);
                }

                return null;

              case 'IfStatement':
                return this.getType(ast.consequent);

              case 'SequenceExpression':
                return this.getType(ast.expressions[ast.expressions.length - 1]);

              default:
                throw this.astErrorOutput("Unhandled getType Type \"".concat(ast.type, "\""), ast);
            }
          }
        }, {
          key: "inferArgumentTypesIfNeeded",
          value: function inferArgumentTypesIfNeeded(functionName, args) {
            for (var i = 0; i < args.length; i++) {
              if (!this.needsArgumentType(functionName, i)) continue;
              var type = this.getType(args[i]);

              if (!type) {
                throw this.astErrorOutput("Unable to infer argument ".concat(i), args[i]);
              }

              this.assignArgumentType(functionName, i, type);
            }
          }
        }, {
          key: "isAstMathVariable",
          value: function isAstMathVariable(ast) {
            var mathProperties = ['E', 'PI', 'SQRT2', 'SQRT1_2', 'LN2', 'LN10', 'LOG2E', 'LOG10E'];
            return ast.type === 'MemberExpression' && ast.object && ast.object.type === 'Identifier' && ast.object.name === 'Math' && ast.property && ast.property.type === 'Identifier' && mathProperties.indexOf(ast.property.name) > -1;
          }
        }, {
          key: "isAstMathFunction",
          value: function isAstMathFunction(ast) {
            var mathFunctions = ['abs', 'acos', 'asin', 'atan', 'atan2', 'ceil', 'cos', 'exp', 'floor', 'log', 'log2', 'max', 'min', 'pow', 'random', 'round', 'sign', 'sin', 'sqrt', 'tan'];
            return ast.type === 'CallExpression' && ast.callee && ast.callee.type === 'MemberExpression' && ast.callee.object && ast.callee.object.type === 'Identifier' && ast.callee.object.name === 'Math' && ast.callee.property && ast.callee.property.type === 'Identifier' && mathFunctions.indexOf(ast.callee.property.name) > -1;
          }
        }, {
          key: "isAstVariable",
          value: function isAstVariable(ast) {
            return ast.type === 'Identifier' || ast.type === 'MemberExpression';
          }
        }, {
          key: "isSafe",
          value: function isSafe(ast) {
            return this.isSafeDependencies(this.getDependencies(ast));
          }
        }, {
          key: "isSafeDependencies",
          value: function isSafeDependencies(dependencies) {
            return dependencies && dependencies.every ? dependencies.every(function (dependency) {
              return dependency.isSafe;
            }) : true;
          }
        }, {
          key: "getDependencies",
          value: function getDependencies(ast, dependencies, isNotSafe) {
            if (!dependencies) {
              dependencies = [];
            }

            if (!ast) return null;

            if (Array.isArray(ast)) {
              for (var i = 0; i < ast.length; i++) {
                this.getDependencies(ast[i], dependencies, isNotSafe);
              }

              return dependencies;
            }

            switch (ast.type) {
              case 'AssignmentExpression':
                this.getDependencies(ast.left, dependencies, isNotSafe);
                this.getDependencies(ast.right, dependencies, isNotSafe);
                return dependencies;

              case 'ConditionalExpression':
                this.getDependencies(ast.test, dependencies, isNotSafe);
                this.getDependencies(ast.alternate, dependencies, isNotSafe);
                this.getDependencies(ast.consequent, dependencies, isNotSafe);
                return dependencies;

              case 'Literal':
                dependencies.push({
                  origin: 'literal',
                  value: ast.value,
                  isSafe: isNotSafe === true ? false : ast.value > -Infinity && ast.value < Infinity && !isNaN(ast.value)
                });
                break;

              case 'VariableDeclarator':
                return this.getDependencies(ast.init, dependencies, isNotSafe);

              case 'Identifier':
                var declaration = this.getDeclaration(ast);

                if (declaration) {
                  dependencies.push({
                    name: ast.name,
                    origin: 'declaration',
                    isSafe: isNotSafe ? false : this.isSafeDependencies(declaration.dependencies)
                  });
                } else if (this.argumentNames.indexOf(ast.name) > -1) {
                  dependencies.push({
                    name: ast.name,
                    origin: 'argument',
                    isSafe: false
                  });
                } else if (this.strictTypingChecking) {
                  throw new Error("Cannot find identifier origin \"".concat(ast.name, "\""));
                }

                break;

              case 'FunctionDeclaration':
                return this.getDependencies(ast.body.body[ast.body.body.length - 1], dependencies, isNotSafe);

              case 'ReturnStatement':
                return this.getDependencies(ast.argument, dependencies);

              case 'BinaryExpression':
              case 'LogicalExpression':
                isNotSafe = ast.operator === '/' || ast.operator === '*';
                this.getDependencies(ast.left, dependencies, isNotSafe);
                this.getDependencies(ast.right, dependencies, isNotSafe);
                return dependencies;

              case 'UnaryExpression':
              case 'UpdateExpression':
                return this.getDependencies(ast.argument, dependencies, isNotSafe);

              case 'VariableDeclaration':
                return this.getDependencies(ast.declarations, dependencies, isNotSafe);

              case 'ArrayExpression':
                dependencies.push({
                  origin: 'declaration',
                  isSafe: true
                });
                return dependencies;

              case 'CallExpression':
                dependencies.push({
                  origin: 'function',
                  isSafe: true
                });
                return dependencies;

              case 'MemberExpression':
                var details = this.getMemberExpressionDetails(ast);

                switch (details.signature) {
                  case 'value[]':
                    this.getDependencies(ast.object, dependencies, isNotSafe);
                    break;

                  case 'value[][]':
                    this.getDependencies(ast.object.object, dependencies, isNotSafe);
                    break;

                  case 'value[][][]':
                    this.getDependencies(ast.object.object.object, dependencies, isNotSafe);
                    break;

                  case 'this.output.value':
                    if (this.dynamicOutput) {
                      dependencies.push({
                        name: details.name,
                        origin: 'output',
                        isSafe: false
                      });
                    }

                    break;
                }

                if (details) {
                  if (details.property) {
                    this.getDependencies(details.property, dependencies, isNotSafe);
                  }

                  if (details.xProperty) {
                    this.getDependencies(details.xProperty, dependencies, isNotSafe);
                  }

                  if (details.yProperty) {
                    this.getDependencies(details.yProperty, dependencies, isNotSafe);
                  }

                  if (details.zProperty) {
                    this.getDependencies(details.zProperty, dependencies, isNotSafe);
                  }

                  return dependencies;
                }

              case 'SequenceExpression':
                return this.getDependencies(ast.expressions, dependencies, isNotSafe);

              default:
                throw this.astErrorOutput("Unhandled type ".concat(ast.type, " in getDependencies"), ast);
            }

            return dependencies;
          }
        }, {
          key: "getVariableSignature",
          value: function getVariableSignature(ast, returnRawValue) {
            if (!this.isAstVariable(ast)) {
              throw new Error("ast of type \"".concat(ast.type, "\" is not a variable signature"));
            }

            if (ast.type === 'Identifier') {
              return 'value';
            }

            var signature = [];

            while (true) {
              if (!ast) break;

              if (ast.computed) {
                signature.push('[]');
              } else if (ast.type === 'ThisExpression') {
                signature.unshift('this');
              } else if (ast.property && ast.property.name) {
                if (ast.property.name === 'x' || ast.property.name === 'y' || ast.property.name === 'z') {
                  signature.unshift(returnRawValue ? '.' + ast.property.name : '.value');
                } else if (ast.property.name === 'constants' || ast.property.name === 'thread' || ast.property.name === 'output') {
                  signature.unshift('.' + ast.property.name);
                } else {
                  signature.unshift(returnRawValue ? '.' + ast.property.name : '.value');
                }
              } else if (ast.name) {
                signature.unshift(returnRawValue ? ast.name : 'value');
              } else if (ast.callee && ast.callee.name) {
                signature.unshift(returnRawValue ? ast.callee.name + '()' : 'fn()');
              } else if (ast.elements) {
                signature.unshift('[]');
              } else {
                signature.unshift('unknown');
              }

              ast = ast.object;
            }

            var signatureString = signature.join('');

            if (returnRawValue) {
              return signatureString;
            }

            var allowedExpressions = ['value', 'value[]', 'value[][]', 'value[][][]', 'value[][][][]', 'value.value', 'value.value[]', 'value.value[][]', 'value.thread.value', 'this.thread.value', 'this.output.value', 'this.constants.value', 'this.constants.value[]', 'this.constants.value[][]', 'this.constants.value[][][]', 'this.constants.value[][][][]', 'fn()[]', 'fn()[][]', 'fn()[][][]', '[][]'];

            if (allowedExpressions.indexOf(signatureString) > -1) {
              return signatureString;
            }

            return null;
          }
        }, {
          key: "build",
          value: function build() {
            return this.toString().length > 0;
          }
        }, {
          key: "astGeneric",
          value: function astGeneric(ast, retArr) {
            if (ast === null) {
              throw this.astErrorOutput('NULL ast', ast);
            } else {
              if (Array.isArray(ast)) {
                for (var i = 0; i < ast.length; i++) {
                  this.astGeneric(ast[i], retArr);
                }

                return retArr;
              }

              switch (ast.type) {
                case 'FunctionDeclaration':
                  return this.astFunctionDeclaration(ast, retArr);

                case 'FunctionExpression':
                  return this.astFunctionExpression(ast, retArr);

                case 'ReturnStatement':
                  return this.astReturnStatement(ast, retArr);

                case 'Literal':
                  return this.astLiteral(ast, retArr);

                case 'BinaryExpression':
                  return this.astBinaryExpression(ast, retArr);

                case 'Identifier':
                  return this.astIdentifierExpression(ast, retArr);

                case 'AssignmentExpression':
                  return this.astAssignmentExpression(ast, retArr);

                case 'ExpressionStatement':
                  return this.astExpressionStatement(ast, retArr);

                case 'EmptyStatement':
                  return this.astEmptyStatement(ast, retArr);

                case 'BlockStatement':
                  return this.astBlockStatement(ast, retArr);

                case 'IfStatement':
                  return this.astIfStatement(ast, retArr);

                case 'SwitchStatement':
                  return this.astSwitchStatement(ast, retArr);

                case 'BreakStatement':
                  return this.astBreakStatement(ast, retArr);

                case 'ContinueStatement':
                  return this.astContinueStatement(ast, retArr);

                case 'ForStatement':
                  return this.astForStatement(ast, retArr);

                case 'WhileStatement':
                  return this.astWhileStatement(ast, retArr);

                case 'DoWhileStatement':
                  return this.astDoWhileStatement(ast, retArr);

                case 'VariableDeclaration':
                  return this.astVariableDeclaration(ast, retArr);

                case 'VariableDeclarator':
                  return this.astVariableDeclarator(ast, retArr);

                case 'ThisExpression':
                  return this.astThisExpression(ast, retArr);

                case 'SequenceExpression':
                  return this.astSequenceExpression(ast, retArr);

                case 'UnaryExpression':
                  return this.astUnaryExpression(ast, retArr);

                case 'UpdateExpression':
                  return this.astUpdateExpression(ast, retArr);

                case 'LogicalExpression':
                  return this.astLogicalExpression(ast, retArr);

                case 'MemberExpression':
                  return this.astMemberExpression(ast, retArr);

                case 'CallExpression':
                  return this.astCallExpression(ast, retArr);

                case 'ArrayExpression':
                  return this.astArrayExpression(ast, retArr);

                case 'DebuggerStatement':
                  return this.astDebuggerStatement(ast, retArr);

                case 'ConditionalExpression':
                  return this.astConditionalExpression(ast, retArr);
              }

              throw this.astErrorOutput('Unknown ast type : ' + ast.type, ast);
            }
          }
        }, {
          key: "astErrorOutput",
          value: function astErrorOutput(error, ast) {
            if (typeof this.source !== 'string') {
              return new Error(error);
            }

            var debugString = utils.getAstString(this.source, ast);
            var leadingSource = this.source.substr(ast.start);
            var splitLines = leadingSource.split(/\n/);
            var lineBefore = splitLines.length > 0 ? splitLines[splitLines.length - 1] : 0;
            return new Error("".concat(error, " on line ").concat(splitLines.length, ", position ").concat(lineBefore.length, ":\n ").concat(debugString));
          }
        }, {
          key: "astDebuggerStatement",
          value: function astDebuggerStatement(arrNode, retArr) {
            return retArr;
          }
        }, {
          key: "astConditionalExpression",
          value: function astConditionalExpression(ast, retArr) {
            if (ast.type !== 'ConditionalExpression') {
              throw this.astErrorOutput('Not a conditional expression', ast);
            }

            retArr.push('(');
            this.astGeneric(ast.test, retArr);
            retArr.push('?');
            this.astGeneric(ast.consequent, retArr);
            retArr.push(':');
            this.astGeneric(ast.alternate, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astFunction",
          value: function astFunction(ast, retArr) {
            throw new Error("\"astFunction\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "astFunctionDeclaration",
          value: function astFunctionDeclaration(ast, retArr) {
            if (this.isChildFunction(ast)) {
              return retArr;
            }

            return this.astFunction(ast, retArr);
          }
        }, {
          key: "astFunctionExpression",
          value: function astFunctionExpression(ast, retArr) {
            if (this.isChildFunction(ast)) {
              return retArr;
            }

            return this.astFunction(ast, retArr);
          }
        }, {
          key: "isChildFunction",
          value: function isChildFunction(ast) {
            for (var i = 0; i < this.functions.length; i++) {
              if (this.functions[i] === ast) {
                return true;
              }
            }

            return false;
          }
        }, {
          key: "astReturnStatement",
          value: function astReturnStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astLiteral",
          value: function astLiteral(ast, retArr) {
            this.literalTypes[this.astKey(ast)] = 'Number';
            return retArr;
          }
        }, {
          key: "astBinaryExpression",
          value: function astBinaryExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astAssignmentExpression",
          value: function astAssignmentExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astExpressionStatement",
          value: function astExpressionStatement(esNode, retArr) {
            this.astGeneric(esNode.expression, retArr);
            retArr.push(';');
            return retArr;
          }
        }, {
          key: "astEmptyStatement",
          value: function astEmptyStatement(eNode, retArr) {
            return retArr;
          }
        }, {
          key: "astBlockStatement",
          value: function astBlockStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astIfStatement",
          value: function astIfStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astSwitchStatement",
          value: function astSwitchStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astBreakStatement",
          value: function astBreakStatement(brNode, retArr) {
            retArr.push('break;');
            return retArr;
          }
        }, {
          key: "astContinueStatement",
          value: function astContinueStatement(crNode, retArr) {
            retArr.push('continue;\n');
            return retArr;
          }
        }, {
          key: "astForStatement",
          value: function astForStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astWhileStatement",
          value: function astWhileStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astDoWhileStatement",
          value: function astDoWhileStatement(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astVariableDeclarator",
          value: function astVariableDeclarator(iVarDecNode, retArr) {
            this.astGeneric(iVarDecNode.id, retArr);

            if (iVarDecNode.init !== null) {
              retArr.push('=');
              this.astGeneric(iVarDecNode.init, retArr);
            }

            return retArr;
          }
        }, {
          key: "astThisExpression",
          value: function astThisExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "isIstanbulAST",
          value: function isIstanbulAST(ast) {
            var variableSignature = this.getVariableSignature(ast);
            return variableSignature === 'value.value[]' || variableSignature === 'value.value[][]';
          }
        }, {
          key: "astSequenceExpression",
          value: function astSequenceExpression(sNode, retArr) {
            var expressions = sNode.expressions;
            var sequenceResult = [];

            for (var i = 0; i < expressions.length; i++) {
              var expression = expressions[i];

              if (this.removeIstanbulCoverage) {
                if (expression.type === 'UpdateExpression' && this.isIstanbulAST(expression.argument)) {
                  continue;
                }
              }

              var expressionResult = [];
              this.astGeneric(expression, expressionResult);
              sequenceResult.push(expressionResult.join(''));
            }

            if (sequenceResult.length > 1) {
              retArr.push('(', sequenceResult.join(','), ')');
            } else {
              retArr.push(sequenceResult[0]);
            }

            return retArr;
          }
        }, {
          key: "astUnaryExpression",
          value: function astUnaryExpression(uNode, retArr) {
            var unaryResult = this.checkAndUpconvertBitwiseUnary(uNode, retArr);

            if (unaryResult) {
              return retArr;
            }

            if (uNode.prefix) {
              retArr.push(uNode.operator);
              this.astGeneric(uNode.argument, retArr);
            } else {
              this.astGeneric(uNode.argument, retArr);
              retArr.push(uNode.operator);
            }

            return retArr;
          }
        }, {
          key: "checkAndUpconvertBitwiseUnary",
          value: function checkAndUpconvertBitwiseUnary(uNode, retArr) {}
        }, {
          key: "astUpdateExpression",
          value: function astUpdateExpression(uNode, retArr) {
            if (this.removeIstanbulCoverage) {
              var signature = this.getVariableSignature(uNode.argument);

              if (this.isIstanbulAST(uNode.argument)) {
                return retArr;
              }
            }

            if (uNode.prefix) {
              retArr.push(uNode.operator);
              this.astGeneric(uNode.argument, retArr);
            } else {
              this.astGeneric(uNode.argument, retArr);
              retArr.push(uNode.operator);
            }

            return retArr;
          }
        }, {
          key: "astLogicalExpression",
          value: function astLogicalExpression(logNode, retArr) {
            retArr.push('(');
            this.astGeneric(logNode.left, retArr);
            retArr.push(logNode.operator);
            this.astGeneric(logNode.right, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astMemberExpression",
          value: function astMemberExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astCallExpression",
          value: function astCallExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "astArrayExpression",
          value: function astArrayExpression(ast, retArr) {
            return retArr;
          }
        }, {
          key: "getMemberExpressionDetails",
          value: function getMemberExpressionDetails(ast) {
            if (ast.type !== 'MemberExpression') {
              throw this.astErrorOutput("Expression ".concat(ast.type, " not a MemberExpression"), ast);
            }

            var name = null;
            var type = null;
            var variableSignature = this.getVariableSignature(ast);

            switch (variableSignature) {
              case 'value':
                return null;

              case 'value.thread.value':
              case 'this.thread.value':
              case 'this.output.value':
                return {
                  signature: variableSignature,
                  type: 'Integer',
                  name: ast.property.name
                };

              case 'value[]':
                if (typeof ast.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object),
                  xProperty: ast.property
                };

              case 'value[][]':
                if (typeof ast.object.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object.object),
                  yProperty: ast.object.property,
                  xProperty: ast.property
                };

              case 'value[][][]':
                if (typeof ast.object.object.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.object.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object.object.object),
                  zProperty: ast.object.object.property,
                  yProperty: ast.object.property,
                  xProperty: ast.property
                };

              case 'value[][][][]':
                if (typeof ast.object.object.object.object.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.object.object.object.name;
                return {
                  name: name,
                  origin: 'user',
                  signature: variableSignature,
                  type: this.getVariableType(ast.object.object.object.object),
                  zProperty: ast.object.object.property,
                  yProperty: ast.object.property,
                  xProperty: ast.property
                };

              case 'value.value':
                if (typeof ast.property.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                if (this.isAstMathVariable(ast)) {
                  name = ast.property.name;
                  return {
                    name: name,
                    origin: 'Math',
                    type: 'Number',
                    signature: variableSignature
                  };
                }

                switch (ast.property.name) {
                  case 'r':
                  case 'g':
                  case 'b':
                  case 'a':
                    name = ast.object.name;
                    return {
                      name: name,
                      property: ast.property.name,
                      origin: 'user',
                      signature: variableSignature,
                      type: 'Number'
                    };

                  default:
                    throw this.astErrorOutput('Unexpected expression', ast);
                }

              case 'this.constants.value':
                if (typeof ast.property.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.property.name;
                type = this.getConstantType(name);

                if (!type) {
                  throw this.astErrorOutput('Constant has no type', ast);
                }

                return {
                  name: name,
                  type: type,
                  origin: 'constants',
                  signature: variableSignature
                };

              case 'this.constants.value[]':
                if (typeof ast.object.property.name !== 'string') {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                name = ast.object.property.name;
                type = this.getConstantType(name);

                if (!type) {
                  throw this.astErrorOutput('Constant has no type', ast);
                }

                return {
                  name: name,
                  type: type,
                  origin: 'constants',
                  signature: variableSignature,
                  xProperty: ast.property
                };

              case 'this.constants.value[][]':
                {
                  if (typeof ast.object.object.property.name !== 'string') {
                    throw this.astErrorOutput('Unexpected expression', ast);
                  }

                  name = ast.object.object.property.name;
                  type = this.getConstantType(name);

                  if (!type) {
                    throw this.astErrorOutput('Constant has no type', ast);
                  }

                  return {
                    name: name,
                    type: type,
                    origin: 'constants',
                    signature: variableSignature,
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                }

              case 'this.constants.value[][][]':
                {
                  if (typeof ast.object.object.object.property.name !== 'string') {
                    throw this.astErrorOutput('Unexpected expression', ast);
                  }

                  name = ast.object.object.object.property.name;
                  type = this.getConstantType(name);

                  if (!type) {
                    throw this.astErrorOutput('Constant has no type', ast);
                  }

                  return {
                    name: name,
                    type: type,
                    origin: 'constants',
                    signature: variableSignature,
                    zProperty: ast.object.object.property,
                    yProperty: ast.object.property,
                    xProperty: ast.property
                  };
                }

              case 'fn()[]':
              case '[][]':
                return {
                  signature: variableSignature,
                  property: ast.property
                };

              case 'value.value[]':
                if (this.removeIstanbulCoverage) {
                  return {
                    signature: variableSignature
                  };
                }

                if (this.onIstanbulCoverageVariable) {
                  this.onIstanbulCoverageVariable(ast.object.object.name);
                  return {
                    signature: variableSignature
                  };
                }

              case 'value.value[][]':
                if (this.removeIstanbulCoverage) {
                  return {
                    signature: variableSignature
                  };
                }

                if (this.onIstanbulCoverageVariable) {
                  this.onIstanbulCoverageVariable(ast.object.object.object.name);
                  return {
                    signature: variableSignature
                  };
                }

              default:
                throw this.astErrorOutput('Unexpected expression', ast);
            }
          }
        }, {
          key: "findIdentifierOrigin",
          value: function findIdentifierOrigin(astToFind) {
            var stack = [this.ast];

            while (stack.length > 0) {
              var atNode = stack[0];

              if (atNode.type === 'VariableDeclarator' && atNode.id && atNode.id.name && atNode.id.name === astToFind.name) {
                return atNode;
              }

              stack.shift();

              if (atNode.argument) {
                stack.push(atNode.argument);
              } else if (atNode.body) {
                stack.push(atNode.body);
              } else if (atNode.declarations) {
                stack.push(atNode.declarations);
              } else if (Array.isArray(atNode)) {
                for (var i = 0; i < atNode.length; i++) {
                  stack.push(atNode[i]);
                }
              }
            }

            return null;
          }
        }, {
          key: "findLastReturn",
          value: function findLastReturn(ast) {
            var stack = [ast || this.ast];

            while (stack.length > 0) {
              var atNode = stack.pop();

              if (atNode.type === 'ReturnStatement') {
                return atNode;
              }

              if (atNode.type === 'FunctionDeclaration') {
                continue;
              }

              if (atNode.argument) {
                stack.push(atNode.argument);
              } else if (atNode.body) {
                stack.push(atNode.body);
              } else if (atNode.declarations) {
                stack.push(atNode.declarations);
              } else if (Array.isArray(atNode)) {
                for (var i = 0; i < atNode.length; i++) {
                  stack.push(atNode[i]);
                }
              } else if (atNode.consequent) {
                stack.push(atNode.consequent);
              } else if (atNode.cases) {
                stack.push(atNode.cases);
              }
            }

            return null;
          }
        }, {
          key: "getInternalVariableName",
          value: function getInternalVariableName(name) {
            if (!this._internalVariableNames.hasOwnProperty(name)) {
              this._internalVariableNames[name] = 0;
            }

            this._internalVariableNames[name]++;

            if (this._internalVariableNames[name] === 1) {
              return name;
            }

            return name + this._internalVariableNames[name];
          }
        }, {
          key: "astKey",
          value: function astKey(ast) {
            var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
            if (!ast.start || !ast.end) throw new Error('AST start and end needed');
            return "".concat(ast.start).concat(separator).concat(ast.end);
          }
        }, {
          key: "state",
          get: function get() {
            return this.states[this.states.length - 1];
          }
        }]);

        return FunctionNode;
      }();

      var typeLookupMap = {
        'Number': 'Number',
        'Float': 'Float',
        'Integer': 'Integer',
        'Array': 'Number',
        'Array(2)': 'Number',
        'Array(3)': 'Number',
        'Array(4)': 'Number',
        'Array2D': 'Number',
        'Array3D': 'Number',
        'Input': 'Number',
        'HTMLCanvas': 'Array(4)',
        'HTMLImage': 'Array(4)',
        'HTMLVideo': 'Array(4)',
        'HTMLImageArray': 'Array(4)',
        'NumberTexture': 'Number',
        'MemoryOptimizedNumberTexture': 'Number',
        'Array1D(2)': 'Array(2)',
        'Array1D(3)': 'Array(3)',
        'Array1D(4)': 'Array(4)',
        'Array2D(2)': 'Array(2)',
        'Array2D(3)': 'Array(3)',
        'Array2D(4)': 'Array(4)',
        'Array3D(2)': 'Array(2)',
        'Array3D(3)': 'Array(3)',
        'Array3D(4)': 'Array(4)',
        'ArrayTexture(1)': 'Number',
        'ArrayTexture(2)': 'Array(2)',
        'ArrayTexture(3)': 'Array(3)',
        'ArrayTexture(4)': 'Array(4)'
      };
      module.exports = {
        FunctionNode: FunctionNode
      };
    }, {
      "../utils": 114,
      "./function-tracer": 11,
      "acorn": 1
    }],
    11: [function (require, module, exports) {
      var _require11 = require('../utils'),
          utils = _require11.utils;

      function last(array) {
        return array.length > 0 ? array[array.length - 1] : null;
      }

      var states = {
        trackIdentifiers: 'trackIdentifiers',
        memberExpression: 'memberExpression',
        inForLoopInit: 'inForLoopInit'
      };

      var FunctionTracer =
      /*#__PURE__*/
      function () {
        function FunctionTracer(ast) {
          _classCallCheck(this, FunctionTracer);

          this.runningContexts = [];
          this.functionContexts = [];
          this.contexts = [];
          this.functionCalls = [];
          this.declarations = [];
          this.identifiers = [];
          this.functions = [];
          this.returnStatements = [];
          this.trackedIdentifiers = null;
          this.states = [];
          this.newFunctionContext();
          this.scan(ast);
        }

        _createClass(FunctionTracer, [{
          key: "isState",
          value: function isState(state) {
            return this.states[this.states.length - 1] === state;
          }
        }, {
          key: "hasState",
          value: function hasState(state) {
            return this.states.indexOf(state) > -1;
          }
        }, {
          key: "pushState",
          value: function pushState(state) {
            this.states.push(state);
          }
        }, {
          key: "popState",
          value: function popState(state) {
            if (this.isState(state)) {
              this.states.pop();
            } else {
              throw new Error("Cannot pop the non-active state \"".concat(state, "\""));
            }
          }
        }, {
          key: "newFunctionContext",
          value: function newFunctionContext() {
            var newContext = {
              '@contextType': 'function'
            };
            this.contexts.push(newContext);
            this.functionContexts.push(newContext);
          }
        }, {
          key: "newContext",
          value: function newContext(run) {
            var newContext = Object.assign({
              '@contextType': 'const/let'
            }, this.currentContext);
            this.contexts.push(newContext);
            this.runningContexts.push(newContext);
            run();
            var currentFunctionContext = this.currentFunctionContext;

            for (var p in currentFunctionContext) {
              if (!currentFunctionContext.hasOwnProperty(p) || newContext.hasOwnProperty(p)) continue;
              newContext[p] = currentFunctionContext[p];
            }

            this.runningContexts.pop();
            return newContext;
          }
        }, {
          key: "useFunctionContext",
          value: function useFunctionContext(run) {
            var functionContext = last(this.functionContexts);
            this.runningContexts.push(functionContext);
            run();
            this.runningContexts.pop();
          }
        }, {
          key: "getIdentifiers",
          value: function getIdentifiers(run) {
            var trackedIdentifiers = this.trackedIdentifiers = [];
            this.pushState(states.trackIdentifiers);
            run();
            this.trackedIdentifiers = null;
            this.popState(states.trackIdentifiers);
            return trackedIdentifiers;
          }
        }, {
          key: "getDeclaration",
          value: function getDeclaration(name) {
            var currentContext = this.currentContext,
                currentFunctionContext = this.currentFunctionContext;
            return currentContext[name] || currentFunctionContext[name] || null;
          }
        }, {
          key: "scan",
          value: function scan(ast) {
            var _this3 = this;

            if (!ast) return;

            if (Array.isArray(ast)) {
              for (var i = 0; i < ast.length; i++) {
                this.scan(ast[i]);
              }

              return;
            }

            switch (ast.type) {
              case 'Program':
                this.useFunctionContext(function () {
                  _this3.scan(ast.body);
                });
                break;

              case 'BlockStatement':
                this.newContext(function () {
                  _this3.scan(ast.body);
                });
                break;

              case 'AssignmentExpression':
              case 'LogicalExpression':
                this.scan(ast.left);
                this.scan(ast.right);
                break;

              case 'BinaryExpression':
                this.scan(ast.left);
                this.scan(ast.right);
                break;

              case 'UpdateExpression':
                if (ast.operator === '++') {
                  var declaration = this.getDeclaration(ast.argument.name);

                  if (declaration) {
                    declaration.suggestedType = 'Integer';
                  }
                }

                this.scan(ast.argument);
                break;

              case 'UnaryExpression':
                this.scan(ast.argument);
                break;

              case 'VariableDeclaration':
                if (ast.kind === 'var') {
                  this.useFunctionContext(function () {
                    ast.declarations = utils.normalizeDeclarations(ast);

                    _this3.scan(ast.declarations);
                  });
                } else {
                  ast.declarations = utils.normalizeDeclarations(ast);
                  this.scan(ast.declarations);
                }

                break;

              case 'VariableDeclarator':
                {
                  var currentContext = this.currentContext;
                  var inForLoopInit = this.hasState(states.inForLoopInit);
                  var _declaration2 = {
                    ast: ast,
                    context: currentContext,
                    name: ast.id.name,
                    origin: 'declaration',
                    inForLoopInit: inForLoopInit,
                    inForLoopTest: null,
                    assignable: currentContext === this.currentFunctionContext || !inForLoopInit && !currentContext.hasOwnProperty(ast.id.name),
                    suggestedType: null,
                    valueType: null,
                    dependencies: null,
                    isSafe: null
                  };

                  if (!currentContext[ast.id.name]) {
                    currentContext[ast.id.name] = _declaration2;
                  }

                  this.declarations.push(_declaration2);
                  this.scan(ast.id);
                  this.scan(ast.init);
                  break;
                }

              case 'FunctionExpression':
              case 'FunctionDeclaration':
                if (this.runningContexts.length === 0) {
                  this.scan(ast.body);
                } else {
                  this.functions.push(ast);
                }

                break;

              case 'IfStatement':
                this.scan(ast.test);
                this.scan(ast.consequent);
                if (ast.alternate) this.scan(ast.alternate);
                break;

              case 'ForStatement':
                {
                  var testIdentifiers;
                  var context = this.newContext(function () {
                    _this3.pushState(states.inForLoopInit);

                    _this3.scan(ast.init);

                    _this3.popState(states.inForLoopInit);

                    testIdentifiers = _this3.getIdentifiers(function () {
                      _this3.scan(ast.test);
                    });

                    _this3.scan(ast.update);

                    _this3.newContext(function () {
                      _this3.scan(ast.body);
                    });
                  });

                  if (testIdentifiers) {
                    for (var p in context) {
                      if (p === '@contextType') continue;

                      if (testIdentifiers.indexOf(p) > -1) {
                        context[p].inForLoopTest = true;
                      }
                    }
                  }

                  break;
                }

              case 'DoWhileStatement':
              case 'WhileStatement':
                this.newContext(function () {
                  _this3.scan(ast.body);

                  _this3.scan(ast.test);
                });
                break;

              case 'Identifier':
                {
                  if (this.isState(states.trackIdentifiers)) {
                    this.trackedIdentifiers.push(ast.name);
                  }

                  this.identifiers.push({
                    context: this.currentContext,
                    declaration: this.getDeclaration(ast.name),
                    ast: ast
                  });
                  break;
                }

              case 'ReturnStatement':
                this.returnStatements.push(ast);
                this.scan(ast.argument);
                break;

              case 'MemberExpression':
                this.pushState(states.memberExpression);
                this.scan(ast.object);
                this.scan(ast.property);
                this.popState(states.memberExpression);
                break;

              case 'ExpressionStatement':
                this.scan(ast.expression);
                break;

              case 'SequenceExpression':
                this.scan(ast.expressions);
                break;

              case 'CallExpression':
                this.functionCalls.push({
                  context: this.currentContext,
                  ast: ast
                });
                this.scan(ast.arguments);
                break;

              case 'ArrayExpression':
                this.scan(ast.elements);
                break;

              case 'ConditionalExpression':
                this.scan(ast.test);
                this.scan(ast.alternate);
                this.scan(ast.consequent);
                break;

              case 'SwitchStatement':
                this.scan(ast.discriminant);
                this.scan(ast.cases);
                break;

              case 'SwitchCase':
                this.scan(ast.test);
                this.scan(ast.consequent);
                break;

              case 'ThisExpression':
              case 'Literal':
              case 'DebuggerStatement':
              case 'EmptyStatement':
              case 'BreakStatement':
              case 'ContinueStatement':
                break;

              default:
                throw new Error("unhandled type \"".concat(ast.type, "\""));
            }
          }
        }, {
          key: "currentFunctionContext",
          get: function get() {
            return last(this.functionContexts);
          }
        }, {
          key: "currentContext",
          get: function get() {
            return last(this.runningContexts);
          }
        }]);

        return FunctionTracer;
      }();

      module.exports = {
        FunctionTracer: FunctionTracer
      };
    }, {
      "../utils": 114
    }],
    12: [function (require, module, exports) {
      var _require12 = require('gl-wiretap'),
          glWiretap = _require12.glWiretap;

      var _require13 = require('../../utils'),
          utils = _require13.utils;

      function toStringWithoutUtils(fn) {
        return fn.toString().replace('=>', '').replace(/^function /, '').replace(/utils[.]/g, '/*utils.*/');
      }

      function glKernelString(Kernel, args, originKernel, setupContextString, destroyContextString) {
        if (!originKernel.built) {
          originKernel.build.apply(originKernel, args);
        }

        args = args ? Array.from(args).map(function (arg) {
          switch (_typeof(arg)) {
            case 'boolean':
              return new Boolean(arg);

            case 'number':
              return new Number(arg);

            default:
              return arg;
          }
        }) : null;
        var uploadedValues = [];
        var postResult = [];
        var context = glWiretap(originKernel.context, {
          useTrackablePrimitives: true,
          onReadPixels: function onReadPixels(targetName) {
            if (kernel.subKernels) {
              if (!subKernelsResultVariableSetup) {
                postResult.push("    const result = { result: ".concat(getRenderString(targetName, kernel), " };"));
                subKernelsResultVariableSetup = true;
              } else {
                var property = kernel.subKernels[subKernelsResultIndex++].property;
                postResult.push("    result".concat(isNaN(property) ? '.' + property : "[".concat(property, "]"), " = ").concat(getRenderString(targetName, kernel), ";"));
              }

              if (subKernelsResultIndex === kernel.subKernels.length) {
                postResult.push('    return result;');
              }

              return;
            }

            if (targetName) {
              postResult.push("    return ".concat(getRenderString(targetName, kernel), ";"));
            } else {
              postResult.push("    return null;");
            }
          },
          onUnrecognizedArgumentLookup: function onUnrecognizedArgumentLookup(argument) {
            var argumentName = findKernelValue(argument, kernel.kernelArguments, [], context, uploadedValues);

            if (argumentName) {
              return argumentName;
            }

            var constantName = findKernelValue(argument, kernel.kernelConstants, constants ? Object.keys(constants).map(function (key) {
              return constants[key];
            }) : [], context, uploadedValues);

            if (constantName) {
              return constantName;
            }

            return null;
          }
        });
        var subKernelsResultVariableSetup = false;
        var subKernelsResultIndex = 0;
        var source = originKernel.source,
            canvas = originKernel.canvas,
            output = originKernel.output,
            pipeline = originKernel.pipeline,
            graphical = originKernel.graphical,
            loopMaxIterations = originKernel.loopMaxIterations,
            constants = originKernel.constants,
            optimizeFloatMemory = originKernel.optimizeFloatMemory,
            precision = originKernel.precision,
            fixIntegerDivisionAccuracy = originKernel.fixIntegerDivisionAccuracy,
            functions = originKernel.functions,
            nativeFunctions = originKernel.nativeFunctions,
            subKernels = originKernel.subKernels,
            immutable = originKernel.immutable,
            argumentTypes = originKernel.argumentTypes,
            constantTypes = originKernel.constantTypes,
            kernelArguments = originKernel.kernelArguments,
            kernelConstants = originKernel.kernelConstants,
            tactic = originKernel.tactic;
        var kernel = new Kernel(source, {
          canvas: canvas,
          context: context,
          checkContext: false,
          output: output,
          pipeline: pipeline,
          graphical: graphical,
          loopMaxIterations: loopMaxIterations,
          constants: constants,
          optimizeFloatMemory: optimizeFloatMemory,
          precision: precision,
          fixIntegerDivisionAccuracy: fixIntegerDivisionAccuracy,
          functions: functions,
          nativeFunctions: nativeFunctions,
          subKernels: subKernels,
          immutable: immutable,
          argumentTypes: argumentTypes,
          constantTypes: constantTypes,
          tactic: tactic
        });
        var result = [];
        context.setIndent(2);
        kernel.build.apply(kernel, args);
        result.push(context.toString());
        context.reset();
        kernel.kernelArguments.forEach(function (kernelArgument, i) {
          switch (kernelArgument.type) {
            case 'Integer':
            case 'Boolean':
            case 'Number':
            case 'Float':
            case 'Array':
            case 'Array(2)':
            case 'Array(3)':
            case 'Array(4)':
            case 'HTMLCanvas':
            case 'HTMLImage':
            case 'HTMLVideo':
              context.insertVariable("uploadValue_".concat(kernelArgument.name), kernelArgument.uploadValue);
              break;

            case 'HTMLImageArray':
              for (var imageIndex = 0; imageIndex < args[i].length; imageIndex++) {
                var arg = args[i];
                context.insertVariable("uploadValue_".concat(kernelArgument.name, "[").concat(imageIndex, "]"), arg[imageIndex]);
              }

              break;

            case 'Input':
              context.insertVariable("uploadValue_".concat(kernelArgument.name), kernelArgument.uploadValue);
              break;

            case 'MemoryOptimizedNumberTexture':
            case 'NumberTexture':
            case 'Array1D(2)':
            case 'Array1D(3)':
            case 'Array1D(4)':
            case 'Array2D(2)':
            case 'Array2D(3)':
            case 'Array2D(4)':
            case 'Array3D(2)':
            case 'Array3D(3)':
            case 'Array3D(4)':
            case 'ArrayTexture(1)':
            case 'ArrayTexture(2)':
            case 'ArrayTexture(3)':
            case 'ArrayTexture(4)':
              context.insertVariable("uploadValue_".concat(kernelArgument.name), args[i].texture);
              break;

            default:
              throw new Error("unhandled kernelArgumentType insertion for glWiretap of type ".concat(kernelArgument.type));
          }
        });
        result.push('/** start of injected functions **/');
        result.push("function ".concat(toStringWithoutUtils(utils.flattenTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.flatten2dArrayTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.flatten3dArrayTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.flatten4dArrayTo)));
        result.push("function ".concat(toStringWithoutUtils(utils.isArray)));

        if (kernel.renderOutput !== kernel.renderTexture && kernel.formatValues) {
          result.push("  const renderOutput = function ".concat(toStringWithoutUtils(kernel.formatValues), ";"));
        }

        result.push('/** end of injected functions **/');
        result.push("  const innerKernel = function (".concat(kernel.kernelArguments.map(function (kernelArgument) {
          return kernelArgument.varName;
        }).join(', '), ") {"));
        context.setIndent(4);
        kernel.run.apply(kernel, args);

        if (kernel.renderKernels) {
          kernel.renderKernels();
        } else if (kernel.renderOutput) {
          kernel.renderOutput();
        }

        result.push('    /** start setup uploads for kernel values **/');
        kernel.kernelArguments.forEach(function (kernelArgument) {
          result.push('    ' + kernelArgument.getStringValueHandler().split('\n').join('\n    '));
        });
        result.push('    /** end setup uploads for kernel values **/');
        result.push(context.toString());

        if (kernel.renderOutput === kernel.renderTexture) {
          context.reset();

          if (kernel.renderKernels) {
            var results = kernel.renderKernels();
            var textureName = context.getContextVariableName(kernel.texture.texture);
            result.push("    return {\n      result: {\n        texture: ".concat(textureName, ",\n        type: '").concat(results.result.type, "',\n        toArray: ").concat(getToArrayString(results.result, textureName), "\n      },"));
            var _subKernels = kernel.subKernels,
                mappedTextures = kernel.mappedTextures;

            for (var i = 0; i < _subKernels.length; i++) {
              var texture = mappedTextures[i];
              var subKernel = _subKernels[i];
              var subKernelResult = results[subKernel.property];
              var subKernelTextureName = context.getContextVariableName(texture.texture);
              result.push("\n      ".concat(subKernel.property, ": {\n        texture: ").concat(subKernelTextureName, ",\n        type: '").concat(subKernelResult.type, "',\n        toArray: ").concat(getToArrayString(subKernelResult, subKernelTextureName), "\n      },"));
            }

            result.push("    };");
          } else {
            var rendered = kernel.renderOutput();

            var _textureName = context.getContextVariableName(kernel.texture.texture);

            result.push("    return {\n        texture: ".concat(_textureName, ",\n        type: '").concat(rendered.type, "',\n        toArray: ").concat(getToArrayString(rendered, _textureName), "\n      };"));
          }
        }

        result.push("    ".concat(destroyContextString ? '\n' + destroyContextString + '    ' : ''));
        result.push(postResult.join('\n'));
        result.push('  };');

        if (kernel.graphical) {
          result.push(getGetPixelsString(kernel));
          result.push("  innerKernel.getPixels = getPixels;");
        }

        result.push('  return innerKernel;');
        var constantsUpload = [];
        kernelConstants.forEach(function (kernelConstant) {
          constantsUpload.push("".concat(kernelConstant.getStringValueHandler()));
        });
        return "function kernel(settings) {\n  const { context, constants } = settings;\n  ".concat(constantsUpload.join(''), "\n  ").concat(setupContextString ? setupContextString : '', "\n").concat(result.join('\n'), "\n}");
      }

      function getRenderString(targetName, kernel) {
        var readBackValue = kernel.precision === 'single' ? targetName : "new Float32Array(".concat(targetName, ".buffer)");

        if (kernel.output[2]) {
          return "renderOutput(".concat(readBackValue, ", ").concat(kernel.output[0], ", ").concat(kernel.output[1], ", ").concat(kernel.output[2], ")");
        }

        if (kernel.output[1]) {
          return "renderOutput(".concat(readBackValue, ", ").concat(kernel.output[0], ", ").concat(kernel.output[1], ")");
        }

        return "renderOutput(".concat(readBackValue, ", ").concat(kernel.output[0], ")");
      }

      function getGetPixelsString(kernel) {
        var getPixels = kernel.getPixels.toString();
        var useFunctionKeyword = !/^function/.test(getPixels);
        return utils.flattenFunctionToString("".concat(useFunctionKeyword ? 'function ' : '').concat(getPixels), {
          findDependency: function findDependency(object, name) {
            if (object === 'utils') {
              return "const ".concat(name, " = ").concat(utils[name].toString(), ";");
            }

            return null;
          },
          thisLookup: function thisLookup(property) {
            if (property === 'context') {
              return null;
            }

            if (kernel.hasOwnProperty(property)) {
              return JSON.stringify(kernel[property]);
            }

            throw new Error("unhandled thisLookup ".concat(property));
          }
        });
      }

      function getToArrayString(kernelResult, textureName) {
        var toArray = kernelResult.toArray.toString();
        var useFunctionKeyword = !/^function/.test(toArray);
        var flattenedFunctions = utils.flattenFunctionToString("".concat(useFunctionKeyword ? 'function ' : '').concat(toArray), {
          findDependency: function findDependency(object, name) {
            if (object === 'utils') {
              return "const ".concat(name, " = ").concat(utils[name].toString(), ";");
            } else if (object === 'this') {
              return "".concat(useFunctionKeyword ? 'function ' : '').concat(kernelResult[name].toString());
            } else {
              throw new Error('unhandled fromObject');
            }
          },
          thisLookup: function thisLookup(property) {
            if (property === 'texture') {
              return textureName;
            }

            if (property === 'context') {
              return null;
            }

            if (property === '_framebuffer') {
              return '_framebuffer';
            }

            if (kernelResult.hasOwnProperty(property)) {
              return JSON.stringify(kernelResult[property]);
            }

            throw new Error("unhandled thisLookup ".concat(property));
          }
        });
        return "() => {\n  let _framebuffer;\n  ".concat(flattenedFunctions, "\n  return toArray();\n  }");
      }

      function findKernelValue(argument, kernelValues, values, context, uploadedValues) {
        if (argument === null) return null;
        if (kernelValues === null) return null;

        switch (_typeof(argument)) {
          case 'boolean':
          case 'number':
            return null;
        }

        if (typeof HTMLImageElement !== 'undefined' && argument instanceof HTMLImageElement) {
          for (var i = 0; i < kernelValues.length; i++) {
            var kernelValue = kernelValues[i];
            if (kernelValue.type !== 'HTMLImageArray' && kernelValue) continue;
            if (kernelValue.uploadValue !== argument) continue;
            var variableIndex = values[i].indexOf(argument);
            if (variableIndex === -1) continue;
            var variableName = "uploadValue_".concat(kernelValue.name, "[").concat(variableIndex, "]");
            context.insertVariable(variableName, argument);
            return variableName;
          }
        }

        for (var _i10 = 0; _i10 < kernelValues.length; _i10++) {
          var _kernelValue = kernelValues[_i10];
          if (argument !== _kernelValue.uploadValue) continue;
          var variable = "uploadValue_".concat(_kernelValue.name);
          context.insertVariable(variable, _kernelValue);
          return variable;
        }

        return null;
      }

      module.exports = {
        glKernelString: glKernelString
      };
    }, {
      "../../utils": 114,
      "gl-wiretap": 3
    }],
    13: [function (require, module, exports) {
      var _require14 = require('../kernel'),
          Kernel = _require14.Kernel;

      var _require15 = require('../../utils'),
          utils = _require15.utils;

      var _require16 = require('./texture/array-2-float'),
          GLTextureArray2Float = _require16.GLTextureArray2Float;

      var _require17 = require('./texture/array-2-float-2d'),
          GLTextureArray2Float2D = _require17.GLTextureArray2Float2D;

      var _require18 = require('./texture/array-2-float-3d'),
          GLTextureArray2Float3D = _require18.GLTextureArray2Float3D;

      var _require19 = require('./texture/array-3-float'),
          GLTextureArray3Float = _require19.GLTextureArray3Float;

      var _require20 = require('./texture/array-3-float-2d'),
          GLTextureArray3Float2D = _require20.GLTextureArray3Float2D;

      var _require21 = require('./texture/array-3-float-3d'),
          GLTextureArray3Float3D = _require21.GLTextureArray3Float3D;

      var _require22 = require('./texture/array-4-float'),
          GLTextureArray4Float = _require22.GLTextureArray4Float;

      var _require23 = require('./texture/array-4-float-2d'),
          GLTextureArray4Float2D = _require23.GLTextureArray4Float2D;

      var _require24 = require('./texture/array-4-float-3d'),
          GLTextureArray4Float3D = _require24.GLTextureArray4Float3D;

      var _require25 = require('./texture/float'),
          GLTextureFloat = _require25.GLTextureFloat;

      var _require26 = require('./texture/float-2d'),
          GLTextureFloat2D = _require26.GLTextureFloat2D;

      var _require27 = require('./texture/float-3d'),
          GLTextureFloat3D = _require27.GLTextureFloat3D;

      var _require28 = require('./texture/memory-optimized'),
          GLTextureMemoryOptimized = _require28.GLTextureMemoryOptimized;

      var _require29 = require('./texture/memory-optimized-2d'),
          GLTextureMemoryOptimized2D = _require29.GLTextureMemoryOptimized2D;

      var _require30 = require('./texture/memory-optimized-3d'),
          GLTextureMemoryOptimized3D = _require30.GLTextureMemoryOptimized3D;

      var _require31 = require('./texture/unsigned'),
          GLTextureUnsigned = _require31.GLTextureUnsigned;

      var _require32 = require('./texture/unsigned-2d'),
          GLTextureUnsigned2D = _require32.GLTextureUnsigned2D;

      var _require33 = require('./texture/unsigned-3d'),
          GLTextureUnsigned3D = _require33.GLTextureUnsigned3D;

      var _require34 = require('./texture/graphical'),
          GLTextureGraphical = _require34.GLTextureGraphical;

      var GLKernel =
      /*#__PURE__*/
      function (_Kernel2) {
        _inherits(GLKernel, _Kernel2);

        _createClass(GLKernel, [{
          key: "setFixIntegerDivisionAccuracy",
          value: function setFixIntegerDivisionAccuracy(fix) {
            this.fixIntegerDivisionAccuracy = fix;
            return this;
          }
        }, {
          key: "setPrecision",
          value: function setPrecision(flag) {
            this.precision = flag;
            return this;
          }
        }, {
          key: "setFloatTextures",
          value: function setFloatTextures(flag) {
            utils.warnDeprecated('method', 'setFloatTextures', 'setOptimizeFloatMemory');
            this.floatTextures = flag;
            return this;
          }
        }], [{
          key: "getIsFloatRead",
          value: function getIsFloatRead() {
            var kernelString = "function kernelFunction() {\n      return 1;\n    }";
            var kernel = new this(kernelString, {
              context: this.testContext,
              canvas: this.testCanvas,
              validate: false,
              output: [1],
              precision: 'single',
              returnType: 'Number',
              tactic: 'speed'
            });
            kernel.build();
            kernel.run();
            var result = kernel.renderOutput();
            kernel.destroy(true);
            return result[0] === 1;
          }
        }, {
          key: "getIsIntegerDivisionAccurate",
          value: function getIsIntegerDivisionAccurate() {
            function kernelFunction(v1, v2) {
              return v1[this.thread.x] / v2[this.thread.x];
            }

            var kernel = new this(kernelFunction.toString(), {
              context: this.testContext,
              canvas: this.testCanvas,
              validate: false,
              output: [2],
              returnType: 'Number',
              precision: 'unsigned',
              tactic: 'speed'
            });
            var args = [[6, 6030401], [3, 3991]];
            kernel.build.apply(kernel, args);
            kernel.run.apply(kernel, args);
            var result = kernel.renderOutput();
            kernel.destroy(true);
            return result[0] === 2 && result[1] === 1511;
          }
        }, {
          key: "getFeatures",
          value: function getFeatures() {
            var gl = this.testContext;
            var isDrawBuffers = this.getIsDrawBuffers();
            return Object.freeze({
              isFloatRead: this.getIsFloatRead(),
              isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),
              isTextureFloat: this.getIsTextureFloat(),
              isDrawBuffers: isDrawBuffers,
              kernelMap: isDrawBuffers,
              channelCount: this.getChannelCount(),
              maxTextureSize: this.getMaxTextureSize(),
              lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),
              lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),
              mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),
              mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),
              highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),
              highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)
            });
          }
        }, {
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            throw new Error("\"setupFeatureChecks\" not defined on ".concat(this.name));
          }
        }, {
          key: "getSignature",
          value: function getSignature(kernel, argumentTypes) {
            return kernel.getVariablePrecisionString() + (argumentTypes.length > 0 ? ':' + argumentTypes.join(',') : '');
          }
        }, {
          key: "nativeFunctionArguments",
          value: function nativeFunctionArguments(source) {
            var argumentTypes = [];
            var argumentNames = [];
            var states = [];
            var isStartingVariableName = /^[a-zA-Z_]/;
            var isVariableChar = /[a-zA-Z_0-9]/;
            var i = 0;
            var argumentName = null;
            var argumentType = null;

            while (i < source.length) {
              var char = source[i];
              var nextChar = source[i + 1];
              var state = states.length > 0 ? states[states.length - 1] : null;

              if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '*') {
                states.push('MULTI_LINE_COMMENT');
                i += 2;
                continue;
              } else if (state === 'MULTI_LINE_COMMENT' && char === '*' && nextChar === '/') {
                states.pop();
                i += 2;
                continue;
              } else if (state === 'FUNCTION_ARGUMENTS' && char === '/' && nextChar === '/') {
                states.push('COMMENT');
                i += 2;
                continue;
              } else if (state === 'COMMENT' && char === '\n') {
                states.pop();
                i++;
                continue;
              } else if (state === null && char === '(') {
                states.push('FUNCTION_ARGUMENTS');
                i++;
                continue;
              } else if (state === 'FUNCTION_ARGUMENTS') {
                if (char === ')') {
                  states.pop();
                  break;
                }

                if (char === 'f' && nextChar === 'l' && source[i + 2] === 'o' && source[i + 3] === 'a' && source[i + 4] === 't' && source[i + 5] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'float';
                  argumentName = '';
                  i += 6;
                  continue;
                } else if (char === 'i' && nextChar === 'n' && source[i + 2] === 't' && source[i + 3] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'int';
                  argumentName = '';
                  i += 4;
                  continue;
                } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '2' && source[i + 4] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'vec2';
                  argumentName = '';
                  i += 5;
                  continue;
                } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '3' && source[i + 4] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'vec3';
                  argumentName = '';
                  i += 5;
                  continue;
                } else if (char === 'v' && nextChar === 'e' && source[i + 2] === 'c' && source[i + 3] === '4' && source[i + 4] === ' ') {
                  states.push('DECLARE_VARIABLE');
                  argumentType = 'vec4';
                  argumentName = '';
                  i += 5;
                  continue;
                }
              } else if (state === 'DECLARE_VARIABLE') {
                if (argumentName === '') {
                  if (char === ' ') {
                    i++;
                    continue;
                  }

                  if (!isStartingVariableName.test(char)) {
                    throw new Error('variable name is not expected string');
                  }
                }

                argumentName += char;

                if (!isVariableChar.test(nextChar)) {
                  states.pop();
                  argumentNames.push(argumentName);
                  argumentTypes.push(typeMap[argumentType]);
                }
              }

              i++;
            }

            if (states.length > 0) {
              throw new Error('GLSL function was not parsable');
            }

            return {
              argumentNames: argumentNames,
              argumentTypes: argumentTypes
            };
          }
        }, {
          key: "nativeFunctionReturnType",
          value: function nativeFunctionReturnType(source) {
            return typeMap[source.match(/int|float|vec[2-4]/)[0]];
          }
        }, {
          key: "combineKernels",
          value: function combineKernels(combinedKernel, lastKernel) {
            combinedKernel.apply(null, arguments);
            var _lastKernel$texSize = lastKernel.texSize,
                texSize = _lastKernel$texSize.texSize,
                context = _lastKernel$texSize.context,
                threadDim = _lastKernel$texSize.threadDim;
            var result;

            if (lastKernel.precision === 'single') {
              var w = texSize[0];
              var h = Math.ceil(texSize[1] / 4);
              result = new Float32Array(w * h * 4 * 4);
              context.readPixels(0, 0, w, h * 4, context.RGBA, context.FLOAT, result);
            } else {
              var bytes = new Uint8Array(texSize[0] * texSize[1] * 4);
              context.readPixels(0, 0, texSize[0], texSize[1], context.RGBA, context.UNSIGNED_BYTE, bytes);
              result = new Float32Array(bytes.buffer);
            }

            result = result.subarray(0, threadDim[0] * threadDim[1] * threadDim[2]);

            if (lastKernel.output.length === 1) {
              return result;
            } else if (lastKernel.output.length === 2) {
              return utils.splitArray(result, lastKernel.output[0]);
            } else if (lastKernel.output.length === 3) {
              var cube = utils.splitArray(result, lastKernel.output[0] * lastKernel.output[1]);
              return cube.map(function (x) {
                return utils.splitArray(x, lastKernel.output[0]);
              });
            }
          }
        }, {
          key: "mode",
          get: function get() {
            return 'gpu';
          }
        }, {
          key: "testCanvas",
          get: function get() {
            throw new Error("\"testCanvas\" not defined on ".concat(this.name));
          }
        }, {
          key: "testContext",
          get: function get() {
            throw new Error("\"testContext\" not defined on ".concat(this.name));
          }
        }]);

        function GLKernel(source, settings) {
          var _this4;

          _classCallCheck(this, GLKernel);

          _this4 = _possibleConstructorReturn(this, _getPrototypeOf(GLKernel).call(this, source, settings));
          _this4.transferValues = null;
          _this4.formatValues = null;
          _this4.TextureConstructor = null;
          _this4.renderOutput = null;
          _this4.renderRawOutput = null;
          _this4.texSize = null;
          _this4.translatedSource = null;
          _this4.compiledFragmentShader = null;
          _this4.compiledVertexShader = null;
          _this4.switchingKernels = null;
          return _this4;
        }

        _createClass(GLKernel, [{
          key: "checkTextureSize",
          value: function checkTextureSize() {
            var features = this.constructor.features;

            if (this.texSize[0] > features.maxTextureSize || this.texSize[1] > features.maxTextureSize) {
              throw new Error("Texture size [".concat(this.texSize[0], ",").concat(this.texSize[1], "] generated by kernel is larger than supported size [").concat(features.maxTextureSize, ",").concat(features.maxTextureSize, "]"));
            }
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            throw new Error("\"translateSource\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "pickRenderStrategy",
          value: function pickRenderStrategy(args) {
            if (this.graphical) {
              this.renderRawOutput = this.readPackedPixelsToUint8Array;

              this.transferValues = function (pixels) {
                return pixels;
              };

              this.TextureConstructor = GLTextureGraphical;
              return null;
            }

            if (this.precision === 'unsigned') {
              this.renderRawOutput = this.readPackedPixelsToUint8Array;
              this.transferValues = this.readPackedPixelsToFloat32Array;

              if (this.pipeline) {
                this.renderOutput = this.renderTexture;

                if (this.subKernels !== null) {
                  this.renderKernels = this.renderKernelsToTextures;
                }

                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureUnsigned3D;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureUnsigned2D;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureUnsigned;
                      return null;
                    }

                  case 'Array(2)':
                  case 'Array(3)':
                  case 'Array(4)':
                    return this.requestFallback(args);
                }
              } else {
                if (this.subKernels !== null) {
                  this.renderKernels = this.renderKernelsToArrays;
                }

                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    this.renderOutput = this.renderValues;

                    if (this.output[2] > 0) {
                      this.TextureConstructor = GLTextureUnsigned3D;
                      this.formatValues = utils.erect3DPackedFloat;
                      return null;
                    } else if (this.output[1] > 0) {
                      this.TextureConstructor = GLTextureUnsigned2D;
                      this.formatValues = utils.erect2DPackedFloat;
                      return null;
                    } else {
                      this.TextureConstructor = GLTextureUnsigned;
                      this.formatValues = utils.erectPackedFloat;
                      return null;
                    }

                  case 'Array(2)':
                  case 'Array(3)':
                  case 'Array(4)':
                    return this.requestFallback(args);
                }
              }
            } else if (this.precision === 'single') {
              this.renderRawOutput = this.readFloatPixelsToFloat32Array;
              this.transferValues = this.readFloatPixelsToFloat32Array;

              if (this.pipeline) {
                this.renderOutput = this.renderTexture;

                if (this.subKernels !== null) {
                  this.renderKernels = this.renderKernelsToTextures;
                }

                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    {
                      if (this.optimizeFloatMemory) {
                        if (this.output[2] > 0) {
                          this.TextureConstructor = GLTextureMemoryOptimized3D;
                          return null;
                        } else if (this.output[1] > 0) {
                          this.TextureConstructor = GLTextureMemoryOptimized2D;
                          return null;
                        } else {
                          this.TextureConstructor = GLTextureMemoryOptimized;
                          return null;
                        }
                      } else {
                        if (this.output[2] > 0) {
                          this.TextureConstructor = GLTextureFloat3D;
                          return null;
                        } else if (this.output[1] > 0) {
                          this.TextureConstructor = GLTextureFloat2D;
                          return null;
                        } else {
                          this.TextureConstructor = GLTextureFloat;
                          return null;
                        }
                      }
                    }

                  case 'Array(2)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray2Float3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray2Float2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray2Float;
                        return null;
                      }
                    }

                  case 'Array(3)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray3Float3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray3Float2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray3Float;
                        return null;
                      }
                    }

                  case 'Array(4)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray4Float3D;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray4Float2D;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray4Float;
                        return null;
                      }
                    }
                }
              }

              this.renderOutput = this.renderValues;

              if (this.subKernels !== null) {
                this.renderKernels = this.renderKernelsToArrays;
              }

              if (this.optimizeFloatMemory) {
                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureMemoryOptimized3D;
                        this.formatValues = utils.erectMemoryOptimized3DFloat;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureMemoryOptimized2D;
                        this.formatValues = utils.erectMemoryOptimized2DFloat;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureMemoryOptimized;
                        this.formatValues = utils.erectMemoryOptimizedFloat;
                        return null;
                      }
                    }

                  case 'Array(2)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray2Float3D;
                        this.formatValues = utils.erect3DArray2;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray2Float2D;
                        this.formatValues = utils.erect2DArray2;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray2Float;
                        this.formatValues = utils.erectArray2;
                        return null;
                      }
                    }

                  case 'Array(3)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray3Float3D;
                        this.formatValues = utils.erect3DArray3;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray3Float2D;
                        this.formatValues = utils.erect2DArray3;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray3Float;
                        this.formatValues = utils.erectArray3;
                        return null;
                      }
                    }

                  case 'Array(4)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray4Float3D;
                        this.formatValues = utils.erect3DArray4;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray4Float2D;
                        this.formatValues = utils.erect2DArray4;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray4Float;
                        this.formatValues = utils.erectArray4;
                        return null;
                      }
                    }
                }
              } else {
                switch (this.returnType) {
                  case 'LiteralInteger':
                  case 'Float':
                  case 'Number':
                  case 'Integer':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureFloat3D;
                        this.formatValues = utils.erect3DFloat;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureFloat2D;
                        this.formatValues = utils.erect2DFloat;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureFloat;
                        this.formatValues = utils.erectFloat;
                        return null;
                      }
                    }

                  case 'Array(2)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray2Float3D;
                        this.formatValues = utils.erect3DArray2;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray2Float2D;
                        this.formatValues = utils.erect2DArray2;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray2Float;
                        this.formatValues = utils.erectArray2;
                        return null;
                      }
                    }

                  case 'Array(3)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray3Float3D;
                        this.formatValues = utils.erect3DArray3;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray3Float2D;
                        this.formatValues = utils.erect2DArray3;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray3Float;
                        this.formatValues = utils.erectArray3;
                        return null;
                      }
                    }

                  case 'Array(4)':
                    {
                      if (this.output[2] > 0) {
                        this.TextureConstructor = GLTextureArray4Float3D;
                        this.formatValues = utils.erect3DArray4;
                        return null;
                      } else if (this.output[1] > 0) {
                        this.TextureConstructor = GLTextureArray4Float2D;
                        this.formatValues = utils.erect2DArray4;
                        return null;
                      } else {
                        this.TextureConstructor = GLTextureArray4Float;
                        this.formatValues = utils.erectArray4;
                        return null;
                      }
                    }
                }
              }
            } else {
              throw new Error("unhandled precision of \"".concat(this.precision, "\""));
            }

            throw new Error("unhandled return type \"".concat(this.returnType, "\""));
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultTexture",
          value: function getMainResultTexture() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Float':
              case 'Integer':
              case 'Number':
                return this.getMainResultNumberTexture();

              case 'Array(2)':
                return this.getMainResultArray2Texture();

              case 'Array(3)':
                return this.getMainResultArray3Texture();

              case 'Array(4)':
                return this.getMainResultArray4Texture();

              default:
                throw new Error("unhandled returnType type ".concat(this.returnType));
            }
          }
        }, {
          key: "getMainResultKernelNumberTexture",
          value: function getMainResultKernelNumberTexture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelNumberTexture",
          value: function getMainResultSubKernelNumberTexture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultKernelArray2Texture",
          value: function getMainResultKernelArray2Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelArray2Texture",
          value: function getMainResultSubKernelArray2Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultKernelArray3Texture",
          value: function getMainResultKernelArray3Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelArray3Texture",
          value: function getMainResultSubKernelArray3Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultKernelArray4Texture",
          value: function getMainResultKernelArray4Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultSubKernelArray4Texture",
          value: function getMainResultSubKernelArray4Texture() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultGraphical",
          value: function getMainResultGraphical() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultMemoryOptimizedFloats",
          value: function getMainResultMemoryOptimizedFloats() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultPackedPixels",
          value: function getMainResultPackedPixels() {
            throw new Error("abstract method call");
          }
        }, {
          key: "getMainResultString",
          value: function getMainResultString() {
            if (this.graphical) {
              return this.getMainResultGraphical();
            } else if (this.precision === 'single') {
              if (this.optimizeFloatMemory) {
                return this.getMainResultMemoryOptimizedFloats();
              }

              return this.getMainResultTexture();
            } else {
              return this.getMainResultPackedPixels();
            }
          }
        }, {
          key: "getMainResultNumberTexture",
          value: function getMainResultNumberTexture() {
            return utils.linesToString(this.getMainResultKernelNumberTexture()) + utils.linesToString(this.getMainResultSubKernelNumberTexture());
          }
        }, {
          key: "getMainResultArray2Texture",
          value: function getMainResultArray2Texture() {
            return utils.linesToString(this.getMainResultKernelArray2Texture()) + utils.linesToString(this.getMainResultSubKernelArray2Texture());
          }
        }, {
          key: "getMainResultArray3Texture",
          value: function getMainResultArray3Texture() {
            return utils.linesToString(this.getMainResultKernelArray3Texture()) + utils.linesToString(this.getMainResultSubKernelArray3Texture());
          }
        }, {
          key: "getMainResultArray4Texture",
          value: function getMainResultArray4Texture() {
            return utils.linesToString(this.getMainResultKernelArray4Texture()) + utils.linesToString(this.getMainResultSubKernelArray4Texture());
          }
        }, {
          key: "getFloatTacticDeclaration",
          value: function getFloatTacticDeclaration() {
            var variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);
            return "precision ".concat(variablePrecision, " float;\n");
          }
        }, {
          key: "getIntTacticDeclaration",
          value: function getIntTacticDeclaration() {
            return "precision ".concat(this.getVariablePrecisionString(this.texSize, this.tactic, true), " int;\n");
          }
        }, {
          key: "getSampler2DTacticDeclaration",
          value: function getSampler2DTacticDeclaration() {
            return "precision ".concat(this.getVariablePrecisionString(this.texSize, this.tactic), " sampler2D;\n");
          }
        }, {
          key: "getSampler2DArrayTacticDeclaration",
          value: function getSampler2DArrayTacticDeclaration() {
            return "precision ".concat(this.getVariablePrecisionString(this.texSize, this.tactic), " sampler2DArray;\n");
          }
        }, {
          key: "renderTexture",
          value: function renderTexture() {
            return this.texture.clone();
          }
        }, {
          key: "readPackedPixelsToUint8Array",
          value: function readPackedPixelsToUint8Array() {
            if (this.precision !== 'unsigned') throw new Error('Requires this.precision to be "unsigned"');
            var texSize = this.texSize,
                gl = this.context;
            var result = new Uint8Array(texSize[0] * texSize[1] * 4);
            gl.readPixels(0, 0, texSize[0], texSize[1], gl.RGBA, gl.UNSIGNED_BYTE, result);
            return result;
          }
        }, {
          key: "readPackedPixelsToFloat32Array",
          value: function readPackedPixelsToFloat32Array() {
            return new Float32Array(this.readPackedPixelsToUint8Array().buffer);
          }
        }, {
          key: "readFloatPixelsToFloat32Array",
          value: function readFloatPixelsToFloat32Array() {
            if (this.precision !== 'single') throw new Error('Requires this.precision to be "single"');
            var texSize = this.texSize,
                gl = this.context;
            var w = texSize[0];
            var h = texSize[1];
            var result = new Float32Array(w * h * 4);
            gl.readPixels(0, 0, w, h, gl.RGBA, gl.FLOAT, result);
            return result;
          }
        }, {
          key: "getPixels",
          value: function getPixels(flip) {
            var gl = this.context,
                output = this.output;

            var _output4 = _slicedToArray(output, 2),
                width = _output4[0],
                height = _output4[1];

            var pixels = new Uint8Array(width * height * 4);
            gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
            return new Uint8ClampedArray((flip ? pixels : utils.flipPixels(pixels, width, height)).buffer);
          }
        }, {
          key: "renderKernelsToArrays",
          value: function renderKernelsToArrays() {
            var result = {
              result: this.renderOutput()
            };

            for (var i = 0; i < this.subKernels.length; i++) {
              result[this.subKernels[i].property] = this.mappedTextures[i].toArray();
            }

            return result;
          }
        }, {
          key: "renderKernelsToTextures",
          value: function renderKernelsToTextures() {
            var result = {
              result: this.renderOutput()
            };

            for (var i = 0; i < this.subKernels.length; i++) {
              result[this.subKernels[i].property] = this.mappedTextures[i].clone();
            }

            return result;
          }
        }, {
          key: "resetSwitchingKernels",
          value: function resetSwitchingKernels() {
            var existingValue = this.switchingKernels;
            this.switchingKernels = null;
            return existingValue;
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            var newOutput = this.toKernelOutput(output);

            if (this.program) {
              if (!this.dynamicOutput) {
                throw new Error('Resizing a kernel with dynamicOutput: false is not possible');
              }

              var newThreadDim = [newOutput[0], newOutput[1] || 1, newOutput[2] || 1];
              var newTexSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, newThreadDim);
              var oldTexSize = this.texSize;

              if (oldTexSize) {
                var oldPrecision = this.getVariablePrecisionString(oldTexSize, this.tactic);
                var newPrecision = this.getVariablePrecisionString(newTexSize, this.tactic);

                if (oldPrecision !== newPrecision) {
                  if (this.debug) {
                    console.warn('Precision requirement changed, asking GPU instance to recompile');
                  }

                  this.switchKernels({
                    type: 'outputPrecisionMismatch',
                    precision: newPrecision,
                    needed: output
                  });
                  return;
                }
              }

              this.output = newOutput;
              this.threadDim = newThreadDim;
              this.texSize = newTexSize;
              var gl = this.context;
              gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
              this.updateMaxTexSize();
              this.framebuffer.width = this.texSize[0];
              this.framebuffer.height = this.texSize[1];
              gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
              this.canvas.width = this.maxTexSize[0];
              this.canvas.height = this.maxTexSize[1];

              if (this.texture) {
                this.texture.delete();
              }

              this.texture = null;

              if (this.mappedTextures) {
                for (var i = 0; i < this.mappedTextures.length; i++) {
                  this.mappedTextures[i].delete();
                }
              }

              this.mappedTextures = null;
            } else {
              this.output = newOutput;
            }

            return this;
          }
        }, {
          key: "renderValues",
          value: function renderValues() {
            return this.formatValues(this.transferValues(), this.output[0], this.output[1], this.output[2]);
          }
        }, {
          key: "switchKernels",
          value: function switchKernels(reason) {
            if (this.switchingKernels) {
              this.switchingKernels.push(reason);
            } else {
              this.switchingKernels = [reason];
            }
          }
        }, {
          key: "getVariablePrecisionString",
          value: function getVariablePrecisionString() {
            var textureSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.texSize;
            var tactic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.tactic;
            var isInt = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

            if (!tactic) {
              var low = this.constructor.features[isInt ? 'lowIntPrecision' : 'lowFloatPrecision'];
              var medium = this.constructor.features[isInt ? 'mediumIntPrecision' : 'mediumFloatPrecision'];
              var high = this.constructor.features[isInt ? 'highIntPrecision' : 'highFloatPrecision'];
              var requiredSize = Math.log2(textureSize[0] * textureSize[1]);

              if (requiredSize <= low.rangeMax) {
                return 'lowp';
              } else if (requiredSize <= medium.rangeMax) {
                return 'mediump';
              } else if (requiredSize <= high.rangeMax) {
                return 'highp';
              } else {
                throw new Error("The required size exceeds that of the ability of your system");
              }
            }

            switch (tactic) {
              case 'speed':
                return 'lowp';

              case 'balanced':
                return 'mediump';

              case 'precision':
                return 'highp';

              default:
                throw new Error("Unknown tactic \"".concat(tactic, "\" use \"speed\", \"balanced\", \"precision\", or empty for auto"));
            }
          }
        }, {
          key: "updateTextureArgumentRefs",
          value: function updateTextureArgumentRefs(kernelValue, arg) {
            if (this.texture.texture === arg.texture) {
              var prevArg = kernelValue.prevArg;

              if (prevArg) {
                if (prevArg.texture._refs === 1) {
                  this.texture.delete();
                  this.texture = prevArg.clone();
                }

                prevArg.delete();
              }

              kernelValue.prevArg = arg.clone();
            } else if (this.mappedTextures && this.mappedTextures.length > 0) {
              var mappedTextures = this.mappedTextures;

              for (var i = 0; i < mappedTextures.length; i++) {
                var mappedTexture = mappedTextures[i];

                if (mappedTexture.texture === arg.texture) {
                  var _prevArg = kernelValue.prevArg;

                  if (_prevArg) {
                    if (_prevArg.texture._refs === 1) {
                      mappedTexture.delete();
                      mappedTextures[i] = _prevArg.clone();
                    }

                    _prevArg.delete();
                  }

                  kernelValue.prevArg = arg.clone();
                  return;
                }
              }
            }
          }
        }, {
          key: "initCanvas",
          value: function initCanvas() {}
        }]);

        return GLKernel;
      }(Kernel);

      var typeMap = {
        int: 'Integer',
        float: 'Number',
        vec2: 'Array(2)',
        vec3: 'Array(3)',
        vec4: 'Array(4)'
      };
      module.exports = {
        GLKernel: GLKernel
      };
    }, {
      "../../utils": 114,
      "../kernel": 36,
      "./texture/array-2-float": 16,
      "./texture/array-2-float-2d": 14,
      "./texture/array-2-float-3d": 15,
      "./texture/array-3-float": 19,
      "./texture/array-3-float-2d": 17,
      "./texture/array-3-float-3d": 18,
      "./texture/array-4-float": 22,
      "./texture/array-4-float-2d": 20,
      "./texture/array-4-float-3d": 21,
      "./texture/float": 25,
      "./texture/float-2d": 23,
      "./texture/float-3d": 24,
      "./texture/graphical": 26,
      "./texture/memory-optimized": 30,
      "./texture/memory-optimized-2d": 28,
      "./texture/memory-optimized-3d": 29,
      "./texture/unsigned": 33,
      "./texture/unsigned-2d": 31,
      "./texture/unsigned-3d": 32
    }],
    14: [function (require, module, exports) {
      var _require35 = require('../../../utils'),
          utils = _require35.utils;

      var _require36 = require('./float'),
          GLTextureFloat = _require36.GLTextureFloat;

      var GLTextureArray2Float2D =
      /*#__PURE__*/
      function (_GLTextureFloat) {
        _inherits(GLTextureArray2Float2D, _GLTextureFloat);

        function GLTextureArray2Float2D(settings) {
          var _this5;

          _classCallCheck(this, GLTextureArray2Float2D);

          _this5 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray2Float2D).call(this, settings));
          _this5.type = 'ArrayTexture(2)';
          return _this5;
        }

        _createClass(GLTextureArray2Float2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DArray2(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray2Float2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray2Float2D: GLTextureArray2Float2D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    15: [function (require, module, exports) {
      var _require37 = require('../../../utils'),
          utils = _require37.utils;

      var _require38 = require('./float'),
          GLTextureFloat = _require38.GLTextureFloat;

      var GLTextureArray2Float3D =
      /*#__PURE__*/
      function (_GLTextureFloat2) {
        _inherits(GLTextureArray2Float3D, _GLTextureFloat2);

        function GLTextureArray2Float3D(settings) {
          var _this6;

          _classCallCheck(this, GLTextureArray2Float3D);

          _this6 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray2Float3D).call(this, settings));
          _this6.type = 'ArrayTexture(2)';
          return _this6;
        }

        _createClass(GLTextureArray2Float3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DArray2(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureArray2Float3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray2Float3D: GLTextureArray2Float3D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    16: [function (require, module, exports) {
      var _require39 = require('../../../utils'),
          utils = _require39.utils;

      var _require40 = require('./float'),
          GLTextureFloat = _require40.GLTextureFloat;

      var GLTextureArray2Float =
      /*#__PURE__*/
      function (_GLTextureFloat3) {
        _inherits(GLTextureArray2Float, _GLTextureFloat3);

        function GLTextureArray2Float(settings) {
          var _this7;

          _classCallCheck(this, GLTextureArray2Float);

          _this7 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray2Float).call(this, settings));
          _this7.type = 'ArrayTexture(2)';
          return _this7;
        }

        _createClass(GLTextureArray2Float, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectArray2(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray2Float;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray2Float: GLTextureArray2Float
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    17: [function (require, module, exports) {
      var _require41 = require('../../../utils'),
          utils = _require41.utils;

      var _require42 = require('./float'),
          GLTextureFloat = _require42.GLTextureFloat;

      var GLTextureArray3Float2D =
      /*#__PURE__*/
      function (_GLTextureFloat4) {
        _inherits(GLTextureArray3Float2D, _GLTextureFloat4);

        function GLTextureArray3Float2D(settings) {
          var _this8;

          _classCallCheck(this, GLTextureArray3Float2D);

          _this8 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray3Float2D).call(this, settings));
          _this8.type = 'ArrayTexture(3)';
          return _this8;
        }

        _createClass(GLTextureArray3Float2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DArray3(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray3Float2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray3Float2D: GLTextureArray3Float2D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    18: [function (require, module, exports) {
      var _require43 = require('../../../utils'),
          utils = _require43.utils;

      var _require44 = require('./float'),
          GLTextureFloat = _require44.GLTextureFloat;

      var GLTextureArray3Float3D =
      /*#__PURE__*/
      function (_GLTextureFloat5) {
        _inherits(GLTextureArray3Float3D, _GLTextureFloat5);

        function GLTextureArray3Float3D(settings) {
          var _this9;

          _classCallCheck(this, GLTextureArray3Float3D);

          _this9 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray3Float3D).call(this, settings));
          _this9.type = 'ArrayTexture(3)';
          return _this9;
        }

        _createClass(GLTextureArray3Float3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DArray3(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureArray3Float3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray3Float3D: GLTextureArray3Float3D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    19: [function (require, module, exports) {
      var _require45 = require('../../../utils'),
          utils = _require45.utils;

      var _require46 = require('./float'),
          GLTextureFloat = _require46.GLTextureFloat;

      var GLTextureArray3Float =
      /*#__PURE__*/
      function (_GLTextureFloat6) {
        _inherits(GLTextureArray3Float, _GLTextureFloat6);

        function GLTextureArray3Float(settings) {
          var _this10;

          _classCallCheck(this, GLTextureArray3Float);

          _this10 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray3Float).call(this, settings));
          _this10.type = 'ArrayTexture(3)';
          return _this10;
        }

        _createClass(GLTextureArray3Float, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectArray3(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureArray3Float;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray3Float: GLTextureArray3Float
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    20: [function (require, module, exports) {
      var _require47 = require('../../../utils'),
          utils = _require47.utils;

      var _require48 = require('./float'),
          GLTextureFloat = _require48.GLTextureFloat;

      var GLTextureArray4Float2D =
      /*#__PURE__*/
      function (_GLTextureFloat7) {
        _inherits(GLTextureArray4Float2D, _GLTextureFloat7);

        function GLTextureArray4Float2D(settings) {
          var _this11;

          _classCallCheck(this, GLTextureArray4Float2D);

          _this11 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray4Float2D).call(this, settings));
          _this11.type = 'ArrayTexture(4)';
          return _this11;
        }

        _createClass(GLTextureArray4Float2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DArray4(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureArray4Float2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray4Float2D: GLTextureArray4Float2D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    21: [function (require, module, exports) {
      var _require49 = require('../../../utils'),
          utils = _require49.utils;

      var _require50 = require('./float'),
          GLTextureFloat = _require50.GLTextureFloat;

      var GLTextureArray4Float3D =
      /*#__PURE__*/
      function (_GLTextureFloat8) {
        _inherits(GLTextureArray4Float3D, _GLTextureFloat8);

        function GLTextureArray4Float3D(settings) {
          var _this12;

          _classCallCheck(this, GLTextureArray4Float3D);

          _this12 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray4Float3D).call(this, settings));
          _this12.type = 'ArrayTexture(4)';
          return _this12;
        }

        _createClass(GLTextureArray4Float3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DArray4(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureArray4Float3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray4Float3D: GLTextureArray4Float3D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    22: [function (require, module, exports) {
      var _require51 = require('../../../utils'),
          utils = _require51.utils;

      var _require52 = require('./float'),
          GLTextureFloat = _require52.GLTextureFloat;

      var GLTextureArray4Float =
      /*#__PURE__*/
      function (_GLTextureFloat9) {
        _inherits(GLTextureArray4Float, _GLTextureFloat9);

        function GLTextureArray4Float(settings) {
          var _this13;

          _classCallCheck(this, GLTextureArray4Float);

          _this13 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureArray4Float).call(this, settings));
          _this13.type = 'ArrayTexture(4)';
          return _this13;
        }

        _createClass(GLTextureArray4Float, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectArray4(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureArray4Float;
      }(GLTextureFloat);

      module.exports = {
        GLTextureArray4Float: GLTextureArray4Float
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    23: [function (require, module, exports) {
      var _require53 = require('../../../utils'),
          utils = _require53.utils;

      var _require54 = require('./float'),
          GLTextureFloat = _require54.GLTextureFloat;

      var GLTextureFloat2D =
      /*#__PURE__*/
      function (_GLTextureFloat10) {
        _inherits(GLTextureFloat2D, _GLTextureFloat10);

        function GLTextureFloat2D(settings) {
          var _this14;

          _classCallCheck(this, GLTextureFloat2D);

          _this14 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureFloat2D).call(this, settings));
          _this14.type = 'ArrayTexture(1)';
          return _this14;
        }

        _createClass(GLTextureFloat2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DFloat(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureFloat2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureFloat2D: GLTextureFloat2D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    24: [function (require, module, exports) {
      var _require55 = require('../../../utils'),
          utils = _require55.utils;

      var _require56 = require('./float'),
          GLTextureFloat = _require56.GLTextureFloat;

      var GLTextureFloat3D =
      /*#__PURE__*/
      function (_GLTextureFloat11) {
        _inherits(GLTextureFloat3D, _GLTextureFloat11);

        function GLTextureFloat3D(settings) {
          var _this15;

          _classCallCheck(this, GLTextureFloat3D);

          _this15 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureFloat3D).call(this, settings));
          _this15.type = 'ArrayTexture(1)';
          return _this15;
        }

        _createClass(GLTextureFloat3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureFloat3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureFloat3D: GLTextureFloat3D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    25: [function (require, module, exports) {
      var _require57 = require('../../../utils'),
          utils = _require57.utils;

      var _require58 = require('./index'),
          GLTexture = _require58.GLTexture;

      var GLTextureFloat =
      /*#__PURE__*/
      function (_GLTexture) {
        _inherits(GLTextureFloat, _GLTexture);

        _createClass(GLTextureFloat, [{
          key: "textureType",
          get: function get() {
            return this.context.FLOAT;
          }
        }]);

        function GLTextureFloat(settings) {
          var _this16;

          _classCallCheck(this, GLTextureFloat);

          _this16 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureFloat).call(this, settings));
          _this16.type = 'ArrayTexture(1)';
          return _this16;
        }

        _createClass(GLTextureFloat, [{
          key: "renderRawOutput",
          value: function renderRawOutput() {
            var gl = this.context,
                size = this.size;

            if (!this._framebuffer) {
              this._framebuffer = gl.createFramebuffer();
            }

            gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);
            var result = new Float32Array(size[0] * size[1] * 4);
            gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.FLOAT, result);
            return result;
          }
        }, {
          key: "renderValues",
          value: function renderValues() {
            if (this._deleted) return null;
            return this.renderRawOutput();
          }
        }, {
          key: "toArray",
          value: function toArray() {
            return utils.erectFloat(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureFloat;
      }(GLTexture);

      module.exports = {
        GLTextureFloat: GLTextureFloat
      };
    }, {
      "../../../utils": 114,
      "./index": 27
    }],
    26: [function (require, module, exports) {
      var _require59 = require('./unsigned'),
          GLTextureUnsigned = _require59.GLTextureUnsigned;

      var GLTextureGraphical =
      /*#__PURE__*/
      function (_GLTextureUnsigned) {
        _inherits(GLTextureGraphical, _GLTextureUnsigned);

        function GLTextureGraphical(settings) {
          var _this17;

          _classCallCheck(this, GLTextureGraphical);

          _this17 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureGraphical).call(this, settings));
          _this17.type = 'ArrayTexture(4)';
          return _this17;
        }

        _createClass(GLTextureGraphical, [{
          key: "toArray",
          value: function toArray() {
            return this.renderValues();
          }
        }]);

        return GLTextureGraphical;
      }(GLTextureUnsigned);

      module.exports = {
        GLTextureGraphical: GLTextureGraphical
      };
    }, {
      "./unsigned": 33
    }],
    27: [function (require, module, exports) {
      var _require60 = require('../../../texture'),
          Texture = _require60.Texture;

      var GLTexture =
      /*#__PURE__*/
      function (_Texture) {
        _inherits(GLTexture, _Texture);

        function GLTexture() {
          _classCallCheck(this, GLTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(GLTexture).apply(this, arguments));
        }

        _createClass(GLTexture, [{
          key: "clone",
          value: function clone() {
            return new this.constructor(this);
          }
        }, {
          key: "beforeMutate",
          value: function beforeMutate() {
            if (this.texture._refs > 1) {
              this.cloneTexture();
            }
          }
        }, {
          key: "cloneTexture",
          value: function cloneTexture() {
            this.texture._refs--;
            var gl = this.context,
                size = this.size,
                texture = this.texture,
                kernel = this.kernel;

            if (kernel.debug) {
              console.warn('cloning internal texture');
            }

            var existingFramebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);

            if (!this._framebuffer) {
              this._framebuffer = gl.createFramebuffer();
            }

            this._framebuffer.width = size[0];
            this._framebuffer.height = size[1];
            gl.bindFramebuffer(gl.FRAMEBUFFER, this._framebuffer);
            selectTexture(gl, texture);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            var target = gl.createTexture();
            selectTexture(gl, target);
            gl.texImage2D(gl.TEXTURE_2D, 0, this.internalFormat, size[0], size[1], 0, this.textureFormat, this.textureType, null);
            gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, size[0], size[1]);
            target._refs = 1;
            this.texture = target;

            if (existingFramebuffer) {
              gl.bindFramebuffer(gl.FRAMEBUFFER, existingFramebuffer);
            }
          }
        }, {
          key: "delete",
          value: function _delete() {
            _get(_getPrototypeOf(GLTexture.prototype), "delete", this).call(this);

            if (this.texture._refs === 0 && this._framebuffer) {
              this.context.deleteFramebuffer(this._framebuffer);
              this._framebuffer = null;
            }
          }
        }, {
          key: "textureType",
          get: function get() {
            throw new Error("\"textureType\" not implemented on ".concat(this.name));
          }
        }]);

        return GLTexture;
      }(Texture);

      function selectTexture(gl, texture) {
        gl.activeTexture(gl.TEXTURE31);
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      }

      module.exports = {
        GLTexture: GLTexture
      };
    }, {
      "../../../texture": 113
    }],
    28: [function (require, module, exports) {
      var _require61 = require('../../../utils'),
          utils = _require61.utils;

      var _require62 = require('./float'),
          GLTextureFloat = _require62.GLTextureFloat;

      var GLTextureMemoryOptimized2D =
      /*#__PURE__*/
      function (_GLTextureFloat12) {
        _inherits(GLTextureMemoryOptimized2D, _GLTextureFloat12);

        function GLTextureMemoryOptimized2D(settings) {
          var _this18;

          _classCallCheck(this, GLTextureMemoryOptimized2D);

          _this18 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureMemoryOptimized2D).call(this, settings));
          _this18.type = 'MemoryOptimizedNumberTexture';
          return _this18;
        }

        _createClass(GLTextureMemoryOptimized2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectMemoryOptimized2DFloat(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureMemoryOptimized2D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureMemoryOptimized2D: GLTextureMemoryOptimized2D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    29: [function (require, module, exports) {
      var _require63 = require('../../../utils'),
          utils = _require63.utils;

      var _require64 = require('./float'),
          GLTextureFloat = _require64.GLTextureFloat;

      var GLTextureMemoryOptimized3D =
      /*#__PURE__*/
      function (_GLTextureFloat13) {
        _inherits(GLTextureMemoryOptimized3D, _GLTextureFloat13);

        function GLTextureMemoryOptimized3D(settings) {
          var _this19;

          _classCallCheck(this, GLTextureMemoryOptimized3D);

          _this19 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureMemoryOptimized3D).call(this, settings));
          _this19.type = 'MemoryOptimizedNumberTexture';
          return _this19;
        }

        _createClass(GLTextureMemoryOptimized3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectMemoryOptimized3DFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureMemoryOptimized3D;
      }(GLTextureFloat);

      module.exports = {
        GLTextureMemoryOptimized3D: GLTextureMemoryOptimized3D
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    30: [function (require, module, exports) {
      var _require65 = require('../../../utils'),
          utils = _require65.utils;

      var _require66 = require('./float'),
          GLTextureFloat = _require66.GLTextureFloat;

      var GLTextureMemoryOptimized =
      /*#__PURE__*/
      function (_GLTextureFloat14) {
        _inherits(GLTextureMemoryOptimized, _GLTextureFloat14);

        function GLTextureMemoryOptimized(settings) {
          var _this20;

          _classCallCheck(this, GLTextureMemoryOptimized);

          _this20 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureMemoryOptimized).call(this, settings));
          _this20.type = 'MemoryOptimizedNumberTexture';
          return _this20;
        }

        _createClass(GLTextureMemoryOptimized, [{
          key: "toArray",
          value: function toArray() {
            return utils.erectMemoryOptimizedFloat(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureMemoryOptimized;
      }(GLTextureFloat);

      module.exports = {
        GLTextureMemoryOptimized: GLTextureMemoryOptimized
      };
    }, {
      "../../../utils": 114,
      "./float": 25
    }],
    31: [function (require, module, exports) {
      var _require67 = require('../../../utils'),
          utils = _require67.utils;

      var _require68 = require('./unsigned'),
          GLTextureUnsigned = _require68.GLTextureUnsigned;

      var GLTextureUnsigned2D =
      /*#__PURE__*/
      function (_GLTextureUnsigned2) {
        _inherits(GLTextureUnsigned2D, _GLTextureUnsigned2);

        function GLTextureUnsigned2D(settings) {
          var _this21;

          _classCallCheck(this, GLTextureUnsigned2D);

          _this21 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureUnsigned2D).call(this, settings));
          _this21.type = 'NumberTexture';
          return _this21;
        }

        _createClass(GLTextureUnsigned2D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect2DPackedFloat(this.renderValues(), this.output[0], this.output[1]);
          }
        }]);

        return GLTextureUnsigned2D;
      }(GLTextureUnsigned);

      module.exports = {
        GLTextureUnsigned2D: GLTextureUnsigned2D
      };
    }, {
      "../../../utils": 114,
      "./unsigned": 33
    }],
    32: [function (require, module, exports) {
      var _require69 = require('../../../utils'),
          utils = _require69.utils;

      var _require70 = require('./unsigned'),
          GLTextureUnsigned = _require70.GLTextureUnsigned;

      var GLTextureUnsigned3D =
      /*#__PURE__*/
      function (_GLTextureUnsigned3) {
        _inherits(GLTextureUnsigned3D, _GLTextureUnsigned3);

        function GLTextureUnsigned3D(settings) {
          var _this22;

          _classCallCheck(this, GLTextureUnsigned3D);

          _this22 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureUnsigned3D).call(this, settings));
          _this22.type = 'NumberTexture';
          return _this22;
        }

        _createClass(GLTextureUnsigned3D, [{
          key: "toArray",
          value: function toArray() {
            return utils.erect3DPackedFloat(this.renderValues(), this.output[0], this.output[1], this.output[2]);
          }
        }]);

        return GLTextureUnsigned3D;
      }(GLTextureUnsigned);

      module.exports = {
        GLTextureUnsigned3D: GLTextureUnsigned3D
      };
    }, {
      "../../../utils": 114,
      "./unsigned": 33
    }],
    33: [function (require, module, exports) {
      var _require71 = require('../../../utils'),
          utils = _require71.utils;

      var _require72 = require('./index'),
          GLTexture = _require72.GLTexture;

      var GLTextureUnsigned =
      /*#__PURE__*/
      function (_GLTexture2) {
        _inherits(GLTextureUnsigned, _GLTexture2);

        _createClass(GLTextureUnsigned, [{
          key: "textureType",
          get: function get() {
            return this.context.UNSIGNED_BYTE;
          }
        }]);

        function GLTextureUnsigned(settings) {
          var _this23;

          _classCallCheck(this, GLTextureUnsigned);

          _this23 = _possibleConstructorReturn(this, _getPrototypeOf(GLTextureUnsigned).call(this, settings));
          _this23.type = 'NumberTexture';
          return _this23;
        }

        _createClass(GLTextureUnsigned, [{
          key: "renderRawOutput",
          value: function renderRawOutput() {
            var gl = this.context;
            var framebuffer = gl.createFramebuffer();
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);
            var result = new Uint8Array(this.size[0] * this.size[1] * 4);
            gl.readPixels(0, 0, this.size[0], this.size[1], gl.RGBA, gl.UNSIGNED_BYTE, result);
            return result;
          }
        }, {
          key: "renderValues",
          value: function renderValues() {
            if (this._deleted) return null;
            return new Float32Array(this.renderRawOutput().buffer);
          }
        }, {
          key: "toArray",
          value: function toArray() {
            return utils.erectPackedFloat(this.renderValues(), this.output[0]);
          }
        }]);

        return GLTextureUnsigned;
      }(GLTexture);

      module.exports = {
        GLTextureUnsigned: GLTextureUnsigned
      };
    }, {
      "../../../utils": 114,
      "./index": 27
    }],
    34: [function (require, module, exports) {
      var getContext = require('gl');

      var _require73 = require('../web-gl/kernel'),
          WebGLKernel = _require73.WebGLKernel;

      var _require74 = require('../gl/kernel-string'),
          glKernelString = _require74.glKernelString;

      var isSupported = null;
      var testCanvas = null;
      var testContext = null;
      var testExtensions = null;
      var features = null;

      var HeadlessGLKernel =
      /*#__PURE__*/
      function (_WebGLKernel) {
        _inherits(HeadlessGLKernel, _WebGLKernel);

        function HeadlessGLKernel() {
          _classCallCheck(this, HeadlessGLKernel);

          return _possibleConstructorReturn(this, _getPrototypeOf(HeadlessGLKernel).apply(this, arguments));
        }

        _createClass(HeadlessGLKernel, [{
          key: "initCanvas",
          value: function initCanvas() {
            return {};
          }
        }, {
          key: "initContext",
          value: function initContext() {
            return getContext(2, 2, {
              preserveDrawingBuffer: true
            });
          }
        }, {
          key: "initExtensions",
          value: function initExtensions() {
            this.extensions = {
              STACKGL_resize_drawingbuffer: this.context.getExtension('STACKGL_resize_drawingbuffer'),
              STACKGL_destroy_context: this.context.getExtension('STACKGL_destroy_context'),
              OES_texture_float: this.context.getExtension('OES_texture_float'),
              OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),
              OES_element_index_uint: this.context.getExtension('OES_element_index_uint'),
              WEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers')
            };
          }
        }, {
          key: "build",
          value: function build() {
            _get(_getPrototypeOf(HeadlessGLKernel.prototype), "build", this).apply(this, arguments);

            if (!this.fallbackRequested) {
              this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);
            }
          }
        }, {
          key: "destroyExtensions",
          value: function destroyExtensions() {
            this.extensions.STACKGL_resize_drawingbuffer = null;
            this.extensions.STACKGL_destroy_context = null;
            this.extensions.OES_texture_float = null;
            this.extensions.OES_texture_float_linear = null;
            this.extensions.OES_element_index_uint = null;
            this.extensions.WEBGL_draw_buffers = null;
          }
        }, {
          key: "toString",
          value: function toString() {
            var setupContextString = "const gl = context || require('gl')(1, 1);\n";
            var destroyContextString = "    if (!context) { gl.getExtension('STACKGL_destroy_context').destroy(); }\n";
            return glKernelString(this.constructor, arguments, this, setupContextString, destroyContextString);
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            _get(_getPrototypeOf(HeadlessGLKernel.prototype), "setOutput", this).call(this, output);

            if (this.graphical && this.extensions.STACKGL_resize_drawingbuffer) {
              this.extensions.STACKGL_resize_drawingbuffer.resize(this.maxTexSize[0], this.maxTexSize[1]);
            }

            return this;
          }
        }], [{
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            testCanvas = null;
            testExtensions = null;
            if (typeof getContext !== 'function') return;

            try {
              testContext = getContext(2, 2, {
                preserveDrawingBuffer: true
              });
              if (!testContext || !testContext.getExtension) return;
              testExtensions = {
                STACKGL_resize_drawingbuffer: testContext.getExtension('STACKGL_resize_drawingbuffer'),
                STACKGL_destroy_context: testContext.getExtension('STACKGL_destroy_context'),
                OES_texture_float: testContext.getExtension('OES_texture_float'),
                OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),
                OES_element_index_uint: testContext.getExtension('OES_element_index_uint'),
                WEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers'),
                WEBGL_color_buffer_float: testContext.getExtension('WEBGL_color_buffer_float')
              };
              features = this.getFeatures();
            } catch (e) {
              console.warn(e);
            }
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            try {
              return context.getParameter(context.RENDERER) === 'ANGLE';
            } catch (e) {
              return false;
            }
          }
        }, {
          key: "getIsTextureFloat",
          value: function getIsTextureFloat() {
            return Boolean(testExtensions.OES_texture_float);
          }
        }, {
          key: "getIsDrawBuffers",
          value: function getIsDrawBuffers() {
            return Boolean(testExtensions.WEBGL_draw_buffers);
          }
        }, {
          key: "getChannelCount",
          value: function getChannelCount() {
            return testExtensions.WEBGL_draw_buffers ? testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
          }
        }, {
          key: "getMaxTextureSize",
          value: function getMaxTextureSize() {
            return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
          }
        }, {
          key: "destroyContext",
          value: function destroyContext(context) {
            var extension = context.getExtension('STACKGL_destroy_context');

            if (extension && extension.destroy) {
              extension.destroy();
            }
          }
        }, {
          key: "isSupported",
          get: function get() {
            if (isSupported !== null) return isSupported;
            this.setupFeatureChecks();
            isSupported = testContext !== null;
            return isSupported;
          }
        }, {
          key: "testCanvas",
          get: function get() {
            return testCanvas;
          }
        }, {
          key: "testContext",
          get: function get() {
            return testContext;
          }
        }, {
          key: "features",
          get: function get() {
            return features;
          }
        }]);

        return HeadlessGLKernel;
      }(WebGLKernel);

      module.exports = {
        HeadlessGLKernel: HeadlessGLKernel
      };
    }, {
      "../gl/kernel-string": 12,
      "../web-gl/kernel": 70,
      "gl": 2
    }],
    35: [function (require, module, exports) {
      var KernelValue =
      /*#__PURE__*/
      function () {
        function KernelValue(value, settings) {
          _classCallCheck(this, KernelValue);

          var name = settings.name,
              kernel = settings.kernel,
              context = settings.context,
              checkContext = settings.checkContext,
              onRequestContextHandle = settings.onRequestContextHandle,
              onUpdateValueMismatch = settings.onUpdateValueMismatch,
              origin = settings.origin,
              strictIntegers = settings.strictIntegers,
              type = settings.type,
              tactic = settings.tactic;

          if (!name) {
            throw new Error('name not set');
          }

          if (!type) {
            throw new Error('type not set');
          }

          if (!origin) {
            throw new Error('origin not set');
          }

          if (origin !== 'user' && origin !== 'constants') {
            throw new Error("origin must be \"user\" or \"constants\" value is \"".concat(origin, "\""));
          }

          if (!onRequestContextHandle) {
            throw new Error('onRequestContextHandle is not set');
          }

          this.name = name;
          this.origin = origin;
          this.tactic = tactic;
          this.id = "".concat(this.origin, "_").concat(name);
          this.varName = origin === 'constants' ? "constants.".concat(name) : name;
          this.kernel = kernel;
          this.strictIntegers = strictIntegers;
          this.type = value.type || type;
          this.size = value.size || null;
          this.index = null;
          this.context = context;
          this.checkContext = checkContext !== null && checkContext !== undefined ? checkContext : true;
          this.contextHandle = null;
          this.onRequestContextHandle = onRequestContextHandle;
          this.onUpdateValueMismatch = onUpdateValueMismatch;
          this.forceUploadEachRun = null;
        }

        _createClass(KernelValue, [{
          key: "getSource",
          value: function getSource() {
            throw new Error("\"getSource\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            throw new Error("\"updateValue\" not defined on ".concat(this.constructor.name));
          }
        }]);

        return KernelValue;
      }();

      module.exports = {
        KernelValue: KernelValue
      };
    }, {}],
    36: [function (require, module, exports) {
      var _require75 = require('../utils'),
          utils = _require75.utils;

      var _require76 = require('../input'),
          Input = _require76.Input;

      var Kernel =
      /*#__PURE__*/
      function () {
        _createClass(Kernel, null, [{
          key: "isContextMatch",
          value: function isContextMatch(context) {
            throw new Error("\"isContextMatch\" not implemented on ".concat(this.name));
          }
        }, {
          key: "getFeatures",
          value: function getFeatures() {
            throw new Error("\"getFeatures\" not implemented on ".concat(this.name));
          }
        }, {
          key: "destroyContext",
          value: function destroyContext(context) {
            throw new Error("\"destroyContext\" called on ".concat(this.name));
          }
        }, {
          key: "nativeFunctionArguments",
          value: function nativeFunctionArguments() {
            throw new Error("\"nativeFunctionArguments\" called on ".concat(this.name));
          }
        }, {
          key: "nativeFunctionReturnType",
          value: function nativeFunctionReturnType() {
            throw new Error("\"nativeFunctionReturnType\" called on ".concat(this.name));
          }
        }, {
          key: "combineKernels",
          value: function combineKernels() {
            throw new Error("\"combineKernels\" called on ".concat(this.name));
          }
        }, {
          key: "isSupported",
          get: function get() {
            throw new Error("\"isSupported\" not implemented on ".concat(this.name));
          }
        }]);

        function Kernel(source, settings) {
          _classCallCheck(this, Kernel);

          if (_typeof(source) !== 'object') {
            if (typeof source !== 'string') {
              throw new Error('source not a string');
            }

            if (!utils.isFunctionString(source)) {
              throw new Error('source not a function string');
            }
          }

          this.useLegacyEncoder = false;
          this.fallbackRequested = false;
          this.onRequestFallback = null;
          this.argumentNames = typeof source === 'string' ? utils.getArgumentNamesFromString(source) : null;
          this.argumentTypes = null;
          this.argumentSizes = null;
          this.argumentBitRatios = null;
          this.kernelArguments = null;
          this.kernelConstants = null;
          this.forceUploadKernelConstants = null;
          this.source = source;
          this.output = null;
          this.debug = false;
          this.graphical = false;
          this.loopMaxIterations = 0;
          this.constants = null;
          this.constantTypes = null;
          this.constantBitRatios = null;
          this.dynamicArguments = false;
          this.dynamicOutput = false;
          this.canvas = null;
          this.context = null;
          this.checkContext = null;
          this.gpu = null;
          this.functions = null;
          this.nativeFunctions = null;
          this.injectedNative = null;
          this.subKernels = null;
          this.validate = true;
          this.immutable = false;
          this.pipeline = false;
          this.precision = null;
          this.tactic = null;
          this.plugins = null;
          this.returnType = null;
          this.leadingReturnStatement = null;
          this.followingReturnStatement = null;
          this.optimizeFloatMemory = null;
          this.strictIntegers = false;
          this.fixIntegerDivisionAccuracy = null;
          this.onIstanbulCoverageVariable = null;
          this.removeIstanbulCoverage = false;
          this.built = false;
          this.signature = null;
        }

        _createClass(Kernel, [{
          key: "mergeSettings",
          value: function mergeSettings(settings) {
            for (var p in settings) {
              if (!settings.hasOwnProperty(p) || !this.hasOwnProperty(p)) continue;

              switch (p) {
                case 'output':
                  if (!Array.isArray(settings.output)) {
                    this.setOutput(settings.output);
                    continue;
                  }

                  break;

                case 'functions':
                  this.functions = [];

                  for (var i = 0; i < settings.functions.length; i++) {
                    this.addFunction(settings.functions[i]);
                  }

                  continue;

                case 'graphical':
                  if (settings[p] && !settings.hasOwnProperty('precision')) {
                    this.precision = 'unsigned';
                  }

                  this[p] = settings[p];
                  continue;

                case 'removeIstanbulCoverage':
                  if (settings[p] !== null) {
                    this[p] = settings[p];
                  }

                  continue;

                case 'nativeFunctions':
                  if (!settings.nativeFunctions) continue;
                  this.nativeFunctions = [];

                  for (var _i11 = 0; _i11 < settings.nativeFunctions.length; _i11++) {
                    var s = settings.nativeFunctions[_i11];
                    var _name5 = s.name,
                        source = s.source;
                    this.addNativeFunction(_name5, source, s);
                  }

                  continue;
              }

              this[p] = settings[p];
            }

            if (!this.canvas) this.canvas = this.initCanvas();
            if (!this.context) this.context = this.initContext();
            if (!this.plugins) this.plugins = this.initPlugins(settings);
          }
        }, {
          key: "build",
          value: function build() {
            throw new Error("\"build\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "run",
          value: function run() {
            throw new Error("\"run\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "initCanvas",
          value: function initCanvas() {
            throw new Error("\"initCanvas\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "initContext",
          value: function initContext() {
            throw new Error("\"initContext\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "initPlugins",
          value: function initPlugins(settings) {
            throw new Error("\"initPlugins\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "addFunction",
          value: function addFunction(source) {
            var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (source.name && source.source && source.argumentTypes && 'returnType' in source) {
              this.functions.push(source);
            } else if ('settings' in source && 'source' in source) {
              this.functions.push(this.functionToIGPUFunction(source.source, source.settings));
            } else if (typeof source === 'string' || typeof source === 'function') {
              this.functions.push(this.functionToIGPUFunction(source, settings));
            } else {
              throw new Error("function not properly defined");
            }

            return this;
          }
        }, {
          key: "addNativeFunction",
          value: function addNativeFunction(name, source) {
            var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var _ref2 = settings.argumentTypes ? splitArgumentTypes(settings.argumentTypes) : this.constructor.nativeFunctionArguments(source) || {},
                argumentTypes = _ref2.argumentTypes,
                argumentNames = _ref2.argumentNames;

            this.nativeFunctions.push({
              name: name,
              source: source,
              settings: settings,
              argumentTypes: argumentTypes,
              argumentNames: argumentNames,
              returnType: settings.returnType || this.constructor.nativeFunctionReturnType(source)
            });
            return this;
          }
        }, {
          key: "setupArguments",
          value: function setupArguments(args) {
            this.kernelArguments = [];

            if (!this.argumentTypes) {
              if (!this.argumentTypes) {
                this.argumentTypes = [];

                for (var i = 0; i < args.length; i++) {
                  var argType = utils.getVariableType(args[i], this.strictIntegers);
                  var type = argType === 'Integer' ? 'Number' : argType;
                  this.argumentTypes.push(type);
                  this.kernelArguments.push({
                    type: type
                  });
                }
              }
            } else {
              for (var _i12 = 0; _i12 < this.argumentTypes.length; _i12++) {
                this.kernelArguments.push({
                  type: this.argumentTypes[_i12]
                });
              }
            }

            this.argumentSizes = new Array(args.length);
            this.argumentBitRatios = new Int32Array(args.length);

            for (var _i13 = 0; _i13 < args.length; _i13++) {
              var arg = args[_i13];
              this.argumentSizes[_i13] = arg.constructor === Input ? arg.size : null;
              this.argumentBitRatios[_i13] = this.getBitRatio(arg);
            }

            if (this.argumentNames.length !== args.length) {
              throw new Error("arguments are miss-aligned");
            }
          }
        }, {
          key: "setupConstants",
          value: function setupConstants() {
            this.kernelConstants = [];
            var needsConstantTypes = this.constantTypes === null;

            if (needsConstantTypes) {
              this.constantTypes = {};
            }

            this.constantBitRatios = {};

            if (this.constants) {
              for (var _name6 in this.constants) {
                if (needsConstantTypes) {
                  var type = utils.getVariableType(this.constants[_name6], this.strictIntegers);
                  this.constantTypes[_name6] = type;
                  this.kernelConstants.push({
                    name: _name6,
                    type: type
                  });
                } else {
                  this.kernelConstants.push({
                    name: _name6,
                    type: this.constantTypes[_name6]
                  });
                }

                this.constantBitRatios[_name6] = this.getBitRatio(this.constants[_name6]);
              }
            }
          }
        }, {
          key: "setOptimizeFloatMemory",
          value: function setOptimizeFloatMemory(flag) {
            this.optimizeFloatMemory = flag;
            return this;
          }
        }, {
          key: "toKernelOutput",
          value: function toKernelOutput(output) {
            if (output.hasOwnProperty('x')) {
              if (output.hasOwnProperty('y')) {
                if (output.hasOwnProperty('z')) {
                  return [output.x, output.y, output.z];
                } else {
                  return [output.x, output.y];
                }
              } else {
                return [output.x];
              }
            } else {
              return output;
            }
          }
        }, {
          key: "setOutput",
          value: function setOutput(output) {
            this.output = this.toKernelOutput(output);
            return this;
          }
        }, {
          key: "setDebug",
          value: function setDebug(flag) {
            this.debug = flag;
            return this;
          }
        }, {
          key: "setGraphical",
          value: function setGraphical(flag) {
            this.graphical = flag;
            this.precision = 'unsigned';
            return this;
          }
        }, {
          key: "setLoopMaxIterations",
          value: function setLoopMaxIterations(max) {
            this.loopMaxIterations = max;
            return this;
          }
        }, {
          key: "setConstants",
          value: function setConstants(constants) {
            this.constants = constants;
            return this;
          }
        }, {
          key: "setConstantTypes",
          value: function setConstantTypes(constantTypes) {
            this.constantTypes = constantTypes;
            return this;
          }
        }, {
          key: "setFunctions",
          value: function setFunctions(functions) {
            for (var i = 0; i < functions.length; i++) {
              this.addFunction(functions[i]);
            }

            return this;
          }
        }, {
          key: "setNativeFunctions",
          value: function setNativeFunctions(nativeFunctions) {
            for (var i = 0; i < nativeFunctions.length; i++) {
              var settings = nativeFunctions[i];
              var _name7 = settings.name,
                  source = settings.source;
              this.addNativeFunction(_name7, source, settings);
            }

            return this;
          }
        }, {
          key: "setInjectedNative",
          value: function setInjectedNative(injectedNative) {
            this.injectedNative = injectedNative;
            return this;
          }
        }, {
          key: "setPipeline",
          value: function setPipeline(flag) {
            this.pipeline = flag;
            return this;
          }
        }, {
          key: "setPrecision",
          value: function setPrecision(flag) {
            this.precision = flag;
            return this;
          }
        }, {
          key: "setOutputToTexture",
          value: function setOutputToTexture(flag) {
            utils.warnDeprecated('method', 'setOutputToTexture', 'setPipeline');
            this.pipeline = flag;
            return this;
          }
        }, {
          key: "setImmutable",
          value: function setImmutable(flag) {
            utils.warnDeprecated('method', 'setImmutable');
            return this;
          }
        }, {
          key: "setCanvas",
          value: function setCanvas(canvas) {
            this.canvas = canvas;
            return this;
          }
        }, {
          key: "setStrictIntegers",
          value: function setStrictIntegers(flag) {
            this.strictIntegers = flag;
            return this;
          }
        }, {
          key: "setDynamicOutput",
          value: function setDynamicOutput(flag) {
            this.dynamicOutput = flag;
            return this;
          }
        }, {
          key: "setHardcodeConstants",
          value: function setHardcodeConstants(flag) {
            utils.warnDeprecated('method', 'setHardcodeConstants');
            this.setDynamicOutput(flag);
            this.setDynamicArguments(flag);
            return this;
          }
        }, {
          key: "setDynamicArguments",
          value: function setDynamicArguments(flag) {
            this.dynamicArguments = flag;
            return this;
          }
        }, {
          key: "setUseLegacyEncoder",
          value: function setUseLegacyEncoder(flag) {
            this.useLegacyEncoder = flag;
            return this;
          }
        }, {
          key: "setWarnVarUsage",
          value: function setWarnVarUsage(flag) {
            utils.warnDeprecated('method', 'setWarnVarUsage');
            return this;
          }
        }, {
          key: "getCanvas",
          value: function getCanvas() {
            utils.warnDeprecated('method', 'getCanvas');
            return this.canvas;
          }
        }, {
          key: "getWebGl",
          value: function getWebGl() {
            utils.warnDeprecated('method', 'getWebGl');
            return this.context;
          }
        }, {
          key: "setContext",
          value: function setContext(context) {
            this.context = context;
            return this;
          }
        }, {
          key: "setArgumentTypes",
          value: function setArgumentTypes(argumentTypes) {
            if (Array.isArray(argumentTypes)) {
              this.argumentTypes = argumentTypes;
            } else {
              this.argumentTypes = [];

              for (var p in argumentTypes) {
                if (!argumentTypes.hasOwnProperty(p)) continue;
                var argumentIndex = this.argumentNames.indexOf(p);
                if (argumentIndex === -1) throw new Error("unable to find argument ".concat(p));
                this.argumentTypes[argumentIndex] = argumentTypes[p];
              }
            }

            return this;
          }
        }, {
          key: "setTactic",
          value: function setTactic(tactic) {
            this.tactic = tactic;
            return this;
          }
        }, {
          key: "requestFallback",
          value: function requestFallback(args) {
            if (!this.onRequestFallback) {
              throw new Error("\"onRequestFallback\" not defined on ".concat(this.constructor.name));
            }

            this.fallbackRequested = true;
            return this.onRequestFallback(args);
          }
        }, {
          key: "validateSettings",
          value: function validateSettings() {
            throw new Error("\"validateSettings\" not defined on ".concat(this.constructor.name));
          }
        }, {
          key: "addSubKernel",
          value: function addSubKernel(subKernel) {
            if (this.subKernels === null) {
              this.subKernels = [];
            }

            if (!subKernel.source) throw new Error('subKernel missing "source" property');
            if (!subKernel.property && isNaN(subKernel.property)) throw new Error('subKernel missing "property" property');
            if (!subKernel.name) throw new Error('subKernel missing "name" property');
            this.subKernels.push(subKernel);
            return this;
          }
        }, {
          key: "destroy",
          value: function destroy(removeCanvasReferences) {
            throw new Error("\"destroy\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "getBitRatio",
          value: function getBitRatio(value) {
            if (this.precision === 'single') {
              return 4;
            } else if (Array.isArray(value[0])) {
              return this.getBitRatio(value[0]);
            } else if (value.constructor === Input) {
              return this.getBitRatio(value.value);
            }

            switch (value.constructor) {
              case Uint8ClampedArray:
              case Uint8Array:
              case Int8Array:
                return 1;

              case Uint16Array:
              case Int16Array:
                return 2;

              case Float32Array:
              case Int32Array:
              default:
                return 4;
            }
          }
        }, {
          key: "getPixels",
          value: function getPixels(flip) {
            throw new Error("\"getPixels\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "checkOutput",
          value: function checkOutput() {
            if (!this.output || !utils.isArray(this.output)) throw new Error('kernel.output not an array');
            if (this.output.length < 1) throw new Error('kernel.output is empty, needs at least 1 value');

            for (var i = 0; i < this.output.length; i++) {
              if (isNaN(this.output[i]) || this.output[i] < 1) {
                throw new Error("".concat(this.constructor.name, ".output[").concat(i, "] incorrectly defined as `").concat(this.output[i], "`, needs to be numeric, and greater than 0"));
              }
            }
          }
        }, {
          key: "prependString",
          value: function prependString(value) {
            throw new Error("\"prependString\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "hasPrependString",
          value: function hasPrependString(value) {
            throw new Error("\"hasPrependString\" called on ".concat(this.constructor.name));
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            return {
              settings: {
                output: this.output,
                pipeline: this.pipeline,
                argumentNames: this.argumentNames,
                argumentsTypes: this.argumentTypes,
                constants: this.constants,
                pluginNames: this.plugins ? this.plugins.map(function (plugin) {
                  return plugin.name;
                }) : null,
                returnType: this.returnType
              }
            };
          }
        }, {
          key: "buildSignature",
          value: function buildSignature(args) {
            var Constructor = this.constructor;
            this.signature = Constructor.getSignature(this, Constructor.getArgumentTypes(this, args));
          }
        }, {
          key: "functionToIGPUFunction",
          value: function functionToIGPUFunction(source) {
            var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            if (typeof source !== 'string' && typeof source !== 'function') throw new Error('source not a string or function');
            var sourceString = typeof source === 'string' ? source : source.toString();
            var argumentTypes = [];

            if (Array.isArray(settings.argumentTypes)) {
              argumentTypes = settings.argumentTypes;
            } else if (_typeof(settings.argumentTypes) === 'object') {
              argumentTypes = utils.getArgumentNamesFromString(sourceString).map(function (name) {
                return settings.argumentTypes[name];
              }) || [];
            } else {
              argumentTypes = settings.argumentTypes || [];
            }

            return {
              name: utils.getFunctionNameFromString(sourceString) || null,
              source: sourceString,
              argumentTypes: argumentTypes,
              returnType: settings.returnType || null
            };
          }
        }], [{
          key: "getArgumentTypes",
          value: function getArgumentTypes(kernel, args) {
            var argumentTypes = new Array(args.length);

            for (var i = 0; i < args.length; i++) {
              var arg = args[i];
              var type = kernel.argumentTypes[i];

              if (arg.type) {
                argumentTypes[i] = arg.type;
              } else {
                switch (type) {
                  case 'Number':
                  case 'Integer':
                  case 'Float':
                  case 'ArrayTexture(1)':
                    argumentTypes[i] = utils.getVariableType(arg);
                    break;

                  default:
                    argumentTypes[i] = type;
                }
              }
            }

            return argumentTypes;
          }
        }, {
          key: "getSignature",
          value: function getSignature(kernel, argumentTypes) {
            throw new Error("\"getSignature\" not implemented on ".concat(this.name));
            return argumentTypes.length > 0 ? ':' + argumentTypes.join(',') : '';
          }
        }]);

        return Kernel;
      }();

      function splitArgumentTypes(argumentTypesObject) {
        var argumentNames = Object.keys(argumentTypesObject);
        var argumentTypes = [];

        for (var i = 0; i < argumentNames.length; i++) {
          var argumentName = argumentNames[i];
          argumentTypes.push(argumentTypesObject[argumentName]);
        }

        return {
          argumentTypes: argumentTypes,
          argumentNames: argumentNames
        };
      }

      module.exports = {
        Kernel: Kernel
      };
    }, {
      "../input": 110,
      "../utils": 114
    }],
    37: [function (require, module, exports) {
      var fragmentShader = "__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nvarying vec2 vTexCoord;\n\nvec4 round(vec4 x) {\n  return floor(x + 0.5);\n}\n\nfloat round(float x) {\n  return floor(x + 0.5);\n}\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x / y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  if (channel == 0) return texel.r * 255.0 + texel.g * 65280.0;\n  if (channel == 1) return texel.b * 255.0 + texel.a * 65280.0;\n  return 0.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  if (channel == 0) return texel.r * 255.0;\n  if (channel == 1) return texel.g * 255.0;\n  if (channel == 2) return texel.b * 255.0;\n  if (channel == 3) return texel.a * 255.0;\n  return 0.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return texel.r;\n  if (channel == 1) return texel.g;\n  if (channel == 2) return texel.b;\n  if (channel == 3) return texel.a;\n  return 0.0;\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture2D(tex, st / vec2(texSize));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture2D(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n  \n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture2D(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture2D(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nvoid color(sampler2D image) {\n  actualColor = texture2D(image, vTexCoord);\n}\n\nfloat modulo(float num1, float num2) {\n  if (num2 == 0.0) {\n    return 0.0;\n  }\n  bool isPositive = num1 >= 0.0;\n  num1 = abs(num1);\n  num2 = abs(num2);\n  for (int i = 0; i < LOOP_MAX; i++) {\n    if (num1 < num2) break;\n    num1 = num1 - num2;\n  }\n  return isPositive ? num1 : -num1;\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}";
      module.exports = {
        fragmentShader: fragmentShader
      };
    }, {}],
    38: [function (require, module, exports) {
      var _require77 = require('../function-node'),
          FunctionNode = _require77.FunctionNode;

      var WebGLFunctionNode =
      /*#__PURE__*/
      function (_FunctionNode2) {
        _inherits(WebGLFunctionNode, _FunctionNode2);

        function WebGLFunctionNode(source, settings) {
          var _this24;

          _classCallCheck(this, WebGLFunctionNode);

          _this24 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLFunctionNode).call(this, source, settings));

          if (settings && settings.hasOwnProperty('fixIntegerDivisionAccuracy')) {
            _this24.fixIntegerDivisionAccuracy = settings.fixIntegerDivisionAccuracy;
          }

          return _this24;
        }

        _createClass(WebGLFunctionNode, [{
          key: "astConditionalExpression",
          value: function astConditionalExpression(ast, retArr) {
            if (ast.type !== 'ConditionalExpression') {
              throw this.astErrorOutput('Not a conditional expression', ast);
            }

            var consequentType = this.getType(ast.consequent);
            var alternateType = this.getType(ast.alternate);

            if (consequentType === null && alternateType === null) {
              retArr.push('if (');
              this.astGeneric(ast.test, retArr);
              retArr.push(') {');
              this.astGeneric(ast.consequent, retArr);
              retArr.push(';');
              retArr.push('} else {');
              this.astGeneric(ast.alternate, retArr);
              retArr.push(';');
              retArr.push('}');
              return retArr;
            }

            retArr.push('(');
            this.astGeneric(ast.test, retArr);
            retArr.push('?');
            this.astGeneric(ast.consequent, retArr);
            retArr.push(':');
            this.astGeneric(ast.alternate, retArr);
            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astFunction",
          value: function astFunction(ast, retArr) {
            if (this.isRootKernel) {
              retArr.push('void');
            } else {
              if (!this.returnType) {
                var lastReturn = this.findLastReturn();

                if (lastReturn) {
                  this.returnType = this.getType(ast.body);

                  if (this.returnType === 'LiteralInteger') {
                    this.returnType = 'Number';
                  }
                }
              }

              var returnType = this.returnType;

              if (!returnType) {
                retArr.push('void');
              } else {
                var type = typeMap[returnType];

                if (!type) {
                  throw new Error("unknown type ".concat(returnType));
                }

                retArr.push(type);
              }
            }

            retArr.push(' ');
            retArr.push(this.name);
            retArr.push('(');

            if (!this.isRootKernel) {
              for (var i = 0; i < this.argumentNames.length; ++i) {
                var argumentName = this.argumentNames[i];

                if (i > 0) {
                  retArr.push(', ');
                }

                var argumentType = this.argumentTypes[this.argumentNames.indexOf(argumentName)];

                if (!argumentType) {
                  throw this.astErrorOutput("Unknown argument ".concat(argumentName, " type"), ast);
                }

                if (argumentType === 'LiteralInteger') {
                  this.argumentTypes[i] = argumentType = 'Number';
                }

                var _type2 = typeMap[argumentType];

                if (!_type2) {
                  throw this.astErrorOutput('Unexpected expression', ast);
                }

                if (_type2 === 'sampler2D' || _type2 === 'sampler2DArray') {
                  retArr.push("".concat(_type2, " user_").concat(argumentName, ",ivec2 user_").concat(argumentName, "Size,ivec3 user_").concat(argumentName, "Dim"));
                } else {
                  retArr.push("".concat(_type2, " user_").concat(argumentName));
                }
              }
            }

            retArr.push(') {\n');

            for (var _i14 = 0; _i14 < ast.body.body.length; ++_i14) {
              this.astGeneric(ast.body.body[_i14], retArr);
              retArr.push('\n');
            }

            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astReturnStatement",
          value: function astReturnStatement(ast, retArr) {
            if (!ast.argument) throw this.astErrorOutput('Unexpected return statement', ast);
            this.pushState('skip-literal-correction');
            var type = this.getType(ast.argument);
            this.popState('skip-literal-correction');
            var result = [];

            if (!this.returnType) {
              if (type === 'LiteralInteger' || type === 'Integer') {
                this.returnType = 'Number';
              } else {
                this.returnType = type;
              }
            }

            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Float':
                switch (type) {
                  case 'Integer':
                    result.push('float(');
                    this.astGeneric(ast.argument, result);
                    result.push(')');
                    break;

                  case 'LiteralInteger':
                    this.castLiteralToFloat(ast.argument, result);

                    if (this.getType(ast) === 'Integer') {
                      result.unshift('float(');
                      result.push(')');
                    }

                    break;

                  default:
                    this.astGeneric(ast.argument, result);
                }

                break;

              case 'Integer':
                switch (type) {
                  case 'Float':
                  case 'Number':
                    this.castValueToInteger(ast.argument, result);
                    break;

                  case 'LiteralInteger':
                    this.castLiteralToInteger(ast.argument, result);
                    break;

                  default:
                    this.astGeneric(ast.argument, result);
                }

                break;

              case 'Array(4)':
              case 'Array(3)':
              case 'Array(2)':
              case 'Input':
                this.astGeneric(ast.argument, result);
                break;

              default:
                throw this.astErrorOutput("unhandled return type ".concat(this.returnType), ast);
            }

            if (this.isRootKernel) {
              retArr.push("kernelResult = ".concat(result.join(''), ";"));
              retArr.push('return;');
            } else if (this.isSubKernel) {
              retArr.push("subKernelResult_".concat(this.name, " = ").concat(result.join(''), ";"));
              retArr.push("return subKernelResult_".concat(this.name, ";"));
            } else {
              retArr.push("return ".concat(result.join(''), ";"));
            }

            return retArr;
          }
        }, {
          key: "astLiteral",
          value: function astLiteral(ast, retArr) {
            if (isNaN(ast.value)) {
              throw this.astErrorOutput('Non-numeric literal not supported : ' + ast.value, ast);
            }

            var key = this.astKey(ast);

            if (Number.isInteger(ast.value)) {
              if (this.isState('casting-to-integer') || this.isState('building-integer')) {
                this.literalTypes[key] = 'Integer';
                retArr.push("".concat(ast.value));
              } else if (this.isState('casting-to-float') || this.isState('building-float')) {
                this.literalTypes[key] = 'Number';
                retArr.push("".concat(ast.value, ".0"));
              } else {
                this.literalTypes[key] = 'Number';
                retArr.push("".concat(ast.value, ".0"));
              }
            } else if (this.isState('casting-to-integer') || this.isState('building-integer')) {
              this.literalTypes[key] = 'Integer';
              retArr.push(Math.round(ast.value));
            } else {
              this.literalTypes[key] = 'Number';
              retArr.push("".concat(ast.value));
            }

            return retArr;
          }
        }, {
          key: "astBinaryExpression",
          value: function astBinaryExpression(ast, retArr) {
            if (this.checkAndUpconvertOperator(ast, retArr)) {
              return retArr;
            }

            if (this.fixIntegerDivisionAccuracy && ast.operator === '/') {
              retArr.push('div_with_int_check(');
              this.pushState('building-float');

              switch (this.getType(ast.left)) {
                case 'Integer':
                  this.castValueToFloat(ast.left, retArr);
                  break;

                case 'LiteralInteger':
                  this.castLiteralToFloat(ast.left, retArr);
                  break;

                default:
                  this.astGeneric(ast.left, retArr);
              }

              retArr.push(', ');

              switch (this.getType(ast.right)) {
                case 'Integer':
                  this.castValueToFloat(ast.right, retArr);
                  break;

                case 'LiteralInteger':
                  this.castLiteralToFloat(ast.right, retArr);
                  break;

                default:
                  this.astGeneric(ast.right, retArr);
              }

              this.popState('building-float');
              retArr.push(')');
              return retArr;
            }

            retArr.push('(');
            var leftType = this.getType(ast.left) || 'Number';
            var rightType = this.getType(ast.right) || 'Number';

            if (!leftType || !rightType) {
              throw this.astErrorOutput("Unhandled binary expression", ast);
            }

            var key = leftType + ' & ' + rightType;

            switch (key) {
              case 'Integer & Integer':
                this.pushState('building-integer');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-integer');
                break;

              case 'Number & Float':
              case 'Float & Number':
              case 'Float & Float':
              case 'Number & Number':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-float');
                break;

              case 'LiteralInteger & LiteralInteger':
                if (this.isState('casting-to-integer') || this.isState('building-integer')) {
                  this.pushState('building-integer');
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.astGeneric(ast.right, retArr);
                  this.popState('building-integer');
                } else {
                  this.pushState('building-float');
                  this.castLiteralToFloat(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castLiteralToFloat(ast.right, retArr);
                  this.popState('building-float');
                }

                break;

              case 'Integer & Float':
              case 'Integer & Number':
                if (ast.operator === '>' || ast.operator === '<' && ast.right.type === 'Literal') {
                  if (!Number.isInteger(ast.right.value)) {
                    this.pushState('building-float');
                    this.castValueToFloat(ast.left, retArr);
                    retArr.push(operatorMap[ast.operator] || ast.operator);
                    this.astGeneric(ast.right, retArr);
                    this.popState('building-float');
                    break;
                  }
                }

                this.pushState('building-integer');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.pushState('casting-to-integer');

                if (ast.right.type === 'Literal') {
                  var literalResult = [];
                  this.astGeneric(ast.right, literalResult);
                  var literalType = this.getType(ast.right);

                  if (literalType === 'Integer') {
                    retArr.push(literalResult.join(''));
                  } else {
                    throw this.astErrorOutput("Unhandled binary expression with literal", ast);
                  }
                } else {
                  retArr.push('int(');
                  this.astGeneric(ast.right, retArr);
                  retArr.push(')');
                }

                this.popState('casting-to-integer');
                this.popState('building-integer');
                break;

              case 'Integer & LiteralInteger':
                this.pushState('building-integer');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castLiteralToInteger(ast.right, retArr);
                this.popState('building-integer');
                break;

              case 'Number & Integer':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castValueToFloat(ast.right, retArr);
                this.popState('building-float');
                break;

              case 'Float & LiteralInteger':
              case 'Number & LiteralInteger':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castLiteralToFloat(ast.right, retArr);
                this.popState('building-float');
                break;

              case 'LiteralInteger & Float':
              case 'LiteralInteger & Number':
                if (this.isState('casting-to-integer')) {
                  this.pushState('building-integer');
                  this.castLiteralToInteger(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.castValueToInteger(ast.right, retArr);
                  this.popState('building-integer');
                } else {
                  this.pushState('building-float');
                  this.astGeneric(ast.left, retArr);
                  retArr.push(operatorMap[ast.operator] || ast.operator);
                  this.pushState('casting-to-float');
                  this.astGeneric(ast.right, retArr);
                  this.popState('casting-to-float');
                  this.popState('building-float');
                }

                break;

              case 'LiteralInteger & Integer':
                this.pushState('building-integer');
                this.castLiteralToInteger(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-integer');
                break;

              case 'Boolean & Boolean':
                this.pushState('building-boolean');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.astGeneric(ast.right, retArr);
                this.popState('building-boolean');
                break;

              case 'Float & Integer':
                this.pushState('building-float');
                this.astGeneric(ast.left, retArr);
                retArr.push(operatorMap[ast.operator] || ast.operator);
                this.castValueToFloat(ast.right, retArr);
                this.popState('building-float');
                break;

              default:
                throw this.astErrorOutput("Unhandled binary expression between ".concat(key), ast);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "checkAndUpconvertOperator",
          value: function checkAndUpconvertOperator(ast, retArr) {
            var bitwiseResult = this.checkAndUpconvertBitwiseOperators(ast, retArr);

            if (bitwiseResult) {
              return bitwiseResult;
            }

            var upconvertableOperators = {
              '%': 'modulo',
              '**': 'pow'
            };
            var foundOperator = upconvertableOperators[ast.operator];
            if (!foundOperator) return null;
            retArr.push(foundOperator);
            retArr.push('(');

            switch (this.getType(ast.left)) {
              case 'Integer':
                this.castValueToFloat(ast.left, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToFloat(ast.left, retArr);
                break;

              default:
                this.astGeneric(ast.left, retArr);
            }

            retArr.push(',');

            switch (this.getType(ast.right)) {
              case 'Integer':
                this.castValueToFloat(ast.right, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToFloat(ast.right, retArr);
                break;

              default:
                this.astGeneric(ast.right, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "checkAndUpconvertBitwiseOperators",
          value: function checkAndUpconvertBitwiseOperators(ast, retArr) {
            var upconvertableOperators = {
              '&': 'bitwiseAnd',
              '|': 'bitwiseOr',
              '^': 'bitwiseXOR',
              '<<': 'bitwiseZeroFillLeftShift',
              '>>': 'bitwiseSignedRightShift',
              '>>>': 'bitwiseZeroFillRightShift'
            };
            var foundOperator = upconvertableOperators[ast.operator];
            if (!foundOperator) return null;
            retArr.push(foundOperator);
            retArr.push('(');
            var leftType = this.getType(ast.left);

            switch (leftType) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(ast.left, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(ast.left, retArr);
                break;

              default:
                this.astGeneric(ast.left, retArr);
            }

            retArr.push(',');
            var rightType = this.getType(ast.right);

            switch (rightType) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(ast.right, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(ast.right, retArr);
                break;

              default:
                this.astGeneric(ast.right, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "checkAndUpconvertBitwiseUnary",
          value: function checkAndUpconvertBitwiseUnary(ast, retArr) {
            var upconvertableOperators = {
              '~': 'bitwiseNot'
            };
            var foundOperator = upconvertableOperators[ast.operator];
            if (!foundOperator) return null;
            retArr.push(foundOperator);
            retArr.push('(');

            switch (this.getType(ast.argument)) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(ast.argument, retArr);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(ast.argument, retArr);
                break;

              default:
                this.astGeneric(ast.argument, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "castLiteralToInteger",
          value: function castLiteralToInteger(ast, retArr) {
            this.pushState('casting-to-integer');
            this.astGeneric(ast, retArr);
            this.popState('casting-to-integer');
            return retArr;
          }
        }, {
          key: "castLiteralToFloat",
          value: function castLiteralToFloat(ast, retArr) {
            this.pushState('casting-to-float');
            this.astGeneric(ast, retArr);
            this.popState('casting-to-float');
            return retArr;
          }
        }, {
          key: "castValueToInteger",
          value: function castValueToInteger(ast, retArr) {
            this.pushState('casting-to-integer');
            retArr.push('int(');
            this.astGeneric(ast, retArr);
            retArr.push(')');
            this.popState('casting-to-integer');
            return retArr;
          }
        }, {
          key: "castValueToFloat",
          value: function castValueToFloat(ast, retArr) {
            this.pushState('casting-to-float');
            retArr.push('float(');
            this.astGeneric(ast, retArr);
            retArr.push(')');
            this.popState('casting-to-float');
            return retArr;
          }
        }, {
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(idtNode, retArr) {
            if (idtNode.type !== 'Identifier') {
              throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);
            }

            var type = this.getType(idtNode);

            if (idtNode.name === 'Infinity') {
              retArr.push('3.402823466e+38');
            } else if (type === 'Boolean') {
              if (this.argumentNames.indexOf(idtNode.name) > -1) {
                retArr.push("bool(user_".concat(idtNode.name, ")"));
              } else {
                retArr.push("user_".concat(idtNode.name));
              }
            } else {
              retArr.push("user_".concat(idtNode.name));
            }

            return retArr;
          }
        }, {
          key: "astForStatement",
          value: function astForStatement(forNode, retArr) {
            if (forNode.type !== 'ForStatement') {
              throw this.astErrorOutput('Invalid for statement', forNode);
            }

            var initArr = [];
            var testArr = [];
            var updateArr = [];
            var bodyArr = [];
            var isSafe = null;

            if (forNode.init) {
              var declarations = forNode.init.declarations;

              if (declarations.length > 1) {
                isSafe = false;
              }

              this.astGeneric(forNode.init, initArr);

              for (var i = 0; i < declarations.length; i++) {
                if (declarations[i].init && declarations[i].init.type !== 'Literal') {
                  isSafe = false;
                }
              }
            } else {
              isSafe = false;
            }

            if (forNode.test) {
              this.astGeneric(forNode.test, testArr);
            } else {
              isSafe = false;
            }

            if (forNode.update) {
              this.astGeneric(forNode.update, updateArr);
            } else {
              isSafe = false;
            }

            if (forNode.body) {
              this.pushState('loop-body');
              this.astGeneric(forNode.body, bodyArr);
              this.popState('loop-body');
            }

            if (isSafe === null) {
              isSafe = this.isSafe(forNode.init) && this.isSafe(forNode.test);
            }

            if (isSafe) {
              var initString = initArr.join('');
              var initNeedsSemiColon = initString[initString.length - 1] !== ';';
              retArr.push("for (".concat(initString).concat(initNeedsSemiColon ? ';' : '').concat(testArr.join(''), ";").concat(updateArr.join(''), "){\n"));
              retArr.push(bodyArr.join(''));
              retArr.push('}\n');
            } else {
              var iVariableName = this.getInternalVariableName('safeI');

              if (initArr.length > 0) {
                retArr.push(initArr.join(''), '\n');
              }

              retArr.push("for (int ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));

              if (testArr.length > 0) {
                retArr.push("if (!".concat(testArr.join(''), ") break;\n"));
              }

              retArr.push(bodyArr.join(''));
              retArr.push("\n".concat(updateArr.join(''), ";"));
              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astWhileStatement",
          value: function astWhileStatement(whileNode, retArr) {
            if (whileNode.type !== 'WhileStatement') {
              throw this.astErrorOutput('Invalid while statement', whileNode);
            }

            var iVariableName = this.getInternalVariableName('safeI');
            retArr.push("for (int ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));
            retArr.push('if (!');
            this.astGeneric(whileNode.test, retArr);
            retArr.push(') break;\n');
            this.astGeneric(whileNode.body, retArr);
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astDoWhileStatement",
          value: function astDoWhileStatement(doWhileNode, retArr) {
            if (doWhileNode.type !== 'DoWhileStatement') {
              throw this.astErrorOutput('Invalid while statement', doWhileNode);
            }

            var iVariableName = this.getInternalVariableName('safeI');
            retArr.push("for (int ".concat(iVariableName, "=0;").concat(iVariableName, "<LOOP_MAX;").concat(iVariableName, "++){\n"));
            this.astGeneric(doWhileNode.body, retArr);
            retArr.push('if (!');
            this.astGeneric(doWhileNode.test, retArr);
            retArr.push(') break;\n');
            retArr.push('}\n');
            return retArr;
          }
        }, {
          key: "astAssignmentExpression",
          value: function astAssignmentExpression(assNode, retArr) {
            if (assNode.operator === '%=') {
              this.astGeneric(assNode.left, retArr);
              retArr.push('=');
              retArr.push('mod(');
              this.astGeneric(assNode.left, retArr);
              retArr.push(',');
              this.astGeneric(assNode.right, retArr);
              retArr.push(')');
            } else if (assNode.operator === '**=') {
              this.astGeneric(assNode.left, retArr);
              retArr.push('=');
              retArr.push('pow(');
              this.astGeneric(assNode.left, retArr);
              retArr.push(',');
              this.astGeneric(assNode.right, retArr);
              retArr.push(')');
            } else {
              var leftType = this.getType(assNode.left);
              var rightType = this.getType(assNode.right);
              this.astGeneric(assNode.left, retArr);
              retArr.push(assNode.operator);

              if (leftType !== 'Integer' && rightType === 'Integer') {
                retArr.push('float(');
                this.astGeneric(assNode.right, retArr);
                retArr.push(')');
              } else {
                this.astGeneric(assNode.right, retArr);
              }

              return retArr;
            }
          }
        }, {
          key: "astBlockStatement",
          value: function astBlockStatement(bNode, retArr) {
            if (this.isState('loop-body')) {
              this.pushState('block-body');

              for (var i = 0; i < bNode.body.length; i++) {
                this.astGeneric(bNode.body[i], retArr);
              }

              this.popState('block-body');
            } else {
              retArr.push('{\n');

              for (var _i15 = 0; _i15 < bNode.body.length; _i15++) {
                this.astGeneric(bNode.body[_i15], retArr);
              }

              retArr.push('}\n');
            }

            return retArr;
          }
        }, {
          key: "astVariableDeclaration",
          value: function astVariableDeclaration(varDecNode, retArr) {
            var declarations = varDecNode.declarations;

            if (!declarations || !declarations[0] || !declarations[0].init) {
              throw this.astErrorOutput('Unexpected expression', varDecNode);
            }

            var result = [];
            var lastType = null;
            var declarationSets = [];
            var declarationSet = [];

            for (var i = 0; i < declarations.length; i++) {
              var declaration = declarations[i];
              var init = declaration.init;
              var info = this.getDeclaration(declaration.id);
              var actualType = this.getType(declaration.init);
              var type = actualType;

              if (type === 'LiteralInteger') {
                if (info.suggestedType === 'Integer') {
                  type = 'Integer';
                } else {
                  type = 'Number';
                }
              }

              var markupType = typeMap[type];

              if (!markupType) {
                throw this.astErrorOutput("Markup type ".concat(markupType, " not handled"), varDecNode);
              }

              var declarationResult = [];

              if (actualType === 'Integer' && type === 'Integer') {
                info.valueType = 'Number';

                if (i === 0 || lastType === null) {
                  declarationResult.push('float ');
                } else if (type !== lastType) {
                  throw new Error('Unhandled declaration');
                }

                lastType = type;
                declarationResult.push("user_".concat(declaration.id.name, "="));
                declarationResult.push('float(');
                this.astGeneric(init, declarationResult);
                declarationResult.push(')');
              } else {
                info.valueType = type;

                if (i === 0 || lastType === null) {
                  declarationResult.push("".concat(markupType, " "));
                } else if (type !== lastType) {
                  declarationSets.push(declarationSet.join(','));
                  declarationSet = [];
                  declarationResult.push("".concat(markupType, " "));
                }

                lastType = type;
                declarationResult.push("user_".concat(declaration.id.name, "="));

                if (actualType === 'Number' && type === 'Integer') {
                  if (init.left && init.left.type === 'Literal') {
                    this.astGeneric(init, declarationResult);
                  } else {
                    declarationResult.push('int(');
                    this.astGeneric(init, declarationResult);
                    declarationResult.push(')');
                  }
                } else if (actualType === 'LiteralInteger' && type === 'Integer') {
                  this.castLiteralToInteger(init, declarationResult);
                } else {
                  this.astGeneric(init, declarationResult);
                }
              }

              declarationSet.push(declarationResult.join(''));
            }

            if (declarationSet.length > 0) {
              declarationSets.push(declarationSet.join(','));
            }

            result.push(declarationSets.join(';'));
            retArr.push(result.join(''));
            retArr.push(';');
            return retArr;
          }
        }, {
          key: "astIfStatement",
          value: function astIfStatement(ifNode, retArr) {
            retArr.push('if (');
            this.astGeneric(ifNode.test, retArr);
            retArr.push(')');

            if (ifNode.consequent.type === 'BlockStatement') {
              this.astGeneric(ifNode.consequent, retArr);
            } else {
              retArr.push(' {\n');
              this.astGeneric(ifNode.consequent, retArr);
              retArr.push('\n}\n');
            }

            if (ifNode.alternate) {
              retArr.push('else ');

              if (ifNode.alternate.type === 'BlockStatement' || ifNode.alternate.type === 'IfStatement') {
                this.astGeneric(ifNode.alternate, retArr);
              } else {
                retArr.push(' {\n');
                this.astGeneric(ifNode.alternate, retArr);
                retArr.push('\n}\n');
              }
            }

            return retArr;
          }
        }, {
          key: "astSwitchStatement",
          value: function astSwitchStatement(ast, retArr) {
            if (ast.type !== 'SwitchStatement') {
              throw this.astErrorOutput('Invalid switch statement', ast);
            }

            var discriminant = ast.discriminant,
                cases = ast.cases;
            var type = this.getType(discriminant);
            var varName = "switchDiscriminant".concat(this.astKey(ast, '_'));

            switch (type) {
              case 'Float':
              case 'Number':
                retArr.push("float ".concat(varName, " = "));
                this.astGeneric(discriminant, retArr);
                retArr.push(';\n');
                break;

              case 'Integer':
                retArr.push("int ".concat(varName, " = "));
                this.astGeneric(discriminant, retArr);
                retArr.push(';\n');
                break;
            }

            if (cases.length === 1 && !cases[0].test) {
              this.astGeneric(cases[0].consequent, retArr);
              return retArr;
            }

            var fallingThrough = false;
            var defaultResult = [];
            var movingDefaultToEnd = false;
            var pastFirstIf = false;

            for (var i = 0; i < cases.length; i++) {
              if (!cases[i].test) {
                if (cases.length > i + 1) {
                  movingDefaultToEnd = true;
                  this.astGeneric(cases[i].consequent, defaultResult);
                  continue;
                } else {
                  retArr.push(' else {\n');
                }
              } else {
                if (i === 0 || !pastFirstIf) {
                  pastFirstIf = true;
                  retArr.push("if (".concat(varName, " == "));
                } else {
                  if (fallingThrough) {
                    retArr.push("".concat(varName, " == "));
                    fallingThrough = false;
                  } else {
                    retArr.push(" else if (".concat(varName, " == "));
                  }
                }

                if (type === 'Integer') {
                  var testType = this.getType(cases[i].test);

                  switch (testType) {
                    case 'Number':
                    case 'Float':
                      this.castValueToInteger(cases[i].test, retArr);
                      break;

                    case 'LiteralInteger':
                      this.castLiteralToInteger(cases[i].test, retArr);
                      break;
                  }
                } else if (type === 'Float') {
                  var _testType = this.getType(cases[i].test);

                  switch (_testType) {
                    case 'LiteralInteger':
                      this.castLiteralToFloat(cases[i].test, retArr);
                      break;

                    case 'Integer':
                      this.castValueToFloat(cases[i].test, retArr);
                      break;
                  }
                } else {
                  throw new Error('unhanlded');
                }

                if (!cases[i].consequent || cases[i].consequent.length === 0) {
                  fallingThrough = true;
                  retArr.push(' || ');
                  continue;
                }

                retArr.push(") {\n");
              }

              this.astGeneric(cases[i].consequent, retArr);
              retArr.push('\n}');
            }

            if (movingDefaultToEnd) {
              retArr.push(' else {');
              retArr.push(defaultResult.join(''));
              retArr.push('}');
            }

            return retArr;
          }
        }, {
          key: "astThisExpression",
          value: function astThisExpression(tNode, retArr) {
            retArr.push('this');
            return retArr;
          }
        }, {
          key: "astMemberExpression",
          value: function astMemberExpression(mNode, retArr) {
            var _this$getMemberExpres2 = this.getMemberExpressionDetails(mNode),
                property = _this$getMemberExpres2.property,
                name = _this$getMemberExpres2.name,
                signature = _this$getMemberExpres2.signature,
                origin = _this$getMemberExpres2.origin,
                type = _this$getMemberExpres2.type,
                xProperty = _this$getMemberExpres2.xProperty,
                yProperty = _this$getMemberExpres2.yProperty,
                zProperty = _this$getMemberExpres2.zProperty;

            switch (signature) {
              case 'value.thread.value':
              case 'this.thread.value':
                if (name !== 'x' && name !== 'y' && name !== 'z') {
                  throw this.astErrorOutput('Unexpected expression, expected `this.thread.x`, `this.thread.y`, or `this.thread.z`', mNode);
                }

                retArr.push("threadId.".concat(name));
                return retArr;

              case 'this.output.value':
                if (this.dynamicOutput) {
                  switch (name) {
                    case 'x':
                      if (this.isState('casting-to-float')) {
                        retArr.push('float(uOutputDim.x)');
                      } else {
                        retArr.push('uOutputDim.x');
                      }

                      break;

                    case 'y':
                      if (this.isState('casting-to-float')) {
                        retArr.push('float(uOutputDim.y)');
                      } else {
                        retArr.push('uOutputDim.y');
                      }

                      break;

                    case 'z':
                      if (this.isState('casting-to-float')) {
                        retArr.push('float(uOutputDim.z)');
                      } else {
                        retArr.push('uOutputDim.z');
                      }

                      break;

                    default:
                      throw this.astErrorOutput('Unexpected expression', mNode);
                  }
                } else {
                  switch (name) {
                    case 'x':
                      if (this.isState('casting-to-integer')) {
                        retArr.push(this.output[0]);
                      } else {
                        retArr.push(this.output[0], '.0');
                      }

                      break;

                    case 'y':
                      if (this.isState('casting-to-integer')) {
                        retArr.push(this.output[1]);
                      } else {
                        retArr.push(this.output[1], '.0');
                      }

                      break;

                    case 'z':
                      if (this.isState('casting-to-integer')) {
                        retArr.push(this.output[2]);
                      } else {
                        retArr.push(this.output[2], '.0');
                      }

                      break;

                    default:
                      throw this.astErrorOutput('Unexpected expression', mNode);
                  }
                }

                return retArr;

              case 'value':
                throw this.astErrorOutput('Unexpected expression', mNode);

              case 'value[]':
              case 'value[][]':
              case 'value[][][]':
              case 'value[][][][]':
              case 'value.value':
                if (origin === 'Math') {
                  retArr.push(Math[name]);
                  return retArr;
                }

                switch (property) {
                  case 'r':
                    retArr.push("user_".concat(name, ".r"));
                    return retArr;

                  case 'g':
                    retArr.push("user_".concat(name, ".g"));
                    return retArr;

                  case 'b':
                    retArr.push("user_".concat(name, ".b"));
                    return retArr;

                  case 'a':
                    retArr.push("user_".concat(name, ".a"));
                    return retArr;
                }

                break;

              case 'this.constants.value':
                if (typeof xProperty === 'undefined') {
                  switch (type) {
                    case 'Array(2)':
                    case 'Array(3)':
                    case 'Array(4)':
                      retArr.push("constants_".concat(name));
                      return retArr;
                  }
                }

              case 'this.constants.value[]':
              case 'this.constants.value[][]':
              case 'this.constants.value[][][]':
              case 'this.constants.value[][][][]':
                break;

              case 'fn()[]':
                this.astCallExpression(mNode.object, retArr);
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(property));
                retArr.push(']');
                return retArr;

              case '[][]':
                this.astArrayExpression(mNode.object, retArr);
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(property));
                retArr.push(']');
                return retArr;

              case 'value.value[]':
              case 'value.value[][]':
                if (this.removeIstanbulCoverage) {
                  return retArr;
                }

              default:
                throw this.astErrorOutput('Unexpected expression', mNode);
            }

            if (mNode.computed === false) {
              switch (type) {
                case 'Number':
                case 'Integer':
                case 'Float':
                case 'Boolean':
                  retArr.push("".concat(origin, "_").concat(name));
                  return retArr;
              }
            }

            var markupName = "".concat(origin, "_").concat(name);

            switch (type) {
              case 'Array(2)':
              case 'Array(3)':
              case 'Array(4)':
                this.astGeneric(mNode.object, retArr);
                retArr.push('[');
                retArr.push(this.memberExpressionPropertyMarkup(xProperty));
                retArr.push(']');
                break;

              case 'HTMLImageArray':
                retArr.push("getImage3D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(1)':
                retArr.push("getFloatFromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'Array1D(2)':
              case 'Array2D(2)':
              case 'Array3D(2)':
                retArr.push("getMemoryOptimizedVec2(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(2)':
                retArr.push("getVec2FromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'Array1D(3)':
              case 'Array2D(3)':
              case 'Array3D(3)':
                retArr.push("getMemoryOptimizedVec3(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(3)':
                retArr.push("getVec3FromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'Array1D(4)':
              case 'Array2D(4)':
              case 'Array3D(4)':
                retArr.push("getMemoryOptimizedVec4(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'ArrayTexture(4)':
              case 'HTMLCanvas':
              case 'HTMLImage':
              case 'HTMLVideo':
                retArr.push("getVec4FromSampler2D(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              case 'NumberTexture':
              case 'Array':
              case 'Array2D':
              case 'Array3D':
              case 'Array4D':
              case 'Input':
              case 'Number':
              case 'Float':
              case 'Integer':
                if (this.precision === 'single') {
                  retArr.push("getMemoryOptimized32(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(')');
                } else {
                  var bitRatio = origin === 'user' ? this.lookupFunctionArgumentBitRatio(this.name, name) : this.constantBitRatios[name];

                  switch (bitRatio) {
                    case 1:
                      retArr.push("get8(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                      break;

                    case 2:
                      retArr.push("get16(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                      break;

                    case 4:
                    case 0:
                      retArr.push("get32(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                      break;

                    default:
                      throw new Error("unhandled bit ratio of ".concat(bitRatio));
                  }

                  this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                  retArr.push(')');
                }

                break;

              case 'MemoryOptimizedNumberTexture':
                retArr.push("getMemoryOptimized32(".concat(markupName, ", ").concat(markupName, "Size, ").concat(markupName, "Dim, "));
                this.memberExpressionXYZ(xProperty, yProperty, zProperty, retArr);
                retArr.push(')');
                break;

              default:
                throw new Error("unhandled member expression \"".concat(type, "\""));
            }

            return retArr;
          }
        }, {
          key: "astCallExpression",
          value: function astCallExpression(ast, retArr) {
            if (!ast.callee) {
              throw this.astErrorOutput('Unknown CallExpression', ast);
            }

            var functionName = null;
            var isMathFunction = this.isAstMathFunction(ast);

            if (isMathFunction || ast.callee.object && ast.callee.object.type === 'ThisExpression') {
              functionName = ast.callee.property.name;
            } else if (ast.callee.type === 'SequenceExpression' && ast.callee.expressions[0].type === 'Literal' && !isNaN(ast.callee.expressions[0].raw)) {
              functionName = ast.callee.expressions[1].property.name;
            } else {
              functionName = ast.callee.name;
            }

            if (!functionName) {
              throw this.astErrorOutput("Unhandled function, couldn't find name", ast);
            }

            if (functionName === 'atan2') {
              functionName = 'atan';
            }

            if (this.calledFunctions.indexOf(functionName) < 0) {
              this.calledFunctions.push(functionName);
            }

            if (functionName === 'random' && this.plugins && this.plugins.length > 0) {
              for (var i = 0; i < this.plugins.length; i++) {
                var plugin = this.plugins[i];

                if (plugin.functionMatch === 'Math.random()' && plugin.functionReplace) {
                  retArr.push(plugin.functionReplace);
                  return retArr;
                }
              }
            }

            if (this.onFunctionCall) {
              this.onFunctionCall(this.name, functionName, ast.arguments);
            }

            retArr.push(functionName);
            retArr.push('(');

            if (isMathFunction) {
              for (var _i16 = 0; _i16 < ast.arguments.length; ++_i16) {
                var argument = ast.arguments[_i16];
                var argumentType = this.getType(argument);

                if (_i16 > 0) {
                  retArr.push(', ');
                }

                switch (argumentType) {
                  case 'Integer':
                    this.castValueToFloat(argument, retArr);
                    break;

                  default:
                    this.astGeneric(argument, retArr);
                    break;
                }
              }
            } else {
              var targetTypes = this.lookupFunctionArgumentTypes(functionName) || [];

              for (var _i17 = 0; _i17 < ast.arguments.length; ++_i17) {
                var _argument = ast.arguments[_i17];
                var targetType = targetTypes[_i17];

                if (_i17 > 0) {
                  retArr.push(', ');
                }

                var _argumentType = this.getType(_argument);

                if (!targetType) {
                  this.triggerImplyArgumentType(functionName, _i17, _argumentType, this);
                  targetType = _argumentType;
                }

                switch (_argumentType) {
                  case 'Boolean':
                    this.astGeneric(_argument, retArr);
                    continue;

                  case 'Number':
                  case 'Float':
                    if (targetType === 'Integer') {
                      retArr.push('int(');
                      this.astGeneric(_argument, retArr);
                      retArr.push(')');
                      continue;
                    } else if (targetType === 'Number' || targetType === 'Float') {
                      this.astGeneric(_argument, retArr);
                      continue;
                    } else if (targetType === 'LiteralInteger') {
                      this.castLiteralToFloat(_argument, retArr);
                      continue;
                    }

                    break;

                  case 'Integer':
                    if (targetType === 'Number' || targetType === 'Float') {
                      retArr.push('float(');
                      this.astGeneric(_argument, retArr);
                      retArr.push(')');
                      continue;
                    } else if (targetType === 'Integer') {
                      this.astGeneric(_argument, retArr);
                      continue;
                    }

                    break;

                  case 'LiteralInteger':
                    if (targetType === 'Integer') {
                      this.castLiteralToInteger(_argument, retArr);
                      continue;
                    } else if (targetType === 'Number' || targetType === 'Float') {
                      this.castLiteralToFloat(_argument, retArr);
                      continue;
                    } else if (targetType === 'LiteralInteger') {
                      this.astGeneric(_argument, retArr);
                      continue;
                    }

                    break;

                  case 'Array(2)':
                  case 'Array(3)':
                  case 'Array(4)':
                    if (targetType === _argumentType) {
                      if (_argument.type === 'Identifier') {
                        retArr.push("user_".concat(_argument.name));
                      } else if (_argument.type === 'ArrayExpression') {
                        this.astGeneric(_argument, retArr);
                      } else {
                        throw this.astErrorOutput("Unhandled argument type ".concat(_argument.type), ast);
                      }

                      continue;
                    }

                    break;

                  case 'HTMLCanvas':
                  case 'HTMLImage':
                  case 'HTMLImageArray':
                  case 'HTMLVideo':
                  case 'ArrayTexture(1)':
                  case 'ArrayTexture(2)':
                  case 'ArrayTexture(3)':
                  case 'ArrayTexture(4)':
                  case 'Array':
                  case 'Input':
                    if (targetType === _argumentType) {
                      if (_argument.type !== 'Identifier') throw this.astErrorOutput("Unhandled argument type ".concat(_argument.type), ast);
                      this.triggerImplyArgumentBitRatio(this.name, _argument.name, functionName, _i17);
                      retArr.push("user_".concat(_argument.name, ",user_").concat(_argument.name, "Size,user_").concat(_argument.name, "Dim"));
                      continue;
                    }

                    break;
                }

                throw this.astErrorOutput("Unhandled argument combination of ".concat(_argumentType, " and ").concat(targetType, " for argument named \"").concat(_argument.name, "\""), ast);
              }
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "astArrayExpression",
          value: function astArrayExpression(arrNode, retArr) {
            var arrLen = arrNode.elements.length;
            retArr.push('vec' + arrLen + '(');

            for (var i = 0; i < arrLen; ++i) {
              if (i > 0) {
                retArr.push(', ');
              }

              var subNode = arrNode.elements[i];
              this.astGeneric(subNode, retArr);
            }

            retArr.push(')');
            return retArr;
          }
        }, {
          key: "memberExpressionXYZ",
          value: function memberExpressionXYZ(x, y, z, retArr) {
            if (z) {
              retArr.push(this.memberExpressionPropertyMarkup(z), ', ');
            } else {
              retArr.push('0, ');
            }

            if (y) {
              retArr.push(this.memberExpressionPropertyMarkup(y), ', ');
            } else {
              retArr.push('0, ');
            }

            retArr.push(this.memberExpressionPropertyMarkup(x));
            return retArr;
          }
        }, {
          key: "memberExpressionPropertyMarkup",
          value: function memberExpressionPropertyMarkup(property) {
            if (!property) {
              throw new Error('Property not set');
            }

            var type = this.getType(property);
            var result = [];

            switch (type) {
              case 'Number':
              case 'Float':
                this.castValueToInteger(property, result);
                break;

              case 'LiteralInteger':
                this.castLiteralToInteger(property, result);
                break;

              default:
                this.astGeneric(property, result);
            }

            return result.join('');
          }
        }]);

        return WebGLFunctionNode;
      }(FunctionNode);

      var typeMap = {
        'Array': 'sampler2D',
        'Array(2)': 'vec2',
        'Array(3)': 'vec3',
        'Array(4)': 'vec4',
        'Array2D': 'sampler2D',
        'Array3D': 'sampler2D',
        'Boolean': 'bool',
        'Float': 'float',
        'Input': 'sampler2D',
        'Integer': 'int',
        'Number': 'float',
        'LiteralInteger': 'float',
        'NumberTexture': 'sampler2D',
        'MemoryOptimizedNumberTexture': 'sampler2D',
        'ArrayTexture(1)': 'sampler2D',
        'ArrayTexture(2)': 'sampler2D',
        'ArrayTexture(3)': 'sampler2D',
        'ArrayTexture(4)': 'sampler2D',
        'HTMLVideo': 'sampler2D',
        'HTMLCanvas': 'sampler2D',
        'HTMLImage': 'sampler2D',
        'HTMLImageArray': 'sampler2DArray'
      };
      var operatorMap = {
        '===': '==',
        '!==': '!='
      };
      module.exports = {
        WebGLFunctionNode: WebGLFunctionNode
      };
    }, {
      "../function-node": 10
    }],
    39: [function (require, module, exports) {
      var _require78 = require('./kernel-value/boolean'),
          WebGLKernelValueBoolean = _require78.WebGLKernelValueBoolean;

      var _require79 = require('./kernel-value/float'),
          WebGLKernelValueFloat = _require79.WebGLKernelValueFloat;

      var _require80 = require('./kernel-value/integer'),
          WebGLKernelValueInteger = _require80.WebGLKernelValueInteger;

      var _require81 = require('./kernel-value/html-image'),
          WebGLKernelValueHTMLImage = _require81.WebGLKernelValueHTMLImage;

      var _require82 = require('./kernel-value/dynamic-html-image'),
          WebGLKernelValueDynamicHTMLImage = _require82.WebGLKernelValueDynamicHTMLImage;

      var _require83 = require('./kernel-value/html-video'),
          WebGLKernelValueHTMLVideo = _require83.WebGLKernelValueHTMLVideo;

      var _require84 = require('./kernel-value/dynamic-html-video'),
          WebGLKernelValueDynamicHTMLVideo = _require84.WebGLKernelValueDynamicHTMLVideo;

      var _require85 = require('./kernel-value/single-input'),
          WebGLKernelValueSingleInput = _require85.WebGLKernelValueSingleInput;

      var _require86 = require('./kernel-value/dynamic-single-input'),
          WebGLKernelValueDynamicSingleInput = _require86.WebGLKernelValueDynamicSingleInput;

      var _require87 = require('./kernel-value/unsigned-input'),
          WebGLKernelValueUnsignedInput = _require87.WebGLKernelValueUnsignedInput;

      var _require88 = require('./kernel-value/dynamic-unsigned-input'),
          WebGLKernelValueDynamicUnsignedInput = _require88.WebGLKernelValueDynamicUnsignedInput;

      var _require89 = require('./kernel-value/memory-optimized-number-texture'),
          WebGLKernelValueMemoryOptimizedNumberTexture = _require89.WebGLKernelValueMemoryOptimizedNumberTexture;

      var _require90 = require('./kernel-value/dynamic-memory-optimized-number-texture'),
          WebGLKernelValueDynamicMemoryOptimizedNumberTexture = _require90.WebGLKernelValueDynamicMemoryOptimizedNumberTexture;

      var _require91 = require('./kernel-value/number-texture'),
          WebGLKernelValueNumberTexture = _require91.WebGLKernelValueNumberTexture;

      var _require92 = require('./kernel-value/dynamic-number-texture'),
          WebGLKernelValueDynamicNumberTexture = _require92.WebGLKernelValueDynamicNumberTexture;

      var _require93 = require('./kernel-value/single-array'),
          WebGLKernelValueSingleArray = _require93.WebGLKernelValueSingleArray;

      var _require94 = require('./kernel-value/dynamic-single-array'),
          WebGLKernelValueDynamicSingleArray = _require94.WebGLKernelValueDynamicSingleArray;

      var _require95 = require('./kernel-value/single-array1d-i'),
          WebGLKernelValueSingleArray1DI = _require95.WebGLKernelValueSingleArray1DI;

      var _require96 = require('./kernel-value/dynamic-single-array1d-i'),
          WebGLKernelValueDynamicSingleArray1DI = _require96.WebGLKernelValueDynamicSingleArray1DI;

      var _require97 = require('./kernel-value/single-array2d-i'),
          WebGLKernelValueSingleArray2DI = _require97.WebGLKernelValueSingleArray2DI;

      var _require98 = require('./kernel-value/dynamic-single-array2d-i'),
          WebGLKernelValueDynamicSingleArray2DI = _require98.WebGLKernelValueDynamicSingleArray2DI;

      var _require99 = require('./kernel-value/single-array3d-i'),
          WebGLKernelValueSingleArray3DI = _require99.WebGLKernelValueSingleArray3DI;

      var _require100 = require('./kernel-value/dynamic-single-array3d-i'),
          WebGLKernelValueDynamicSingleArray3DI = _require100.WebGLKernelValueDynamicSingleArray3DI;

      var _require101 = require('./kernel-value/single-array2'),
          WebGLKernelValueSingleArray2 = _require101.WebGLKernelValueSingleArray2;

      var _require102 = require('./kernel-value/single-array3'),
          WebGLKernelValueSingleArray3 = _require102.WebGLKernelValueSingleArray3;

      var _require103 = require('./kernel-value/single-array4'),
          WebGLKernelValueSingleArray4 = _require103.WebGLKernelValueSingleArray4;

      var _require104 = require('./kernel-value/unsigned-array'),
          WebGLKernelValueUnsignedArray = _require104.WebGLKernelValueUnsignedArray;

      var _require105 = require('./kernel-value/dynamic-unsigned-array'),
          WebGLKernelValueDynamicUnsignedArray = _require105.WebGLKernelValueDynamicUnsignedArray;

      var kernelValueMaps = {
        unsigned: {
          dynamic: {
            'Boolean': WebGLKernelValueBoolean,
            'Integer': WebGLKernelValueInteger,
            'Float': WebGLKernelValueFloat,
            'Array': WebGLKernelValueDynamicUnsignedArray,
            'Array(2)': false,
            'Array(3)': false,
            'Array(4)': false,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGLKernelValueDynamicUnsignedInput,
            'NumberTexture': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGLKernelValueDynamicHTMLImage,
            'HTMLImage': WebGLKernelValueDynamicHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGLKernelValueBoolean,
            'Float': WebGLKernelValueFloat,
            'Integer': WebGLKernelValueInteger,
            'Array': WebGLKernelValueUnsignedArray,
            'Array(2)': false,
            'Array(3)': false,
            'Array(4)': false,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGLKernelValueUnsignedInput,
            'NumberTexture': WebGLKernelValueNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGLKernelValueHTMLImage,
            'HTMLImage': WebGLKernelValueHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueHTMLVideo
          }
        },
        single: {
          dynamic: {
            'Boolean': WebGLKernelValueBoolean,
            'Integer': WebGLKernelValueInteger,
            'Float': WebGLKernelValueFloat,
            'Array': WebGLKernelValueDynamicSingleArray,
            'Array(2)': WebGLKernelValueSingleArray2,
            'Array(3)': WebGLKernelValueSingleArray3,
            'Array(4)': WebGLKernelValueSingleArray4,
            'Array1D(2)': WebGLKernelValueDynamicSingleArray1DI,
            'Array1D(3)': WebGLKernelValueDynamicSingleArray1DI,
            'Array1D(4)': WebGLKernelValueDynamicSingleArray1DI,
            'Array2D(2)': WebGLKernelValueDynamicSingleArray2DI,
            'Array2D(3)': WebGLKernelValueDynamicSingleArray2DI,
            'Array2D(4)': WebGLKernelValueDynamicSingleArray2DI,
            'Array3D(2)': WebGLKernelValueDynamicSingleArray3DI,
            'Array3D(3)': WebGLKernelValueDynamicSingleArray3DI,
            'Array3D(4)': WebGLKernelValueDynamicSingleArray3DI,
            'Input': WebGLKernelValueDynamicSingleInput,
            'NumberTexture': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGLKernelValueDynamicHTMLImage,
            'HTMLImage': WebGLKernelValueDynamicHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGLKernelValueBoolean,
            'Float': WebGLKernelValueFloat,
            'Integer': WebGLKernelValueInteger,
            'Array': WebGLKernelValueSingleArray,
            'Array(2)': WebGLKernelValueSingleArray2,
            'Array(3)': WebGLKernelValueSingleArray3,
            'Array(4)': WebGLKernelValueSingleArray4,
            'Array1D(2)': WebGLKernelValueSingleArray1DI,
            'Array1D(3)': WebGLKernelValueSingleArray1DI,
            'Array1D(4)': WebGLKernelValueSingleArray1DI,
            'Array2D(2)': WebGLKernelValueSingleArray2DI,
            'Array2D(3)': WebGLKernelValueSingleArray2DI,
            'Array2D(4)': WebGLKernelValueSingleArray2DI,
            'Array3D(2)': WebGLKernelValueSingleArray3DI,
            'Array3D(3)': WebGLKernelValueSingleArray3DI,
            'Array3D(4)': WebGLKernelValueSingleArray3DI,
            'Input': WebGLKernelValueSingleInput,
            'NumberTexture': WebGLKernelValueNumberTexture,
            'ArrayTexture(1)': WebGLKernelValueNumberTexture,
            'ArrayTexture(2)': WebGLKernelValueNumberTexture,
            'ArrayTexture(3)': WebGLKernelValueNumberTexture,
            'ArrayTexture(4)': WebGLKernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGLKernelValueMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGLKernelValueHTMLImage,
            'HTMLImage': WebGLKernelValueHTMLImage,
            'HTMLImageArray': false,
            'HTMLVideo': WebGLKernelValueHTMLVideo
          }
        }
      };

      function lookupKernelValueType(type, dynamic, precision, value) {
        if (!type) {
          throw new Error('type missing');
        }

        if (!dynamic) {
          throw new Error('dynamic missing');
        }

        if (!precision) {
          throw new Error('precision missing');
        }

        if (value.type) {
          type = value.type;
        }

        var types = kernelValueMaps[precision][dynamic];

        if (types[type] === false) {
          return null;
        } else if (types[type] === undefined) {
          throw new Error("Could not find a KernelValue for ".concat(type));
        }

        return types[type];
      }

      module.exports = {
        lookupKernelValueType: lookupKernelValueType,
        kernelValueMaps: kernelValueMaps
      };
    }, {
      "./kernel-value/boolean": 41,
      "./kernel-value/dynamic-html-image": 42,
      "./kernel-value/dynamic-html-video": 43,
      "./kernel-value/dynamic-memory-optimized-number-texture": 44,
      "./kernel-value/dynamic-number-texture": 45,
      "./kernel-value/dynamic-single-array": 46,
      "./kernel-value/dynamic-single-array1d-i": 47,
      "./kernel-value/dynamic-single-array2d-i": 48,
      "./kernel-value/dynamic-single-array3d-i": 49,
      "./kernel-value/dynamic-single-input": 50,
      "./kernel-value/dynamic-unsigned-array": 51,
      "./kernel-value/dynamic-unsigned-input": 52,
      "./kernel-value/float": 53,
      "./kernel-value/html-image": 54,
      "./kernel-value/html-video": 55,
      "./kernel-value/integer": 57,
      "./kernel-value/memory-optimized-number-texture": 58,
      "./kernel-value/number-texture": 59,
      "./kernel-value/single-array": 60,
      "./kernel-value/single-array1d-i": 61,
      "./kernel-value/single-array2": 62,
      "./kernel-value/single-array2d-i": 63,
      "./kernel-value/single-array3": 64,
      "./kernel-value/single-array3d-i": 65,
      "./kernel-value/single-array4": 66,
      "./kernel-value/single-input": 67,
      "./kernel-value/unsigned-array": 68,
      "./kernel-value/unsigned-input": 69
    }],
    40: [function (require, module, exports) {
      var _require106 = require('./index'),
          WebGLKernelValue = _require106.WebGLKernelValue;

      var _require107 = require('../../../input'),
          Input = _require107.Input;

      var WebGLKernelArray =
      /*#__PURE__*/
      function (_WebGLKernelValue) {
        _inherits(WebGLKernelArray, _WebGLKernelValue);

        function WebGLKernelArray() {
          _classCallCheck(this, WebGLKernelArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelArray).apply(this, arguments));
        }

        _createClass(WebGLKernelArray, [{
          key: "checkSize",
          value: function checkSize(width, height) {
            if (!this.kernel.validate) return;
            var maxTextureSize = this.kernel.constructor.features.maxTextureSize;

            if (width > maxTextureSize || height > maxTextureSize) {
              if (width > height) {
                throw new Error("Argument texture width of ".concat(width, " larger than maximum size of ").concat(maxTextureSize, " for your GPU"));
              } else if (width < height) {
                throw new Error("Argument texture height of ".concat(height, " larger than maximum size of ").concat(maxTextureSize, " for your GPU"));
              } else {
                throw new Error("Argument texture height and width of ".concat(height, " larger than maximum size of ").concat(maxTextureSize, " for your GPU"));
              }
            }
          }
        }, {
          key: "setup",
          value: function setup() {
            this.requestTexture();
            this.setupTexture();
            this.defineTexture();
          }
        }, {
          key: "requestTexture",
          value: function requestTexture() {
            this.texture = this.onRequestTexture();
          }
        }, {
          key: "defineTexture",
          value: function defineTexture() {
            var gl = this.context;
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
          }
        }, {
          key: "setupTexture",
          value: function setupTexture() {
            this.contextHandle = this.onRequestContextHandle();
            this.index = this.onRequestIndex();
            this.dimensionsId = this.id + 'Dim';
            this.sizeId = this.id + 'Size';
          }
        }, {
          key: "getBitRatio",
          value: function getBitRatio(value) {
            if (Array.isArray(value[0])) {
              return this.getBitRatio(value[0]);
            } else if (value.constructor === Input) {
              return this.getBitRatio(value.value);
            }

            switch (value.constructor) {
              case Uint8ClampedArray:
              case Uint8Array:
              case Int8Array:
                return 1;

              case Uint16Array:
              case Int16Array:
                return 2;

              case Float32Array:
              case Int32Array:
              default:
                return 4;
            }
          }
        }, {
          key: "destroy",
          value: function destroy() {
            if (this.prevArg) {
              this.prevArg.delete();
            }

            this.context.deleteTexture(this.texture);
          }
        }]);

        return WebGLKernelArray;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelArray: WebGLKernelArray
      };
    }, {
      "../../../input": 110,
      "./index": 56
    }],
    41: [function (require, module, exports) {
      var _require108 = require('../../../utils'),
          utils = _require108.utils;

      var _require109 = require('./index'),
          WebGLKernelValue = _require109.WebGLKernelValue;

      var WebGLKernelValueBoolean =
      /*#__PURE__*/
      function (_WebGLKernelValue2) {
        _inherits(WebGLKernelValueBoolean, _WebGLKernelValue2);

        function WebGLKernelValueBoolean(value, settings) {
          var _this25;

          _classCallCheck(this, WebGLKernelValueBoolean);

          _this25 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueBoolean).call(this, value, settings));
          _this25.uploadValue = value;
          return _this25;
        }

        _createClass(WebGLKernelValueBoolean, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const bool ".concat(this.id, " = ").concat(value, ";\n");
            }

            return "uniform bool ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1i(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueBoolean;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueBoolean: WebGLKernelValueBoolean
      };
    }, {
      "../../../utils": 114,
      "./index": 56
    }],
    42: [function (require, module, exports) {
      var _require110 = require('../../../utils'),
          utils = _require110.utils;

      var _require111 = require('./html-image'),
          WebGLKernelValueHTMLImage = _require111.WebGLKernelValueHTMLImage;

      var WebGLKernelValueDynamicHTMLImage =
      /*#__PURE__*/
      function (_WebGLKernelValueHTML) {
        _inherits(WebGLKernelValueDynamicHTMLImage, _WebGLKernelValueHTML);

        function WebGLKernelValueDynamicHTMLImage() {
          _classCallCheck(this, WebGLKernelValueDynamicHTMLImage);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicHTMLImage).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicHTMLImage, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var width = value.width,
                height = value.height;
            this.checkSize(width, height);
            this.dimensions = [width, height, 1];
            this.textureSize = [width, height];
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicHTMLImage.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicHTMLImage;
      }(WebGLKernelValueHTMLImage);

      module.exports = {
        WebGLKernelValueDynamicHTMLImage: WebGLKernelValueDynamicHTMLImage
      };
    }, {
      "../../../utils": 114,
      "./html-image": 54
    }],
    43: [function (require, module, exports) {
      var _require112 = require('./dynamic-html-image'),
          WebGLKernelValueDynamicHTMLImage = _require112.WebGLKernelValueDynamicHTMLImage;

      var WebGLKernelValueDynamicHTMLVideo =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna) {
        _inherits(WebGLKernelValueDynamicHTMLVideo, _WebGLKernelValueDyna);

        function WebGLKernelValueDynamicHTMLVideo() {
          _classCallCheck(this, WebGLKernelValueDynamicHTMLVideo);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicHTMLVideo).apply(this, arguments));
        }

        return WebGLKernelValueDynamicHTMLVideo;
      }(WebGLKernelValueDynamicHTMLImage);

      module.exports = {
        WebGLKernelValueDynamicHTMLVideo: WebGLKernelValueDynamicHTMLVideo
      };
    }, {
      "./dynamic-html-image": 42
    }],
    44: [function (require, module, exports) {
      var _require113 = require('../../../utils'),
          utils = _require113.utils;

      var _require114 = require('./memory-optimized-number-texture'),
          WebGLKernelValueMemoryOptimizedNumberTexture = _require114.WebGLKernelValueMemoryOptimizedNumberTexture;

      var WebGLKernelValueDynamicMemoryOptimizedNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueMemo) {
        _inherits(WebGLKernelValueDynamicMemoryOptimizedNumberTexture, _WebGLKernelValueMemo);

        function WebGLKernelValueDynamicMemoryOptimizedNumberTexture() {
          _classCallCheck(this, WebGLKernelValueDynamicMemoryOptimizedNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicMemoryOptimizedNumberTexture).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicMemoryOptimizedNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputTexture) {
            this.dimensions = inputTexture.dimensions;
            this.checkSize(inputTexture.size[0], inputTexture.size[1]);
            this.textureSize = inputTexture.size;
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicMemoryOptimizedNumberTexture.prototype), "updateValue", this).call(this, inputTexture);
          }
        }]);

        return WebGLKernelValueDynamicMemoryOptimizedNumberTexture;
      }(WebGLKernelValueMemoryOptimizedNumberTexture);

      module.exports = {
        WebGLKernelValueDynamicMemoryOptimizedNumberTexture: WebGLKernelValueDynamicMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 114,
      "./memory-optimized-number-texture": 58
    }],
    45: [function (require, module, exports) {
      var _require115 = require('../../../utils'),
          utils = _require115.utils;

      var _require116 = require('./number-texture'),
          WebGLKernelValueNumberTexture = _require116.WebGLKernelValueNumberTexture;

      var WebGLKernelValueDynamicNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueNumb) {
        _inherits(WebGLKernelValueDynamicNumberTexture, _WebGLKernelValueNumb);

        function WebGLKernelValueDynamicNumberTexture() {
          _classCallCheck(this, WebGLKernelValueDynamicNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicNumberTexture).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = value.dimensions;
            this.checkSize(value.size[0], value.size[1]);
            this.textureSize = value.size;
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicNumberTexture.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicNumberTexture;
      }(WebGLKernelValueNumberTexture);

      module.exports = {
        WebGLKernelValueDynamicNumberTexture: WebGLKernelValueDynamicNumberTexture
      };
    }, {
      "../../../utils": 114,
      "./number-texture": 59
    }],
    46: [function (require, module, exports) {
      var _require117 = require('../../../utils'),
          utils = _require117.utils;

      var _require118 = require('./single-array'),
          WebGLKernelValueSingleArray = _require118.WebGLKernelValueSingleArray;

      var WebGLKernelValueDynamicSingleArray =
      /*#__PURE__*/
      function (_WebGLKernelValueSing) {
        _inherits(WebGLKernelValueDynamicSingleArray, _WebGLKernelValueSing);

        function WebGLKernelValueDynamicSingleArray() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicSingleArray).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicSingleArray, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray;
      }(WebGLKernelValueSingleArray);

      module.exports = {
        WebGLKernelValueDynamicSingleArray: WebGLKernelValueDynamicSingleArray
      };
    }, {
      "../../../utils": 114,
      "./single-array": 60
    }],
    47: [function (require, module, exports) {
      var _require119 = require('../../../utils'),
          utils = _require119.utils;

      var _require120 = require('./single-array1d-i'),
          WebGLKernelValueSingleArray1DI = _require120.WebGLKernelValueSingleArray1DI;

      var WebGLKernelValueDynamicSingleArray1DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing2) {
        _inherits(WebGLKernelValueDynamicSingleArray1DI, _WebGLKernelValueSing2);

        function WebGLKernelValueDynamicSingleArray1DI() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray1DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicSingleArray1DI).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicSingleArray1DI, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray1DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray1DI;
      }(WebGLKernelValueSingleArray1DI);

      module.exports = {
        WebGLKernelValueDynamicSingleArray1DI: WebGLKernelValueDynamicSingleArray1DI
      };
    }, {
      "../../../utils": 114,
      "./single-array1d-i": 61
    }],
    48: [function (require, module, exports) {
      var _require121 = require('../../../utils'),
          utils = _require121.utils;

      var _require122 = require('./single-array2d-i'),
          WebGLKernelValueSingleArray2DI = _require122.WebGLKernelValueSingleArray2DI;

      var WebGLKernelValueDynamicSingleArray2DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing3) {
        _inherits(WebGLKernelValueDynamicSingleArray2DI, _WebGLKernelValueSing3);

        function WebGLKernelValueDynamicSingleArray2DI() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray2DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicSingleArray2DI).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicSingleArray2DI, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray2DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray2DI;
      }(WebGLKernelValueSingleArray2DI);

      module.exports = {
        WebGLKernelValueDynamicSingleArray2DI: WebGLKernelValueDynamicSingleArray2DI
      };
    }, {
      "../../../utils": 114,
      "./single-array2d-i": 63
    }],
    49: [function (require, module, exports) {
      var _require123 = require('../../../utils'),
          utils = _require123.utils;

      var _require124 = require('./single-array3d-i'),
          WebGLKernelValueSingleArray3DI = _require124.WebGLKernelValueSingleArray3DI;

      var WebGLKernelValueDynamicSingleArray3DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing4) {
        _inherits(WebGLKernelValueDynamicSingleArray3DI, _WebGLKernelValueSing4);

        function WebGLKernelValueDynamicSingleArray3DI() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleArray3DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicSingleArray3DI).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicSingleArray3DI, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleArray3DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleArray3DI;
      }(WebGLKernelValueSingleArray3DI);

      module.exports = {
        WebGLKernelValueDynamicSingleArray3DI: WebGLKernelValueDynamicSingleArray3DI
      };
    }, {
      "../../../utils": 114,
      "./single-array3d-i": 65
    }],
    50: [function (require, module, exports) {
      var _require125 = require('../../../utils'),
          utils = _require125.utils;

      var _require126 = require('./single-input'),
          WebGLKernelValueSingleInput = _require126.WebGLKernelValueSingleInput;

      var WebGLKernelValueDynamicSingleInput =
      /*#__PURE__*/
      function (_WebGLKernelValueSing5) {
        _inherits(WebGLKernelValueDynamicSingleInput, _WebGLKernelValueSing5);

        function WebGLKernelValueDynamicSingleInput() {
          _classCallCheck(this, WebGLKernelValueDynamicSingleInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicSingleInput).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicSingleInput, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var _value$size = _slicedToArray(value.size, 3),
                w = _value$size[0],
                h = _value$size[1],
                d = _value$size[2];

            this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicSingleInput.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicSingleInput;
      }(WebGLKernelValueSingleInput);

      module.exports = {
        WebGLKernelValueDynamicSingleInput: WebGLKernelValueDynamicSingleInput
      };
    }, {
      "../../../utils": 114,
      "./single-input": 67
    }],
    51: [function (require, module, exports) {
      var _require127 = require('../../../utils'),
          utils = _require127.utils;

      var _require128 = require('./unsigned-array'),
          WebGLKernelValueUnsignedArray = _require128.WebGLKernelValueUnsignedArray;

      var WebGLKernelValueDynamicUnsignedArray =
      /*#__PURE__*/
      function (_WebGLKernelValueUnsi) {
        _inherits(WebGLKernelValueDynamicUnsignedArray, _WebGLKernelValueUnsi);

        function WebGLKernelValueDynamicUnsignedArray() {
          _classCallCheck(this, WebGLKernelValueDynamicUnsignedArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicUnsignedArray).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicUnsignedArray, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            var Type = this.getTransferArrayType(value);
            this.preUploadValue = new Type(this.uploadArrayLength);
            this.uploadValue = new Uint8Array(this.preUploadValue.buffer);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicUnsignedArray.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicUnsignedArray;
      }(WebGLKernelValueUnsignedArray);

      module.exports = {
        WebGLKernelValueDynamicUnsignedArray: WebGLKernelValueDynamicUnsignedArray
      };
    }, {
      "../../../utils": 114,
      "./unsigned-array": 68
    }],
    52: [function (require, module, exports) {
      var _require129 = require('../../../utils'),
          utils = _require129.utils;

      var _require130 = require('./unsigned-input'),
          WebGLKernelValueUnsignedInput = _require130.WebGLKernelValueUnsignedInput;

      var WebGLKernelValueDynamicUnsignedInput =
      /*#__PURE__*/
      function (_WebGLKernelValueUnsi2) {
        _inherits(WebGLKernelValueDynamicUnsignedInput, _WebGLKernelValueUnsi2);

        function WebGLKernelValueDynamicUnsignedInput() {
          _classCallCheck(this, WebGLKernelValueDynamicUnsignedInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueDynamicUnsignedInput).apply(this, arguments));
        }

        _createClass(WebGLKernelValueDynamicUnsignedInput, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var _value$size2 = _slicedToArray(value.size, 3),
                w = _value$size2[0],
                h = _value$size2[1],
                d = _value$size2[2];

            this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
            this.textureSize = utils.getMemoryOptimizedPackedTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * (4 / this.bitRatio);
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            var Type = this.getTransferArrayType(value.value);
            this.preUploadValue = new Type(this.uploadArrayLength);
            this.uploadValue = new Uint8Array(this.preUploadValue.buffer);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGLKernelValueDynamicUnsignedInput.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGLKernelValueDynamicUnsignedInput;
      }(WebGLKernelValueUnsignedInput);

      module.exports = {
        WebGLKernelValueDynamicUnsignedInput: WebGLKernelValueDynamicUnsignedInput
      };
    }, {
      "../../../utils": 114,
      "./unsigned-input": 69
    }],
    53: [function (require, module, exports) {
      var _require131 = require('../../../utils'),
          utils = _require131.utils;

      var _require132 = require('./index'),
          WebGLKernelValue = _require132.WebGLKernelValue;

      var WebGLKernelValueFloat =
      /*#__PURE__*/
      function (_WebGLKernelValue3) {
        _inherits(WebGLKernelValueFloat, _WebGLKernelValue3);

        function WebGLKernelValueFloat(value, settings) {
          var _this26;

          _classCallCheck(this, WebGLKernelValueFloat);

          _this26 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueFloat).call(this, value, settings));
          _this26.uploadValue = value;
          return _this26;
        }

        _createClass(WebGLKernelValueFloat, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              if (Number.isInteger(value)) {
                return "const float ".concat(this.id, " = ").concat(value, ".0;\n");
              }

              return "const float ".concat(this.id, " = ").concat(value, ";\n");
            }

            return "uniform float ".concat(this.id, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1f(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueFloat;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueFloat: WebGLKernelValueFloat
      };
    }, {
      "../../../utils": 114,
      "./index": 56
    }],
    54: [function (require, module, exports) {
      var _require133 = require('../../../utils'),
          utils = _require133.utils;

      var _require134 = require('./array'),
          WebGLKernelArray = _require134.WebGLKernelArray;

      var WebGLKernelValueHTMLImage =
      /*#__PURE__*/
      function (_WebGLKernelArray) {
        _inherits(WebGLKernelValueHTMLImage, _WebGLKernelArray);

        function WebGLKernelValueHTMLImage(value, settings) {
          var _this27;

          _classCallCheck(this, WebGLKernelValueHTMLImage);

          _this27 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueHTMLImage).call(this, value, settings));
          var width = value.width,
              height = value.height;

          _this27.checkSize(width, height);

          _this27.dimensions = [width, height, 1];
          _this27.textureSize = [width, height];
          _this27.uploadValue = value;
          return _this27;
        }

        _createClass(WebGLKernelValueHTMLImage, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputImage) {
            if (inputImage.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(inputImage.constructor);
              return;
            }

            var gl = this.context;
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = inputImage);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueHTMLImage;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueHTMLImage: WebGLKernelValueHTMLImage
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    55: [function (require, module, exports) {
      var _require135 = require('./html-image'),
          WebGLKernelValueHTMLImage = _require135.WebGLKernelValueHTMLImage;

      var WebGLKernelValueHTMLVideo =
      /*#__PURE__*/
      function (_WebGLKernelValueHTML2) {
        _inherits(WebGLKernelValueHTMLVideo, _WebGLKernelValueHTML2);

        function WebGLKernelValueHTMLVideo() {
          _classCallCheck(this, WebGLKernelValueHTMLVideo);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueHTMLVideo).apply(this, arguments));
        }

        return WebGLKernelValueHTMLVideo;
      }(WebGLKernelValueHTMLImage);

      module.exports = {
        WebGLKernelValueHTMLVideo: WebGLKernelValueHTMLVideo
      };
    }, {
      "./html-image": 54
    }],
    56: [function (require, module, exports) {
      var _require136 = require('../../kernel-value'),
          KernelValue = _require136.KernelValue;

      var WebGLKernelValue =
      /*#__PURE__*/
      function (_KernelValue) {
        _inherits(WebGLKernelValue, _KernelValue);

        function WebGLKernelValue(value, settings) {
          var _this28;

          _classCallCheck(this, WebGLKernelValue);

          _this28 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValue).call(this, value, settings));
          _this28.dimensionsId = null;
          _this28.sizeId = null;
          _this28.initialValueConstructor = value.constructor;
          _this28.onRequestTexture = settings.onRequestTexture;
          _this28.onRequestIndex = settings.onRequestIndex;
          _this28.uploadValue = null;
          _this28.textureSize = null;
          _this28.bitRatio = null;
          _this28.prevArg = null;
          return _this28;
        }

        _createClass(WebGLKernelValue, [{
          key: "setup",
          value: function setup() {}
        }, {
          key: "getTransferArrayType",
          value: function getTransferArrayType(value) {
            if (Array.isArray(value[0])) {
              return this.getTransferArrayType(value[0]);
            }

            switch (value.constructor) {
              case Array:
              case Int32Array:
              case Int16Array:
              case Int8Array:
                return Float32Array;

              case Uint8ClampedArray:
              case Uint8Array:
              case Uint16Array:
              case Uint32Array:
              case Float32Array:
              case Float64Array:
                return value.constructor;
            }

            console.warn('Unfamiliar constructor type.  Will go ahead and use, but likley this may result in a transfer of zeros');
            return value.constructor;
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            throw new Error("\"getStringValueHandler\" not implemented on ".concat(this.constructor.name));
          }
        }, {
          key: "getVariablePrecisionString",
          value: function getVariablePrecisionString() {
            return this.kernel.getVariablePrecisionString(this.textureSize || undefined, this.tactic || undefined);
          }
        }, {
          key: "destroy",
          value: function destroy() {}
        }]);

        return WebGLKernelValue;
      }(KernelValue);

      module.exports = {
        WebGLKernelValue: WebGLKernelValue
      };
    }, {
      "../../kernel-value": 35
    }],
    57: [function (require, module, exports) {
      var _require137 = require('../../../utils'),
          utils = _require137.utils;

      var _require138 = require('./index'),
          WebGLKernelValue = _require138.WebGLKernelValue;

      var WebGLKernelValueInteger =
      /*#__PURE__*/
      function (_WebGLKernelValue4) {
        _inherits(WebGLKernelValueInteger, _WebGLKernelValue4);

        function WebGLKernelValueInteger(value, settings) {
          var _this29;

          _classCallCheck(this, WebGLKernelValueInteger);

          _this29 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueInteger).call(this, value, settings));
          _this29.uploadValue = value;
          return _this29;
        }

        _createClass(WebGLKernelValueInteger, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const int ".concat(this.id, " = ").concat(parseInt(value), ";\n");
            }

            return "uniform int ".concat(this.id, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1i(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueInteger;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueInteger: WebGLKernelValueInteger
      };
    }, {
      "../../../utils": 114,
      "./index": 56
    }],
    58: [function (require, module, exports) {
      var _require139 = require('../../../utils'),
          utils = _require139.utils;

      var _require140 = require('./array'),
          WebGLKernelArray = _require140.WebGLKernelArray;

      var WebGLKernelValueMemoryOptimizedNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelArray2) {
        _inherits(WebGLKernelValueMemoryOptimizedNumberTexture, _WebGLKernelArray2);

        function WebGLKernelValueMemoryOptimizedNumberTexture(value, settings) {
          var _this30;

          _classCallCheck(this, WebGLKernelValueMemoryOptimizedNumberTexture);

          _this30 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueMemoryOptimizedNumberTexture).call(this, value, settings));

          var _value$size3 = _slicedToArray(value.size, 2),
              width = _value$size3[0],
              height = _value$size3[1];

          _this30.checkSize(width, height);

          _this30.dimensions = value.dimensions;
          _this30.textureSize = value.size;
          _this30.uploadValue = value.texture;
          _this30.forceUploadEachRun = true;
          return _this30;
        }

        _createClass(WebGLKernelValueMemoryOptimizedNumberTexture, [{
          key: "setup",
          value: function setup() {
            this.setupTexture();
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ".texture;\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputTexture) {
            if (inputTexture.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(inputTexture.constructor);
              return;
            }

            if (this.checkContext && inputTexture.context !== this.context) {
              throw new Error("Value ".concat(this.name, " (").concat(this.type, ") must be from same context"));
            }

            var gl = this.context,
                kernel = this.kernel;

            if (kernel.pipeline) {
              kernel.updateTextureArgumentRefs(this, inputTexture);
            }

            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueMemoryOptimizedNumberTexture;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueMemoryOptimizedNumberTexture: WebGLKernelValueMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    59: [function (require, module, exports) {
      var _require141 = require('../../../utils'),
          utils = _require141.utils;

      var _require142 = require('./array'),
          WebGLKernelArray = _require142.WebGLKernelArray;

      var WebGLKernelValueNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelArray3) {
        _inherits(WebGLKernelValueNumberTexture, _WebGLKernelArray3);

        function WebGLKernelValueNumberTexture(value, settings) {
          var _this31;

          _classCallCheck(this, WebGLKernelValueNumberTexture);

          _this31 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueNumberTexture).call(this, value, settings));

          var _value$size4 = _slicedToArray(value.size, 2),
              width = _value$size4[0],
              height = _value$size4[1];

          _this31.checkSize(width, height);

          var textureSize = value.size,
              dimensions = value.dimensions;
          _this31.bitRatio = _this31.getBitRatio(value);
          _this31.dimensions = dimensions;
          _this31.textureSize = textureSize;
          _this31.uploadValue = value.texture;
          _this31.forceUploadEachRun = true;
          return _this31;
        }

        _createClass(WebGLKernelValueNumberTexture, [{
          key: "setup",
          value: function setup() {
            this.setupTexture();
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ".texture;\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(inputTexture) {
            if (inputTexture.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(inputTexture.constructor);
              return;
            }

            if (this.checkContext && inputTexture.context !== this.context) {
              throw new Error("Value ".concat(this.name, " (").concat(this.type, ") must be from same context"));
            }

            var kernel = this.kernel,
                gl = this.context;

            if (kernel.pipeline) {
              kernel.updateTextureArgumentRefs(this, inputTexture);
            }

            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.uploadValue = inputTexture.texture);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueNumberTexture;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueNumberTexture: WebGLKernelValueNumberTexture
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    60: [function (require, module, exports) {
      var _require143 = require('../../../utils'),
          utils = _require143.utils;

      var _require144 = require('./array'),
          WebGLKernelArray = _require144.WebGLKernelArray;

      var WebGLKernelValueSingleArray =
      /*#__PURE__*/
      function (_WebGLKernelArray4) {
        _inherits(WebGLKernelValueSingleArray, _WebGLKernelArray4);

        function WebGLKernelValueSingleArray(value, settings) {
          var _this32;

          _classCallCheck(this, WebGLKernelValueSingleArray);

          _this32 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray).call(this, value, settings));
          _this32.bitRatio = 4;
          _this32.dimensions = utils.getDimensions(value, true);
          _this32.textureSize = utils.getMemoryOptimizedFloatTextureSize(_this32.dimensions, _this32.bitRatio);
          _this32.uploadArrayLength = _this32.textureSize[0] * _this32.textureSize[1] * _this32.bitRatio;

          _this32.checkSize(_this32.textureSize[0], _this32.textureSize[1]);

          _this32.uploadValue = new Float32Array(_this32.uploadArrayLength);
          return _this32;
        }

        _createClass(WebGLKernelValueSingleArray, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueSingleArray: WebGLKernelValueSingleArray
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    61: [function (require, module, exports) {
      var _require145 = require('../../../utils'),
          utils = _require145.utils;

      var _require146 = require('./array'),
          WebGLKernelArray = _require146.WebGLKernelArray;

      var WebGLKernelValueSingleArray1DI =
      /*#__PURE__*/
      function (_WebGLKernelArray5) {
        _inherits(WebGLKernelValueSingleArray1DI, _WebGLKernelArray5);

        function WebGLKernelValueSingleArray1DI(value, settings) {
          var _this33;

          _classCallCheck(this, WebGLKernelValueSingleArray1DI);

          _this33 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray1DI).call(this, value, settings));
          _this33.bitRatio = 4;

          _this33.setShape(value);

          return _this33;
        }

        _createClass(WebGLKernelValueSingleArray1DI, [{
          key: "setShape",
          value: function setShape(value) {
            var valueDimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
            this.dimensions = new Int32Array([valueDimensions[1], 1, 1]);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flatten2dArrayTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray1DI;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueSingleArray1DI: WebGLKernelValueSingleArray1DI
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    62: [function (require, module, exports) {
      var _require147 = require('../../../utils'),
          utils = _require147.utils;

      var _require148 = require('./index'),
          WebGLKernelValue = _require148.WebGLKernelValue;

      var WebGLKernelValueSingleArray2 =
      /*#__PURE__*/
      function (_WebGLKernelValue5) {
        _inherits(WebGLKernelValueSingleArray2, _WebGLKernelValue5);

        function WebGLKernelValueSingleArray2(value, settings) {
          var _this34;

          _classCallCheck(this, WebGLKernelValueSingleArray2);

          _this34 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray2).call(this, value, settings));
          _this34.uploadValue = value;
          return _this34;
        }

        _createClass(WebGLKernelValueSingleArray2, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const vec2 ".concat(this.id, " = vec2(").concat(value[0], ",").concat(value[1], ");\n");
            }

            return "uniform vec2 ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            if (this.origin === 'constants') return '';
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform2fv(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueSingleArray2;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleArray2: WebGLKernelValueSingleArray2
      };
    }, {
      "../../../utils": 114,
      "./index": 56
    }],
    63: [function (require, module, exports) {
      var _require149 = require('../../../utils'),
          utils = _require149.utils;

      var _require150 = require('./array'),
          WebGLKernelArray = _require150.WebGLKernelArray;

      var WebGLKernelValueSingleArray2DI =
      /*#__PURE__*/
      function (_WebGLKernelArray6) {
        _inherits(WebGLKernelValueSingleArray2DI, _WebGLKernelArray6);

        function WebGLKernelValueSingleArray2DI(value, settings) {
          var _this35;

          _classCallCheck(this, WebGLKernelValueSingleArray2DI);

          _this35 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray2DI).call(this, value, settings));
          _this35.bitRatio = 4;

          _this35.setShape(value);

          return _this35;
        }

        _createClass(WebGLKernelValueSingleArray2DI, [{
          key: "setShape",
          value: function setShape(value) {
            var valueDimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
            this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], 1]);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flatten3dArrayTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray2DI;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueSingleArray2DI: WebGLKernelValueSingleArray2DI
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    64: [function (require, module, exports) {
      var _require151 = require('../../../utils'),
          utils = _require151.utils;

      var _require152 = require('./index'),
          WebGLKernelValue = _require152.WebGLKernelValue;

      var WebGLKernelValueSingleArray3 =
      /*#__PURE__*/
      function (_WebGLKernelValue6) {
        _inherits(WebGLKernelValueSingleArray3, _WebGLKernelValue6);

        function WebGLKernelValueSingleArray3(value, settings) {
          var _this36;

          _classCallCheck(this, WebGLKernelValueSingleArray3);

          _this36 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray3).call(this, value, settings));
          _this36.uploadValue = value;
          return _this36;
        }

        _createClass(WebGLKernelValueSingleArray3, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const vec3 ".concat(this.id, " = vec3(").concat(value[0], ",").concat(value[1], ",").concat(value[2], ");\n");
            }

            return "uniform vec3 ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            if (this.origin === 'constants') return '';
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform3fv(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueSingleArray3;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleArray3: WebGLKernelValueSingleArray3
      };
    }, {
      "../../../utils": 114,
      "./index": 56
    }],
    65: [function (require, module, exports) {
      var _require153 = require('../../../utils'),
          utils = _require153.utils;

      var _require154 = require('./array'),
          WebGLKernelArray = _require154.WebGLKernelArray;

      var WebGLKernelValueSingleArray3DI =
      /*#__PURE__*/
      function (_WebGLKernelArray7) {
        _inherits(WebGLKernelValueSingleArray3DI, _WebGLKernelArray7);

        function WebGLKernelValueSingleArray3DI(value, settings) {
          var _this37;

          _classCallCheck(this, WebGLKernelValueSingleArray3DI);

          _this37 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray3DI).call(this, value, settings));
          _this37.bitRatio = 4;

          _this37.setShape(value);

          return _this37;
        }

        _createClass(WebGLKernelValueSingleArray3DI, [{
          key: "setShape",
          value: function setShape(value) {
            var valueDimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(valueDimensions, this.bitRatio);
            this.dimensions = new Int32Array([valueDimensions[1], valueDimensions[2], valueDimensions[3]]);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ", uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flatten4dArrayTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleArray3DI;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueSingleArray3DI: WebGLKernelValueSingleArray3DI
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    66: [function (require, module, exports) {
      var _require155 = require('../../../utils'),
          utils = _require155.utils;

      var _require156 = require('./index'),
          WebGLKernelValue = _require156.WebGLKernelValue;

      var WebGLKernelValueSingleArray4 =
      /*#__PURE__*/
      function (_WebGLKernelValue7) {
        _inherits(WebGLKernelValueSingleArray4, _WebGLKernelValue7);

        function WebGLKernelValueSingleArray4(value, settings) {
          var _this38;

          _classCallCheck(this, WebGLKernelValueSingleArray4);

          _this38 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleArray4).call(this, value, settings));
          _this38.uploadValue = value;
          return _this38;
        }

        _createClass(WebGLKernelValueSingleArray4, [{
          key: "getSource",
          value: function getSource(value) {
            if (this.origin === 'constants') {
              return "const vec4 ".concat(this.id, " = vec4(").concat(value[0], ",").concat(value[1], ",").concat(value[2], ",").concat(value[3], ");\n");
            }

            return "uniform vec4 ".concat(this.id, ";\n");
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            if (this.origin === 'constants') return '';
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform4fv(this.id, this.uploadValue = value);
          }
        }]);

        return WebGLKernelValueSingleArray4;
      }(WebGLKernelValue);

      module.exports = {
        WebGLKernelValueSingleArray4: WebGLKernelValueSingleArray4
      };
    }, {
      "../../../utils": 114,
      "./index": 56
    }],
    67: [function (require, module, exports) {
      var _require157 = require('../../../utils'),
          utils = _require157.utils;

      var _require158 = require('./array'),
          WebGLKernelArray = _require158.WebGLKernelArray;

      var WebGLKernelValueSingleInput =
      /*#__PURE__*/
      function (_WebGLKernelArray8) {
        _inherits(WebGLKernelValueSingleInput, _WebGLKernelArray8);

        function WebGLKernelValueSingleInput(value, settings) {
          var _this39;

          _classCallCheck(this, WebGLKernelValueSingleInput);

          _this39 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueSingleInput).call(this, value, settings));
          _this39.bitRatio = 4;

          var _value$size5 = _slicedToArray(value.size, 3),
              w = _value$size5[0],
              h = _value$size5[1],
              d = _value$size5[2];

          _this39.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
          _this39.textureSize = utils.getMemoryOptimizedFloatTextureSize(_this39.dimensions, _this39.bitRatio);
          _this39.uploadArrayLength = _this39.textureSize[0] * _this39.textureSize[1] * _this39.bitRatio;

          _this39.checkSize(_this39.textureSize[0], _this39.textureSize[1]);

          _this39.uploadValue = new Float32Array(_this39.uploadArrayLength);
          return _this39;
        }

        _createClass(WebGLKernelValueSingleInput, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const uploadValue_".concat(this.name, " = new Float32Array(").concat(this.uploadArrayLength, ")"), "flattenTo(".concat(this.varName, ".value, uploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(input) {
            if (input.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(input.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(input.value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueSingleInput;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueSingleInput: WebGLKernelValueSingleInput
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    68: [function (require, module, exports) {
      var _require159 = require('../../../utils'),
          utils = _require159.utils;

      var _require160 = require('./array'),
          WebGLKernelArray = _require160.WebGLKernelArray;

      var WebGLKernelValueUnsignedArray =
      /*#__PURE__*/
      function (_WebGLKernelArray9) {
        _inherits(WebGLKernelValueUnsignedArray, _WebGLKernelArray9);

        function WebGLKernelValueUnsignedArray(value, settings) {
          var _this40;

          _classCallCheck(this, WebGLKernelValueUnsignedArray);

          _this40 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueUnsignedArray).call(this, value, settings));
          _this40.bitRatio = _this40.getBitRatio(value);
          _this40.dimensions = utils.getDimensions(value, true);
          _this40.textureSize = utils.getMemoryOptimizedPackedTextureSize(_this40.dimensions, _this40.bitRatio);
          _this40.uploadArrayLength = _this40.textureSize[0] * _this40.textureSize[1] * (4 / _this40.bitRatio);

          _this40.checkSize(_this40.textureSize[0], _this40.textureSize[1]);

          _this40.TranserArrayType = _this40.getTransferArrayType(value);
          _this40.preUploadValue = new _this40.TranserArrayType(_this40.uploadArrayLength);
          _this40.uploadValue = new Uint8Array(_this40.preUploadValue.buffer);
          return _this40;
        }

        _createClass(WebGLKernelValueUnsignedArray, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const preUploadValue_".concat(this.name, " = new ").concat(this.TranserArrayType.name, "(").concat(this.uploadArrayLength, ")"), "const uploadValue_".concat(this.name, " = new Uint8Array(preUploadValue_").concat(this.name, ".buffer)"), "flattenTo(".concat(this.varName, ", preUploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.preUploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueUnsignedArray;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueUnsignedArray: WebGLKernelValueUnsignedArray
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    69: [function (require, module, exports) {
      var _require161 = require('../../../utils'),
          utils = _require161.utils;

      var _require162 = require('./array'),
          WebGLKernelArray = _require162.WebGLKernelArray;

      var WebGLKernelValueUnsignedInput =
      /*#__PURE__*/
      function (_WebGLKernelArray10) {
        _inherits(WebGLKernelValueUnsignedInput, _WebGLKernelArray10);

        function WebGLKernelValueUnsignedInput(value, settings) {
          var _this41;

          _classCallCheck(this, WebGLKernelValueUnsignedInput);

          _this41 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernelValueUnsignedInput).call(this, value, settings));
          _this41.bitRatio = _this41.getBitRatio(value);

          var _value$size6 = _slicedToArray(value.size, 3),
              w = _value$size6[0],
              h = _value$size6[1],
              d = _value$size6[2];

          _this41.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
          _this41.textureSize = utils.getMemoryOptimizedPackedTextureSize(_this41.dimensions, _this41.bitRatio);
          _this41.uploadArrayLength = _this41.textureSize[0] * _this41.textureSize[1] * (4 / _this41.bitRatio);

          _this41.checkSize(_this41.textureSize[0], _this41.textureSize[1]);

          _this41.TranserArrayType = _this41.getTransferArrayType(value.value);
          _this41.preUploadValue = new _this41.TranserArrayType(_this41.uploadArrayLength);
          _this41.uploadValue = new Uint8Array(_this41.preUploadValue.buffer);
          return _this41;
        }

        _createClass(WebGLKernelValueUnsignedInput, [{
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return utils.linesToString(["const preUploadValue_".concat(this.name, " = new ").concat(this.TranserArrayType.name, "(").concat(this.uploadArrayLength, ")"), "const uploadValue_".concat(this.name, " = new Uint8Array(preUploadValue_").concat(this.name, ".buffer)"), "flattenTo(".concat(this.varName, ".value, preUploadValue_").concat(this.name, ")")]);
          }
        }, {
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "ivec2 ".concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "ivec3 ".concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(input) {
            if (input.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(input.value, this.preUploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGLKernelValueUnsignedInput;
      }(WebGLKernelArray);

      module.exports = {
        WebGLKernelValueUnsignedInput: WebGLKernelValueUnsignedInput
      };
    }, {
      "../../../utils": 114,
      "./array": 40
    }],
    70: [function (require, module, exports) {
      var _require163 = require('../gl/kernel'),
          GLKernel = _require163.GLKernel;

      var _require164 = require('../function-builder'),
          FunctionBuilder = _require164.FunctionBuilder;

      var _require165 = require('./function-node'),
          WebGLFunctionNode = _require165.WebGLFunctionNode;

      var _require166 = require('../../utils'),
          utils = _require166.utils;

      var mrud = require('../../plugins/math-random-uniformly-distributed');

      var _require167 = require('./fragment-shader'),
          fragmentShader = _require167.fragmentShader;

      var _require168 = require('./vertex-shader'),
          vertexShader = _require168.vertexShader;

      var _require169 = require('../gl/kernel-string'),
          glKernelString = _require169.glKernelString;

      var _require170 = require('./kernel-value-maps'),
          _lookupKernelValueType = _require170.lookupKernelValueType;

      var isSupported = null;
      var testCanvas = null;
      var testContext = null;
      var testExtensions = null;
      var features = null;
      var plugins = [mrud];
      var canvases = [];
      var maxTexSizes = {};

      var WebGLKernel =
      /*#__PURE__*/
      function (_GLKernel) {
        _inherits(WebGLKernel, _GLKernel);

        _createClass(WebGLKernel, null, [{
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            if (typeof document !== 'undefined') {
              testCanvas = document.createElement('canvas');
            } else if (typeof OffscreenCanvas !== 'undefined') {
              testCanvas = new OffscreenCanvas(0, 0);
            }

            if (!testCanvas) return;
            testContext = testCanvas.getContext('webgl') || testCanvas.getContext('experimental-webgl');
            if (!testContext || !testContext.getExtension) return;
            testExtensions = {
              OES_texture_float: testContext.getExtension('OES_texture_float'),
              OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear'),
              OES_element_index_uint: testContext.getExtension('OES_element_index_uint'),
              WEBGL_draw_buffers: testContext.getExtension('WEBGL_draw_buffers')
            };
            features = this.getFeatures();
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            if (typeof WebGLRenderingContext !== 'undefined') {
              return context instanceof WebGLRenderingContext;
            }

            return false;
          }
        }, {
          key: "getIsTextureFloat",
          value: function getIsTextureFloat() {
            return Boolean(testExtensions.OES_texture_float);
          }
        }, {
          key: "getIsDrawBuffers",
          value: function getIsDrawBuffers() {
            return Boolean(testExtensions.WEBGL_draw_buffers);
          }
        }, {
          key: "getChannelCount",
          value: function getChannelCount() {
            return testExtensions.WEBGL_draw_buffers ? testContext.getParameter(testExtensions.WEBGL_draw_buffers.MAX_DRAW_BUFFERS_WEBGL) : 1;
          }
        }, {
          key: "getMaxTextureSize",
          value: function getMaxTextureSize() {
            return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
          }
        }, {
          key: "lookupKernelValueType",
          value: function lookupKernelValueType(type, dynamic, precision, value) {
            return _lookupKernelValueType(type, dynamic, precision, value);
          }
        }, {
          key: "isSupported",
          get: function get() {
            if (isSupported !== null) {
              return isSupported;
            }

            this.setupFeatureChecks();
            isSupported = this.isContextMatch(testContext);
            return isSupported;
          }
        }, {
          key: "testCanvas",
          get: function get() {
            return testCanvas;
          }
        }, {
          key: "testContext",
          get: function get() {
            return testContext;
          }
        }, {
          key: "features",
          get: function get() {
            return features;
          }
        }, {
          key: "fragmentShader",
          get: function get() {
            return fragmentShader;
          }
        }, {
          key: "vertexShader",
          get: function get() {
            return vertexShader;
          }
        }]);

        function WebGLKernel(source, settings) {
          var _this42;

          _classCallCheck(this, WebGLKernel);

          _this42 = _possibleConstructorReturn(this, _getPrototypeOf(WebGLKernel).call(this, source, settings));
          _this42.program = null;
          _this42.pipeline = settings.pipeline;
          _this42.endianness = utils.systemEndianness();
          _this42.extensions = {};
          _this42.argumentTextureCount = 0;
          _this42.constantTextureCount = 0;
          _this42.fragShader = null;
          _this42.vertShader = null;
          _this42.drawBuffersMap = null;
          _this42.maxTexSize = null;
          _this42.onRequestSwitchKernel = null;
          _this42.removeIstanbulCoverage = true;

          _this42.mergeSettings(source.settings || settings);

          _this42.threadDim = null;
          _this42.framebuffer = null;
          _this42.buffer = null;
          _this42.texture = null;
          _this42.mappedTextures = null;
          _this42.textureCache = [];
          _this42.programUniformLocationCache = {};
          _this42.uniform1fCache = {};
          _this42.uniform1iCache = {};
          _this42.uniform2fCache = {};
          _this42.uniform2fvCache = {};
          _this42.uniform2ivCache = {};
          _this42.uniform3fvCache = {};
          _this42.uniform3ivCache = {};
          _this42.uniform4fvCache = {};
          _this42.uniform4ivCache = {};
          return _this42;
        }

        _createClass(WebGLKernel, [{
          key: "initCanvas",
          value: function initCanvas() {
            if (typeof document !== 'undefined') {
              var canvas = document.createElement('canvas');
              canvas.width = 2;
              canvas.height = 2;
              return canvas;
            } else if (typeof OffscreenCanvas !== 'undefined') {
              return new OffscreenCanvas(0, 0);
            }
          }
        }, {
          key: "initContext",
          value: function initContext() {
            var settings = {
              alpha: false,
              depth: false,
              antialias: false
            };
            return this.canvas.getContext('webgl', settings) || this.canvas.getContext('experimental-webgl', settings);
          }
        }, {
          key: "initPlugins",
          value: function initPlugins(settings) {
            var pluginsToUse = [];
            var source = this.source;

            if (typeof source === 'string') {
              for (var i = 0; i < plugins.length; i++) {
                var plugin = plugins[i];

                if (source.match(plugin.functionMatch)) {
                  pluginsToUse.push(plugin);
                }
              }
            } else if (_typeof(source) === 'object') {
              if (settings.pluginNames) {
                var _loop = function _loop(_i18) {
                  var plugin = plugins[_i18];
                  var usePlugin = settings.pluginNames.some(function (pluginName) {
                    return pluginName === plugin.name;
                  });

                  if (usePlugin) {
                    pluginsToUse.push(plugin);
                  }
                };

                for (var _i18 = 0; _i18 < plugins.length; _i18++) {
                  _loop(_i18);
                }
              }
            }

            return pluginsToUse;
          }
        }, {
          key: "initExtensions",
          value: function initExtensions() {
            this.extensions = {
              OES_texture_float: this.context.getExtension('OES_texture_float'),
              OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear'),
              OES_element_index_uint: this.context.getExtension('OES_element_index_uint'),
              WEBGL_draw_buffers: this.context.getExtension('WEBGL_draw_buffers'),
              WEBGL_color_buffer_float: this.context.getExtension('WEBGL_color_buffer_float')
            };
          }
        }, {
          key: "validateSettings",
          value: function validateSettings(args) {
            if (!this.validate) {
              this.texSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, this.output);
              return;
            }

            var features = this.constructor.features;

            if (this.optimizeFloatMemory === true && !features.isTextureFloat) {
              throw new Error('Float textures are not supported');
            } else if (this.precision === 'single' && !features.isFloatRead) {
              throw new Error('Single precision not supported');
            } else if (!this.graphical && this.precision === null && features.isTextureFloat) {
              this.precision = features.isFloatRead ? 'single' : 'unsigned';
            }

            if (this.subKernels && this.subKernels.length > 0 && !this.extensions.WEBGL_draw_buffers) {
              throw new Error('could not instantiate draw buffers extension');
            }

            if (this.fixIntegerDivisionAccuracy === null) {
              this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;
            } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {
              this.fixIntegerDivisionAccuracy = false;
            }

            this.checkOutput();

            if (!this.output || this.output.length === 0) {
              if (args.length !== 1) {
                throw new Error('Auto output only supported for kernels with only one input');
              }

              var argType = utils.getVariableType(args[0], this.strictIntegers);

              switch (argType) {
                case 'Array':
                  this.output = utils.getDimensions(argType);
                  break;

                case 'NumberTexture':
                case 'MemoryOptimizedNumberTexture':
                case 'ArrayTexture(1)':
                case 'ArrayTexture(2)':
                case 'ArrayTexture(3)':
                case 'ArrayTexture(4)':
                  this.output = args[0].output;
                  break;

                default:
                  throw new Error('Auto output not supported for input type: ' + argType);
              }
            }

            if (this.graphical) {
              if (this.output.length !== 2) {
                throw new Error('Output must have 2 dimensions on graphical mode');
              }

              if (this.precision === 'precision') {
                this.precision = 'unsigned';
                console.warn('Cannot use graphical mode and single precision at the same time');
              }

              this.texSize = utils.clone(this.output);
              return;
            } else if (this.precision === null && features.isTextureFloat) {
              this.precision = 'single';
            }

            this.texSize = utils.getKernelTextureSize({
              optimizeFloatMemory: this.optimizeFloatMemory,
              precision: this.precision
            }, this.output);
            this.checkTextureSize();
          }
        }, {
          key: "updateMaxTexSize",
          value: function updateMaxTexSize() {
            var texSize = this.texSize,
                canvas = this.canvas;

            if (this.maxTexSize === null) {
              var canvasIndex = canvases.indexOf(canvas);

              if (canvasIndex === -1) {
                canvasIndex = canvases.length;
                canvases.push(canvas);
                maxTexSizes[canvasIndex] = [texSize[0], texSize[1]];
              }

              this.maxTexSize = maxTexSizes[canvasIndex];
            }

            if (this.maxTexSize[0] < texSize[0]) {
              this.maxTexSize[0] = texSize[0];
            }

            if (this.maxTexSize[1] < texSize[1]) {
              this.maxTexSize[1] = texSize[1];
            }
          }
        }, {
          key: "setupArguments",
          value: function setupArguments(args) {
            var _this43 = this;

            this.kernelArguments = [];
            this.argumentTextureCount = 0;
            var needsArgumentTypes = this.argumentTypes === null;

            if (needsArgumentTypes) {
              this.argumentTypes = [];
            }

            this.argumentSizes = [];
            this.argumentBitRatios = [];

            if (args.length < this.argumentNames.length) {
              throw new Error('not enough arguments for kernel');
            } else if (args.length > this.argumentNames.length) {
              throw new Error('too many arguments for kernel');
            }

            var gl = this.context;
            var textureIndexes = 0;

            var onRequestTexture = function onRequestTexture() {
              return _this43.createTexture();
            };

            var onRequestIndex = function onRequestIndex() {
              return textureIndexes++;
            };

            var onUpdateValueMismatch = function onUpdateValueMismatch(constructor) {
              _this43.switchKernels({
                type: 'argumentMismatch',
                needed: constructor
              });
            };

            var onRequestContextHandle = function onRequestContextHandle() {
              return gl.TEXTURE0 + _this43.constantTextureCount + _this43.argumentTextureCount++;
            };

            for (var index = 0; index < args.length; index++) {
              var _value = args[index];
              var _name8 = this.argumentNames[index];
              var type = void 0;

              if (needsArgumentTypes) {
                type = utils.getVariableType(_value, this.strictIntegers);
                this.argumentTypes.push(type);
              } else {
                type = this.argumentTypes[index];
              }

              var KernelValue = this.constructor.lookupKernelValueType(type, this.dynamicArguments ? 'dynamic' : 'static', this.precision, args[index]);

              if (KernelValue === null) {
                return this.requestFallback(args);
              }

              var kernelArgument = new KernelValue(_value, {
                name: _name8,
                type: type,
                tactic: this.tactic,
                origin: 'user',
                context: gl,
                checkContext: this.checkContext,
                kernel: this,
                strictIntegers: this.strictIntegers,
                onRequestTexture: onRequestTexture,
                onRequestIndex: onRequestIndex,
                onUpdateValueMismatch: onUpdateValueMismatch,
                onRequestContextHandle: onRequestContextHandle
              });
              this.kernelArguments.push(kernelArgument);
              kernelArgument.setup();
              this.argumentSizes.push(kernelArgument.textureSize);
              this.argumentBitRatios[index] = kernelArgument.bitRatio;
            }
          }
        }, {
          key: "createTexture",
          value: function createTexture() {
            var texture = this.context.createTexture();
            this.textureCache.push(texture);
            return texture;
          }
        }, {
          key: "setupConstants",
          value: function setupConstants(args) {
            var _this44 = this;

            var gl = this.context;
            this.kernelConstants = [];
            this.forceUploadKernelConstants = [];
            var needsConstantTypes = this.constantTypes === null;

            if (needsConstantTypes) {
              this.constantTypes = {};
            }

            this.constantBitRatios = {};
            var textureIndexes = 0;

            for (var _name9 in this.constants) {
              var _value2 = this.constants[_name9];
              var type = void 0;

              if (needsConstantTypes) {
                type = utils.getVariableType(_value2, this.strictIntegers);
                this.constantTypes[_name9] = type;
              } else {
                type = this.constantTypes[_name9];
              }

              var KernelValue = this.constructor.lookupKernelValueType(type, 'static', this.precision, _value2);

              if (KernelValue === null) {
                return this.requestFallback(args);
              }

              var kernelValue = new KernelValue(_value2, {
                name: _name9,
                type: type,
                tactic: this.tactic,
                origin: 'constants',
                context: this.context,
                checkContext: this.checkContext,
                kernel: this,
                strictIntegers: this.strictIntegers,
                onRequestTexture: function onRequestTexture() {
                  return _this44.createTexture();
                },
                onRequestIndex: function onRequestIndex() {
                  return textureIndexes++;
                },
                onRequestContextHandle: function onRequestContextHandle() {
                  return gl.TEXTURE0 + _this44.constantTextureCount++;
                }
              });
              this.constantBitRatios[_name9] = kernelValue.bitRatio;
              this.kernelConstants.push(kernelValue);
              kernelValue.setup();

              if (kernelValue.forceUploadEachRun) {
                this.forceUploadKernelConstants.push(kernelValue);
              }
            }
          }
        }, {
          key: "build",
          value: function build() {
            this.initExtensions();
            this.validateSettings(arguments);
            this.setupConstants(arguments);
            if (this.fallbackRequested) return;
            this.setupArguments(arguments);
            if (this.fallbackRequested) return;
            this.updateMaxTexSize();
            this.translateSource();
            var failureResult = this.pickRenderStrategy(arguments);

            if (failureResult) {
              return failureResult;
            }

            var texSize = this.texSize,
                gl = this.context,
                canvas = this.canvas;
            gl.enable(gl.SCISSOR_TEST);

            if (this.pipeline && this.precision === 'single') {
              gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
              canvas.width = this.maxTexSize[0];
              canvas.height = this.maxTexSize[1];
            } else {
              gl.viewport(0, 0, this.maxTexSize[0], this.maxTexSize[1]);
              canvas.width = this.maxTexSize[0];
              canvas.height = this.maxTexSize[1];
            }

            var threadDim = this.threadDim = Array.from(this.output);

            while (threadDim.length < 3) {
              threadDim.push(1);
            }

            var compiledVertexShader = this.getVertexShader(arguments);
            var vertShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertShader, compiledVertexShader);
            gl.compileShader(vertShader);
            this.vertShader = vertShader;
            var compiledFragmentShader = this.getFragmentShader(arguments);
            var fragShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragShader, compiledFragmentShader);
            gl.compileShader(fragShader);
            this.fragShader = fragShader;

            if (this.debug) {
              console.log('GLSL Shader Output:');
              console.log(compiledFragmentShader);
            }

            if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
              throw new Error('Error compiling vertex shader: ' + gl.getShaderInfoLog(vertShader));
            }

            if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
              throw new Error('Error compiling fragment shader: ' + gl.getShaderInfoLog(fragShader));
            }

            var program = this.program = gl.createProgram();
            gl.attachShader(program, vertShader);
            gl.attachShader(program, fragShader);
            gl.linkProgram(program);
            this.framebuffer = gl.createFramebuffer();
            this.framebuffer.width = texSize[0];
            this.framebuffer.height = texSize[1];
            var vertices = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);
            var texCoords = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);
            var texCoordOffset = vertices.byteLength;
            var buffer = this.buffer;

            if (!buffer) {
              buffer = this.buffer = gl.createBuffer();
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
              gl.bufferData(gl.ARRAY_BUFFER, vertices.byteLength + texCoords.byteLength, gl.STATIC_DRAW);
            } else {
              gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            }

            gl.bufferSubData(gl.ARRAY_BUFFER, 0, vertices);
            gl.bufferSubData(gl.ARRAY_BUFFER, texCoordOffset, texCoords);
            var aPosLoc = gl.getAttribLocation(this.program, 'aPos');
            gl.enableVertexAttribArray(aPosLoc);
            gl.vertexAttribPointer(aPosLoc, 2, gl.FLOAT, false, 0, 0);
            var aTexCoordLoc = gl.getAttribLocation(this.program, 'aTexCoord');
            gl.enableVertexAttribArray(aTexCoordLoc);
            gl.vertexAttribPointer(aTexCoordLoc, 2, gl.FLOAT, false, 0, texCoordOffset);
            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);
            var i = 0;
            gl.useProgram(this.program);

            for (var p in this.constants) {
              this.kernelConstants[i++].updateValue(this.constants[p]);
            }

            this._setupOutputTexture();

            if (this.subKernels !== null && this.subKernels.length > 0) {
              this._setupSubOutputTextures();
            }

            this.buildSignature(arguments);
            this.built = true;
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            var functionBuilder = FunctionBuilder.fromKernel(this, WebGLFunctionNode, {
              fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy
            });
            this.translatedSource = functionBuilder.getPrototypeString('kernel');
            this.setupReturnTypes(functionBuilder);
          }
        }, {
          key: "setupReturnTypes",
          value: function setupReturnTypes(functionBuilder) {
            if (!this.graphical && !this.returnType) {
              this.returnType = functionBuilder.getKernelResultType();
            }

            if (this.subKernels && this.subKernels.length > 0) {
              for (var i = 0; i < this.subKernels.length; i++) {
                var subKernel = this.subKernels[i];

                if (!subKernel.returnType) {
                  subKernel.returnType = functionBuilder.getSubKernelResultType(i);
                }
              }
            }
          }
        }, {
          key: "run",
          value: function run() {
            var kernelArguments = this.kernelArguments,
                texSize = this.texSize,
                forceUploadKernelConstants = this.forceUploadKernelConstants,
                gl = this.context;
            gl.useProgram(this.program);
            gl.scissor(0, 0, texSize[0], texSize[1]);

            if (this.dynamicOutput) {
              this.setUniform3iv('uOutputDim', new Int32Array(this.threadDim));
              this.setUniform2iv('uTexSize', texSize);
            }

            this.setUniform2f('ratio', texSize[0] / this.maxTexSize[0], texSize[1] / this.maxTexSize[1]);

            for (var i = 0; i < forceUploadKernelConstants.length; i++) {
              var constant = forceUploadKernelConstants[i];
              constant.updateValue(this.constants[constant.name]);
              if (this.switchingKernels) return;
            }

            for (var _i19 = 0; _i19 < kernelArguments.length; _i19++) {
              kernelArguments[_i19].updateValue(arguments[_i19]);

              if (this.switchingKernels) return;
            }

            if (this.plugins) {
              for (var _i20 = 0; _i20 < this.plugins.length; _i20++) {
                var plugin = this.plugins[_i20];

                if (plugin.onBeforeRun) {
                  plugin.onBeforeRun(this);
                }
              }
            }

            if (this.graphical) {
              if (this.pipeline) {
                gl.bindRenderbuffer(gl.RENDERBUFFER, null);
                gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);

                this._setupOutputTexture();

                gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
                return this.texture.clone();
              }

              gl.bindRenderbuffer(gl.RENDERBUFFER, null);
              gl.bindFramebuffer(gl.FRAMEBUFFER, null);
              gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
              return;
            }

            gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);

            this._setupOutputTexture();

            if (this.subKernels !== null) {
              this._setupSubOutputTextures();

              this.drawBuffers();
            }

            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
          }
        }, {
          key: "drawBuffers",
          value: function drawBuffers() {
            this.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(this.drawBuffersMap);
          }
        }, {
          key: "getInternalFormat",
          value: function getInternalFormat() {
            return this.context.RGBA;
          }
        }, {
          key: "getTextureFormat",
          value: function getTextureFormat() {
            var gl = this.context;

            switch (this.getInternalFormat()) {
              case gl.RGBA:
                return gl.RGBA;

              default:
                throw new Error('Unknown internal format');
            }
          }
        }, {
          key: "_setupOutputTexture",
          value: function _setupOutputTexture() {
            var gl = this.context,
                texSize = this.texSize;

            if (this.texture) {
              this.texture.beforeMutate();
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
              return;
            }

            var texture = this.createTexture();
            gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            var format = this.getInternalFormat();

            if (this.precision === 'single') {
              gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
            } else {
              gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);
            }

            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            this.texture = new this.TextureConstructor({
              texture: texture,
              size: texSize,
              dimensions: this.threadDim,
              output: this.output,
              context: this.context,
              internalFormat: this.getInternalFormat(),
              textureFormat: this.getTextureFormat(),
              kernel: this
            });
          }
        }, {
          key: "_setupSubOutputTextures",
          value: function _setupSubOutputTextures() {
            var gl = this.context;

            if (this.mappedTextures && this.mappedTextures.length > 0) {
              for (var i = 0; i < this.mappedTextures.length; i++) {
                var mappedTexture = this.mappedTextures[i];
                mappedTexture.beforeMutate();
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, mappedTexture.texture, 0);
              }

              return;
            }

            var texSize = this.texSize;
            this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];
            this.mappedTextures = [];

            for (var _i21 = 0; _i21 < this.subKernels.length; _i21++) {
              var texture = this.createTexture();
              this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + _i21 + 1);
              gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + _i21);
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);

              if (this.precision === 'single') {
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.FLOAT, null);
              } else {
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
              }

              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i21 + 1, gl.TEXTURE_2D, texture, 0);
              this.mappedTextures.push(new this.TextureConstructor({
                texture: texture,
                size: texSize,
                dimensions: this.threadDim,
                output: this.output,
                context: this.context,
                internalFormat: this.getInternalFormat(),
                textureFormat: this.getTextureFormat(),
                kernel: this
              }));
            }
          }
        }, {
          key: "setUniform1f",
          value: function setUniform1f(name, value) {
            if (this.uniform1fCache.hasOwnProperty(name)) {
              var cache = this.uniform1fCache[name];

              if (value === cache) {
                return;
              }
            }

            this.uniform1fCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform1f(loc, value);
          }
        }, {
          key: "setUniform1i",
          value: function setUniform1i(name, value) {
            if (this.uniform1iCache.hasOwnProperty(name)) {
              var cache = this.uniform1iCache[name];

              if (value === cache) {
                return;
              }
            }

            this.uniform1iCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform1i(loc, value);
          }
        }, {
          key: "setUniform2f",
          value: function setUniform2f(name, value1, value2) {
            if (this.uniform2fCache.hasOwnProperty(name)) {
              var cache = this.uniform2fCache[name];

              if (value1 === cache[0] && value2 === cache[1]) {
                return;
              }
            }

            this.uniform2fCache[name] = [value1, value2];
            var loc = this.getUniformLocation(name);
            this.context.uniform2f(loc, value1, value2);
          }
        }, {
          key: "setUniform2fv",
          value: function setUniform2fv(name, value) {
            if (this.uniform2fvCache.hasOwnProperty(name)) {
              var cache = this.uniform2fvCache[name];

              if (value[0] === cache[0] && value[1] === cache[1]) {
                return;
              }
            }

            this.uniform2fvCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform2fv(loc, value);
          }
        }, {
          key: "setUniform2iv",
          value: function setUniform2iv(name, value) {
            if (this.uniform2ivCache.hasOwnProperty(name)) {
              var cache = this.uniform2ivCache[name];

              if (value[0] === cache[0] && value[1] === cache[1]) {
                return;
              }
            }

            this.uniform2ivCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform2iv(loc, value);
          }
        }, {
          key: "setUniform3fv",
          value: function setUniform3fv(name, value) {
            if (this.uniform3fvCache.hasOwnProperty(name)) {
              var cache = this.uniform3fvCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2]) {
                return;
              }
            }

            this.uniform3fvCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform3fv(loc, value);
          }
        }, {
          key: "setUniform3iv",
          value: function setUniform3iv(name, value) {
            if (this.uniform3ivCache.hasOwnProperty(name)) {
              var cache = this.uniform3ivCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2]) {
                return;
              }
            }

            this.uniform3ivCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform3iv(loc, value);
          }
        }, {
          key: "setUniform4fv",
          value: function setUniform4fv(name, value) {
            if (this.uniform4fvCache.hasOwnProperty(name)) {
              var cache = this.uniform4fvCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2] && value[3] === cache[3]) {
                return;
              }
            }

            this.uniform4fvCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform4fv(loc, value);
          }
        }, {
          key: "setUniform4iv",
          value: function setUniform4iv(name, value) {
            if (this.uniform4ivCache.hasOwnProperty(name)) {
              var cache = this.uniform4ivCache[name];

              if (value[0] === cache[0] && value[1] === cache[1] && value[2] === cache[2] && value[3] === cache[3]) {
                return;
              }
            }

            this.uniform4ivCache[name] = value;
            var loc = this.getUniformLocation(name);
            this.context.uniform4iv(loc, value);
          }
        }, {
          key: "getUniformLocation",
          value: function getUniformLocation(name) {
            if (this.programUniformLocationCache.hasOwnProperty(name)) {
              return this.programUniformLocationCache[name];
            }

            return this.programUniformLocationCache[name] = this.context.getUniformLocation(this.program, name);
          }
        }, {
          key: "_getFragShaderArtifactMap",
          value: function _getFragShaderArtifactMap(args) {
            return {
              HEADER: this._getHeaderString(),
              LOOP_MAX: this._getLoopMaxString(),
              PLUGINS: this._getPluginsString(),
              CONSTANTS: this._getConstantsString(),
              DECODE32_ENDIANNESS: this._getDecode32EndiannessString(),
              ENCODE32_ENDIANNESS: this._getEncode32EndiannessString(),
              DIVIDE_WITH_INTEGER_CHECK: this._getDivideWithIntegerCheckString(),
              INJECTED_NATIVE: this._getInjectedNative(),
              MAIN_CONSTANTS: this._getMainConstantsString(),
              MAIN_ARGUMENTS: this._getMainArgumentsString(args),
              KERNEL: this.getKernelString(),
              MAIN_RESULT: this.getMainResultString(),
              FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),
              INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),
              SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),
              SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration()
            };
          }
        }, {
          key: "_getVertShaderArtifactMap",
          value: function _getVertShaderArtifactMap(args) {
            return {
              FLOAT_TACTIC_DECLARATION: this.getFloatTacticDeclaration(),
              INT_TACTIC_DECLARATION: this.getIntTacticDeclaration(),
              SAMPLER_2D_TACTIC_DECLARATION: this.getSampler2DTacticDeclaration(),
              SAMPLER_2D_ARRAY_TACTIC_DECLARATION: this.getSampler2DArrayTacticDeclaration()
            };
          }
        }, {
          key: "_getHeaderString",
          value: function _getHeaderString() {
            return this.subKernels !== null ? '#extension GL_EXT_draw_buffers : require\n' : '';
          }
        }, {
          key: "_getLoopMaxString",
          value: function _getLoopMaxString() {
            return this.loopMaxIterations ? " ".concat(parseInt(this.loopMaxIterations), ";\n") : ' 1000;\n';
          }
        }, {
          key: "_getPluginsString",
          value: function _getPluginsString() {
            var _this45 = this;

            if (!this.plugins) return '\n';
            return this.plugins.map(function (plugin) {
              return plugin.source && _this45.source.match(plugin.functionMatch) ? plugin.source : '';
            }).join('\n');
          }
        }, {
          key: "_getConstantsString",
          value: function _getConstantsString() {
            var result = [];
            var threadDim = this.threadDim,
                texSize = this.texSize;

            if (this.dynamicOutput) {
              result.push('uniform ivec3 uOutputDim', 'uniform ivec2 uTexSize');
            } else {
              result.push("ivec3 uOutputDim = ivec3(".concat(threadDim[0], ", ").concat(threadDim[1], ", ").concat(threadDim[2], ")"), "ivec2 uTexSize = ivec2(".concat(texSize[0], ", ").concat(texSize[1], ")"));
            }

            return utils.linesToString(result);
          }
        }, {
          key: "_getTextureCoordinate",
          value: function _getTextureCoordinate() {
            var subKernels = this.subKernels;

            if (subKernels === null || subKernels.length < 1) {
              return 'varying vec2 vTexCoord;\n';
            } else {
              return 'out vec2 vTexCoord;\n';
            }
          }
        }, {
          key: "_getDecode32EndiannessString",
          value: function _getDecode32EndiannessString() {
            return this.endianness === 'LE' ? '' : '  texel.rgba = texel.abgr;\n';
          }
        }, {
          key: "_getEncode32EndiannessString",
          value: function _getEncode32EndiannessString() {
            return this.endianness === 'LE' ? '' : '  texel.rgba = texel.abgr;\n';
          }
        }, {
          key: "_getDivideWithIntegerCheckString",
          value: function _getDivideWithIntegerCheckString() {
            return this.fixIntegerDivisionAccuracy ? "float div_with_int_check(float x, float y) {\n  if (floor(x) == x && floor(y) == y && integerMod(x, y) == 0.0) {\n    return float(int(x)/int(y));\n  }\n  return x / y;\n}" : '';
          }
        }, {
          key: "_getMainArgumentsString",
          value: function _getMainArgumentsString(args) {
            var results = [];
            var argumentNames = this.argumentNames;

            for (var i = 0; i < argumentNames.length; i++) {
              results.push(this.kernelArguments[i].getSource(args[i]));
            }

            return results.join('');
          }
        }, {
          key: "_getInjectedNative",
          value: function _getInjectedNative() {
            return this.injectedNative || '';
          }
        }, {
          key: "_getMainConstantsString",
          value: function _getMainConstantsString() {
            var result = [];
            var constants = this.constants;

            if (constants) {
              var i = 0;

              for (var _name10 in constants) {
                if (!this.constants.hasOwnProperty(_name10)) continue;
                result.push(this.kernelConstants[i++].getSource(this.constants[_name10]));
              }
            }

            return result.join('');
          }
        }, {
          key: "getKernelResultDeclaration",
          value: function getKernelResultDeclaration() {
            switch (this.returnType) {
              case 'Array(2)':
                return 'vec2 kernelResult';

              case 'Array(3)':
                return 'vec3 kernelResult';

              case 'Array(4)':
                return 'vec4 kernelResult';

              case 'LiteralInteger':
              case 'Float':
              case 'Number':
              case 'Integer':
                return 'float kernelResult';

              default:
                if (this.graphical) {
                  return 'float kernelResult';
                } else {
                  throw new Error("unrecognized output type \"".concat(this.returnType, "\""));
                }

            }
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            var result = [this.getKernelResultDeclaration()];
            var subKernels = this.subKernels;

            if (subKernels !== null) {
              switch (this.returnType) {
                case 'Number':
                case 'Float':
                case 'Integer':
                  for (var i = 0; i < subKernels.length; i++) {
                    var subKernel = subKernels[i];
                    result.push(subKernel.returnType === 'Integer' ? "int subKernelResult_".concat(subKernel.name, " = 0") : "float subKernelResult_".concat(subKernel.name, " = 0.0"));
                  }

                  break;

                case 'Array(2)':
                  for (var _i22 = 0; _i22 < subKernels.length; _i22++) {
                    result.push("vec2 subKernelResult_".concat(subKernels[_i22].name));
                  }

                  break;

                case 'Array(3)':
                  for (var _i23 = 0; _i23 < subKernels.length; _i23++) {
                    result.push("vec3 subKernelResult_".concat(subKernels[_i23].name));
                  }

                  break;

                case 'Array(4)':
                  for (var _i24 = 0; _i24 < subKernels.length; _i24++) {
                    result.push("vec4 subKernelResult_".concat(subKernels[_i24].name));
                  }

                  break;
              }
            }

            return utils.linesToString(result) + this.translatedSource;
          }
        }, {
          key: "getMainResultGraphical",
          value: function getMainResultGraphical() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragColor = actualColor']);
          }
        }, {
          key: "getMainResultPackedPixels",
          value: function getMainResultPackedPixels() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Integer':
              case 'Float':
                return this.getMainResultKernelPackedPixels() + this.getMainResultSubKernelPackedPixels();

              default:
                throw new Error("packed output only usable with Numbers, \"".concat(this.returnType, "\" specified"));
            }
          }
        }, {
          key: "getMainResultKernelPackedPixels",
          value: function getMainResultKernelPackedPixels() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  gl_FragData[0] = ".concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(kernelResult)")]);
          }
        }, {
          key: "getMainResultSubKernelPackedPixels",
          value: function getMainResultSubKernelPackedPixels() {
            var result = [];
            if (!this.subKernels) return '';

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  gl_FragData[".concat(i + 1, "] = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(float(subKernelResult_").concat(this.subKernels[i].name, "))"));
              } else {
                result.push("  gl_FragData[".concat(i + 1, "] = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(subKernelResult_").concat(this.subKernels[i].name, ")"));
              }
            }

            return utils.linesToString(result);
          }
        }, {
          key: "getMainResultMemoryOptimizedFloats",
          value: function getMainResultMemoryOptimizedFloats() {
            var result = ['  index *= 4'];

            switch (this.returnType) {
              case 'Number':
              case 'Integer':
              case 'Float':
                var channels = ['r', 'g', 'b', 'a'];

                for (var i = 0; i < channels.length; i++) {
                  var channel = channels[i];
                  this.getMainResultKernelMemoryOptimizedFloats(result, channel);
                  this.getMainResultSubKernelMemoryOptimizedFloats(result, channel);

                  if (i + 1 < channels.length) {
                    result.push('  index += 1');
                  }
                }

                break;

              default:
                throw new Error("optimized output only usable with Numbers, ".concat(this.returnType, " specified"));
            }

            return utils.linesToString(result);
          }
        }, {
          key: "getMainResultKernelMemoryOptimizedFloats",
          value: function getMainResultKernelMemoryOptimizedFloats(result, channel) {
            result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  gl_FragData[0].".concat(channel, " = kernelResult"));
          }
        }, {
          key: "getMainResultSubKernelMemoryOptimizedFloats",
          value: function getMainResultSubKernelMemoryOptimizedFloats(result, channel) {
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  gl_FragData[".concat(i + 1, "].").concat(channel, " = float(subKernelResult_").concat(this.subKernels[i].name, ")"));
              } else {
                result.push("  gl_FragData[".concat(i + 1, "].").concat(channel, " = subKernelResult_").concat(this.subKernels[i].name));
              }
            }
          }
        }, {
          key: "getMainResultKernelNumberTexture",
          value: function getMainResultKernelNumberTexture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0][0] = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelNumberTexture",
          value: function getMainResultSubKernelNumberTexture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  gl_FragData[".concat(i + 1, "][0] = float(subKernelResult_").concat(subKernel.name, ")"));
              } else {
                result.push("  gl_FragData[".concat(i + 1, "][0] = subKernelResult_").concat(subKernel.name));
              }
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray2Texture",
          value: function getMainResultKernelArray2Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0][0] = kernelResult[0]', '  gl_FragData[0][1] = kernelResult[1]'];
          }
        }, {
          key: "getMainResultSubKernelArray2Texture",
          value: function getMainResultSubKernelArray2Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              result.push("  gl_FragData[".concat(i + 1, "][0] = subKernelResult_").concat(this.subKernels[i].name, "[0]"), "  gl_FragData[".concat(i + 1, "][1] = subKernelResult_").concat(this.subKernels[i].name, "[1]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray3Texture",
          value: function getMainResultKernelArray3Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0][0] = kernelResult[0]', '  gl_FragData[0][1] = kernelResult[1]', '  gl_FragData[0][2] = kernelResult[2]'];
          }
        }, {
          key: "getMainResultSubKernelArray3Texture",
          value: function getMainResultSubKernelArray3Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              result.push("  gl_FragData[".concat(i + 1, "][0] = subKernelResult_").concat(this.subKernels[i].name, "[0]"), "  gl_FragData[".concat(i + 1, "][1] = subKernelResult_").concat(this.subKernels[i].name, "[1]"), "  gl_FragData[".concat(i + 1, "][2] = subKernelResult_").concat(this.subKernels[i].name, "[2]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray4Texture",
          value: function getMainResultKernelArray4Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  gl_FragData[0] = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelArray4Texture",
          value: function getMainResultSubKernelArray4Texture() {
            var result = [];
            if (!this.subKernels) return result;

            switch (this.returnType) {
              case 'Number':
              case 'Float':
              case 'Integer':
                for (var i = 0; i < this.subKernels.length; ++i) {
                  var subKernel = this.subKernels[i];

                  if (subKernel.returnType === 'Integer') {
                    result.push("  gl_FragData[".concat(i + 1, "] = float(subKernelResult_").concat(this.subKernels[i].name, ")"));
                  } else {
                    result.push("  gl_FragData[".concat(i + 1, "] = subKernelResult_").concat(this.subKernels[i].name));
                  }
                }

                break;

              case 'Array(2)':
                for (var _i25 = 0; _i25 < this.subKernels.length; ++_i25) {
                  result.push("  gl_FragData[".concat(_i25 + 1, "][0] = subKernelResult_").concat(this.subKernels[_i25].name, "[0]"), "  gl_FragData[".concat(_i25 + 1, "][1] = subKernelResult_").concat(this.subKernels[_i25].name, "[1]"));
                }

                break;

              case 'Array(3)':
                for (var _i26 = 0; _i26 < this.subKernels.length; ++_i26) {
                  result.push("  gl_FragData[".concat(_i26 + 1, "][0] = subKernelResult_").concat(this.subKernels[_i26].name, "[0]"), "  gl_FragData[".concat(_i26 + 1, "][1] = subKernelResult_").concat(this.subKernels[_i26].name, "[1]"), "  gl_FragData[".concat(_i26 + 1, "][2] = subKernelResult_").concat(this.subKernels[_i26].name, "[2]"));
                }

                break;

              case 'Array(4)':
                for (var _i27 = 0; _i27 < this.subKernels.length; ++_i27) {
                  result.push("  gl_FragData[".concat(_i27 + 1, "][0] = subKernelResult_").concat(this.subKernels[_i27].name, "[0]"), "  gl_FragData[".concat(_i27 + 1, "][1] = subKernelResult_").concat(this.subKernels[_i27].name, "[1]"), "  gl_FragData[".concat(_i27 + 1, "][2] = subKernelResult_").concat(this.subKernels[_i27].name, "[2]"), "  gl_FragData[".concat(_i27 + 1, "][3] = subKernelResult_").concat(this.subKernels[_i27].name, "[3]"));
                }

                break;
            }

            return result;
          }
        }, {
          key: "replaceArtifacts",
          value: function replaceArtifacts(src, map) {
            return src.replace(/[ ]*__([A-Z]+[0-9]*([_]?[A-Z]*[0-9]?)*)__;\n/g, function (match, artifact) {
              if (map.hasOwnProperty(artifact)) {
                return map[artifact];
              }

              throw "unhandled artifact ".concat(artifact);
            });
          }
        }, {
          key: "getFragmentShader",
          value: function getFragmentShader(args) {
            if (this.compiledFragmentShader !== null) {
              return this.compiledFragmentShader;
            }

            return this.compiledFragmentShader = this.replaceArtifacts(this.constructor.fragmentShader, this._getFragShaderArtifactMap(args));
          }
        }, {
          key: "getVertexShader",
          value: function getVertexShader(args) {
            if (this.compiledVertexShader !== null) {
              return this.compiledVertexShader;
            }

            return this.compiledVertexShader = this.replaceArtifacts(this.constructor.vertexShader, this._getVertShaderArtifactMap(args));
          }
        }, {
          key: "toString",
          value: function toString() {
            var setupContextString = utils.linesToString(["const gl = context"]);
            return glKernelString(this.constructor, arguments, this, setupContextString);
          }
        }, {
          key: "destroy",
          value: function destroy(removeCanvasReferences) {
            if (this.buffer) {
              this.context.deleteBuffer(this.buffer);
            }

            if (this.framebuffer) {
              this.context.deleteFramebuffer(this.framebuffer);
            }

            if (this.vertShader) {
              this.context.deleteShader(this.vertShader);
            }

            if (this.fragShader) {
              this.context.deleteShader(this.fragShader);
            }

            if (this.program) {
              this.context.deleteProgram(this.program);
            }

            if (this.texture) {
              this.texture.delete();
              var textureCacheIndex = this.textureCache.indexOf(this.texture.texture);

              if (textureCacheIndex > -1) {
                this.textureCache.splice(textureCacheIndex, 1);
              }

              this.texture = null;
            }

            if (this.mappedTextures && this.mappedTextures.length) {
              for (var i = 0; i < this.mappedTextures.length; i++) {
                var mappedTexture = this.mappedTextures[i];
                mappedTexture.delete();

                var _textureCacheIndex = this.textureCache.indexOf(mappedTexture.texture);

                if (_textureCacheIndex > -1) {
                  this.textureCache.splice(_textureCacheIndex, 1);
                }
              }

              this.mappedTextures = null;
            }

            if (this.kernelArguments) {
              for (var _i28 = 0; _i28 < this.kernelArguments.length; _i28++) {
                this.kernelArguments[_i28].destroy();
              }
            }

            if (this.kernelConstants) {
              for (var _i29 = 0; _i29 < this.kernelConstants.length; _i29++) {
                this.kernelConstants[_i29].destroy();
              }
            }

            while (this.textureCache.length > 0) {
              var texture = this.textureCache.pop();
              this.context.deleteTexture(texture);
            }

            if (removeCanvasReferences) {
              var idx = canvases.indexOf(this.canvas);

              if (idx >= 0) {
                canvases[idx] = null;
                maxTexSizes[idx] = null;
              }
            }

            this.destroyExtensions();
            delete this.context;
            delete this.canvas;
          }
        }, {
          key: "destroyExtensions",
          value: function destroyExtensions() {
            this.extensions.OES_texture_float = null;
            this.extensions.OES_texture_float_linear = null;
            this.extensions.OES_element_index_uint = null;
            this.extensions.WEBGL_draw_buffers = null;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var json = _get(_getPrototypeOf(WebGLKernel.prototype), "toJSON", this).call(this);

            json.functionNodes = FunctionBuilder.fromKernel(this, WebGLFunctionNode).toJSON();
            json.settings.threadDim = this.threadDim;
            return json;
          }
        }], [{
          key: "destroyContext",
          value: function destroyContext(context) {
            var extension = context.getExtension('WEBGL_lose_context');

            if (extension) {
              extension.loseContext();
            }
          }
        }]);

        return WebGLKernel;
      }(GLKernel);

      module.exports = {
        WebGLKernel: WebGLKernel
      };
    }, {
      "../../plugins/math-random-uniformly-distributed": 112,
      "../../utils": 114,
      "../function-builder": 9,
      "../gl/kernel": 13,
      "../gl/kernel-string": 12,
      "./fragment-shader": 37,
      "./function-node": 38,
      "./kernel-value-maps": 39,
      "./vertex-shader": 71
    }],
    71: [function (require, module, exports) {
      var vertexShader = "__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nattribute vec2 aPos;\nattribute vec2 aTexCoord;\n\nvarying vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}";
      module.exports = {
        vertexShader: vertexShader
      };
    }, {}],
    72: [function (require, module, exports) {
      var fragmentShader = "#version 300 es\n__HEADER__;\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n__SAMPLER_2D_ARRAY_TACTIC_DECLARATION__;\n\nconst int LOOP_MAX = __LOOP_MAX__;\n\n__PLUGINS__;\n__CONSTANTS__;\n\nin vec2 vTexCoord;\n\nconst int BIT_COUNT = 32;\nint modi(int x, int y) {\n  return x - y * (x / y);\n}\n\nint bitwiseOr(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) || (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseXOR(int a, int b) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) != (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 || b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseAnd(int a, int b) {\n  int result = 0;\n  int n = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if ((modi(a, 2) == 1) && (modi(b, 2) == 1)) {\n      result += n;\n    }\n    a = a / 2;\n    b = b / 2;\n    n = n * 2;\n    if(!(a > 0 && b > 0)) {\n      break;\n    }\n  }\n  return result;\n}\nint bitwiseNot(int a) {\n  int result = 0;\n  int n = 1;\n  \n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (modi(a, 2) == 0) {\n      result += n;    \n    }\n    a = a / 2;\n    n = n * 2;\n  }\n  return result;\n}\nint bitwiseZeroFillLeftShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n *= 2;\n  }\n\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nint bitwiseSignedRightShift(int num, int shifts) {\n  return int(floor(float(num) / pow(2.0, float(shifts))));\n}\n\nint bitwiseZeroFillRightShift(int n, int shift) {\n  int maxBytes = BIT_COUNT;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (maxBytes >= n) {\n      break;\n    }\n    maxBytes *= 2;\n  }\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= shift) {\n      break;\n    }\n    n /= 2;\n  }\n  int result = 0;\n  int byteVal = 1;\n  for (int i = 0; i < BIT_COUNT; i++) {\n    if (i >= maxBytes) break;\n    if (modi(n, 2) > 0) { result += byteVal; }\n    n = int(n / 2);\n    byteVal *= 2;\n  }\n  return result;\n}\n\nvec2 integerMod(vec2 x, float y) {\n  vec2 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec3 integerMod(vec3 x, float y) {\n  vec3 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nvec4 integerMod(vec4 x, vec4 y) {\n  vec4 res = floor(mod(x, y));\n  return res * step(1.0 - floor(y), -res);\n}\n\nfloat integerMod(float x, float y) {\n  float res = floor(mod(x, y));\n  return res * (res > floor(y) - 1.0 ? 0.0 : 1.0);\n}\n\nint integerMod(int x, int y) {\n  return x - (y * int(x/y));\n}\n\n__DIVIDE_WITH_INTEGER_CHECK__;\n\n// Here be dragons!\n// DO NOT OPTIMIZE THIS CODE\n// YOU WILL BREAK SOMETHING ON SOMEBODY'S MACHINE\n// LEAVE IT AS IT IS, LEST YOU WASTE YOUR OWN TIME\nconst vec2 MAGIC_VEC = vec2(1.0, -256.0);\nconst vec4 SCALE_FACTOR = vec4(1.0, 256.0, 65536.0, 0.0);\nconst vec4 SCALE_FACTOR_INV = vec4(1.0, 0.00390625, 0.0000152587890625, 0.0); // 1, 1/256, 1/65536\nfloat decode32(vec4 texel) {\n  __DECODE32_ENDIANNESS__;\n  texel *= 255.0;\n  vec2 gte128;\n  gte128.x = texel.b >= 128.0 ? 1.0 : 0.0;\n  gte128.y = texel.a >= 128.0 ? 1.0 : 0.0;\n  float exponent = 2.0 * texel.a - 127.0 + dot(gte128, MAGIC_VEC);\n  float res = exp2(round(exponent));\n  texel.b = texel.b - 128.0 * gte128.x;\n  res = dot(texel, SCALE_FACTOR) * exp2(round(exponent-23.0)) + res;\n  res *= gte128.y * -2.0 + 1.0;\n  return res;\n}\n\nfloat decode16(vec4 texel, int index) {\n  int channel = integerMod(index, 2);\n  return texel[channel*2] * 255.0 + texel[channel*2 + 1] * 65280.0;\n}\n\nfloat decode8(vec4 texel, int index) {\n  int channel = integerMod(index, 4);\n  return texel[channel] * 255.0;\n}\n\nvec4 legacyEncode32(float f) {\n  float F = abs(f);\n  float sign = f < 0.0 ? 1.0 : 0.0;\n  float exponent = floor(log2(F));\n  float mantissa = (exp2(-exponent) * F);\n  // exponent += floor(log2(mantissa));\n  vec4 texel = vec4(F * exp2(23.0-exponent)) * SCALE_FACTOR_INV;\n  texel.rg = integerMod(texel.rg, 256.0);\n  texel.b = integerMod(texel.b, 128.0);\n  texel.a = exponent*0.5 + 63.5;\n  texel.ba += vec2(integerMod(exponent+127.0, 2.0), sign) * 128.0;\n  texel = floor(texel);\n  texel *= 0.003921569; // 1/255\n  __ENCODE32_ENDIANNESS__;\n  return texel;\n}\n\n// https://github.com/gpujs/gpu.js/wiki/Encoder-details\nvec4 encode32(float value) {\n  if (value == 0.0) return vec4(0, 0, 0, 0);\n\n  float exponent;\n  float mantissa;\n  vec4  result;\n  float sgn;\n\n  sgn = step(0.0, -value);\n  value = abs(value);\n\n  exponent = floor(log2(value));\n\n  mantissa = value*pow(2.0, -exponent)-1.0;\n  exponent = exponent+127.0;\n  result   = vec4(0,0,0,0);\n\n  result.a = floor(exponent/2.0);\n  exponent = exponent - result.a*2.0;\n  result.a = result.a + 128.0*sgn;\n\n  result.b = floor(mantissa * 128.0);\n  mantissa = mantissa - result.b / 128.0;\n  result.b = result.b + exponent*128.0;\n\n  result.g = floor(mantissa*32768.0);\n  mantissa = mantissa - result.g/32768.0;\n\n  result.r = floor(mantissa*8388608.0);\n  return result/255.0;\n}\n// Dragons end here\n\nint index;\nivec3 threadId;\n\nivec3 indexTo3D(int idx, ivec3 texDim) {\n  int z = int(idx / (texDim.x * texDim.y));\n  idx -= z * int(texDim.x * texDim.y);\n  int y = int(idx / texDim.x);\n  int x = int(integerMod(idx, texDim.x));\n  return ivec3(x, y, z);\n}\n\nfloat get32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return decode32(texel);\n}\n\nfloat get16(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 2;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 2, texSize.y));\n  return decode16(texel, index);\n}\n\nfloat get8(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int w = texSize.x * 4;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize.x * 4, texSize.y));\n  return decode8(texel, index);\n}\n\nfloat getMemoryOptimized32(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + (texDim.x * (y + (texDim.y * z)));\n  int channel = integerMod(index, 4);\n  index = index / 4;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  index = index / 4;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return texel[channel];\n}\n\nvec4 getImage2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, st / vec2(texSize));\n}\n\nvec4 getImage3D(sampler2DArray tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  return texture(tex, vec3(st / vec2(texSize), z));\n}\n\nfloat getFloatFromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return result[0];\n}\n\nvec2 getVec2FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec2(result[0], result[1]);\n}\n\nvec2 getMemoryOptimizedVec2(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  index = index / 2;\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  if (channel == 0) return vec2(texel.r, texel.g);\n  if (channel == 1) return vec2(texel.b, texel.a);\n  return vec2(0.0, 0.0);\n}\n\nvec3 getVec3FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  vec4 result = getImage2D(tex, texSize, texDim, z, y, x);\n  return vec3(result[0], result[1], result[2]);\n}\n\nvec3 getMemoryOptimizedVec3(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int fieldIndex = 3 * (x + texDim.x * (y + texDim.y * z));\n  int vectorIndex = fieldIndex / 4;\n  int vectorOffset = fieldIndex - vectorIndex * 4;\n  int readY = vectorIndex / texSize.x;\n  int readX = vectorIndex - readY * texSize.x;\n  vec4 tex1 = texture(tex, (vec2(readX, readY) + 0.5) / vec2(texSize));\n\n  if (vectorOffset == 0) {\n    return tex1.xyz;\n  } else if (vectorOffset == 1) {\n    return tex1.yzw;\n  } else {\n    readX++;\n    if (readX >= texSize.x) {\n      readX = 0;\n      readY++;\n    }\n    vec4 tex2 = texture(tex, vec2(readX, readY) / vec2(texSize));\n    if (vectorOffset == 2) {\n      return vec3(tex1.z, tex1.w, tex2.x);\n    } else {\n      return vec3(tex1.w, tex2.x, tex2.y);\n    }\n  }\n}\n\nvec4 getVec4FromSampler2D(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  return getImage2D(tex, texSize, texDim, z, y, x);\n}\n\nvec4 getMemoryOptimizedVec4(sampler2D tex, ivec2 texSize, ivec3 texDim, int z, int y, int x) {\n  int index = x + texDim.x * (y + texDim.y * z);\n  int channel = integerMod(index, 2);\n  int w = texSize.x;\n  vec2 st = vec2(float(integerMod(index, w)), float(index / w)) + 0.5;\n  vec4 texel = texture(tex, st / vec2(texSize));\n  return vec4(texel.r, texel.g, texel.b, texel.a);\n}\n\nvec4 actualColor;\nvoid color(float r, float g, float b, float a) {\n  actualColor = vec4(r,g,b,a);\n}\n\nvoid color(float r, float g, float b) {\n  color(r,g,b,1.0);\n}\n\nfloat modulo(float num1, float num2) {\n  if (num2 == 0.0) {\n    return 0.0;\n  }\n  bool isPositive = num1 >= 0.0;\n  num1 = abs(num1);\n  num2 = abs(num2);\n  for (int i = 0; i < LOOP_MAX; i++) {\n    if (num1 < num2) break;\n    num1 = num1 - num2;\n  }\n  return isPositive ? num1 : -num1;\n}\n\n__INJECTED_NATIVE__;\n__MAIN_CONSTANTS__;\n__MAIN_ARGUMENTS__;\n__KERNEL__;\n\nvoid main(void) {\n  index = int(vTexCoord.s * float(uTexSize.x)) + int(vTexCoord.t * float(uTexSize.y)) * uTexSize.x;\n  __MAIN_RESULT__;\n}";
      module.exports = {
        fragmentShader: fragmentShader
      };
    }, {}],
    73: [function (require, module, exports) {
      var _require171 = require('../web-gl/function-node'),
          WebGLFunctionNode = _require171.WebGLFunctionNode;

      var WebGL2FunctionNode =
      /*#__PURE__*/
      function (_WebGLFunctionNode) {
        _inherits(WebGL2FunctionNode, _WebGLFunctionNode);

        function WebGL2FunctionNode() {
          _classCallCheck(this, WebGL2FunctionNode);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2FunctionNode).apply(this, arguments));
        }

        _createClass(WebGL2FunctionNode, [{
          key: "astIdentifierExpression",
          value: function astIdentifierExpression(idtNode, retArr) {
            if (idtNode.type !== 'Identifier') {
              throw this.astErrorOutput('IdentifierExpression - not an Identifier', idtNode);
            }

            var type = this.getType(idtNode);

            if (idtNode.name === 'Infinity') {
              retArr.push('intBitsToFloat(2139095039)');
            } else if (type === 'Boolean') {
              if (this.argumentNames.indexOf(idtNode.name) > -1) {
                retArr.push("bool(user_".concat(idtNode.name, ")"));
              } else {
                retArr.push("user_".concat(idtNode.name));
              }
            } else {
              retArr.push("user_".concat(idtNode.name));
            }

            return retArr;
          }
        }]);

        return WebGL2FunctionNode;
      }(WebGLFunctionNode);

      module.exports = {
        WebGL2FunctionNode: WebGL2FunctionNode
      };
    }, {
      "../web-gl/function-node": 38
    }],
    74: [function (require, module, exports) {
      var _require172 = require('./kernel-value/boolean'),
          WebGL2KernelValueBoolean = _require172.WebGL2KernelValueBoolean;

      var _require173 = require('./kernel-value/float'),
          WebGL2KernelValueFloat = _require173.WebGL2KernelValueFloat;

      var _require174 = require('./kernel-value/integer'),
          WebGL2KernelValueInteger = _require174.WebGL2KernelValueInteger;

      var _require175 = require('./kernel-value/html-image'),
          WebGL2KernelValueHTMLImage = _require175.WebGL2KernelValueHTMLImage;

      var _require176 = require('./kernel-value/dynamic-html-image'),
          WebGL2KernelValueDynamicHTMLImage = _require176.WebGL2KernelValueDynamicHTMLImage;

      var _require177 = require('./kernel-value/html-image-array'),
          WebGL2KernelValueHTMLImageArray = _require177.WebGL2KernelValueHTMLImageArray;

      var _require178 = require('./kernel-value/dynamic-html-image-array'),
          WebGL2KernelValueDynamicHTMLImageArray = _require178.WebGL2KernelValueDynamicHTMLImageArray;

      var _require179 = require('./kernel-value/html-video'),
          WebGL2KernelValueHTMLVideo = _require179.WebGL2KernelValueHTMLVideo;

      var _require180 = require('./kernel-value/dynamic-html-video'),
          WebGL2KernelValueDynamicHTMLVideo = _require180.WebGL2KernelValueDynamicHTMLVideo;

      var _require181 = require('./kernel-value/single-input'),
          WebGL2KernelValueSingleInput = _require181.WebGL2KernelValueSingleInput;

      var _require182 = require('./kernel-value/dynamic-single-input'),
          WebGL2KernelValueDynamicSingleInput = _require182.WebGL2KernelValueDynamicSingleInput;

      var _require183 = require('./kernel-value/unsigned-input'),
          WebGL2KernelValueUnsignedInput = _require183.WebGL2KernelValueUnsignedInput;

      var _require184 = require('./kernel-value/dynamic-unsigned-input'),
          WebGL2KernelValueDynamicUnsignedInput = _require184.WebGL2KernelValueDynamicUnsignedInput;

      var _require185 = require('./kernel-value/memory-optimized-number-texture'),
          WebGL2KernelValueMemoryOptimizedNumberTexture = _require185.WebGL2KernelValueMemoryOptimizedNumberTexture;

      var _require186 = require('./kernel-value/dynamic-memory-optimized-number-texture'),
          WebGL2KernelValueDynamicMemoryOptimizedNumberTexture = _require186.WebGL2KernelValueDynamicMemoryOptimizedNumberTexture;

      var _require187 = require('./kernel-value/number-texture'),
          WebGL2KernelValueNumberTexture = _require187.WebGL2KernelValueNumberTexture;

      var _require188 = require('./kernel-value/dynamic-number-texture'),
          WebGL2KernelValueDynamicNumberTexture = _require188.WebGL2KernelValueDynamicNumberTexture;

      var _require189 = require('./kernel-value/single-array'),
          WebGL2KernelValueSingleArray = _require189.WebGL2KernelValueSingleArray;

      var _require190 = require('./kernel-value/dynamic-single-array'),
          WebGL2KernelValueDynamicSingleArray = _require190.WebGL2KernelValueDynamicSingleArray;

      var _require191 = require('./kernel-value/single-array1d-i'),
          WebGL2KernelValueSingleArray1DI = _require191.WebGL2KernelValueSingleArray1DI;

      var _require192 = require('./kernel-value/dynamic-single-array1d-i'),
          WebGL2KernelValueDynamicSingleArray1DI = _require192.WebGL2KernelValueDynamicSingleArray1DI;

      var _require193 = require('./kernel-value/single-array2d-i'),
          WebGL2KernelValueSingleArray2DI = _require193.WebGL2KernelValueSingleArray2DI;

      var _require194 = require('./kernel-value/dynamic-single-array2d-i'),
          WebGL2KernelValueDynamicSingleArray2DI = _require194.WebGL2KernelValueDynamicSingleArray2DI;

      var _require195 = require('./kernel-value/single-array3d-i'),
          WebGL2KernelValueSingleArray3DI = _require195.WebGL2KernelValueSingleArray3DI;

      var _require196 = require('./kernel-value/dynamic-single-array3d-i'),
          WebGL2KernelValueDynamicSingleArray3DI = _require196.WebGL2KernelValueDynamicSingleArray3DI;

      var _require197 = require('./kernel-value/single-array2'),
          WebGL2KernelValueSingleArray2 = _require197.WebGL2KernelValueSingleArray2;

      var _require198 = require('./kernel-value/single-array3'),
          WebGL2KernelValueSingleArray3 = _require198.WebGL2KernelValueSingleArray3;

      var _require199 = require('./kernel-value/single-array4'),
          WebGL2KernelValueSingleArray4 = _require199.WebGL2KernelValueSingleArray4;

      var _require200 = require('./kernel-value/unsigned-array'),
          WebGL2KernelValueUnsignedArray = _require200.WebGL2KernelValueUnsignedArray;

      var _require201 = require('./kernel-value/dynamic-unsigned-array'),
          WebGL2KernelValueDynamicUnsignedArray = _require201.WebGL2KernelValueDynamicUnsignedArray;

      var kernelValueMaps = {
        unsigned: {
          dynamic: {
            'Boolean': WebGL2KernelValueBoolean,
            'Integer': WebGL2KernelValueInteger,
            'Float': WebGL2KernelValueFloat,
            'Array': WebGL2KernelValueDynamicUnsignedArray,
            'Array(2)': false,
            'Array(3)': false,
            'Array(4)': false,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGL2KernelValueDynamicUnsignedInput,
            'NumberTexture': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGL2KernelValueDynamicHTMLImage,
            'HTMLImage': WebGL2KernelValueDynamicHTMLImage,
            'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGL2KernelValueBoolean,
            'Float': WebGL2KernelValueFloat,
            'Integer': WebGL2KernelValueInteger,
            'Array': WebGL2KernelValueUnsignedArray,
            'Array(2)': false,
            'Array(3)': false,
            'Array(4)': false,
            'Array1D(2)': false,
            'Array1D(3)': false,
            'Array1D(4)': false,
            'Array2D(2)': false,
            'Array2D(3)': false,
            'Array2D(4)': false,
            'Array3D(2)': false,
            'Array3D(3)': false,
            'Array3D(4)': false,
            'Input': WebGL2KernelValueUnsignedInput,
            'NumberTexture': WebGL2KernelValueNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGL2KernelValueHTMLImage,
            'HTMLImage': WebGL2KernelValueHTMLImage,
            'HTMLImageArray': WebGL2KernelValueHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueHTMLVideo
          }
        },
        single: {
          dynamic: {
            'Boolean': WebGL2KernelValueBoolean,
            'Integer': WebGL2KernelValueInteger,
            'Float': WebGL2KernelValueFloat,
            'Array': WebGL2KernelValueDynamicSingleArray,
            'Array(2)': WebGL2KernelValueSingleArray2,
            'Array(3)': WebGL2KernelValueSingleArray3,
            'Array(4)': WebGL2KernelValueSingleArray4,
            'Array1D(2)': WebGL2KernelValueDynamicSingleArray1DI,
            'Array1D(3)': WebGL2KernelValueDynamicSingleArray1DI,
            'Array1D(4)': WebGL2KernelValueDynamicSingleArray1DI,
            'Array2D(2)': WebGL2KernelValueDynamicSingleArray2DI,
            'Array2D(3)': WebGL2KernelValueDynamicSingleArray2DI,
            'Array2D(4)': WebGL2KernelValueDynamicSingleArray2DI,
            'Array3D(2)': WebGL2KernelValueDynamicSingleArray3DI,
            'Array3D(3)': WebGL2KernelValueDynamicSingleArray3DI,
            'Array3D(4)': WebGL2KernelValueDynamicSingleArray3DI,
            'Input': WebGL2KernelValueDynamicSingleInput,
            'NumberTexture': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueDynamicNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueDynamicNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueDynamicMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGL2KernelValueDynamicHTMLImage,
            'HTMLImage': WebGL2KernelValueDynamicHTMLImage,
            'HTMLImageArray': WebGL2KernelValueDynamicHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueDynamicHTMLVideo
          },
          static: {
            'Boolean': WebGL2KernelValueBoolean,
            'Float': WebGL2KernelValueFloat,
            'Integer': WebGL2KernelValueInteger,
            'Array': WebGL2KernelValueSingleArray,
            'Array(2)': WebGL2KernelValueSingleArray2,
            'Array(3)': WebGL2KernelValueSingleArray3,
            'Array(4)': WebGL2KernelValueSingleArray4,
            'Array1D(2)': WebGL2KernelValueSingleArray1DI,
            'Array1D(3)': WebGL2KernelValueSingleArray1DI,
            'Array1D(4)': WebGL2KernelValueSingleArray1DI,
            'Array2D(2)': WebGL2KernelValueSingleArray2DI,
            'Array2D(3)': WebGL2KernelValueSingleArray2DI,
            'Array2D(4)': WebGL2KernelValueSingleArray2DI,
            'Array3D(2)': WebGL2KernelValueSingleArray3DI,
            'Array3D(3)': WebGL2KernelValueSingleArray3DI,
            'Array3D(4)': WebGL2KernelValueSingleArray3DI,
            'Input': WebGL2KernelValueSingleInput,
            'NumberTexture': WebGL2KernelValueNumberTexture,
            'ArrayTexture(1)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(2)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(3)': WebGL2KernelValueNumberTexture,
            'ArrayTexture(4)': WebGL2KernelValueNumberTexture,
            'MemoryOptimizedNumberTexture': WebGL2KernelValueMemoryOptimizedNumberTexture,
            'HTMLCanvas': WebGL2KernelValueHTMLImage,
            'HTMLImage': WebGL2KernelValueHTMLImage,
            'HTMLImageArray': WebGL2KernelValueHTMLImageArray,
            'HTMLVideo': WebGL2KernelValueHTMLVideo
          }
        }
      };

      function lookupKernelValueType(type, dynamic, precision, value) {
        if (!type) {
          throw new Error('type missing');
        }

        if (!dynamic) {
          throw new Error('dynamic missing');
        }

        if (!precision) {
          throw new Error('precision missing');
        }

        if (value.type) {
          type = value.type;
        }

        var types = kernelValueMaps[precision][dynamic];

        if (types[type] === false) {
          return null;
        } else if (types[type] === undefined) {
          throw new Error("Could not find a KernelValue for ".concat(type));
        }

        return types[type];
      }

      module.exports = {
        kernelValueMaps: kernelValueMaps,
        lookupKernelValueType: lookupKernelValueType
      };
    }, {
      "./kernel-value/boolean": 75,
      "./kernel-value/dynamic-html-image": 77,
      "./kernel-value/dynamic-html-image-array": 76,
      "./kernel-value/dynamic-html-video": 78,
      "./kernel-value/dynamic-memory-optimized-number-texture": 79,
      "./kernel-value/dynamic-number-texture": 80,
      "./kernel-value/dynamic-single-array": 81,
      "./kernel-value/dynamic-single-array1d-i": 82,
      "./kernel-value/dynamic-single-array2d-i": 83,
      "./kernel-value/dynamic-single-array3d-i": 84,
      "./kernel-value/dynamic-single-input": 85,
      "./kernel-value/dynamic-unsigned-array": 86,
      "./kernel-value/dynamic-unsigned-input": 87,
      "./kernel-value/float": 88,
      "./kernel-value/html-image": 90,
      "./kernel-value/html-image-array": 89,
      "./kernel-value/html-video": 91,
      "./kernel-value/integer": 92,
      "./kernel-value/memory-optimized-number-texture": 93,
      "./kernel-value/number-texture": 94,
      "./kernel-value/single-array": 95,
      "./kernel-value/single-array1d-i": 96,
      "./kernel-value/single-array2": 97,
      "./kernel-value/single-array2d-i": 98,
      "./kernel-value/single-array3": 99,
      "./kernel-value/single-array3d-i": 100,
      "./kernel-value/single-array4": 101,
      "./kernel-value/single-input": 102,
      "./kernel-value/unsigned-array": 103,
      "./kernel-value/unsigned-input": 104
    }],
    75: [function (require, module, exports) {
      var _require202 = require('../../web-gl/kernel-value/boolean'),
          WebGLKernelValueBoolean = _require202.WebGLKernelValueBoolean;

      var WebGL2KernelValueBoolean =
      /*#__PURE__*/
      function (_WebGLKernelValueBool) {
        _inherits(WebGL2KernelValueBoolean, _WebGLKernelValueBool);

        function WebGL2KernelValueBoolean() {
          _classCallCheck(this, WebGL2KernelValueBoolean);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueBoolean).apply(this, arguments));
        }

        return WebGL2KernelValueBoolean;
      }(WebGLKernelValueBoolean);

      module.exports = {
        WebGL2KernelValueBoolean: WebGL2KernelValueBoolean
      };
    }, {
      "../../web-gl/kernel-value/boolean": 41
    }],
    76: [function (require, module, exports) {
      var _require203 = require('../../../utils'),
          utils = _require203.utils;

      var _require204 = require('./html-image-array'),
          WebGL2KernelValueHTMLImageArray = _require204.WebGL2KernelValueHTMLImageArray;

      var WebGL2KernelValueDynamicHTMLImageArray =
      /*#__PURE__*/
      function (_WebGL2KernelValueHTM) {
        _inherits(WebGL2KernelValueDynamicHTMLImageArray, _WebGL2KernelValueHTM);

        function WebGL2KernelValueDynamicHTMLImageArray() {
          _classCallCheck(this, WebGL2KernelValueDynamicHTMLImageArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicHTMLImageArray).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicHTMLImageArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2DArray ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(images) {
            var _images$ = images[0],
                width = _images$.width,
                height = _images$.height;
            this.checkSize(width, height);
            this.dimensions = [width, height, images.length];
            this.textureSize = [width, height];
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicHTMLImageArray.prototype), "updateValue", this).call(this, images);
          }
        }]);

        return WebGL2KernelValueDynamicHTMLImageArray;
      }(WebGL2KernelValueHTMLImageArray);

      module.exports = {
        WebGL2KernelValueDynamicHTMLImageArray: WebGL2KernelValueDynamicHTMLImageArray
      };
    }, {
      "../../../utils": 114,
      "./html-image-array": 89
    }],
    77: [function (require, module, exports) {
      var _require205 = require('../../../utils'),
          utils = _require205.utils;

      var _require206 = require('../../web-gl/kernel-value/dynamic-html-image'),
          WebGLKernelValueDynamicHTMLImage = _require206.WebGLKernelValueDynamicHTMLImage;

      var WebGL2KernelValueDynamicHTMLImage =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna2) {
        _inherits(WebGL2KernelValueDynamicHTMLImage, _WebGLKernelValueDyna2);

        function WebGL2KernelValueDynamicHTMLImage() {
          _classCallCheck(this, WebGL2KernelValueDynamicHTMLImage);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicHTMLImage).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicHTMLImage, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicHTMLImage;
      }(WebGLKernelValueDynamicHTMLImage);

      module.exports = {
        WebGL2KernelValueDynamicHTMLImage: WebGL2KernelValueDynamicHTMLImage
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/dynamic-html-image": 42
    }],
    78: [function (require, module, exports) {
      var _require207 = require('../../../utils'),
          utils = _require207.utils;

      var _require208 = require('./dynamic-html-image'),
          WebGL2KernelValueDynamicHTMLImage = _require208.WebGL2KernelValueDynamicHTMLImage;

      var WebGL2KernelValueDynamicHTMLVideo =
      /*#__PURE__*/
      function (_WebGL2KernelValueDyn) {
        _inherits(WebGL2KernelValueDynamicHTMLVideo, _WebGL2KernelValueDyn);

        function WebGL2KernelValueDynamicHTMLVideo() {
          _classCallCheck(this, WebGL2KernelValueDynamicHTMLVideo);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicHTMLVideo).apply(this, arguments));
        }

        return WebGL2KernelValueDynamicHTMLVideo;
      }(WebGL2KernelValueDynamicHTMLImage);

      module.exports = {
        WebGL2KernelValueDynamicHTMLVideo: WebGL2KernelValueDynamicHTMLVideo
      };
    }, {
      "../../../utils": 114,
      "./dynamic-html-image": 77
    }],
    79: [function (require, module, exports) {
      var _require209 = require('../../../utils'),
          utils = _require209.utils;

      var _require210 = require('../../web-gl/kernel-value/dynamic-memory-optimized-number-texture'),
          WebGLKernelValueDynamicMemoryOptimizedNumberTexture = _require210.WebGLKernelValueDynamicMemoryOptimizedNumberTexture;

      var WebGL2KernelValueDynamicMemoryOptimizedNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna3) {
        _inherits(WebGL2KernelValueDynamicMemoryOptimizedNumberTexture, _WebGLKernelValueDyna3);

        function WebGL2KernelValueDynamicMemoryOptimizedNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueDynamicMemoryOptimizedNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicMemoryOptimizedNumberTexture).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicMemoryOptimizedNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            return utils.linesToString(["uniform sampler2D ".concat(this.id), "uniform ivec2 ".concat(this.sizeId), "uniform ivec3 ".concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicMemoryOptimizedNumberTexture;
      }(WebGLKernelValueDynamicMemoryOptimizedNumberTexture);

      module.exports = {
        WebGL2KernelValueDynamicMemoryOptimizedNumberTexture: WebGL2KernelValueDynamicMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/dynamic-memory-optimized-number-texture": 44
    }],
    80: [function (require, module, exports) {
      var _require211 = require('../../../utils'),
          utils = _require211.utils;

      var _require212 = require('../../web-gl/kernel-value/dynamic-number-texture'),
          WebGLKernelValueDynamicNumberTexture = _require212.WebGLKernelValueDynamicNumberTexture;

      var WebGL2KernelValueDynamicNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna4) {
        _inherits(WebGL2KernelValueDynamicNumberTexture, _WebGLKernelValueDyna4);

        function WebGL2KernelValueDynamicNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueDynamicNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicNumberTexture).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicNumberTexture;
      }(WebGLKernelValueDynamicNumberTexture);

      module.exports = {
        WebGL2KernelValueDynamicNumberTexture: WebGL2KernelValueDynamicNumberTexture
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/dynamic-number-texture": 45
    }],
    81: [function (require, module, exports) {
      var _require213 = require('../../../utils'),
          utils = _require213.utils;

      var _require214 = require('../../web-gl2/kernel-value/single-array'),
          WebGL2KernelValueSingleArray = _require214.WebGL2KernelValueSingleArray;

      var WebGL2KernelValueDynamicSingleArray =
      /*#__PURE__*/
      function (_WebGL2KernelValueSin) {
        _inherits(WebGL2KernelValueDynamicSingleArray, _WebGL2KernelValueSin);

        function WebGL2KernelValueDynamicSingleArray() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicSingleArray).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicSingleArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.dimensions = utils.getDimensions(value, true);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray;
      }(WebGL2KernelValueSingleArray);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray: WebGL2KernelValueDynamicSingleArray
      };
    }, {
      "../../../utils": 114,
      "../../web-gl2/kernel-value/single-array": 95
    }],
    82: [function (require, module, exports) {
      var _require215 = require('../../../utils'),
          utils = _require215.utils;

      var _require216 = require('../../web-gl2/kernel-value/single-array1d-i'),
          WebGL2KernelValueSingleArray1DI = _require216.WebGL2KernelValueSingleArray1DI;

      var WebGL2KernelValueDynamicSingleArray1DI =
      /*#__PURE__*/
      function (_WebGL2KernelValueSin2) {
        _inherits(WebGL2KernelValueDynamicSingleArray1DI, _WebGL2KernelValueSin2);

        function WebGL2KernelValueDynamicSingleArray1DI() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray1DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicSingleArray1DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicSingleArray1DI, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray1DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray1DI;
      }(WebGL2KernelValueSingleArray1DI);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray1DI: WebGL2KernelValueDynamicSingleArray1DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl2/kernel-value/single-array1d-i": 96
    }],
    83: [function (require, module, exports) {
      var _require217 = require('../../../utils'),
          utils = _require217.utils;

      var _require218 = require('../../web-gl2/kernel-value/single-array2d-i'),
          WebGL2KernelValueSingleArray2DI = _require218.WebGL2KernelValueSingleArray2DI;

      var WebGL2KernelValueDynamicSingleArray2DI =
      /*#__PURE__*/
      function (_WebGL2KernelValueSin3) {
        _inherits(WebGL2KernelValueDynamicSingleArray2DI, _WebGL2KernelValueSin3);

        function WebGL2KernelValueDynamicSingleArray2DI() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray2DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicSingleArray2DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicSingleArray2DI, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray2DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray2DI;
      }(WebGL2KernelValueSingleArray2DI);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray2DI: WebGL2KernelValueDynamicSingleArray2DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl2/kernel-value/single-array2d-i": 98
    }],
    84: [function (require, module, exports) {
      var _require219 = require('../../../utils'),
          utils = _require219.utils;

      var _require220 = require('../../web-gl2/kernel-value/single-array3d-i'),
          WebGL2KernelValueSingleArray3DI = _require220.WebGL2KernelValueSingleArray3DI;

      var WebGL2KernelValueDynamicSingleArray3DI =
      /*#__PURE__*/
      function (_WebGL2KernelValueSin4) {
        _inherits(WebGL2KernelValueDynamicSingleArray3DI, _WebGL2KernelValueSin4);

        function WebGL2KernelValueDynamicSingleArray3DI() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleArray3DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicSingleArray3DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicSingleArray3DI, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            this.setShape(value);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleArray3DI.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleArray3DI;
      }(WebGL2KernelValueSingleArray3DI);

      module.exports = {
        WebGL2KernelValueDynamicSingleArray3DI: WebGL2KernelValueDynamicSingleArray3DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl2/kernel-value/single-array3d-i": 100
    }],
    85: [function (require, module, exports) {
      var _require221 = require('../../../utils'),
          utils = _require221.utils;

      var _require222 = require('../../web-gl2/kernel-value/single-input'),
          WebGL2KernelValueSingleInput = _require222.WebGL2KernelValueSingleInput;

      var WebGL2KernelValueDynamicSingleInput =
      /*#__PURE__*/
      function (_WebGL2KernelValueSin5) {
        _inherits(WebGL2KernelValueDynamicSingleInput, _WebGL2KernelValueSin5);

        function WebGL2KernelValueDynamicSingleInput() {
          _classCallCheck(this, WebGL2KernelValueDynamicSingleInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicSingleInput).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicSingleInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            var _value$size7 = _slicedToArray(value.size, 3),
                w = _value$size7[0],
                h = _value$size7[1],
                d = _value$size7[2];

            this.dimensions = new Int32Array([w || 1, h || 1, d || 1]);
            this.textureSize = utils.getMemoryOptimizedFloatTextureSize(this.dimensions, this.bitRatio);
            this.uploadArrayLength = this.textureSize[0] * this.textureSize[1] * this.bitRatio;
            this.checkSize(this.textureSize[0], this.textureSize[1]);
            this.uploadValue = new Float32Array(this.uploadArrayLength);
            this.kernel.setUniform3iv(this.dimensionsId, this.dimensions);
            this.kernel.setUniform2iv(this.sizeId, this.textureSize);

            _get(_getPrototypeOf(WebGL2KernelValueDynamicSingleInput.prototype), "updateValue", this).call(this, value);
          }
        }]);

        return WebGL2KernelValueDynamicSingleInput;
      }(WebGL2KernelValueSingleInput);

      module.exports = {
        WebGL2KernelValueDynamicSingleInput: WebGL2KernelValueDynamicSingleInput
      };
    }, {
      "../../../utils": 114,
      "../../web-gl2/kernel-value/single-input": 102
    }],
    86: [function (require, module, exports) {
      var _require223 = require('../../../utils'),
          utils = _require223.utils;

      var _require224 = require('../../web-gl/kernel-value/dynamic-unsigned-array'),
          WebGLKernelValueDynamicUnsignedArray = _require224.WebGLKernelValueDynamicUnsignedArray;

      var WebGL2KernelValueDynamicUnsignedArray =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna5) {
        _inherits(WebGL2KernelValueDynamicUnsignedArray, _WebGLKernelValueDyna5);

        function WebGL2KernelValueDynamicUnsignedArray() {
          _classCallCheck(this, WebGL2KernelValueDynamicUnsignedArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicUnsignedArray).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicUnsignedArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicUnsignedArray;
      }(WebGLKernelValueDynamicUnsignedArray);

      module.exports = {
        WebGL2KernelValueDynamicUnsignedArray: WebGL2KernelValueDynamicUnsignedArray
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/dynamic-unsigned-array": 51
    }],
    87: [function (require, module, exports) {
      var _require225 = require('../../../utils'),
          utils = _require225.utils;

      var _require226 = require('../../web-gl/kernel-value/dynamic-unsigned-input'),
          WebGLKernelValueDynamicUnsignedInput = _require226.WebGLKernelValueDynamicUnsignedInput;

      var WebGL2KernelValueDynamicUnsignedInput =
      /*#__PURE__*/
      function (_WebGLKernelValueDyna6) {
        _inherits(WebGL2KernelValueDynamicUnsignedInput, _WebGLKernelValueDyna6);

        function WebGL2KernelValueDynamicUnsignedInput() {
          _classCallCheck(this, WebGL2KernelValueDynamicUnsignedInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueDynamicUnsignedInput).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueDynamicUnsignedInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "uniform ".concat(variablePrecision, " ivec2 ").concat(this.sizeId), "uniform ".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId)]);
          }
        }]);

        return WebGL2KernelValueDynamicUnsignedInput;
      }(WebGLKernelValueDynamicUnsignedInput);

      module.exports = {
        WebGL2KernelValueDynamicUnsignedInput: WebGL2KernelValueDynamicUnsignedInput
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/dynamic-unsigned-input": 52
    }],
    88: [function (require, module, exports) {
      var _require227 = require('../../../utils'),
          utils = _require227.utils;

      var _require228 = require('../../web-gl/kernel-value/float'),
          WebGLKernelValueFloat = _require228.WebGLKernelValueFloat;

      var WebGL2KernelValueFloat =
      /*#__PURE__*/
      function (_WebGLKernelValueFloa) {
        _inherits(WebGL2KernelValueFloat, _WebGLKernelValueFloa);

        function WebGL2KernelValueFloat() {
          _classCallCheck(this, WebGL2KernelValueFloat);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueFloat).apply(this, arguments));
        }

        return WebGL2KernelValueFloat;
      }(WebGLKernelValueFloat);

      module.exports = {
        WebGL2KernelValueFloat: WebGL2KernelValueFloat
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/float": 53
    }],
    89: [function (require, module, exports) {
      var _require229 = require('../../../utils'),
          utils = _require229.utils;

      var _require230 = require('../../web-gl/kernel-value/array'),
          WebGLKernelArray = _require230.WebGLKernelArray;

      var WebGL2KernelValueHTMLImageArray =
      /*#__PURE__*/
      function (_WebGLKernelArray11) {
        _inherits(WebGL2KernelValueHTMLImageArray, _WebGLKernelArray11);

        function WebGL2KernelValueHTMLImageArray(value, settings) {
          var _this46;

          _classCallCheck(this, WebGL2KernelValueHTMLImageArray);

          _this46 = _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueHTMLImageArray).call(this, value, settings));

          _this46.checkSize(value[0].width, value[0].height);

          _this46.dimensions = [value[0].width, value[0].height, value.length];
          _this46.textureSize = [value[0].width, value[0].height];
          return _this46;
        }

        _createClass(WebGL2KernelValueHTMLImageArray, [{
          key: "defineTexture",
          value: function defineTexture() {
            var gl = this.context;
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);
            gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
          }
        }, {
          key: "getStringValueHandler",
          value: function getStringValueHandler() {
            return "const uploadValue_".concat(this.name, " = ").concat(this.varName, ";\n");
          }
        }, {
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2DArray ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(images) {
            var gl = this.context;
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D_ARRAY, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
            gl.texImage3D(gl.TEXTURE_2D_ARRAY, 0, gl.RGBA, images[0].width, images[0].height, images.length, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);

            for (var i = 0; i < images.length; i++) {
              var xOffset = 0;
              var yOffset = 0;
              var imageDepth = 1;
              gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, xOffset, yOffset, i, images[i].width, images[i].height, imageDepth, gl.RGBA, gl.UNSIGNED_BYTE, this.uploadValue = images[i]);
            }

            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueHTMLImageArray;
      }(WebGLKernelArray);

      module.exports = {
        WebGL2KernelValueHTMLImageArray: WebGL2KernelValueHTMLImageArray
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/array": 40
    }],
    90: [function (require, module, exports) {
      var _require231 = require('../../../utils'),
          utils = _require231.utils;

      var _require232 = require('../../web-gl/kernel-value/html-image'),
          WebGLKernelValueHTMLImage = _require232.WebGLKernelValueHTMLImage;

      var WebGL2KernelValueHTMLImage =
      /*#__PURE__*/
      function (_WebGLKernelValueHTML3) {
        _inherits(WebGL2KernelValueHTMLImage, _WebGLKernelValueHTML3);

        function WebGL2KernelValueHTMLImage() {
          _classCallCheck(this, WebGL2KernelValueHTMLImage);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueHTMLImage).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueHTMLImage, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueHTMLImage;
      }(WebGLKernelValueHTMLImage);

      module.exports = {
        WebGL2KernelValueHTMLImage: WebGL2KernelValueHTMLImage
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/html-image": 54
    }],
    91: [function (require, module, exports) {
      var _require233 = require('../../../utils'),
          utils = _require233.utils;

      var _require234 = require('./html-image'),
          WebGL2KernelValueHTMLImage = _require234.WebGL2KernelValueHTMLImage;

      var WebGL2KernelValueHTMLVideo =
      /*#__PURE__*/
      function (_WebGL2KernelValueHTM2) {
        _inherits(WebGL2KernelValueHTMLVideo, _WebGL2KernelValueHTM2);

        function WebGL2KernelValueHTMLVideo() {
          _classCallCheck(this, WebGL2KernelValueHTMLVideo);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueHTMLVideo).apply(this, arguments));
        }

        return WebGL2KernelValueHTMLVideo;
      }(WebGL2KernelValueHTMLImage);

      module.exports = {
        WebGL2KernelValueHTMLVideo: WebGL2KernelValueHTMLVideo
      };
    }, {
      "../../../utils": 114,
      "./html-image": 90
    }],
    92: [function (require, module, exports) {
      var _require235 = require('../../web-gl/kernel-value/integer'),
          WebGLKernelValueInteger = _require235.WebGLKernelValueInteger;

      var WebGL2KernelValueInteger =
      /*#__PURE__*/
      function (_WebGLKernelValueInte) {
        _inherits(WebGL2KernelValueInteger, _WebGLKernelValueInte);

        function WebGL2KernelValueInteger() {
          _classCallCheck(this, WebGL2KernelValueInteger);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueInteger).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueInteger, [{
          key: "getSource",
          value: function getSource(value) {
            var variablePrecision = this.getVariablePrecisionString();

            if (this.origin === 'constants') {
              return "const ".concat(variablePrecision, " int ").concat(this.id, " = ").concat(parseInt(value), ";\n");
            }

            return "uniform ".concat(variablePrecision, " int ").concat(this.id, ";\n");
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (this.origin === 'constants') return;
            this.kernel.setUniform1i(this.id, this.uploadValue = value);
          }
        }]);

        return WebGL2KernelValueInteger;
      }(WebGLKernelValueInteger);

      module.exports = {
        WebGL2KernelValueInteger: WebGL2KernelValueInteger
      };
    }, {
      "../../web-gl/kernel-value/integer": 57
    }],
    93: [function (require, module, exports) {
      var _require236 = require('../../../utils'),
          utils = _require236.utils;

      var _require237 = require('../../web-gl/kernel-value/memory-optimized-number-texture'),
          WebGLKernelValueMemoryOptimizedNumberTexture = _require237.WebGLKernelValueMemoryOptimizedNumberTexture;

      var WebGL2KernelValueMemoryOptimizedNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueMemo2) {
        _inherits(WebGL2KernelValueMemoryOptimizedNumberTexture, _WebGLKernelValueMemo2);

        function WebGL2KernelValueMemoryOptimizedNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueMemoryOptimizedNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueMemoryOptimizedNumberTexture).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueMemoryOptimizedNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            var id = this.id,
                sizeId = this.sizeId,
                textureSize = this.textureSize,
                dimensionsId = this.dimensionsId,
                dimensions = this.dimensions;
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform sampler2D ".concat(id), "".concat(variablePrecision, " ivec2 ").concat(sizeId, " = ivec2(").concat(textureSize[0], ", ").concat(textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(dimensionsId, " = ivec3(").concat(dimensions[0], ", ").concat(dimensions[1], ", ").concat(dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueMemoryOptimizedNumberTexture;
      }(WebGLKernelValueMemoryOptimizedNumberTexture);

      module.exports = {
        WebGL2KernelValueMemoryOptimizedNumberTexture: WebGL2KernelValueMemoryOptimizedNumberTexture
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/memory-optimized-number-texture": 58
    }],
    94: [function (require, module, exports) {
      var _require238 = require('../../../utils'),
          utils = _require238.utils;

      var _require239 = require('../../web-gl/kernel-value/number-texture'),
          WebGLKernelValueNumberTexture = _require239.WebGLKernelValueNumberTexture;

      var WebGL2KernelValueNumberTexture =
      /*#__PURE__*/
      function (_WebGLKernelValueNumb2) {
        _inherits(WebGL2KernelValueNumberTexture, _WebGLKernelValueNumb2);

        function WebGL2KernelValueNumberTexture() {
          _classCallCheck(this, WebGL2KernelValueNumberTexture);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueNumberTexture).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueNumberTexture, [{
          key: "getSource",
          value: function getSource() {
            var id = this.id,
                sizeId = this.sizeId,
                textureSize = this.textureSize,
                dimensionsId = this.dimensionsId,
                dimensions = this.dimensions;
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(id), "".concat(variablePrecision, " ivec2 ").concat(sizeId, " = ivec2(").concat(textureSize[0], ", ").concat(textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(dimensionsId, " = ivec3(").concat(dimensions[0], ", ").concat(dimensions[1], ", ").concat(dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueNumberTexture;
      }(WebGLKernelValueNumberTexture);

      module.exports = {
        WebGL2KernelValueNumberTexture: WebGL2KernelValueNumberTexture
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/number-texture": 59
    }],
    95: [function (require, module, exports) {
      var _require240 = require('../../../utils'),
          utils = _require240.utils;

      var _require241 = require('../../web-gl/kernel-value/single-array'),
          WebGLKernelValueSingleArray = _require241.WebGLKernelValueSingleArray;

      var WebGL2KernelValueSingleArray =
      /*#__PURE__*/
      function (_WebGLKernelValueSing6) {
        _inherits(WebGL2KernelValueSingleArray, _WebGLKernelValueSing6);

        function WebGL2KernelValueSingleArray() {
          _classCallCheck(this, WebGL2KernelValueSingleArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueSingleArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray;
      }(WebGLKernelValueSingleArray);

      module.exports = {
        WebGL2KernelValueSingleArray: WebGL2KernelValueSingleArray
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/single-array": 60
    }],
    96: [function (require, module, exports) {
      var _require242 = require('../../../utils'),
          utils = _require242.utils;

      var _require243 = require('../../web-gl/kernel-value/single-array1d-i'),
          WebGLKernelValueSingleArray1DI = _require243.WebGLKernelValueSingleArray1DI;

      var WebGL2KernelValueSingleArray1DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing7) {
        _inherits(WebGL2KernelValueSingleArray1DI, _WebGLKernelValueSing7);

        function WebGL2KernelValueSingleArray1DI() {
          _classCallCheck(this, WebGL2KernelValueSingleArray1DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray1DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueSingleArray1DI, [{
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray1DI;
      }(WebGLKernelValueSingleArray1DI);

      module.exports = {
        WebGL2KernelValueSingleArray1DI: WebGL2KernelValueSingleArray1DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/single-array1d-i": 61
    }],
    97: [function (require, module, exports) {
      var _require244 = require('../../web-gl/kernel-value/single-array2'),
          WebGLKernelValueSingleArray2 = _require244.WebGLKernelValueSingleArray2;

      var WebGL2KernelValueSingleArray2 =
      /*#__PURE__*/
      function (_WebGLKernelValueSing8) {
        _inherits(WebGL2KernelValueSingleArray2, _WebGLKernelValueSing8);

        function WebGL2KernelValueSingleArray2() {
          _classCallCheck(this, WebGL2KernelValueSingleArray2);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray2).apply(this, arguments));
        }

        return WebGL2KernelValueSingleArray2;
      }(WebGLKernelValueSingleArray2);

      module.exports = {
        WebGL2KernelValueSingleArray2: WebGL2KernelValueSingleArray2
      };
    }, {
      "../../web-gl/kernel-value/single-array2": 62
    }],
    98: [function (require, module, exports) {
      var _require245 = require('../../../utils'),
          utils = _require245.utils;

      var _require246 = require('../../web-gl/kernel-value/single-array2d-i'),
          WebGLKernelValueSingleArray2DI = _require246.WebGLKernelValueSingleArray2DI;

      var WebGL2KernelValueSingleArray2DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing9) {
        _inherits(WebGL2KernelValueSingleArray2DI, _WebGLKernelValueSing9);

        function WebGL2KernelValueSingleArray2DI() {
          _classCallCheck(this, WebGL2KernelValueSingleArray2DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray2DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueSingleArray2DI, [{
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray2DI;
      }(WebGLKernelValueSingleArray2DI);

      module.exports = {
        WebGL2KernelValueSingleArray2DI: WebGL2KernelValueSingleArray2DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/single-array2d-i": 63
    }],
    99: [function (require, module, exports) {
      var _require247 = require('../../web-gl/kernel-value/single-array3'),
          WebGLKernelValueSingleArray3 = _require247.WebGLKernelValueSingleArray3;

      var WebGL2KernelValueSingleArray3 =
      /*#__PURE__*/
      function (_WebGLKernelValueSing10) {
        _inherits(WebGL2KernelValueSingleArray3, _WebGLKernelValueSing10);

        function WebGL2KernelValueSingleArray3() {
          _classCallCheck(this, WebGL2KernelValueSingleArray3);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray3).apply(this, arguments));
        }

        return WebGL2KernelValueSingleArray3;
      }(WebGLKernelValueSingleArray3);

      module.exports = {
        WebGL2KernelValueSingleArray3: WebGL2KernelValueSingleArray3
      };
    }, {
      "../../web-gl/kernel-value/single-array3": 64
    }],
    100: [function (require, module, exports) {
      var _require248 = require('../../../utils'),
          utils = _require248.utils;

      var _require249 = require('../../web-gl/kernel-value/single-array3d-i'),
          WebGLKernelValueSingleArray3DI = _require249.WebGLKernelValueSingleArray3DI;

      var WebGL2KernelValueSingleArray3DI =
      /*#__PURE__*/
      function (_WebGLKernelValueSing11) {
        _inherits(WebGL2KernelValueSingleArray3DI, _WebGLKernelValueSing11);

        function WebGL2KernelValueSingleArray3DI() {
          _classCallCheck(this, WebGL2KernelValueSingleArray3DI);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray3DI).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueSingleArray3DI, [{
          key: "updateValue",
          value: function updateValue(value) {
            if (value.constructor !== this.initialValueConstructor) {
              this.onUpdateValueMismatch(value.constructor);
              return;
            }

            var gl = this.context;
            utils.flattenTo(value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleArray3DI;
      }(WebGLKernelValueSingleArray3DI);

      module.exports = {
        WebGL2KernelValueSingleArray3DI: WebGL2KernelValueSingleArray3DI
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/single-array3d-i": 65
    }],
    101: [function (require, module, exports) {
      var _require250 = require('../../web-gl/kernel-value/single-array4'),
          WebGLKernelValueSingleArray4 = _require250.WebGLKernelValueSingleArray4;

      var WebGL2KernelValueSingleArray4 =
      /*#__PURE__*/
      function (_WebGLKernelValueSing12) {
        _inherits(WebGL2KernelValueSingleArray4, _WebGLKernelValueSing12);

        function WebGL2KernelValueSingleArray4() {
          _classCallCheck(this, WebGL2KernelValueSingleArray4);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleArray4).apply(this, arguments));
        }

        return WebGL2KernelValueSingleArray4;
      }(WebGLKernelValueSingleArray4);

      module.exports = {
        WebGL2KernelValueSingleArray4: WebGL2KernelValueSingleArray4
      };
    }, {
      "../../web-gl/kernel-value/single-array4": 66
    }],
    102: [function (require, module, exports) {
      var _require251 = require('../../../utils'),
          utils = _require251.utils;

      var _require252 = require('../../web-gl/kernel-value/single-input'),
          WebGLKernelValueSingleInput = _require252.WebGLKernelValueSingleInput;

      var WebGL2KernelValueSingleInput =
      /*#__PURE__*/
      function (_WebGLKernelValueSing13) {
        _inherits(WebGL2KernelValueSingleInput, _WebGLKernelValueSing13);

        function WebGL2KernelValueSingleInput() {
          _classCallCheck(this, WebGL2KernelValueSingleInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueSingleInput).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueSingleInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }, {
          key: "updateValue",
          value: function updateValue(input) {
            var gl = this.context;
            utils.flattenTo(input.value, this.uploadValue);
            gl.activeTexture(this.contextHandle);
            gl.bindTexture(gl.TEXTURE_2D, this.texture);
            gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA32F, this.textureSize[0], this.textureSize[1], 0, gl.RGBA, gl.FLOAT, this.uploadValue);
            this.kernel.setUniform1i(this.id, this.index);
          }
        }]);

        return WebGL2KernelValueSingleInput;
      }(WebGLKernelValueSingleInput);

      module.exports = {
        WebGL2KernelValueSingleInput: WebGL2KernelValueSingleInput
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/single-input": 67
    }],
    103: [function (require, module, exports) {
      var _require253 = require('../../../utils'),
          utils = _require253.utils;

      var _require254 = require('../../web-gl/kernel-value/unsigned-array'),
          WebGLKernelValueUnsignedArray = _require254.WebGLKernelValueUnsignedArray;

      var WebGL2KernelValueUnsignedArray =
      /*#__PURE__*/
      function (_WebGLKernelValueUnsi3) {
        _inherits(WebGL2KernelValueUnsignedArray, _WebGLKernelValueUnsi3);

        function WebGL2KernelValueUnsignedArray() {
          _classCallCheck(this, WebGL2KernelValueUnsignedArray);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueUnsignedArray).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueUnsignedArray, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueUnsignedArray;
      }(WebGLKernelValueUnsignedArray);

      module.exports = {
        WebGL2KernelValueUnsignedArray: WebGL2KernelValueUnsignedArray
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/unsigned-array": 68
    }],
    104: [function (require, module, exports) {
      var _require255 = require('../../../utils'),
          utils = _require255.utils;

      var _require256 = require('../../web-gl/kernel-value/unsigned-input'),
          WebGLKernelValueUnsignedInput = _require256.WebGLKernelValueUnsignedInput;

      var WebGL2KernelValueUnsignedInput =
      /*#__PURE__*/
      function (_WebGLKernelValueUnsi4) {
        _inherits(WebGL2KernelValueUnsignedInput, _WebGLKernelValueUnsi4);

        function WebGL2KernelValueUnsignedInput() {
          _classCallCheck(this, WebGL2KernelValueUnsignedInput);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2KernelValueUnsignedInput).apply(this, arguments));
        }

        _createClass(WebGL2KernelValueUnsignedInput, [{
          key: "getSource",
          value: function getSource() {
            var variablePrecision = this.getVariablePrecisionString();
            return utils.linesToString(["uniform ".concat(variablePrecision, " sampler2D ").concat(this.id), "".concat(variablePrecision, " ivec2 ").concat(this.sizeId, " = ivec2(").concat(this.textureSize[0], ", ").concat(this.textureSize[1], ")"), "".concat(variablePrecision, " ivec3 ").concat(this.dimensionsId, " = ivec3(").concat(this.dimensions[0], ", ").concat(this.dimensions[1], ", ").concat(this.dimensions[2], ")")]);
          }
        }]);

        return WebGL2KernelValueUnsignedInput;
      }(WebGLKernelValueUnsignedInput);

      module.exports = {
        WebGL2KernelValueUnsignedInput: WebGL2KernelValueUnsignedInput
      };
    }, {
      "../../../utils": 114,
      "../../web-gl/kernel-value/unsigned-input": 69
    }],
    105: [function (require, module, exports) {
      var _require257 = require('../web-gl/kernel'),
          WebGLKernel = _require257.WebGLKernel;

      var _require258 = require('./function-node'),
          WebGL2FunctionNode = _require258.WebGL2FunctionNode;

      var _require259 = require('../function-builder'),
          FunctionBuilder = _require259.FunctionBuilder;

      var _require260 = require('../../utils'),
          utils = _require260.utils;

      var _require261 = require('./fragment-shader'),
          fragmentShader = _require261.fragmentShader;

      var _require262 = require('./vertex-shader'),
          vertexShader = _require262.vertexShader;

      var _require263 = require('./kernel-value-maps'),
          _lookupKernelValueType2 = _require263.lookupKernelValueType;

      var isSupported = null;
      var testCanvas = null;
      var testContext = null;
      var testExtensions = null;
      var features = null;

      var WebGL2Kernel =
      /*#__PURE__*/
      function (_WebGLKernel2) {
        _inherits(WebGL2Kernel, _WebGLKernel2);

        function WebGL2Kernel() {
          _classCallCheck(this, WebGL2Kernel);

          return _possibleConstructorReturn(this, _getPrototypeOf(WebGL2Kernel).apply(this, arguments));
        }

        _createClass(WebGL2Kernel, [{
          key: "initContext",
          value: function initContext() {
            var settings = {
              alpha: false,
              depth: false,
              antialias: false
            };
            return this.canvas.getContext('webgl2', settings);
          }
        }, {
          key: "initExtensions",
          value: function initExtensions() {
            this.extensions = {
              EXT_color_buffer_float: this.context.getExtension('EXT_color_buffer_float'),
              OES_texture_float_linear: this.context.getExtension('OES_texture_float_linear')
            };
          }
        }, {
          key: "validateSettings",
          value: function validateSettings(args) {
            if (!this.validate) {
              this.texSize = utils.getKernelTextureSize({
                optimizeFloatMemory: this.optimizeFloatMemory,
                precision: this.precision
              }, this.output);
              return;
            }

            var features = this.constructor.features;

            if (this.precision === 'single' && !features.isFloatRead) {
              throw new Error('Float texture outputs are not supported');
            } else if (!this.graphical && this.precision === null) {
              this.precision = features.isFloatRead ? 'single' : 'unsigned';
            }

            if (this.fixIntegerDivisionAccuracy === null) {
              this.fixIntegerDivisionAccuracy = !features.isIntegerDivisionAccurate;
            } else if (this.fixIntegerDivisionAccuracy && features.isIntegerDivisionAccurate) {
              this.fixIntegerDivisionAccuracy = false;
            }

            this.checkOutput();

            if (!this.output || this.output.length === 0) {
              if (args.length !== 1) {
                throw new Error('Auto output only supported for kernels with only one input');
              }

              var argType = utils.getVariableType(args[0], this.strictIntegers);

              switch (argType) {
                case 'Array':
                  this.output = utils.getDimensions(argType);
                  break;

                case 'NumberTexture':
                case 'MemoryOptimizedNumberTexture':
                case 'ArrayTexture(1)':
                case 'ArrayTexture(2)':
                case 'ArrayTexture(3)':
                case 'ArrayTexture(4)':
                  this.output = args[0].output;
                  break;

                default:
                  throw new Error('Auto output not supported for input type: ' + argType);
              }
            }

            if (this.graphical) {
              if (this.output.length !== 2) {
                throw new Error('Output must have 2 dimensions on graphical mode');
              }

              if (this.precision === 'single') {
                console.warn('Cannot use graphical mode and single precision at the same time');
                this.precision = 'unsigned';
              }

              this.texSize = utils.clone(this.output);
              return;
            } else if (!this.graphical && this.precision === null && features.isTextureFloat) {
              this.precision = 'single';
            }

            this.texSize = utils.getKernelTextureSize({
              optimizeFloatMemory: this.optimizeFloatMemory,
              precision: this.precision
            }, this.output);
            this.checkTextureSize();
          }
        }, {
          key: "translateSource",
          value: function translateSource() {
            var functionBuilder = FunctionBuilder.fromKernel(this, WebGL2FunctionNode, {
              fixIntegerDivisionAccuracy: this.fixIntegerDivisionAccuracy
            });
            this.translatedSource = functionBuilder.getPrototypeString('kernel');
            this.setupReturnTypes(functionBuilder);
          }
        }, {
          key: "drawBuffers",
          value: function drawBuffers() {
            this.context.drawBuffers(this.drawBuffersMap);
          }
        }, {
          key: "getTextureFormat",
          value: function getTextureFormat() {
            var gl = this.context;

            switch (this.getInternalFormat()) {
              case gl.R32F:
                return gl.RED;

              case gl.RG32F:
                return gl.RG;

              case gl.RGBA32F:
                return gl.RGBA;

              case gl.RGBA:
                return gl.RGBA;

              default:
                throw new Error('Unknown internal format');
            }
          }
        }, {
          key: "getInternalFormat",
          value: function getInternalFormat() {
            var gl = this.context,
                optimizeFloatMemory = this.optimizeFloatMemory,
                pipeline = this.pipeline,
                precision = this.precision;

            if (this.precision === 'single') {
              if (this.pipeline) {
                switch (this.returnType) {
                  case 'Number':
                  case 'Float':
                  case 'Integer':
                    if (this.optimizeFloatMemory) {
                      return gl.RGBA32F;
                    } else {
                      return gl.R32F;
                    }

                  case 'Array(2)':
                    return gl.RG32F;

                  case 'Array(3)':
                  case 'Array(4)':
                    return gl.RGBA32F;

                  default:
                    throw new Error('Unhandled return type');
                }
              }

              return gl.RGBA32F;
            }

            return gl.RGBA;
          }
        }, {
          key: "_setupOutputTexture",
          value: function _setupOutputTexture() {
            var gl = this.context;

            if (this.texture) {
              this.texture.beforeMutate();
              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture.texture, 0);
              return;
            }

            var texture = gl.createTexture();
            var texSize = this.texSize;
            gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount);
            gl.bindTexture(gl.TEXTURE_2D, texture);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            var format = this.getInternalFormat();

            if (this.precision === 'single') {
              gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);
            } else {
              gl.texImage2D(gl.TEXTURE_2D, 0, format, texSize[0], texSize[1], 0, format, gl.UNSIGNED_BYTE, null);
            }

            gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
            this.texture = new this.TextureConstructor({
              texture: texture,
              size: texSize,
              dimensions: this.threadDim,
              output: this.output,
              context: this.context,
              internalFormat: this.getInternalFormat(),
              textureFormat: this.getTextureFormat(),
              kernel: this
            });
          }
        }, {
          key: "_setupSubOutputTextures",
          value: function _setupSubOutputTextures() {
            var gl = this.context;

            if (this.mappedTextures && this.mappedTextures.length > 0) {
              for (var i = 0; i < this.mappedTextures.length; i++) {
                var mappedTexture = this.mappedTextures[i];
                mappedTexture.beforeMutate();
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i + 1, gl.TEXTURE_2D, mappedTexture.texture, 0);
              }

              return;
            }

            var texSize = this.texSize;
            this.drawBuffersMap = [gl.COLOR_ATTACHMENT0];
            this.mappedTextures = [];

            for (var _i30 = 0; _i30 < this.subKernels.length; _i30++) {
              var texture = this.createTexture();
              this.drawBuffersMap.push(gl.COLOR_ATTACHMENT0 + _i30 + 1);
              gl.activeTexture(gl.TEXTURE0 + this.constantTextureCount + this.argumentTextureCount + _i30);
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
              var format = this.getInternalFormat();

              if (this.precision === 'single') {
                gl.texStorage2D(gl.TEXTURE_2D, 1, format, texSize[0], texSize[1]);
              } else {
                gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, texSize[0], texSize[1], 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
              }

              gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i30 + 1, gl.TEXTURE_2D, texture, 0);
              this.mappedTextures.push(new this.TextureConstructor({
                texture: texture,
                size: texSize,
                dimensions: this.threadDim,
                output: this.output,
                context: this.context,
                internalFormat: this.getInternalFormat(),
                textureFormat: this.getTextureFormat(),
                kernel: this
              }));
            }
          }
        }, {
          key: "_getHeaderString",
          value: function _getHeaderString() {
            return '';
          }
        }, {
          key: "_getTextureCoordinate",
          value: function _getTextureCoordinate() {
            var subKernels = this.subKernels;
            var variablePrecision = this.getVariablePrecisionString(this.texSize, this.tactic);

            if (subKernels === null || subKernels.length < 1) {
              return "in ".concat(variablePrecision, " vec2 vTexCoord;\n");
            } else {
              return "out ".concat(variablePrecision, " vec2 vTexCoord;\n");
            }
          }
        }, {
          key: "_getMainArgumentsString",
          value: function _getMainArgumentsString(args) {
            var result = [];
            var argumentNames = this.argumentNames;

            for (var i = 0; i < argumentNames.length; i++) {
              result.push(this.kernelArguments[i].getSource(args[i]));
            }

            return result.join('');
          }
        }, {
          key: "getKernelString",
          value: function getKernelString() {
            var result = [];
            var subKernels = this.subKernels;

            if (subKernels !== null) {
              result.push(this.getKernelResultDeclaration(), 'layout(location = 0) out vec4 data0');

              for (var i = 0; i < subKernels.length; i++) {
                var subKernel = subKernels[i];
                result.push(subKernel.returnType === 'Integer' ? "int subKernelResult_".concat(subKernel.name, " = 0") : "float subKernelResult_".concat(subKernel.name, " = 0.0"), "layout(location = ".concat(i + 1, ") out vec4 data").concat(i + 1));
              }
            } else {
              result.push('out vec4 data0', this.getKernelResultDeclaration());
            }

            return utils.linesToString(result) + this.translatedSource;
          }
        }, {
          key: "getMainResultGraphical",
          value: function getMainResultGraphical() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0 = actualColor']);
          }
        }, {
          key: "getMainResultPackedPixels",
          value: function getMainResultPackedPixels() {
            switch (this.returnType) {
              case 'LiteralInteger':
              case 'Number':
              case 'Integer':
              case 'Float':
                return this.getMainResultKernelPackedPixels() + this.getMainResultSubKernelPackedPixels();

              default:
                throw new Error("packed output only usable with Numbers, \"".concat(this.returnType, "\" specified"));
            }
          }
        }, {
          key: "getMainResultKernelPackedPixels",
          value: function getMainResultKernelPackedPixels() {
            return utils.linesToString(['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  data0 = ".concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(kernelResult)")]);
          }
        }, {
          key: "getMainResultSubKernelPackedPixels",
          value: function getMainResultSubKernelPackedPixels() {
            var result = [];
            if (!this.subKernels) return '';

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  data".concat(i + 1, " = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(float(subKernelResult_").concat(this.subKernels[i].name, "))"));
              } else {
                result.push("  data".concat(i + 1, " = ").concat(this.useLegacyEncoder ? 'legacyEncode32' : 'encode32', "(subKernelResult_").concat(this.subKernels[i].name, ")"));
              }
            }

            return utils.linesToString(result);
          }
        }, {
          key: "getMainResultKernelMemoryOptimizedFloats",
          value: function getMainResultKernelMemoryOptimizedFloats(result, channel) {
            result.push('  threadId = indexTo3D(index, uOutputDim)', '  kernel()', "  data0.".concat(channel, " = kernelResult"));
          }
        }, {
          key: "getMainResultSubKernelMemoryOptimizedFloats",
          value: function getMainResultSubKernelMemoryOptimizedFloats(result, channel) {
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; i++) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  data".concat(i + 1, ".").concat(channel, " = float(subKernelResult_").concat(subKernel.name, ")"));
              } else {
                result.push("  data".concat(i + 1, ".").concat(channel, " = subKernelResult_").concat(subKernel.name));
              }
            }
          }
        }, {
          key: "getMainResultKernelNumberTexture",
          value: function getMainResultKernelNumberTexture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0[0] = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelNumberTexture",
          value: function getMainResultSubKernelNumberTexture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];

              if (subKernel.returnType === 'Integer') {
                result.push("  data".concat(i + 1, "[0] = float(subKernelResult_").concat(subKernel.name, ")"));
              } else {
                result.push("  data".concat(i + 1, "[0] = subKernelResult_").concat(subKernel.name));
              }
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray2Texture",
          value: function getMainResultKernelArray2Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0[0] = kernelResult[0]', '  data0[1] = kernelResult[1]'];
          }
        }, {
          key: "getMainResultSubKernelArray2Texture",
          value: function getMainResultSubKernelArray2Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];
              result.push("  data".concat(i + 1, "[0] = subKernelResult_").concat(subKernel.name, "[0]"), "  data".concat(i + 1, "[1] = subKernelResult_").concat(subKernel.name, "[1]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray3Texture",
          value: function getMainResultKernelArray3Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0[0] = kernelResult[0]', '  data0[1] = kernelResult[1]', '  data0[2] = kernelResult[2]'];
          }
        }, {
          key: "getMainResultSubKernelArray3Texture",
          value: function getMainResultSubKernelArray3Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              var subKernel = this.subKernels[i];
              result.push("  data".concat(i + 1, "[0] = subKernelResult_").concat(subKernel.name, "[0]"), "  data".concat(i + 1, "[1] = subKernelResult_").concat(subKernel.name, "[1]"), "  data".concat(i + 1, "[2] = subKernelResult_").concat(subKernel.name, "[2]"));
            }

            return result;
          }
        }, {
          key: "getMainResultKernelArray4Texture",
          value: function getMainResultKernelArray4Texture() {
            return ['  threadId = indexTo3D(index, uOutputDim)', '  kernel()', '  data0 = kernelResult'];
          }
        }, {
          key: "getMainResultSubKernelArray4Texture",
          value: function getMainResultSubKernelArray4Texture() {
            var result = [];
            if (!this.subKernels) return result;

            for (var i = 0; i < this.subKernels.length; ++i) {
              result.push("  data".concat(i + 1, " = subKernelResult_").concat(this.subKernels[i].name));
            }

            return result;
          }
        }, {
          key: "destroyExtensions",
          value: function destroyExtensions() {
            this.extensions.EXT_color_buffer_float = null;
            this.extensions.OES_texture_float_linear = null;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            var json = _get(_getPrototypeOf(WebGL2Kernel.prototype), "toJSON", this).call(this);

            json.functionNodes = FunctionBuilder.fromKernel(this, WebGL2FunctionNode).toJSON();
            json.settings.threadDim = this.threadDim;
            return json;
          }
        }], [{
          key: "setupFeatureChecks",
          value: function setupFeatureChecks() {
            if (typeof document !== 'undefined') {
              testCanvas = document.createElement('canvas');
            } else if (typeof OffscreenCanvas !== 'undefined') {
              testCanvas = new OffscreenCanvas(0, 0);
            }

            if (!testCanvas) return;
            testContext = testCanvas.getContext('webgl2');
            if (!testContext || !testContext.getExtension) return;
            testExtensions = {
              EXT_color_buffer_float: testContext.getExtension('EXT_color_buffer_float'),
              OES_texture_float_linear: testContext.getExtension('OES_texture_float_linear')
            };
            features = this.getFeatures();
          }
        }, {
          key: "isContextMatch",
          value: function isContextMatch(context) {
            if (typeof WebGL2RenderingContext !== 'undefined') {
              return context instanceof WebGL2RenderingContext;
            }

            return false;
          }
        }, {
          key: "getFeatures",
          value: function getFeatures() {
            var gl = this.testContext;
            return Object.freeze({
              isFloatRead: this.getIsFloatRead(),
              isIntegerDivisionAccurate: this.getIsIntegerDivisionAccurate(),
              kernelMap: true,
              isTextureFloat: true,
              isDrawBuffers: true,
              channelCount: this.getChannelCount(),
              maxTextureSize: this.getMaxTextureSize(),
              lowIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT),
              lowFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT),
              mediumIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT),
              mediumFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT),
              highIntPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT),
              highFloatPrecision: gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT)
            });
          }
        }, {
          key: "getIsTextureFloat",
          value: function getIsTextureFloat() {
            return true;
          }
        }, {
          key: "getIsIntegerDivisionAccurate",
          value: function getIsIntegerDivisionAccurate() {
            return _get(_getPrototypeOf(WebGL2Kernel), "getIsIntegerDivisionAccurate", this).call(this);
          }
        }, {
          key: "getChannelCount",
          value: function getChannelCount() {
            return testContext.getParameter(testContext.MAX_DRAW_BUFFERS);
          }
        }, {
          key: "getMaxTextureSize",
          value: function getMaxTextureSize() {
            return testContext.getParameter(testContext.MAX_TEXTURE_SIZE);
          }
        }, {
          key: "lookupKernelValueType",
          value: function lookupKernelValueType(type, dynamic, precision, value) {
            return _lookupKernelValueType2(type, dynamic, precision, value);
          }
        }, {
          key: "isSupported",
          get: function get() {
            if (isSupported !== null) {
              return isSupported;
            }

            this.setupFeatureChecks();
            isSupported = this.isContextMatch(testContext);
            return isSupported;
          }
        }, {
          key: "testCanvas",
          get: function get() {
            return testCanvas;
          }
        }, {
          key: "testContext",
          get: function get() {
            return testContext;
          }
        }, {
          key: "features",
          get: function get() {
            return features;
          }
        }, {
          key: "fragmentShader",
          get: function get() {
            return fragmentShader;
          }
        }, {
          key: "vertexShader",
          get: function get() {
            return vertexShader;
          }
        }]);

        return WebGL2Kernel;
      }(WebGLKernel);

      module.exports = {
        WebGL2Kernel: WebGL2Kernel
      };
    }, {
      "../../utils": 114,
      "../function-builder": 9,
      "../web-gl/kernel": 70,
      "./fragment-shader": 72,
      "./function-node": 73,
      "./kernel-value-maps": 74,
      "./vertex-shader": 106
    }],
    106: [function (require, module, exports) {
      var vertexShader = "#version 300 es\n__FLOAT_TACTIC_DECLARATION__;\n__INT_TACTIC_DECLARATION__;\n__SAMPLER_2D_TACTIC_DECLARATION__;\n\nin vec2 aPos;\nin vec2 aTexCoord;\n\nout vec2 vTexCoord;\nuniform vec2 ratio;\n\nvoid main(void) {\n  gl_Position = vec4((aPos + vec2(1)) * ratio + vec2(-1), 0, 1);\n  vTexCoord = aTexCoord;\n}";
      module.exports = {
        vertexShader: vertexShader
      };
    }, {}],
    107: [function (require, module, exports) {
      var lib = require('./index');

      var GPU = lib.GPU;

      for (var p in lib) {
        if (!lib.hasOwnProperty(p)) continue;
        if (p === 'GPU') continue;
        GPU[p] = lib[p];
      }

      if (typeof window !== 'undefined') {
        bindTo(window);
      }

      if (typeof self !== 'undefined') {
        bindTo(self);
      }

      function bindTo(target) {
        if (target.GPU) return;
        Object.defineProperty(target, 'GPU', {
          get: function get() {
            return GPU;
          }
        });
      }

      module.exports = lib;
    }, {
      "./index": 109
    }],
    108: [function (require, module, exports) {
      var _require264 = require('gpu-mock.js'),
          gpuMock = _require264.gpuMock;

      var _require265 = require('./utils'),
          utils = _require265.utils;

      var _require266 = require('./backend/kernel'),
          Kernel = _require266.Kernel;

      var _require267 = require('./backend/cpu/kernel'),
          CPUKernel = _require267.CPUKernel;

      var _require268 = require('./backend/headless-gl/kernel'),
          HeadlessGLKernel = _require268.HeadlessGLKernel;

      var _require269 = require('./backend/web-gl2/kernel'),
          WebGL2Kernel = _require269.WebGL2Kernel;

      var _require270 = require('./backend/web-gl/kernel'),
          WebGLKernel = _require270.WebGLKernel;

      var _require271 = require('./kernel-run-shortcut'),
          kernelRunShortcut = _require271.kernelRunShortcut;

      var kernelOrder = [HeadlessGLKernel, WebGL2Kernel, WebGLKernel];
      var kernelTypes = ['gpu', 'cpu'];
      var internalKernels = {
        'headlessgl': HeadlessGLKernel,
        'webgl2': WebGL2Kernel,
        'webgl': WebGLKernel
      };
      var validate = true;

      var GPU =
      /*#__PURE__*/
      function () {
        _createClass(GPU, null, [{
          key: "disableValidation",
          value: function disableValidation() {
            validate = false;
          }
        }, {
          key: "enableValidation",
          value: function enableValidation() {
            validate = true;
          }
        }, {
          key: "isGPUSupported",
          get: function get() {
            return kernelOrder.some(function (Kernel) {
              return Kernel.isSupported;
            });
          }
        }, {
          key: "isKernelMapSupported",
          get: function get() {
            return kernelOrder.some(function (Kernel) {
              return Kernel.isSupported && Kernel.features.kernelMap;
            });
          }
        }, {
          key: "isOffscreenCanvasSupported",
          get: function get() {
            return typeof Worker !== 'undefined' && typeof OffscreenCanvas !== 'undefined' || typeof importScripts !== 'undefined';
          }
        }, {
          key: "isWebGLSupported",
          get: function get() {
            return WebGLKernel.isSupported;
          }
        }, {
          key: "isWebGL2Supported",
          get: function get() {
            return WebGL2Kernel.isSupported;
          }
        }, {
          key: "isHeadlessGLSupported",
          get: function get() {
            return HeadlessGLKernel.isSupported;
          }
        }, {
          key: "isCanvasSupported",
          get: function get() {
            return typeof HTMLCanvasElement !== 'undefined';
          }
        }, {
          key: "isGPUHTMLImageArraySupported",
          get: function get() {
            return WebGL2Kernel.isSupported;
          }
        }, {
          key: "isSinglePrecisionSupported",
          get: function get() {
            return kernelOrder.some(function (Kernel) {
              return Kernel.isSupported && Kernel.features.isFloatRead && Kernel.features.isTextureFloat;
            });
          }
        }]);

        function GPU(settings) {
          _classCallCheck(this, GPU);

          settings = settings || {};
          this.canvas = settings.canvas || null;
          this.context = settings.context || null;
          this.mode = settings.mode;
          this.Kernel = null;
          this.kernels = [];
          this.functions = [];
          this.nativeFunctions = [];
          this.injectedNative = null;
          this.onIstanbulCoverageVariable = settings.onIstanbulCoverageVariable || null;
          this.removeIstanbulCoverage = settings.hasOwnProperty('removeIstanbulCoverage') ? settings.removeIstanbulCoverage : null;
          if (this.mode === 'dev') return;
          this.chooseKernel();

          if (settings.functions) {
            for (var i = 0; i < settings.functions.length; i++) {
              this.addFunction(settings.functions[i]);
            }
          }

          if (settings.nativeFunctions) {
            for (var p in settings.nativeFunctions) {
              if (!settings.nativeFunctions.hasOwnProperty(p)) continue;
              var s = settings.nativeFunctions[p];
              var _name11 = s.name,
                  source = s.source;
              this.addNativeFunction(_name11, source, s);
            }
          }
        }

        _createClass(GPU, [{
          key: "chooseKernel",
          value: function chooseKernel() {
            if (this.Kernel) return;
            var Kernel = null;

            if (this.context) {
              for (var i = 0; i < kernelOrder.length; i++) {
                var ExternalKernel = kernelOrder[i];

                if (ExternalKernel.isContextMatch(this.context)) {
                  if (!ExternalKernel.isSupported) {
                    throw new Error("Kernel type ".concat(ExternalKernel.name, " not supported"));
                  }

                  Kernel = ExternalKernel;
                  break;
                }
              }

              if (Kernel === null) {
                throw new Error('unknown Context');
              }
            } else if (this.mode) {
              if (this.mode in internalKernels) {
                if (!validate || internalKernels[this.mode].isSupported) {
                  Kernel = internalKernels[this.mode];
                }
              } else if (this.mode === 'gpu') {
                for (var _i31 = 0; _i31 < kernelOrder.length; _i31++) {
                  if (kernelOrder[_i31].isSupported) {
                    Kernel = kernelOrder[_i31];
                    break;
                  }
                }
              } else if (this.mode === 'cpu') {
                Kernel = CPUKernel;
              }

              if (!Kernel) {
                throw new Error("A requested mode of \"".concat(this.mode, "\" and is not supported"));
              }
            } else {
              for (var _i32 = 0; _i32 < kernelOrder.length; _i32++) {
                if (kernelOrder[_i32].isSupported) {
                  Kernel = kernelOrder[_i32];
                  break;
                }
              }

              if (!Kernel) {
                Kernel = CPUKernel;
              }
            }

            if (!this.mode) {
              this.mode = Kernel.mode;
            }

            this.Kernel = Kernel;
          }
        }, {
          key: "createKernel",
          value: function createKernel(source, settings) {
            if (typeof source === 'undefined') {
              throw new Error('Missing source parameter');
            }

            if (_typeof(source) !== 'object' && !utils.isFunction(source) && typeof source !== 'string') {
              throw new Error('source parameter not a function');
            }

            if (this.mode === 'dev') {
              var devKernel = gpuMock(source, upgradeDeprecatedCreateKernelSettings(settings));
              this.kernels.push(devKernel);
              return devKernel;
            }

            source = typeof source === 'function' ? source.toString() : source;
            var switchableKernels = {};
            var settingsCopy = upgradeDeprecatedCreateKernelSettings(settings) || {};

            if (settings && _typeof(settings.argumentTypes) === 'object') {
              settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(function (argumentName) {
                return settings.argumentTypes[argumentName];
              });
            }

            function onRequestFallback(args) {
              console.warn('Falling back to CPU');
              var fallbackKernel = new CPUKernel(source, {
                argumentTypes: kernelRun.argumentTypes,
                constantTypes: kernelRun.constantTypes,
                graphical: kernelRun.graphical,
                loopMaxIterations: kernelRun.loopMaxIterations,
                constants: kernelRun.constants,
                dynamicOutput: kernelRun.dynamicOutput,
                dynamicArgument: kernelRun.dynamicArguments,
                output: kernelRun.output,
                precision: kernelRun.precision,
                pipeline: kernelRun.pipeline,
                immutable: kernelRun.immutable,
                optimizeFloatMemory: kernelRun.optimizeFloatMemory,
                fixIntegerDivisionAccuracy: kernelRun.fixIntegerDivisionAccuracy,
                functions: kernelRun.functions,
                nativeFunctions: kernelRun.nativeFunctions,
                injectedNative: kernelRun.injectedNative,
                subKernels: kernelRun.subKernels,
                strictIntegers: kernelRun.strictIntegers,
                debug: kernelRun.debug
              });
              fallbackKernel.build.apply(fallbackKernel, args);
              var result = fallbackKernel.run.apply(fallbackKernel, args);
              kernelRun.replaceKernel(fallbackKernel);
              return result;
            }

            function onRequestSwitchKernel(reasons, args, kernel) {
              if (kernel.debug) {
                console.warn('Switching kernels');
              }

              var newOutput = null;

              if (kernel.signature && !switchableKernels[kernel.signature]) {
                switchableKernels[kernel.signature] = kernel;
              }

              if (kernel.dynamicOutput) {
                for (var i = reasons.length - 1; i >= 0; i--) {
                  var reason = reasons[i];

                  if (reason.type === 'outputPrecisionMismatch') {
                    newOutput = reason.needed;
                  }
                }
              }

              var Constructor = kernel.constructor;
              var argumentTypes = Constructor.getArgumentTypes(kernel, args);
              var signature = Constructor.getSignature(kernel, argumentTypes);
              var existingKernel = switchableKernels[signature];

              if (existingKernel) {
                return existingKernel;
              }

              var newKernel = switchableKernels[signature] = new Constructor(source, {
                argumentTypes: argumentTypes,
                constantTypes: kernel.constantTypes,
                graphical: kernel.graphical,
                loopMaxIterations: kernel.loopMaxIterations,
                constants: kernel.constants,
                dynamicOutput: kernel.dynamicOutput,
                dynamicArgument: kernel.dynamicArguments,
                context: kernel.context,
                canvas: kernel.canvas,
                output: newOutput || kernel.output,
                precision: kernel.precision,
                pipeline: kernel.pipeline,
                immutable: kernel.immutable,
                optimizeFloatMemory: kernel.optimizeFloatMemory,
                fixIntegerDivisionAccuracy: kernel.fixIntegerDivisionAccuracy,
                functions: kernel.functions,
                nativeFunctions: kernel.nativeFunctions,
                injectedNative: kernel.injectedNative,
                subKernels: kernel.subKernels,
                strictIntegers: kernel.strictIntegers,
                debug: kernel.debug,
                gpu: kernel.gpu,
                validate: validate,
                returnType: kernel.returnType,
                onIstanbulCoverageVariable: kernel.onIstanbulCoverageVariable,
                removeIstanbulCoverage: kernel.removeIstanbulCoverage,
                tactic: kernel.tactic,
                onRequestFallback: onRequestFallback,
                onRequestSwitchKernel: onRequestSwitchKernel
              });
              newKernel.build.apply(newKernel, args);
              kernelRun.replaceKernel(newKernel);
              return newKernel;
            }

            var mergedSettings = Object.assign({
              context: this.context,
              canvas: this.canvas,
              functions: this.functions,
              nativeFunctions: this.nativeFunctions,
              injectedNative: this.injectedNative,
              onIstanbulCoverageVariable: this.onIstanbulCoverageVariable,
              removeIstanbulCoverage: this.removeIstanbulCoverage,
              gpu: this,
              validate: validate,
              onRequestFallback: onRequestFallback,
              onRequestSwitchKernel: onRequestSwitchKernel
            }, settingsCopy);
            var kernelRun = kernelRunShortcut(new this.Kernel(source, mergedSettings));

            if (!this.canvas) {
              this.canvas = kernelRun.canvas;
            }

            if (!this.context) {
              this.context = kernelRun.context;
            }

            this.kernels.push(kernelRun);
            return kernelRun;
          }
        }, {
          key: "createKernelMap",
          value: function createKernelMap() {
            var fn;
            var settings;

            var argument2Type = _typeof(arguments[arguments.length - 2]);

            if (argument2Type === 'function' || argument2Type === 'string') {
              fn = arguments[arguments.length - 2];
              settings = arguments[arguments.length - 1];
            } else {
              fn = arguments[arguments.length - 1];
            }

            if (this.mode !== 'dev') {
              if (!this.Kernel.isSupported || !this.Kernel.features.kernelMap) {
                if (this.mode && kernelTypes.indexOf(this.mode) < 0) {
                  throw new Error("kernelMap not supported on ".concat(this.Kernel.name));
                }
              }
            }

            var settingsCopy = upgradeDeprecatedCreateKernelSettings(settings);

            if (settings && _typeof(settings.argumentTypes) === 'object') {
              settingsCopy.argumentTypes = Object.keys(settings.argumentTypes).map(function (argumentName) {
                return settings.argumentTypes[argumentName];
              });
            }

            if (Array.isArray(arguments[0])) {
              settingsCopy.subKernels = [];
              var functions = arguments[0];

              for (var i = 0; i < functions.length; i++) {
                var source = functions[i].toString();

                var _name12 = utils.getFunctionNameFromString(source);

                settingsCopy.subKernels.push({
                  name: _name12,
                  source: source,
                  property: i
                });
              }
            } else {
              settingsCopy.subKernels = [];
              var _functions = arguments[0];

              for (var p in _functions) {
                if (!_functions.hasOwnProperty(p)) continue;

                var _source = _functions[p].toString();

                var _name13 = utils.getFunctionNameFromString(_source);

                settingsCopy.subKernels.push({
                  name: _name13 || p,
                  source: _source,
                  property: p
                });
              }
            }

            return this.createKernel(fn, settingsCopy);
          }
        }, {
          key: "combineKernels",
          value: function combineKernels() {
            var firstKernel = arguments[0];
            var combinedKernel = arguments[arguments.length - 1];
            if (firstKernel.kernel.constructor.mode === 'cpu') return combinedKernel;
            var canvas = arguments[0].canvas;
            var context = arguments[0].context;
            var max = arguments.length - 1;

            for (var i = 0; i < max; i++) {
              arguments[i].setCanvas(canvas).setContext(context).setPipeline(true);
            }

            return function () {
              var texture = combinedKernel.apply(this, arguments);

              if (texture.toArray) {
                return texture.toArray();
              }

              return texture;
            };
          }
        }, {
          key: "setFunctions",
          value: function setFunctions(functions) {
            this.functions = functions;
            return this;
          }
        }, {
          key: "setNativeFunctions",
          value: function setNativeFunctions(nativeFunctions) {
            this.nativeFunctions = nativeFunctions;
            return this;
          }
        }, {
          key: "addFunction",
          value: function addFunction(source, settings) {
            this.functions.push({
              source: source,
              settings: settings
            });
            return this;
          }
        }, {
          key: "addNativeFunction",
          value: function addNativeFunction(name, source, settings) {
            if (this.kernels.length > 0) {
              throw new Error('Cannot call "addNativeFunction" after "createKernels" has been called.');
            }

            this.nativeFunctions.push(Object.assign({
              name: name,
              source: source
            }, settings));
            return this;
          }
        }, {
          key: "injectNative",
          value: function injectNative(source) {
            this.injectedNative = source;
            return this;
          }
        }, {
          key: "destroy",
          value: function destroy() {
            var _this47 = this;

            return new Promise(function (resolve, reject) {
              if (!_this47.kernels) {
                resolve();
              }

              setTimeout(function () {
                try {
                  for (var i = 0; i < _this47.kernels.length; i++) {
                    _this47.kernels[i].destroy(true);
                  }

                  var firstKernel = _this47.kernels[0];

                  if (firstKernel) {
                    if (firstKernel.kernel) {
                      firstKernel = firstKernel.kernel;
                    }

                    if (firstKernel.constructor.destroyContext) {
                      firstKernel.constructor.destroyContext(_this47.context);
                    }
                  }
                } catch (e) {
                  reject(e);
                }

                resolve();
              }, 0);
            });
          }
        }]);

        return GPU;
      }();

      function upgradeDeprecatedCreateKernelSettings(settings) {
        if (!settings) {
          return {};
        }

        var upgradedSettings = Object.assign({}, settings);

        if (settings.hasOwnProperty('floatOutput')) {
          utils.warnDeprecated('setting', 'floatOutput', 'precision');
          upgradedSettings.precision = settings.floatOutput ? 'single' : 'unsigned';
        }

        if (settings.hasOwnProperty('outputToTexture')) {
          utils.warnDeprecated('setting', 'outputToTexture', 'pipeline');
          upgradedSettings.pipeline = Boolean(settings.outputToTexture);
        }

        if (settings.hasOwnProperty('outputImmutable')) {
          utils.warnDeprecated('setting', 'outputImmutable', 'immutable');
          upgradedSettings.immutable = Boolean(settings.outputImmutable);
        }

        if (settings.hasOwnProperty('floatTextures')) {
          utils.warnDeprecated('setting', 'floatTextures', 'optimizeFloatMemory');
          upgradedSettings.optimizeFloatMemory = Boolean(settings.floatTextures);
        }

        return upgradedSettings;
      }

      module.exports = {
        GPU: GPU,
        kernelOrder: kernelOrder,
        kernelTypes: kernelTypes
      };
    }, {
      "./backend/cpu/kernel": 8,
      "./backend/headless-gl/kernel": 34,
      "./backend/kernel": 36,
      "./backend/web-gl/kernel": 70,
      "./backend/web-gl2/kernel": 105,
      "./kernel-run-shortcut": 111,
      "./utils": 114,
      "gpu-mock.js": 4
    }],
    109: [function (require, module, exports) {
      var _require272 = require('./gpu'),
          GPU = _require272.GPU;

      var _require273 = require('./alias'),
          alias = _require273.alias;

      var _require274 = require('./utils'),
          utils = _require274.utils;

      var _require275 = require('./input'),
          Input = _require275.Input,
          input = _require275.input;

      var _require276 = require('./texture'),
          Texture = _require276.Texture;

      var _require277 = require('./backend/function-builder'),
          FunctionBuilder = _require277.FunctionBuilder;

      var _require278 = require('./backend/function-node'),
          FunctionNode = _require278.FunctionNode;

      var _require279 = require('./backend/cpu/function-node'),
          CPUFunctionNode = _require279.CPUFunctionNode;

      var _require280 = require('./backend/cpu/kernel'),
          CPUKernel = _require280.CPUKernel;

      var _require281 = require('./backend/headless-gl/kernel'),
          HeadlessGLKernel = _require281.HeadlessGLKernel;

      var _require282 = require('./backend/web-gl/function-node'),
          WebGLFunctionNode = _require282.WebGLFunctionNode;

      var _require283 = require('./backend/web-gl/kernel'),
          WebGLKernel = _require283.WebGLKernel;

      var _require284 = require('./backend/web-gl/kernel-value-maps'),
          webGLKernelValueMaps = _require284.kernelValueMaps;

      var _require285 = require('./backend/web-gl2/function-node'),
          WebGL2FunctionNode = _require285.WebGL2FunctionNode;

      var _require286 = require('./backend/web-gl2/kernel'),
          WebGL2Kernel = _require286.WebGL2Kernel;

      var _require287 = require('./backend/web-gl2/kernel-value-maps'),
          webGL2KernelValueMaps = _require287.kernelValueMaps;

      var _require288 = require('./backend/gl/kernel'),
          GLKernel = _require288.GLKernel;

      var _require289 = require('./backend/kernel'),
          Kernel = _require289.Kernel;

      var _require290 = require('./backend/function-tracer'),
          FunctionTracer = _require290.FunctionTracer;

      var mathRandom = require('./plugins/math-random-uniformly-distributed');

      module.exports = {
        alias: alias,
        CPUFunctionNode: CPUFunctionNode,
        CPUKernel: CPUKernel,
        GPU: GPU,
        FunctionBuilder: FunctionBuilder,
        FunctionNode: FunctionNode,
        HeadlessGLKernel: HeadlessGLKernel,
        Input: Input,
        input: input,
        Texture: Texture,
        utils: utils,
        WebGL2FunctionNode: WebGL2FunctionNode,
        WebGL2Kernel: WebGL2Kernel,
        webGL2KernelValueMaps: webGL2KernelValueMaps,
        WebGLFunctionNode: WebGLFunctionNode,
        WebGLKernel: WebGLKernel,
        webGLKernelValueMaps: webGLKernelValueMaps,
        GLKernel: GLKernel,
        Kernel: Kernel,
        FunctionTracer: FunctionTracer,
        plugins: {
          mathRandom: mathRandom
        }
      };
    }, {
      "./alias": 5,
      "./backend/cpu/function-node": 6,
      "./backend/cpu/kernel": 8,
      "./backend/function-builder": 9,
      "./backend/function-node": 10,
      "./backend/function-tracer": 11,
      "./backend/gl/kernel": 13,
      "./backend/headless-gl/kernel": 34,
      "./backend/kernel": 36,
      "./backend/web-gl/function-node": 38,
      "./backend/web-gl/kernel": 70,
      "./backend/web-gl/kernel-value-maps": 39,
      "./backend/web-gl2/function-node": 73,
      "./backend/web-gl2/kernel": 105,
      "./backend/web-gl2/kernel-value-maps": 74,
      "./gpu": 108,
      "./input": 110,
      "./plugins/math-random-uniformly-distributed": 112,
      "./texture": 113,
      "./utils": 114
    }],
    110: [function (require, module, exports) {
      var Input =
      /*#__PURE__*/
      function () {
        function Input(value, size) {
          _classCallCheck(this, Input);

          this.value = value;

          if (Array.isArray(size)) {
            this.size = size;
          } else {
            this.size = new Int32Array(3);

            if (size.z) {
              this.size = new Int32Array([size.x, size.y, size.z]);
            } else if (size.y) {
              this.size = new Int32Array([size.x, size.y]);
            } else {
              this.size = new Int32Array([size.x]);
            }
          }

          var _this$size = _slicedToArray(this.size, 3),
              w = _this$size[0],
              h = _this$size[1],
              d = _this$size[2];

          if (d) {
            if (this.value.length !== w * h * d) {
              throw new Error("Input size ".concat(this.value.length, " does not match ").concat(w, " * ").concat(h, " * ").concat(d, " = ").concat(h * w * d));
            }
          } else if (h) {
            if (this.value.length !== w * h) {
              throw new Error("Input size ".concat(this.value.length, " does not match ").concat(w, " * ").concat(h, " = ").concat(h * w));
            }
          } else {
            if (this.value.length !== w) {
              throw new Error("Input size ".concat(this.value.length, " does not match ").concat(w));
            }
          }
        }

        _createClass(Input, [{
          key: "toArray",
          value: function toArray() {
            var _require291 = require('./utils'),
                utils = _require291.utils;

            var _this$size2 = _slicedToArray(this.size, 3),
                w = _this$size2[0],
                h = _this$size2[1],
                d = _this$size2[2];

            if (d) {
              return utils.erectMemoryOptimized3DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h, d);
            } else if (h) {
              return utils.erectMemoryOptimized2DFloat(this.value.subarray ? this.value : new Float32Array(this.value), w, h);
            } else {
              return this.value;
            }
          }
        }]);

        return Input;
      }();

      function input(value, size) {
        return new Input(value, size);
      }

      module.exports = {
        Input: Input,
        input: input
      };
    }, {
      "./utils": 114
    }],
    111: [function (require, module, exports) {
      var _require292 = require('./utils'),
          utils = _require292.utils;

      function kernelRunShortcut(kernel) {
        var _run = function run() {
          kernel.build.apply(kernel, arguments);

          _run = function run() {
            var result = kernel.run.apply(kernel, arguments);

            if (kernel.switchingKernels) {
              var reasons = kernel.resetSwitchingKernels();
              var newKernel = kernel.onRequestSwitchKernel(reasons, arguments, kernel);
              shortcut.kernel = kernel = newKernel;
              result = newKernel.run.apply(newKernel, arguments);
            }

            if (kernel.renderKernels) {
              return kernel.renderKernels();
            } else if (kernel.renderOutput) {
              return kernel.renderOutput();
            } else {
              return result;
            }
          };

          return _run.apply(kernel, arguments);
        };

        var shortcut = function shortcut() {
          return _run.apply(kernel, arguments);
        };

        shortcut.exec = function () {
          var _this48 = this,
              _arguments2 = arguments;

          return new Promise(function (accept, reject) {
            try {
              accept(_run.apply(_this48, _arguments2));
            } catch (e) {
              reject(e);
            }
          });
        };

        shortcut.replaceKernel = function (replacementKernel) {
          kernel = replacementKernel;
          bindKernelToShortcut(kernel, shortcut);
        };

        bindKernelToShortcut(kernel, shortcut);
        return shortcut;
      }

      function bindKernelToShortcut(kernel, shortcut) {
        if (shortcut.kernel) {
          shortcut.kernel = kernel;
          return;
        }

        var properties = utils.allPropertiesOf(kernel);

        var _loop2 = function _loop2(i) {
          var property = properties[i];
          if (property[0] === '_' && property[1] === '_') return "continue";

          if (typeof kernel[property] === 'function') {
            if (property.substring(0, 3) === 'add' || property.substring(0, 3) === 'set') {
              shortcut[property] = function () {
                shortcut.kernel[property].apply(shortcut.kernel, arguments);
                return shortcut;
              };
            } else {
              shortcut[property] = function () {
                return shortcut.kernel[property].apply(shortcut.kernel, arguments);
              };
            }
          } else {
            shortcut.__defineGetter__(property, function () {
              return shortcut.kernel[property];
            });

            shortcut.__defineSetter__(property, function (value) {
              shortcut.kernel[property] = value;
            });
          }
        };

        for (var i = 0; i < properties.length; i++) {
          var _ret = _loop2(i);

          if (_ret === "continue") continue;
        }

        shortcut.kernel = kernel;
      }

      module.exports = {
        kernelRunShortcut: kernelRunShortcut
      };
    }, {
      "./utils": 114
    }],
    112: [function (require, module, exports) {
      var source = "// https://www.shadertoy.com/view/4t2SDh\n//note: uniformly distributed, normalized rand, [0,1]\nhighp float randomSeedShift = 1.0;\nhighp float slide = 1.0;\nuniform highp float randomSeed1;\nuniform highp float randomSeed2;\n\nhighp float nrand(highp vec2 n) {\n  highp float result = fract(sin(dot((n.xy + 1.0) * vec2(randomSeed1 * slide, randomSeed2 * randomSeedShift), vec2(12.9898, 78.233))) * 43758.5453);\n  randomSeedShift = result;\n  if (randomSeedShift > 0.5) {\n    slide += 0.00009; \n  } else {\n    slide += 0.0009;\n  }\n  return result;\n}";
      var name = 'math-random-uniformly-distributed';
      var functionMatch = "Math.random()";
      var functionReplace = "nrand(vTexCoord)";
      var functionReturnType = 'Number';

      var onBeforeRun = function onBeforeRun(kernel) {
        kernel.setUniform1f('randomSeed1', Math.random());
        kernel.setUniform1f('randomSeed2', Math.random());
      };

      var plugin = {
        name: name,
        onBeforeRun: onBeforeRun,
        functionMatch: functionMatch,
        functionReplace: functionReplace,
        functionReturnType: functionReturnType,
        source: source
      };
      module.exports = plugin;
    }, {}],
    113: [function (require, module, exports) {
      var Texture =
      /*#__PURE__*/
      function () {
        function Texture(settings) {
          _classCallCheck(this, Texture);

          var texture = settings.texture,
              size = settings.size,
              dimensions = settings.dimensions,
              output = settings.output,
              context = settings.context,
              _settings$type = settings.type,
              type = _settings$type === void 0 ? 'NumberTexture' : _settings$type,
              kernel = settings.kernel,
              internalFormat = settings.internalFormat,
              textureFormat = settings.textureFormat;
          if (!output) throw new Error('settings property "output" required.');
          if (!context) throw new Error('settings property "context" required.');
          if (!texture) throw new Error('settings property "texture" required.');
          if (!kernel) throw new Error('settings property "kernel" required.');
          this.texture = texture;

          if (texture._refs) {
            texture._refs++;
          } else {
            texture._refs = 1;
          }

          this.size = size;
          this.dimensions = dimensions;
          this.output = output;
          this.context = context;
          this.kernel = kernel;
          this.type = type;
          this._deleted = false;
          this.internalFormat = internalFormat;
          this.textureFormat = textureFormat;
        }

        _createClass(Texture, [{
          key: "toArray",
          value: function toArray() {
            throw new Error("Not implemented on ".concat(this.constructor.name));
          }
        }, {
          key: "clone",
          value: function clone() {
            throw new Error("Not implemented on ".concat(this.constructor.name));
          }
        }, {
          key: "delete",
          value: function _delete() {
            if (this._deleted) return;
            this._deleted = true;

            if (this.texture._refs) {
              this.texture._refs--;
              if (this.texture._refs) return;
            }

            return this.context.deleteTexture(this.texture);
          }
        }]);

        return Texture;
      }();

      module.exports = {
        Texture: Texture
      };
    }, {}],
    114: [function (require, module, exports) {
      var acorn = require('acorn');

      var _require293 = require('./input'),
          Input = _require293.Input;

      var _require294 = require('./texture'),
          Texture = _require294.Texture;

      var FUNCTION_NAME = /function ([^(]*)/;
      var STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
      var ARGUMENT_NAMES = /([^\s,]+)/g;
      var utils = {
        systemEndianness: function systemEndianness() {
          return _systemEndianness;
        },
        getSystemEndianness: function getSystemEndianness() {
          var b = new ArrayBuffer(4);
          var a = new Uint32Array(b);
          var c = new Uint8Array(b);
          a[0] = 0xdeadbeef;
          if (c[0] === 0xef) return 'LE';
          if (c[0] === 0xde) return 'BE';
          throw new Error('unknown endianness');
        },
        isFunction: function isFunction(funcObj) {
          return typeof funcObj === 'function';
        },
        isFunctionString: function isFunctionString(fn) {
          if (typeof fn === 'string') {
            return fn.slice(0, 'function'.length).toLowerCase() === 'function';
          }

          return false;
        },
        getFunctionNameFromString: function getFunctionNameFromString(funcStr) {
          var result = FUNCTION_NAME.exec(funcStr);
          if (!result || result.length === 0) return null;
          return result[1].trim();
        },
        getFunctionBodyFromString: function getFunctionBodyFromString(funcStr) {
          return funcStr.substring(funcStr.indexOf('{') + 1, funcStr.lastIndexOf('}'));
        },
        getArgumentNamesFromString: function getArgumentNamesFromString(fn) {
          var fnStr = fn.replace(STRIP_COMMENTS, '');
          var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);

          if (result === null) {
            result = [];
          }

          return result;
        },
        clone: function clone(obj) {
          if (obj === null || _typeof(obj) !== 'object' || obj.hasOwnProperty('isActiveClone')) return obj;
          var temp = obj.constructor();

          for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
              obj.isActiveClone = null;
              temp[key] = utils.clone(obj[key]);
              delete obj.isActiveClone;
            }
          }

          return temp;
        },
        isArray: function isArray(array) {
          return !isNaN(array.length);
        },
        getVariableType: function getVariableType(value, strictIntegers) {
          if (utils.isArray(value)) {
            if (value.length > 0 && value[0].nodeName === 'IMG') {
              return 'HTMLImageArray';
            }

            return 'Array';
          }

          switch (value.constructor) {
            case Boolean:
              return 'Boolean';

            case Number:
              if (strictIntegers && Number.isInteger(value)) {
                return 'Integer';
              }

              return 'Float';

            case Texture:
              return value.type;

            case Input:
              return 'Input';
          }

          switch (value.nodeName) {
            case 'IMG':
              return 'HTMLImage';

            case 'CANVAS':
              return 'HTMLImage';

            case 'VIDEO':
              return 'HTMLVideo';
          }

          if (value.hasOwnProperty('type')) {
            return value.type;
          }

          return 'Unknown';
        },
        getKernelTextureSize: function getKernelTextureSize(settings, dimensions) {
          var _dimensions = _slicedToArray(dimensions, 3),
              w = _dimensions[0],
              h = _dimensions[1],
              d = _dimensions[2];

          var texelCount = (w || 1) * (h || 1) * (d || 1);

          if (settings.optimizeFloatMemory && settings.precision === 'single') {
            w = texelCount = Math.ceil(texelCount / 4);
          }

          if (h > 1 && w * h === texelCount) {
            return new Int32Array([w, h]);
          }

          return utils.closestSquareDimensions(texelCount);
        },
        closestSquareDimensions: function closestSquareDimensions(length) {
          var sqrt = Math.sqrt(length);
          var high = Math.ceil(sqrt);
          var low = Math.floor(sqrt);

          while (high * low < length) {
            high--;
            low = Math.ceil(length / high);
          }

          return new Int32Array([low, Math.ceil(length / low)]);
        },
        getMemoryOptimizedFloatTextureSize: function getMemoryOptimizedFloatTextureSize(dimensions, bitRatio) {
          var totalArea = utils.roundTo((dimensions[0] || 1) * (dimensions[1] || 1) * (dimensions[2] || 1) * (dimensions[3] || 1), 4);
          var texelCount = totalArea / bitRatio;
          return utils.closestSquareDimensions(texelCount);
        },
        getMemoryOptimizedPackedTextureSize: function getMemoryOptimizedPackedTextureSize(dimensions, bitRatio) {
          var _dimensions2 = _slicedToArray(dimensions, 3),
              w = _dimensions2[0],
              h = _dimensions2[1],
              d = _dimensions2[2];

          var totalArea = utils.roundTo((w || 1) * (h || 1) * (d || 1), 4);
          var texelCount = totalArea / (4 / bitRatio);
          return utils.closestSquareDimensions(texelCount);
        },
        roundTo: function roundTo(n, d) {
          return Math.floor((n + d - 1) / d) * d;
        },
        getDimensions: function getDimensions(x, pad) {
          var ret;

          if (utils.isArray(x)) {
            var dim = [];
            var temp = x;

            while (utils.isArray(temp)) {
              dim.push(temp.length);
              temp = temp[0];
            }

            ret = dim.reverse();
          } else if (x instanceof Texture) {
            ret = x.output;
          } else if (x instanceof Input) {
            ret = x.size;
          } else {
            throw new Error("Unknown dimensions of ".concat(x));
          }

          if (pad) {
            ret = Array.from(ret);

            while (ret.length < 3) {
              ret.push(1);
            }
          }

          return new Int32Array(ret);
        },
        flatten2dArrayTo: function flatten2dArrayTo(array, target) {
          var offset = 0;

          for (var y = 0; y < array.length; y++) {
            target.set(array[y], offset);
            offset += array[y].length;
          }
        },
        flatten3dArrayTo: function flatten3dArrayTo(array, target) {
          var offset = 0;

          for (var z = 0; z < array.length; z++) {
            for (var y = 0; y < array[z].length; y++) {
              target.set(array[z][y], offset);
              offset += array[z][y].length;
            }
          }
        },
        flatten4dArrayTo: function flatten4dArrayTo(array, target) {
          var offset = 0;

          for (var l = 0; l < array.length; l++) {
            for (var z = 0; z < array[l].length; z++) {
              for (var y = 0; y < array[l][z].length; y++) {
                target.set(array[l][z][y], offset);
                offset += array[l][z][y].length;
              }
            }
          }
        },
        flattenTo: function flattenTo(array, target) {
          if (utils.isArray(array[0])) {
            if (utils.isArray(array[0][0])) {
              if (utils.isArray(array[0][0][0])) {
                utils.flatten4dArrayTo(array, target);
              } else {
                utils.flatten3dArrayTo(array, target);
              }
            } else {
              utils.flatten2dArrayTo(array, target);
            }
          } else {
            target.set(array);
          }
        },
        splitArray: function splitArray(array, part) {
          var result = [];

          for (var i = 0; i < array.length; i += part) {
            result.push(new array.constructor(array.buffer, i * 4 + array.byteOffset, part));
          }

          return result;
        },
        getAstString: function getAstString(source, ast) {
          var lines = Array.isArray(source) ? source : source.split(/\r?\n/g);
          var start = ast.loc.start;
          var end = ast.loc.end;
          var result = [];

          if (start.line === end.line) {
            result.push(lines[start.line - 1].substring(start.column, end.column));
          } else {
            result.push(lines[start.line - 1].slice(start.column));

            for (var i = start.line; i < end.line; i++) {
              result.push(lines[i]);
            }

            result.push(lines[end.line - 1].slice(0, end.column));
          }

          return result.join('\n');
        },
        allPropertiesOf: function allPropertiesOf(obj) {
          var props = [];

          do {
            props.push.apply(props, Object.getOwnPropertyNames(obj));
          } while (obj = Object.getPrototypeOf(obj));

          return props;
        },
        linesToString: function linesToString(lines) {
          if (lines.length > 0) {
            return lines.join(';\n') + ';\n';
          } else {
            return '\n';
          }
        },
        warnDeprecated: function warnDeprecated(type, oldName, newName) {
          if (newName) {
            console.warn("You are using a deprecated ".concat(type, " \"").concat(oldName, "\". It has been replaced with \"").concat(newName, "\". Fixing, but please upgrade as it will soon be removed."));
          } else {
            console.warn("You are using a deprecated ".concat(type, " \"").concat(oldName, "\". It has been removed. Fixing, but please upgrade as it will soon be removed."));
          }
        },
        flipPixels: function flipPixels(pixels, width, height) {
          var halfHeight = height / 2 | 0;
          var bytesPerRow = width * 4;
          var temp = new Uint8ClampedArray(width * 4);
          var result = pixels.slice(0);

          for (var y = 0; y < halfHeight; ++y) {
            var topOffset = y * bytesPerRow;
            var bottomOffset = (height - y - 1) * bytesPerRow;
            temp.set(result.subarray(topOffset, topOffset + bytesPerRow));
            result.copyWithin(topOffset, bottomOffset, bottomOffset + bytesPerRow);
            result.set(temp, bottomOffset);
          }

          return result;
        },
        erectPackedFloat: function erectPackedFloat(array, width) {
          return array.subarray(0, width);
        },
        erect2DPackedFloat: function erect2DPackedFloat(array, width, height) {
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var xStart = y * width;
            var xEnd = xStart + width;
            yResults[y] = array.subarray(xStart, xEnd);
          }

          return yResults;
        },
        erect3DPackedFloat: function erect3DPackedFloat(array, width, height, depth) {
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xStart = z * height * width + y * width;
              var xEnd = xStart + width;
              yResults[y] = array.subarray(xStart, xEnd);
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectMemoryOptimizedFloat: function erectMemoryOptimizedFloat(array, width) {
          return array.subarray(0, width);
        },
        erectMemoryOptimized2DFloat: function erectMemoryOptimized2DFloat(array, width, height) {
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var offset = y * width;
            yResults[y] = array.subarray(offset, offset + width);
          }

          return yResults;
        },
        erectMemoryOptimized3DFloat: function erectMemoryOptimized3DFloat(array, width, height, depth) {
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var offset = z * height * width + y * width;
              yResults[y] = array.subarray(offset, offset + width);
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectFloat: function erectFloat(array, width) {
          var xResults = new Float32Array(width);
          var i = 0;

          for (var x = 0; x < width; x++) {
            xResults[x] = array[i];
            i += 4;
          }

          return xResults;
        },
        erect2DFloat: function erect2DFloat(array, width, height) {
          var yResults = new Array(height);
          var i = 0;

          for (var y = 0; y < height; y++) {
            var xResults = new Float32Array(width);

            for (var x = 0; x < width; x++) {
              xResults[x] = array[i];
              i += 4;
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DFloat: function erect3DFloat(array, width, height, depth) {
          var zResults = new Array(depth);
          var i = 0;

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Float32Array(width);

              for (var x = 0; x < width; x++) {
                xResults[x] = array[i];
                i += 4;
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectArray2: function erectArray2(array, width) {
          var xResults = new Array(width);
          var xResultsMax = width * 4;
          var i = 0;

          for (var x = 0; x < xResultsMax; x += 4) {
            xResults[i++] = array.subarray(x, x + 2);
          }

          return xResults;
        },
        erect2DArray2: function erect2DArray2(array, width, height) {
          var yResults = new Array(height);
          var XResultsMax = width * 4;

          for (var y = 0; y < height; y++) {
            var xResults = new Array(width);
            var offset = y * XResultsMax;
            var i = 0;

            for (var x = 0; x < XResultsMax; x += 4) {
              xResults[i++] = array.subarray(x + offset, x + offset + 2);
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DArray2: function erect3DArray2(array, width, height, depth) {
          var xResultsMax = width * 4;
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Array(width);
              var offset = z * xResultsMax * height + y * xResultsMax;
              var i = 0;

              for (var x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x + offset, x + offset + 2);
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectArray3: function erectArray3(array, width) {
          var xResults = new Array(width);
          var xResultsMax = width * 4;
          var i = 0;

          for (var x = 0; x < xResultsMax; x += 4) {
            xResults[i++] = array.subarray(x, x + 3);
          }

          return xResults;
        },
        erect2DArray3: function erect2DArray3(array, width, height) {
          var xResultsMax = width * 4;
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var xResults = new Array(width);
            var offset = y * xResultsMax;
            var i = 0;

            for (var x = 0; x < xResultsMax; x += 4) {
              xResults[i++] = array.subarray(x + offset, x + offset + 3);
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DArray3: function erect3DArray3(array, width, height, depth) {
          var xResultsMax = width * 4;
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Array(width);
              var offset = z * xResultsMax * height + y * xResultsMax;
              var i = 0;

              for (var x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x + offset, x + offset + 3);
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        erectArray4: function erectArray4(array, width) {
          var xResults = new Array(array);
          var xResultsMax = width * 4;
          var i = 0;

          for (var x = 0; x < xResultsMax; x += 4) {
            xResults[i++] = array.subarray(x, x + 4);
          }

          return xResults;
        },
        erect2DArray4: function erect2DArray4(array, width, height) {
          var xResultsMax = width * 4;
          var yResults = new Array(height);

          for (var y = 0; y < height; y++) {
            var xResults = new Array(width);
            var offset = y * xResultsMax;
            var i = 0;

            for (var x = 0; x < xResultsMax; x += 4) {
              xResults[i++] = array.subarray(x + offset, x + offset + 4);
            }

            yResults[y] = xResults;
          }

          return yResults;
        },
        erect3DArray4: function erect3DArray4(array, width, height, depth) {
          var xResultsMax = width * 4;
          var zResults = new Array(depth);

          for (var z = 0; z < depth; z++) {
            var yResults = new Array(height);

            for (var y = 0; y < height; y++) {
              var xResults = new Array(width);
              var offset = z * xResultsMax * height + y * xResultsMax;
              var i = 0;

              for (var x = 0; x < xResultsMax; x += 4) {
                xResults[i++] = array.subarray(x + offset, x + offset + 4);
              }

              yResults[y] = xResults;
            }

            zResults[z] = yResults;
          }

          return zResults;
        },
        flattenFunctionToString: function flattenFunctionToString(source, settings) {
          var findDependency = settings.findDependency,
              thisLookup = settings.thisLookup,
              doNotDefine = settings.doNotDefine;
          var flattened = settings.flattened;

          if (!flattened) {
            flattened = settings.flattened = {};
          }

          var ast = acorn.parse(source);
          var functionDependencies = [];
          var indent = 0;

          function flatten(ast) {
            if (Array.isArray(ast)) {
              var results = [];

              for (var i = 0; i < ast.length; i++) {
                results.push(flatten(ast[i]));
              }

              return results.join('');
            }

            switch (ast.type) {
              case 'Program':
                return flatten(ast.body) + (ast.body[0].type === 'VariableDeclaration' ? ';' : '');

              case 'FunctionDeclaration':
                return "function ".concat(ast.id.name, "(").concat(ast.params.map(flatten).join(', '), ") ").concat(flatten(ast.body));

              case 'BlockStatement':
                {
                  var _result2 = [];
                  indent += 2;

                  for (var _i33 = 0; _i33 < ast.body.length; _i33++) {
                    var flat = flatten(ast.body[_i33]);

                    if (flat) {
                      _result2.push(' '.repeat(indent) + flat, ';\n');
                    }
                  }

                  indent -= 2;
                  return "{\n".concat(_result2.join(''), "}");
                }

              case 'VariableDeclaration':
                var declarations = utils.normalizeDeclarations(ast).map(flatten).filter(function (r) {
                  return r !== null;
                });

                if (declarations.length < 1) {
                  return '';
                } else {
                  return "".concat(ast.kind, " ").concat(declarations.join(','));
                }

              case 'VariableDeclarator':
                if (ast.init.object && ast.init.object.type === 'ThisExpression') {
                  var lookup = thisLookup(ast.init.property.name);

                  if (lookup) {
                    return "".concat(ast.id.name, " = ").concat(flatten(ast.init));
                  } else {
                    return null;
                  }
                } else {
                  return "".concat(ast.id.name, " = ").concat(flatten(ast.init));
                }

              case 'CallExpression':
                {
                  if (ast.callee.property.name === 'subarray') {
                    return "".concat(flatten(ast.callee.object), ".").concat(flatten(ast.callee.property), "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  }

                  if (ast.callee.object.name === 'gl' || ast.callee.object.name === 'context') {
                    return "".concat(flatten(ast.callee.object), ".").concat(flatten(ast.callee.property), "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  }

                  if (ast.callee.object.type === 'ThisExpression') {
                    functionDependencies.push(findDependency('this', ast.callee.property.name));
                    return "".concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  } else if (ast.callee.object.name) {
                    var foundSource = findDependency(ast.callee.object.name, ast.callee.property.name);

                    if (foundSource === null) {
                      return "".concat(ast.callee.object.name, ".").concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                        return flatten(value);
                      }).join(', '), ")");
                    } else {
                      functionDependencies.push(foundSource);
                      return "".concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                        return flatten(value);
                      }).join(', '), ")");
                    }
                  } else if (ast.callee.object.type === 'MemberExpression') {
                    return "".concat(flatten(ast.callee.object), ".").concat(ast.callee.property.name, "(").concat(ast.arguments.map(function (value) {
                      return flatten(value);
                    }).join(', '), ")");
                  } else {
                    throw new Error('unknown ast.callee');
                  }
                }

              case 'ReturnStatement':
                return "return ".concat(flatten(ast.argument));

              case 'BinaryExpression':
                return "(".concat(flatten(ast.left)).concat(ast.operator).concat(flatten(ast.right), ")");

              case 'UnaryExpression':
                if (ast.prefix) {
                  return "".concat(ast.operator, " ").concat(flatten(ast.argument));
                } else {
                  return "".concat(flatten(ast.argument), " ").concat(ast.operator);
                }

              case 'ExpressionStatement':
                return "".concat(flatten(ast.expression));

              case 'SequenceExpression':
                return "(".concat(flatten(ast.expressions), ")");

              case 'ArrowFunctionExpression':
                return "(".concat(ast.params.map(flatten).join(', '), ") => ").concat(flatten(ast.body));

              case 'Literal':
                return ast.raw;

              case 'Identifier':
                return ast.name;

              case 'MemberExpression':
                if (ast.object.type === 'ThisExpression') {
                  return thisLookup(ast.property.name);
                }

                if (ast.computed) {
                  return "".concat(flatten(ast.object), "[").concat(flatten(ast.property), "]");
                }

                return flatten(ast.object) + '.' + flatten(ast.property);

              case 'ThisExpression':
                return 'this';

              case 'NewExpression':
                return "new ".concat(flatten(ast.callee), "(").concat(ast.arguments.map(function (value) {
                  return flatten(value);
                }).join(', '), ")");

              case 'ForStatement':
                return "for (".concat(flatten(ast.init), ";").concat(flatten(ast.test), ";").concat(flatten(ast.update), ") ").concat(flatten(ast.body));

              case 'AssignmentExpression':
                return "".concat(flatten(ast.left)).concat(ast.operator).concat(flatten(ast.right));

              case 'UpdateExpression':
                return "".concat(flatten(ast.argument)).concat(ast.operator);

              case 'IfStatement':
                return "if (".concat(flatten(ast.test), ") ").concat(flatten(ast.consequent));

              case 'ThrowStatement':
                return "throw ".concat(flatten(ast.argument));

              case 'ObjectPattern':
                return ast.properties.map(flatten).join(', ');

              case 'ArrayPattern':
                return ast.elements.map(flatten).join(', ');

              case 'DebuggerStatement':
                return 'debugger;';

              case 'ConditionalExpression':
                return "".concat(flatten(ast.test), "?").concat(flatten(ast.consequent), ":").concat(flatten(ast.alternate));

              case 'Property':
                if (ast.kind === 'init') {
                  return flatten(ast.key);
                }

            }

            throw new Error("unhandled ast.type of ".concat(ast.type));
          }

          var result = flatten(ast);

          if (functionDependencies.length > 0) {
            var flattenedFunctionDependencies = [];

            for (var i = 0; i < functionDependencies.length; i++) {
              var functionDependency = functionDependencies[i];

              if (!flattened[functionDependency]) {
                flattened[functionDependency] = true;
              }

              flattenedFunctionDependencies.push(utils.flattenFunctionToString(functionDependency, settings) + '\n');
            }

            return flattenedFunctionDependencies.join('') + result;
          }

          return result;
        },
        normalizeDeclarations: function normalizeDeclarations(ast) {
          if (ast.type !== 'VariableDeclaration') throw new Error('Ast is not of type "VariableDeclaration"');
          var normalizedDeclarations = [];

          for (var declarationIndex = 0; declarationIndex < ast.declarations.length; declarationIndex++) {
            var declaration = ast.declarations[declarationIndex];

            if (declaration.id && declaration.id.type === 'ObjectPattern' && declaration.id.properties) {
              var properties = declaration.id.properties;

              for (var propertyIndex = 0; propertyIndex < properties.length; propertyIndex++) {
                var property = properties[propertyIndex];

                if (property.value.type === 'ObjectPattern' && property.value.properties) {
                  for (var subPropertyIndex = 0; subPropertyIndex < property.value.properties.length; subPropertyIndex++) {
                    var subProperty = property.value.properties[subPropertyIndex];

                    if (subProperty.type === 'Property') {
                      normalizedDeclarations.push({
                        type: 'VariableDeclarator',
                        id: {
                          type: 'Identifier',
                          name: subProperty.key.name
                        },
                        init: {
                          type: 'MemberExpression',
                          object: {
                            type: 'MemberExpression',
                            object: declaration.init,
                            property: {
                              type: 'Identifier',
                              name: property.key.name
                            },
                            computed: false
                          },
                          property: {
                            type: 'Identifier',
                            name: subProperty.key.name
                          },
                          computed: false
                        }
                      });
                    } else {
                      throw new Error('unexpected state');
                    }
                  }
                } else if (property.value.type === 'Identifier') {
                  normalizedDeclarations.push({
                    type: 'VariableDeclarator',
                    id: {
                      type: 'Identifier',
                      name: property.value && property.value.name ? property.value.name : property.key.name
                    },
                    init: {
                      type: 'MemberExpression',
                      object: declaration.init,
                      property: {
                        type: 'Identifier',
                        name: property.key.name
                      },
                      computed: false
                    }
                  });
                } else {
                  throw new Error('unexpected state');
                }
              }
            } else if (declaration.id && declaration.id.type === 'ArrayPattern' && declaration.id.elements) {
              var elements = declaration.id.elements;

              for (var elementIndex = 0; elementIndex < elements.length; elementIndex++) {
                var element = elements[elementIndex];

                if (element.type === 'Identifier') {
                  normalizedDeclarations.push({
                    type: 'VariableDeclarator',
                    id: {
                      type: 'Identifier',
                      name: element.name
                    },
                    init: {
                      type: 'MemberExpression',
                      object: declaration.init,
                      property: {
                        type: 'Literal',
                        value: elementIndex,
                        raw: elementIndex.toString(),
                        start: element.start,
                        end: element.end
                      },
                      computed: true
                    }
                  });
                } else {
                  throw new Error('unexpected state');
                }
              }
            } else {
              normalizedDeclarations.push(declaration);
            }
          }

          return normalizedDeclarations;
        },
        splitHTMLImageToRGB: function splitHTMLImageToRGB(gpu, image) {
          var rKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.r * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var gKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.g * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var bKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.b * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var aKernel = gpu.createKernel(function (a) {
            var pixel = a[this.thread.y][this.thread.x];
            return pixel.a * 255;
          }, {
            output: [image.width, image.height],
            precision: 'unsigned',
            argumentTypes: {
              a: 'HTMLImage'
            }
          });
          var result = [rKernel(image), gKernel(image), bKernel(image), aKernel(image)];
          result.rKernel = rKernel;
          result.gKernel = gKernel;
          result.bKernel = bKernel;
          result.aKernel = aKernel;
          result.gpu = gpu;
          return result;
        },
        splitRGBAToCanvases: function splitRGBAToCanvases(gpu, rgba, width, height) {
          var visualKernelR = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(pixel.r / 255, 0, 0, 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelR(rgba);
          var visualKernelG = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(0, pixel.g / 255, 0, 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelG(rgba);
          var visualKernelB = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(0, 0, pixel.b / 255, 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelB(rgba);
          var visualKernelA = gpu.createKernel(function (v) {
            var pixel = v[this.thread.y][this.thread.x];
            this.color(255, 255, 255, pixel.a / 255);
          }, {
            output: [width, height],
            graphical: true,
            argumentTypes: {
              v: 'Array2D(4)'
            }
          });
          visualKernelA(rgba);
          return [visualKernelR.canvas, visualKernelG.canvas, visualKernelB.canvas, visualKernelA.canvas];
        },
        getMinifySafeName: function getMinifySafeName(fn) {
          try {
            var ast = acorn.parse("const value = ".concat(fn.toString()));
            var init = ast.body[0].declarations[0].init;
            return init.body.name || init.body.body[0].argument.name;
          } catch (e) {
            throw new Error('Unrecognized function type.  Please use `() => yourFunctionVariableHere` or function() { return yourFunctionVariableHere; }');
          }
        }
      };

      var _systemEndianness = utils.getSystemEndianness();

      module.exports = {
        utils: utils
      };
    }, {
      "./input": 110,
      "./texture": 113,
      "acorn": 1
    }]
  }, {}, [107])(107);
});
},{}],"L30b":[function(require,module,exports) {
var _require = require('gpu.js'),
    GPU = _require.GPU;

var gpuInstance = null;

function setup(value) {
  gpuInstance = value;
}

function teardown() {
  if (gpuInstance) {
    gpuInstance.destroy();
  }

  gpuInstance = null;
}

function makeKernel(fn, settings) {
  if (gpuInstance === null) {
    setup(new GPU({
      mode: 'gpu'
    }));
  }

  if (settings.hasOwnProperty('map')) {
    return gpuInstance.createKernelMap(settings.map, fn, settings).setPipeline(true);
  }

  return gpuInstance.createKernel(fn, settings).setPipeline(true);
}

function makeDevKernel(fn, settings) {
  if (settings && settings.map) {
    throw new Error('map kernels are not supported by dev kernels');
  }

  var gpu = new GPU({
    mode: 'dev'
  });
  return gpu.createKernel(fn, settings);
}

function kernelInput(input, size) {
  return GPU.input(input, size);
}

function release(texture) {
  if (texture.delete) {
    texture.delete();
  }
}

function clone(texture) {
  if (texture.clone) {
    return texture.clone();
  }

  if (typeof texture[0] === 'number') {
    return new Float32Array(texture);
  } else if (typeof texture[0][0] === 'number') {
    var result = [];

    for (var y = 0; y < texture.length; y++) {
      result.push(new Float32Array(texture[y]));
    }

    return result;
  } else if (typeof texture[0][0][0] === 'number') {
    var _result = [];

    for (var z = 0; z < texture.length; z++) {
      var row = [];

      _result.push(row);

      for (var _y = 0; _y < texture.length; _y++) {
        row.push(new Float32Array(texture[z][_y]));
      }
    }

    return _result;
  }

  throw new Error('unrecognized argument');
}

module.exports = {
  setup: setup,
  teardown: teardown,
  makeKernel: makeKernel,
  makeDevKernel: makeDevKernel,
  kernelInput: kernelInput,
  release: release,
  clone: clone
};
},{"gpu.js":"GwyX"}],"M4LY":[function(require,module,exports) {
module.exports = function zeros(size) {
  return new Float32Array(size);
};
},{}],"C4Cz":[function(require,module,exports) {
var zeros = require('./zeros');

module.exports = function zeros2D(width, height) {
  var result = new Array(height);

  for (var y = 0; y < height; y++) {
    result[y] = zeros(width);
  }

  return result;
};
},{"./zeros":"M4LY"}],"T4Kr":[function(require,module,exports) {
/**
 *
 * @param {Base} layer1
 * @param {Base} layer2
 */
function checkSameSize(layer1, layer2) {
  if (layer1.width !== layer2.width) {
    throw new Error("Layer width mismatch of ".concat(layer1.width, " and ").concat(layer2.width));
  }

  if (layer1.height !== layer2.height) {
    throw new Error("Layer height mismatch of ".concat(layer1.height, " and ").concat(layer2.height));
  }
}

module.exports = {
  checkSameSize: checkSameSize
};
},{}],"AN3i":[function(require,module,exports) {
var zeros2D = require('./zeros-2d');

module.exports = function zeros3D(width, height, depth) {
  var result = new Array(depth);

  for (var z = 0; z < depth; z++) {
    result[z] = zeros2D(width, height);
  }

  return result;
};
},{"./zeros-2d":"C4Cz"}],"kIeX":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var _require = require('../utilities/kernel'),
    release = _require.release,
    clone = _require.clone,
    makeKernel = _require.makeKernel;

var zeros2D = require('../utilities/zeros-2d');

var zeros3D = require('../utilities/zeros-3d');

var Base =
/*#__PURE__*/
function () {
  _createClass(Base, null, [{
    key: "defaults",
    get: function get() {
      return {
        width: 1,
        height: 1,
        depth: null,
        weights: null,
        deltas: null,
        name: null,
        praxisOpts: null
      };
    }
  }]);

  function Base(settings) {
    _classCallCheck(this, Base);

    // size
    this.width = null;
    this.height = null;
    this.depth = null; // what matters :P

    this.deltas = null;
    this.weights = null;
    this.praxis = null;
    this.praxisOpts = null;

    if (this.constructor !== Base) {
      Object.assign(this, Base.defaults, settings);
    }

    Object.assign(this, this.constructor.defaults, settings); // special settings

    this.setupPraxis(settings);
  }

  _createClass(Base, [{
    key: "setupPraxis",
    value: function setupPraxis(settings) {
      if (!settings) return;

      if (settings.hasOwnProperty('praxis')) {
        if (typeof settings.praxis === 'function') {
          this.praxis = settings.praxis(this, settings.praxisOpts);
        } else {
          this.praxis = settings.praxis;
        }
      }
    }
    /*
    get weights() {
      return this._weights;
    }
     set weights(value) {
      if (value) {
        if (value[0].length !== this.width) {
          throw new Error(`${this.constructor.name}.weights being set with improper value width`);
        }
        if (value.length !== this.height) {
          throw new Error(`${this.constructor.name}.weights being set with improper value height`);
        }
      }
      this._weights = value;
    }
     get deltas() {
      return this._deltas;
    }
     set deltas(value) {
      if (value) {
        if (value[0].length !== this.width) {
          throw new Error(`${this.constructor.name}.deltas being set with improper value width`);
        }
        if (value.length !== this.height) {
          throw new Error(`${this.constructor.name}.deltas being set with improper value height`);
        }
      }
      this._deltas = value;
    } */

  }, {
    key: "validate",
    value: function validate() {
      if (Number.isNaN(this.height)) {
        throw new Error("".concat(this.constructor.name, " layer height is not a number"));
      }

      if (Number.isNaN(this.width)) {
        throw new Error("".concat(this.constructor.name, " layer width is not a number"));
      }

      if (this.height < 1) {
        throw new Error("".concat(this.constructor.name, " layer height is less than 1"));
      }

      if (this.width < 1) {
        throw new Error("".concat(this.constructor.name, " layer width is less than 1"));
      }
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {// console.log(`${this.constructor.name}-setupKernels is not yet implemented`)
    }
  }, {
    key: "reuseKernels",
    value: function reuseKernels(layer) {
      if (layer.width !== this.width) {
        throw new Error("".concat(this.constructor.name, " kernel width mismatch ").concat(layer.width, " is not ").concat(this.width));
      }

      if (layer.height !== this.height) {
        throw new Error("".concat(this.constructor.name, " kernel width mismatch ").concat(layer.height, " is not ").concat(this.height));
      }

      if (layer.hasOwnProperty('predictKernel')) {
        this.predictKernel = layer.predictKernel;
      }

      if (layer.hasOwnProperty('compareKernel')) {
        this.compareKernel = layer.compareKernel;
      }

      this.praxis = layer.praxis;
    }
  }, {
    key: "predict",
    value: function predict() {} // throw new Error(`${this.constructor.name}-predict is not yet implemented`)
    // eslint-disable-next-line

  }, {
    key: "compare",
    value: function compare() {// throw new Error(`${this.constructor.name}-compare is not yet implemented`)
    }
  }, {
    key: "learn",
    value: function learn(previousLayer, nextLayer, learningRate) {
      var weights = this.weights;
      this.weights = this.praxis.run(this, previousLayer, nextLayer, learningRate);
      release(weights);
      this.resetDeltas();
    }
  }, {
    key: "toArray",
    value: function toArray() {
      return this.weights.toArray();
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var jsonLayer = {};
      var _this$constructor = this.constructor,
          defaults = _this$constructor.defaults,
          name = _this$constructor.name;

      if (this.constructor !== Base) {
        Object.assign(defaults, Base.defaults, defaults);
      }

      var keys = Object.keys(defaults);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key === 'deltas') continue;
        if (key === 'name' && this[key] === null) continue;
        jsonLayer[key] = this[key];
      }

      jsonLayer.type = name;
      return jsonLayer;
    }
  }, {
    key: "resetDeltas",
    value: function resetDeltas() {
      if (this.resetDeltasValue) {
        release(this.deltas);
        this.deltas = clone(this.resetDeltasValue);
        return;
      }

      if (!this.resetDeltasKernel) {
        var output = [this.width];
        if (this.height) output.push(this.height);
        if (this.depth) output.push(this.depth);
        this.resetDeltasKernel = makeKernel(function () {
          return 0;
        }, {
          output: output
        });
      }

      release(this.deltas);
      this.deltas = this.resetDeltasValue = this.resetDeltasKernel();
    }
  }]);

  return Base;
}();

module.exports = {
  Base: Base
};
},{"../utilities/kernel":"L30b","../utilities/zeros-2d":"C4Cz","../utilities/zeros-3d":"AN3i"}],"HySO":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./base'),
    Base = _require.Base;

var zeros2D = require('../utilities/zeros-2d');

var zeros3D = require('../utilities/zeros-3d');

var Activation =
/*#__PURE__*/
function (_Base) {
  _inherits(Activation, _Base);

  function Activation(inputLayer, settings) {
    var _this;

    _classCallCheck(this, Activation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Activation).call(this));
    _this.inputLayer = inputLayer;
    var width = inputLayer.width,
        height = inputLayer.height,
        depth = inputLayer.depth;
    _this.predictKernel = null;
    _this.compareKernel = null;
    _this.width = width;
    _this.height = height;

    _this.validate();

    if (depth > 0) {
      _this.depth = depth;
      _this.weights = zeros3D(width, height, depth);
      _this.deltas = zeros3D(width, height, depth);
    } else {
      _this.weights = zeros2D(width, height);
      _this.deltas = zeros2D(width, height);
    }

    _this.setupPraxis(settings);

    return _this;
  }

  return Activation;
}(Base);

module.exports = {
  Activation: Activation
};
},{"./base":"kIeX","../utilities/zeros-2d":"C4Cz","../utilities/zeros-3d":"AN3i"}],"pX1U":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = require('./base'),
    Base = _require.Base;

var _require2 = require('./activation'),
    Activation = _require2.Activation;

var Internal = function Internal() {
  _classCallCheck(this, Internal);
};

var Filter =
/*#__PURE__*/
function (_Base) {
  _inherits(Filter, _Base);

  function Filter() {
    _classCallCheck(this, Filter);

    return _possibleConstructorReturn(this, _getPrototypeOf(Filter).apply(this, arguments));
  }

  return Filter;
}(Base);

var Model =
/*#__PURE__*/
function (_Base2) {
  _inherits(Model, _Base2);

  function Model() {
    _classCallCheck(this, Model);

    return _possibleConstructorReturn(this, _getPrototypeOf(Model).apply(this, arguments));
  }

  return Model;
}(Base);

var Modifier =
/*#__PURE__*/
function (_Base3) {
  _inherits(Modifier, _Base3);

  function Modifier() {
    _classCallCheck(this, Modifier);

    return _possibleConstructorReturn(this, _getPrototypeOf(Modifier).apply(this, arguments));
  }

  return Modifier;
}(Base);

var Operator =
/*#__PURE__*/
function (_Base4) {
  _inherits(Operator, _Base4);

  function Operator() {
    _classCallCheck(this, Operator);

    return _possibleConstructorReturn(this, _getPrototypeOf(Operator).apply(this, arguments));
  }

  return Operator;
}(Base);

module.exports = {
  Activation: Activation,
  Internal: Internal,
  Filter: Filter,
  Model: Model,
  Modifier: Modifier,
  Operator: Operator
};
},{"./base":"kIeX","./activation":"HySO"}],"q7CK":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../utilities/kernel'),
    makeKernel = _require.makeKernel,
    release = _require.release,
    clone = _require.clone;

var zeros2D = require('../utilities/zeros-2d');

var _require2 = require('../utilities/layer-size'),
    checkSameSize = _require2.checkSameSize;

var _require3 = require('./types'),
    Operator = _require3.Operator;

function predict(inputWeights1, inputWeights2) {
  return inputWeights1[this.thread.y][this.thread.x] + inputWeights2[this.thread.y][this.thread.x];
}

var Add =
/*#__PURE__*/
function (_Operator) {
  _inherits(Add, _Operator);

  function Add(inputLayer1, inputLayer2, settings) {
    var _this;

    _classCallCheck(this, Add);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Add).call(this));
    _this.inputLayer1 = inputLayer1;
    _this.inputLayer2 = inputLayer2;
    _this.width = _this.inputLayer1.width;
    _this.height = _this.inputLayer1.height;

    _this.validate();

    _this.weights = zeros2D(_this.width, _this.height);
    _this.deltas = zeros2D(_this.width, _this.height);

    _this.setupPraxis(settings);

    return _this;
  }

  _createClass(Add, [{
    key: "validate",
    value: function validate() {
      _get(_getPrototypeOf(Add.prototype), "validate", this).call(this);

      checkSameSize(this.inputLayer1, this.inputLayer2);
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {
      this.predictKernel = makeKernel(predict, {
        output: [this.width, this.height]
      });
    }
  }, {
    key: "predict",
    value: function predict() {
      release(this.weights);
      this.weights = this.predictKernel(this.inputLayer1.weights, this.inputLayer2.weights);
    }
  }, {
    key: "compare",
    value: function compare() {
      release(this.inputLayer1.deltas);
      release(this.inputLayer2.deltas);
      this.inputLayer1.deltas = clone(this.deltas);
      this.inputLayer2.deltas = clone(this.deltas);
    }
  }]);

  return Add;
}(Operator);

function add(inputLayer1, inputLayer2, settings) {
  return new Add(inputLayer1, inputLayer2, settings);
}

module.exports = {
  Add: Add,
  add: add,
  predict: predict
};
},{"../utilities/kernel":"L30b","../utilities/zeros-2d":"C4Cz","../utilities/layer-size":"T4Kr","./types":"pX1U"}],"hKny":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Base =
/*#__PURE__*/
function () {
  _createClass(Base, null, [{
    key: "defaults",
    get: function get() {
      return {};
    }
  }]);

  function Base(layerTemplate) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Base);

    this.layerTemplate = layerTemplate;
    this.width = layerTemplate.width || null;
    this.height = layerTemplate.height || null;
    this.depth = layerTemplate.depth || null;
    Object.assign(this, this.constructor.defaults, settings);
  }

  _createClass(Base, [{
    key: "setupKernels",
    value: function setupKernels() {}
  }, {
    key: "run",
    value: function run() {}
  }]);

  return Base;
}();

module.exports = {
  Base: Base
};
},{}],"xg3N":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../utilities/kernel'),
    makeKernel = _require.makeKernel;

var zeros2D = require('../utilities/zeros-2d');

var _require2 = require('./base'),
    Base = _require2.Base;

function updateChange(value) {
  return value;
}

function update(changes, weights, incomingWeights, inputDeltas) {
  var lastChange = changes[this.thread.y][this.thread.x];
  var inputDelta = inputDeltas[this.thread.y][0];
  var weight = weights[this.thread.y][this.thread.x];
  var incoming = incomingWeights[this.thread.x][0];
  var change = this.constants.learningRate * inputDelta * incoming + this.constants.momentum * lastChange;
  updateChange(change);
  return weight + change;
}

var ArthurDeviationWeights =
/*#__PURE__*/
function (_Base) {
  _inherits(ArthurDeviationWeights, _Base);

  _createClass(ArthurDeviationWeights, null, [{
    key: "defaults",
    get: function get() {
      return {
        learningRate: 0.3,
        momentum: 0.1
      };
    }
  }]);

  function ArthurDeviationWeights(layer, settings) {
    var _this;

    _classCallCheck(this, ArthurDeviationWeights);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArthurDeviationWeights).call(this, layer, settings));
    _this.weightsLayer = null;
    _this.incomingLayer = null;
    _this.deltaLayer = null;

    if (settings) {
      if (settings.weightsLayer) {
        _this.weightsLayer = settings.weightsLayer;
      }

      if (settings.incomingLayer) {
        _this.incomingLayer = settings.incomingLayer;
      }

      if (settings.deltaLayer) {
        _this.deltaLayer = settings.deltaLayer;
      }
    }

    _this.changes = zeros2D(layer.width, layer.height);

    _this.setupKernels();

    return _this;
  }

  _createClass(ArthurDeviationWeights, [{
    key: "run",
    value: function run(layer, previousLayer, nextLayer, learningRate) {
      var output = this.kernel(this.changes, this.weightsLayer.weights, this.incomingLayer.weights, this.deltaLayer.deltas);
      this.changes = output.changes;
      return output.result;
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {
      this.kernel = makeKernel(update, {
        map: {
          changes: updateChange
        },
        output: [this.width, this.height],
        constants: {
          learningRate: this.learningRate,
          momentum: this.momentum
        }
      });
    }
  }]);

  return ArthurDeviationWeights;
}(Base);

function arthurDeviationWeights(layer, settings) {
  return new ArthurDeviationWeights(layer, settings);
}

module.exports = {
  ArthurDeviationWeights: ArthurDeviationWeights,
  arthurDeviationWeights: arthurDeviationWeights,
  update: update,
  updateChange: updateChange
};
},{"../utilities/kernel":"L30b","../utilities/zeros-2d":"C4Cz","./base":"hKny"}],"GVwH":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../utilities/kernel'),
    makeKernel = _require.makeKernel;

var _require2 = require('./base'),
    Base = _require2.Base;

function update(weights, deltas) {
  return weights[this.thread.y][this.thread.x] + this.constants.learningRate * deltas[this.thread.y][this.thread.x];
}

var ArthurDeviationBiases =
/*#__PURE__*/
function (_Base) {
  _inherits(ArthurDeviationBiases, _Base);

  _createClass(ArthurDeviationBiases, null, [{
    key: "defaults",
    get: function get() {
      return {
        learningRate: 0.3
      };
    }
  }]);

  function ArthurDeviationBiases(layer, settings) {
    var _this;

    _classCallCheck(this, ArthurDeviationBiases);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ArthurDeviationBiases).call(this, layer, settings));
    _this.kernel = null;

    _this.setupKernels();

    return _this;
  }

  _createClass(ArthurDeviationBiases, [{
    key: "run",
    value: function run(layer, previousLayer, nextLayer, learningRate) {
      var output = this.kernel(layer.weights, layer.deltas);
      return output;
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {
      this.kernel = makeKernel(update, {
        output: [this.width, this.height],
        constants: {
          learningRate: this.learningRate
        }
      });
    }
  }]);

  return ArthurDeviationBiases;
}(Base);

function arthurDeviationBiases(layer, settings) {
  return new ArthurDeviationBiases(layer, settings);
}

module.exports = {
  ArthurDeviationBiases: ArthurDeviationBiases,
  arthurDeviationBiases: arthurDeviationBiases,
  update: update
};
},{"../utilities/kernel":"L30b","./base":"hKny"}],"TX07":[function(require,module,exports) {
module.exports = function randomWeight() {
  return Math.random() * 0.4 - 0.2;
};
},{}],"S8tM":[function(require,module,exports) {
var randomWeight = require('./random-weight');

module.exports = function randos(size) {
  var array = new Float32Array(size);

  for (var i = 0; i < size; i++) {
    array[i] = randomWeight();
  }

  return array;
};
},{"./random-weight":"TX07"}],"pcuE":[function(require,module,exports) {
var randos = require('./randos');

module.exports = function randos2D(width, height) {
  var result = new Array(height);

  for (var y = 0; y < height; y++) {
    result[y] = randos(width);
  }

  return result;
};
},{"./randos":"S8tM"}],"yQCp":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Model = _require.Model;

var randos2D = require('../utilities/randos-2d');

var zeros2D = require('../utilities/zeros-2d');

var Random =
/*#__PURE__*/
function (_Model) {
  _inherits(Random, _Model);

  function Random(settings) {
    var _this;

    _classCallCheck(this, Random);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Random).call(this, settings));

    _this.validate();

    _this.weights = randos2D(_this.width, _this.height);
    _this.deltas = zeros2D(_this.width, _this.height);
    return _this;
  }

  _createClass(Random, [{
    key: "predict",
    value: function predict() {// throw new Error(`${this.constructor.name}-predict is not yet implemented`)
    }
  }, {
    key: "compare",
    value: function compare() {// throw new Error(`${this.constructor.name}-compare is not yet implemented`)
    }
  }]);

  return Random;
}(Model);

function random(settings) {
  return new Random(settings);
}

module.exports = {
  Random: Random,
  random: random
};
},{"./types":"pX1U","../utilities/randos-2d":"pcuE","../utilities/zeros-2d":"C4Cz"}],"xJEq":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../utilities/kernel'),
    makeKernel = _require.makeKernel,
    release = _require.release;

var zeros2D = require('../utilities/zeros-2d');

var _require2 = require('./types'),
    Operator = _require2.Operator;

function predict(weights1, weights2) {
  var sum = 0;

  for (var i = 0; i < this.constants.size; i++) {
    sum += weights1[this.thread.y][i] * weights2[i][this.thread.x];
  }

  return sum;
}

function compareFromX(deltas, inputDeltas, inputWeights) {
  var sum = inputDeltas[this.thread.y][this.thread.x];

  for (var i = 0; i < this.constants.size; i++) {
    sum += deltas[this.thread.y][i] * inputWeights[this.thread.x][i];
  }

  return sum;
}

function compareFromY(deltas, inputDeltas, inputWeights) {
  var sum = inputDeltas[this.thread.y][this.thread.x];

  for (var i = 0; i < this.constants.size; i++) {
    sum += deltas[i][this.thread.x] * inputWeights[i][this.thread.y];
  }

  return sum;
}

var Multiply =
/*#__PURE__*/
function (_Operator) {
  _inherits(Multiply, _Operator);

  function Multiply(inputLayer1, inputLayer2) {
    var _this;

    var settings = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Multiply);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Multiply).call(this));
    _this.inputLayer1 = inputLayer1;
    _this.inputLayer2 = inputLayer2;
    _this.compareKernel1 = null;
    _this.compareKernel2 = null;
    _this.width = inputLayer2.width;
    _this.height = inputLayer1.height;

    _this.validate();

    _this.weights = zeros2D(_this.width, _this.height);
    _this.deltas = zeros2D(_this.width, _this.height);

    if (settings && settings.name) {
      _this.name = settings.name;
    }

    _this.setupPraxis(settings);

    return _this;
  }

  _createClass(Multiply, [{
    key: "validate",
    value: function validate() {
      _get(_getPrototypeOf(Multiply.prototype), "validate", this).call(this);

      if (this.inputLayer1.width !== this.inputLayer2.height) {
        throw new Error("Layer width mismatch of ".concat(this.inputLayer1.width, " and ").concat(this.inputLayer2.height));
      }
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {
      this.predictKernel = makeKernel(predict, {
        output: [this.width, this.height],
        constants: {
          size: this.inputLayer2.height
        }
      });
      this.compareKernel1 = makeKernel(compareFromX, {
        output: [this.inputLayer1.width, this.inputLayer1.height],
        constants: {
          size: this.inputLayer2.width
        }
      });
      this.compareKernel2 = makeKernel(compareFromY, {
        output: [this.inputLayer2.width, this.inputLayer2.height],
        constants: {
          size: this.inputLayer1.height
        }
      });
    }
  }, {
    key: "reuseKernels",
    value: function reuseKernels(layer) {
      _get(_getPrototypeOf(Multiply.prototype), "reuseKernels", this).call(this, layer);

      this.compareKernel1 = layer.compareKernel1;
      this.compareKernel2 = layer.compareKernel2;
    }
  }, {
    key: "predict",
    value: function predict() {
      release(this.weights);
      this.weights = this.predictKernel(this.inputLayer1.weights, this.inputLayer2.weights);
    }
  }, {
    key: "compare",
    value: function compare() {
      var inputLayer1Deltas = this.inputLayer1.deltas;
      var inputLayer2Deltas = this.inputLayer2.deltas;
      var newDeltas1 = this.compareKernel1(this.deltas, this.inputLayer1.deltas, this.inputLayer2.weights);
      var newDeltas2 = this.compareKernel2(this.deltas, this.inputLayer2.deltas, this.inputLayer1.weights);
      this.inputLayer2.deltas = newDeltas2;
      this.inputLayer1.deltas = newDeltas1;
      release(inputLayer1Deltas);
      release(inputLayer2Deltas);
    }
  }]);

  return Multiply;
}(Operator);

function multiply(inputLayer1, inputLayer2, settings) {
  return new Multiply(inputLayer1, inputLayer2, settings);
}

module.exports = {
  Multiply: Multiply,
  multiply: multiply,
  predict: predict,
  compareFromX: compareFromX,
  compareFromY: compareFromY
};
},{"../utilities/kernel":"L30b","../utilities/zeros-2d":"C4Cz","./types":"pX1U"}],"ED1E":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Activation = _require.Activation;

var _require2 = require('../utilities/kernel'),
    makeKernel = _require2.makeKernel,
    release = _require2.release;

var _require3 = require('../activation/sigmoid'),
    activate = _require3.activate,
    measure = _require3.measure;

function predict2D(inputs) {
  return 1 / (1 + Math.exp(-inputs[this.thread.y][this.thread.x]));
}

function predict3D(inputs) {
  return 1 / (1 + Math.exp(-inputs[this.thread.z][this.thread.y][this.thread.x]));
}

function compare2D(weights, deltas) {
  var weight = weights[this.thread.y][this.thread.x];
  var delta = deltas[this.thread.y][this.thread.x];
  return weight * (1 - weight) * delta;
}

function compare3D(weights, deltas) {
  var weight = weights[this.thread.z][this.thread.y][this.thread.x];
  var delta = deltas[this.thread.z][this.thread.y][this.thread.x];
  return weight * (1 - weight) * delta;
}

var Sigmoid =
/*#__PURE__*/
function (_Activation) {
  _inherits(Sigmoid, _Activation);

  function Sigmoid() {
    _classCallCheck(this, Sigmoid);

    return _possibleConstructorReturn(this, _getPrototypeOf(Sigmoid).apply(this, arguments));
  }

  _createClass(Sigmoid, [{
    key: "setupKernels",
    value: function setupKernels() {
      if (this.depth > 0) {
        this.predictKernel = makeKernel(predict3D, {
          output: [this.width, this.height, this.depth],
          functions: [activate]
        });
        this.compareKernel = makeKernel(compare3D, {
          output: [this.width, this.height, this.depth],
          functions: [measure]
        });
      } else {
        this.predictKernel = makeKernel(predict2D, {
          output: [this.width, this.height],
          functions: [activate]
        });
        this.compareKernel = makeKernel(compare2D, {
          output: [this.width, this.height],
          functions: [measure]
        });
      }
    }
  }, {
    key: "predict",
    value: function predict() {
      release(this.weights);
      this.weights = this.predictKernel(this.inputLayer.weights);
    }
  }, {
    key: "compare",
    value: function compare() {
      release(this.inputLayer.deltas);
      this.inputLayer.deltas = this.compareKernel(this.weights, this.deltas);
    }
  }]);

  return Sigmoid;
}(Activation);

function sigmoid(inputLayer, settings) {
  return new Sigmoid(inputLayer, settings);
}

module.exports = {
  Sigmoid: Sigmoid,
  sigmoid: sigmoid,
  predict2D: predict2D,
  predict3D: predict3D,
  compare2D: compare2D,
  compare3D: compare3D
};
},{"./types":"pX1U","../utilities/kernel":"L30b","../activation/sigmoid":"thFH"}],"SVHJ":[function(require,module,exports) {
var _require = require('../praxis/arthur-deviation-weights'),
    arthurDeviationWeights = _require.arthurDeviationWeights;

var _require2 = require('../praxis/arthur-deviation-biases'),
    arthurDeviationBiases = _require2.arthurDeviationBiases;

var _require3 = require('./add'),
    add = _require3.add;

var _require4 = require('./random'),
    random = _require4.random;

var _require5 = require('./multiply'),
    multiply = _require5.multiply;

var _require6 = require('./sigmoid'),
    sigmoid = _require6.sigmoid;

function noopPraxis() {
  return {
    run: function run(layer) {
      return layer.weights;
    }
  };
}

function arthurFeedForward(settings, inputLayer) {
  var height = settings.height;

  function weightsPraxis(layer, settings) {
    return arthurDeviationWeights(layer, settings);
  }

  function biasesPraxis(layer, settings) {
    return arthurDeviationBiases(layer, settings);
  }

  var weightsLayer = random({
    name: 'weights',
    height: height,
    width: inputLayer.height,
    praxis: weightsPraxis
  });
  var biasesLayer = random({
    name: 'biases',
    height: height,
    praxis: biasesPraxis
  });
  var multiplyLayer = multiply(weightsLayer, inputLayer, {
    praxis: noopPraxis
  });
  var addLayer = add(multiplyLayer, biasesLayer, {
    praxis: noopPraxis
  });
  var sigmoidLayer = sigmoid(addLayer, {
    praxis: noopPraxis
  });
  weightsLayer.praxis.weightsLayer = weightsLayer;
  weightsLayer.praxis.incomingLayer = inputLayer;
  weightsLayer.praxis.deltaLayer = sigmoidLayer;
  return sigmoidLayer;
}

module.exports = {
  arthurFeedForward: arthurFeedForward
};
},{"../praxis/arthur-deviation-weights":"xg3N","../praxis/arthur-deviation-biases":"GVwH","./add":"q7CK","./random":"yQCp","./multiply":"xJEq","./sigmoid":"ED1E"}],"iz6h":[function(require,module,exports) {
function setStride(layer, settings) {
  var defaults = layer.constructor.defaults;

  if (settings.hasOwnProperty('stride')) {
    layer.strideX = settings.stride;
    layer.strideY = settings.stride;
  } else {
    if (settings.hasOwnProperty('strideX')) {
      layer.strideX = settings.strideX;
    } else {
      layer.strideX = defaults.stride;
    }

    if (settings.hasOwnProperty('strideY')) {
      layer.strideY = settings.strideY;
    } else {
      layer.strideY = defaults.stride;
    }
  }
}

function setPadding(layer, settings) {
  var defaults = layer.constructor.defaults;

  if (settings.hasOwnProperty('padding')) {
    layer.paddingX = settings.padding;
    layer.paddingY = settings.padding;
  } else {
    if (settings.hasOwnProperty('paddingX')) {
      layer.paddingX = settings.paddingX;
    } else {
      layer.paddingX = defaults.padding;
    }

    if (settings.hasOwnProperty('paddingY')) {
      layer.paddingY = settings.paddingY;
    } else {
      layer.paddingY = defaults.padding;
    }
  }
}

module.exports = {
  setStride: setStride,
  setPadding: setPadding
};
},{}],"TSfJ":[function(require,module,exports) {
var rondos2D = require('./randos-2d');

module.exports = function randos3D(width, height, depth) {
  var result = new Array(depth);

  for (var z = 0; z < depth; z++) {
    result[z] = rondos2D(width, height);
  }

  return result;
};
},{"./randos-2d":"pcuE"}],"Whlg":[function(require,module,exports) {
module.exports = function values(size, value) {
  return new Float32Array(size).fill(value);
};
},{}],"xL0H":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../utilities/kernel'),
    makeKernel = _require.makeKernel,
    release = _require.release,
    clone = _require.clone;

var _require2 = require('../utilities/layer-setup'),
    setStride = _require2.setStride,
    setPadding = _require2.setPadding;

var _require3 = require('./types'),
    Filter = _require3.Filter;

var randos = require('../utilities/randos');

var randos3D = require('../utilities/randos-3d');

var zeros3D = require('../utilities/zeros-3d');

var values = require('../utilities/values');

function predict(inputs, filters, biases) {
  var startFilterX = this.constants.paddingX - this.thread.x * this.constants.strideX;
  var startInputX = this.thread.x * this.constants.strideX - this.constants.paddingX;
  var endFilterX = Math.min(this.constants.filterWidth, startFilterX + this.constants.inputWidth);
  var startFilterY = this.constants.paddingY - this.thread.y * this.constants.strideY;
  var startInputY = this.thread.y * this.constants.strideY - this.constants.paddingY;
  var endFilterY = Math.min(this.constants.filterHeight, startFilterY + this.constants.inputHeight);
  var sum = 0;

  for (var z = 0; z < this.constants.inputDepth; z++) {
    for (var filterY = Math.max(0, startFilterY), inputY = Math.max(0, startInputY); filterY < endFilterY; filterY++, inputY++) {
      for (var filterX = Math.max(0, startFilterX), inputX = Math.max(0, startInputX); filterX < endFilterX; filterX++, inputX++) {
        sum += filters[z][filterY][filterX] * inputs[z][inputY][inputX];
      }
    }
  }

  return sum + biases[this.thread.z];
}

function compareFilterDeltas(filterDeltas, inputs, deltas) {
  var startDeltaX = Math.max(0, Math.ceil((this.constants.paddingX - this.thread.x) / this.constants.strideX));
  var startInputX = startDeltaX * this.constants.strideX + this.thread.x - this.constants.paddingX;
  var endDeltaX = Math.min(this.constants.deltaWidth, Math.floor((this.constants.inputWidth - 1 - this.thread.x + this.constants.paddingX) / this.constants.strideX) + 1);
  var startDeltaY = Math.max(0, Math.ceil((this.constants.paddingY - this.thread.y) / this.constants.strideY));
  var startInputY = startDeltaY * this.constants.strideY + this.thread.y - this.constants.paddingY;
  var endDeltaY = Math.min(this.constants.deltaHeight, Math.floor((this.constants.inputHeight - 1 - this.thread.y + this.constants.paddingY) / this.constants.strideY) + 1);
  var sum = filterDeltas[this.thread.z][this.thread.y][this.thread.x];

  for (var deltaY = startDeltaY, inputY = startInputY; deltaY < endDeltaY; deltaY++, inputY += this.constants.strideY) {
    for (var deltaX = startDeltaX, inputX = startInputX; deltaX < endDeltaX; deltaX++, inputX += this.constants.strideX) {
      sum += inputs[this.thread.z][inputY][inputX] * deltas[this.constants.deltaZ][deltaY][deltaX];
    }
  }

  return sum;
}

function compareInputDeltas(inputDeltas, filters, deltas) {
  var x = this.thread.x + this.constants.paddingX;
  var startDeltaX = x < this.constants.filterWidth ? 0 : Math.floor((x - this.constants.filterWidth + this.constants.strideX) / this.constants.strideX);
  var startFilterX = x - startDeltaX * this.constants.strideX;
  var endDeltaX = Math.min(startDeltaX + Math.floor(startFilterX / this.constants.strideX) + 1, this.constants.deltaWidth);
  var y = this.thread.y + this.constants.paddingY;
  var startDeltaY = y < this.constants.filterHeight ? 0 : Math.floor((y - this.constants.filterHeight + this.constants.strideY) / this.constants.strideY);
  var startFilterY = y - startDeltaY * this.constants.strideY;
  var endDeltaY = Math.min(startDeltaY + Math.floor(startFilterY / this.constants.strideY) + 1, this.constants.deltaHeight);
  var sum = inputDeltas[this.thread.z][this.thread.y][this.thread.x];
  var deltaY = startDeltaY;

  for (var filterY = startFilterY; deltaY < endDeltaY; filterY -= this.constants.strideY, deltaY++) {
    var deltaX = startDeltaX;

    for (var filterX = startFilterX; deltaX < endDeltaX; filterX -= this.constants.strideX, deltaX++) {
      sum += filters[this.thread.z][filterY][filterX] * deltas[this.constants.deltaZ][deltaY][deltaX];
    }
  }

  return sum;
}

function compareBiases(biasDeltas, deltas) {
  var sum = 0;

  for (var y = 0; y < this.constants.deltaHeight; y++) {
    for (var x = 0; x < this.constants.deltaWidth; x++) {
      sum += deltas[this.thread.z][y][x];
    }
  }

  return biasDeltas[this.thread.z][this.thread.y][this.thread.x] + sum;
}

var Convolution =
/*#__PURE__*/
function (_Filter) {
  _inherits(Convolution, _Filter);

  _createClass(Convolution, null, [{
    key: "defaults",
    get: function get() {
      return {
        stride: 0,
        padding: 0,
        bias: 0.1,
        filterCount: 1,
        filterWidth: 0,
        filterHeight: 0
      };
    }
  }]);

  function Convolution(settings, inputLayer) {
    var _this;

    _classCallCheck(this, Convolution);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Convolution).call(this, settings));
    _this.stride = null;
    _this.strideX = null;
    _this.strideY = null;
    setStride(_assertThisInitialized(_this), settings);
    _this.padding = null;
    _this.paddingX = null;
    _this.paddingY = null;
    setPadding(_assertThisInitialized(_this), settings);
    _this.filterCount = settings.filterCount;
    _this.filterWidth = settings.filterWidth;
    _this.filterHeight = settings.filterHeight;
    _this.width = Math.floor((inputLayer.width + _this.paddingX * 2 - _this.filterWidth) / _this.strideX + 1);
    _this.height = Math.floor((inputLayer.height + _this.paddingY * 2 - _this.filterHeight) / _this.strideY + 1);
    _this.depth = _this.filterCount;
    _this.weights = randos3D(_this.width, _this.height, _this.depth);
    _this.deltas = zeros3D(_this.width, _this.height, _this.depth);
    _this.biases = values(_this.depth, _this.bias);
    _this.biasDeltas = randos(_this.depth);
    _this.filters = randos3D(_this.filterWidth, _this.filterHeight, _this.filterCount);
    _this.filterDeltas = zeros3D(_this.filterWidth, _this.filterHeight, _this.filterCount);
    _this.learnFilters = null;
    _this.learnInputs = null;
    _this.inputLayer = inputLayer;

    _this.validate();

    return _this;
  }

  _createClass(Convolution, [{
    key: "setupKernels",
    value: function setupKernels() {
      this.predictKernel = makeKernel(predict, {
        constants: {
          inputWidth: this.inputLayer.width,
          inputHeight: this.inputLayer.height,
          inputDepth: this.inputLayer.depth,
          strideX: this.strideX,
          strideY: this.strideY,
          paddingX: this.paddingX,
          paddingY: this.paddingY,
          filterWidth: this.filterWidth,
          filterHeight: this.filterHeight
        },
        output: [this.width, this.height, this.depth]
      });
      this.compareFilterDeltasKernel = makeKernel(compareFilterDeltas, {
        constants: {
          deltasWidth: this.width,
          deltasHeight: this.height,
          deltasDepth: this.depth,
          inputWidth: this.inputLayer.width,
          inputHeight: this.inputLayer.height,
          inputDepth: this.inputLayer.depth,
          strideX: this.strideX,
          strideY: this.strideY,
          paddingX: this.paddingX,
          paddingY: this.paddingY,
          filterWidth: this.filterWidth,
          filterHeight: this.filterHeight
        },
        output: [this.width, this.height, this.depth]
      });
      this.compareInputDeltasKernel = makeKernel(compareInputDeltas, {
        constants: {
          filterCount: this.filterCount
        },
        output: [this.inputLayer.width, this.inputLayer.height, this.inputLayer.depth]
      });
      this.compareBiasesKernel = makeKernel(compareBiases, {
        output: [1, 1, this.depth],
        constants: {
          deltaWidth: this.width,
          deltaHeight: this.height
        }
      });
    }
  }, {
    key: "predict",
    value: function predict() {
      this.weights = this.predictKernel(this.inputLayer.weights, this.filters, this.biases);
    }
  }, {
    key: "compare",
    value: function compare() {
      var filterDeltas = this.filterDeltas,
          biasDeltas = this.biasDeltas;
      this.filterDeltas = this.compareFilterDeltasKernel(filterDeltas, this.inputLayer.weights, this.deltas);
      release(filterDeltas);
      this.biasDeltas = this.compareBiasesKernel(biasDeltas, this.deltas);
      release(biasDeltas);
      release(this.deltas);
      this.deltas = this.compareInputDeltasKernel(this.filters, this.inputLayer.deltas);
      release(this.inputLayer.deltas);
      this.inputLayer.deltas = clone(this.deltas);
    }
  }, {
    key: "learn",
    value: function learn(previousLayer, nextLayer, learningRate) {
      // TODO: handle filters
      this.weights = this.praxis.run(this, previousLayer, nextLayer, learningRate);
      release(this.weights);
      release(this.deltas);
      this.deltas = zeros3D(this.width, this.height, this.depth);
    }
  }]);

  return Convolution;
}(Filter);

function convolution(settings, inputLayer) {
  return new Convolution(settings, inputLayer);
}

module.exports = {
  Convolution: Convolution,
  convolution: convolution,
  predict: predict,
  compareFilterDeltas: compareFilterDeltas,
  compareInputDeltas: compareInputDeltas,
  compareBiases: compareBiases
};
},{"../utilities/kernel":"L30b","../utilities/layer-setup":"iz6h","./types":"pX1U","../utilities/randos":"S8tM","../utilities/randos-3d":"TSfJ","../utilities/zeros-3d":"AN3i","../utilities/values":"Whlg"}],"YwJF":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Filter = _require.Filter;

var _require2 = require('../utilities/kernel'),
    makeKernel = _require2.makeKernel,
    release = _require2.release;

function setDropout(dropout) {
  return dropout;
}

function trainingPredict(inputs) {
  if (setDropout(Math.random()) < this.constants.probability) {
    return 0;
  }

  return inputs[this.thread.y][this.thread.x];
}

function predict(inputs) {
  return inputs[this.thread.y][this.thread.x] * this.constants.probability;
}

function compare(dropouts, deltas) {
  if (dropouts[this.thread.y][this.thread.x] === 0) {
    return 0;
  }

  return deltas[this.thread.y][this.thread.x];
}

var Dropout =
/*#__PURE__*/
function (_Filter) {
  _inherits(Dropout, _Filter);

  _createClass(Dropout, null, [{
    key: "defaults",
    get: function get() {
      return {
        width: 1,
        height: 1,
        depth: null,
        probability: 0.5
      };
    }
  }]);

  function Dropout(inputLayer, settings) {
    var _this;

    _classCallCheck(this, Dropout);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Dropout).call(this, settings));
    _this.inputLayer = inputLayer;
    _this.height = inputLayer.height;
    _this.width = inputLayer.width;
    _this.dropouts = null;

    _this.validate();

    return _this;
  }

  _createClass(Dropout, [{
    key: "setupKernels",
    value: function setupKernels(isTraining) {
      var output = [this.width, this.height];

      if (isTraining) {
        this.predictKernel = makeKernel(trainingPredict, {
          output: output,
          map: {
            dropouts: setDropout
          }
        });
        this.compareKernel = makeKernel(compare, {
          output: output
        });
      } else {
        this.predictKernel = makeKernel(predict, {
          output: output
        });
      }
    }
  }, {
    key: "predict",
    value: function predict() {
      release(this.weights);
      release(this.dropouts);

      var _this$predictKernel = this.predictKernel(this.inputLayer.weights),
          result = _this$predictKernel.result,
          dropouts = _this$predictKernel.dropouts;

      this.weights = result;
      this.dropouts = dropouts;
    }
  }, {
    key: "compare",
    value: function compare() {
      release(this.deltas);
      this.deltas = this.compareKernel(this.dropouts, this.inputLayer.deltas);
    }
  }]);

  return Dropout;
}(Filter);

function dropout(settings, inputLayer) {
  return new Dropout(settings, inputLayer);
}

module.exports = {
  Dropout: Dropout,
  dropout: dropout,
  setDropout: setDropout,
  trainingPredict: trainingPredict,
  predict: predict,
  compare: compare
};
},{"./types":"pX1U","../utilities/kernel":"L30b"}],"nL1l":[function(require,module,exports) {
var _require = require('./random'),
    random = _require.random;

var _require2 = require('./add'),
    add = _require2.add;

var _require3 = require('./multiply'),
    multiply = _require3.multiply;

var _require4 = require('./sigmoid'),
    sigmoid = _require4.sigmoid;

function feedForward(settings, input) {
  var height = settings.height,
      praxisOpts = settings.praxisOpts;
  var weights = random({
    name: 'weights',
    height: height,
    width: input.height,
    praxisOpts: praxisOpts
  });
  var biases = random({
    name: 'biases',
    height: height,
    praxisOpts: praxisOpts
  });
  return sigmoid(add(multiply(weights, input, {
    praxisOpts: praxisOpts
  }), biases, {
    praxisOpts: praxisOpts
  }), {
    praxisOpts: praxisOpts
  });
}

module.exports = {
  feedForward: feedForward
};
},{"./random":"yQCp","./add":"q7CK","./multiply":"xJEq","./sigmoid":"ED1E"}],"Aqg2":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Filter = _require.Filter;

var _require2 = require('../utilities/kernel'),
    makeKernel = _require2.makeKernel,
    release = _require2.release;

var values = require('../utilities/values');

var randos2D = require('../utilities/randos-2d');

var randos3D = require('../utilities/randos-3d');

var zeros = require('../utilities/zeros');

var zeros2D = require('../utilities/zeros-2d');

var zeros3D = require('../utilities/zeros-3d');

function predict(inputs, filters, biases) {
  var output = 0;
  var i = 0;

  for (var y = 0; y < this.constants.inputHeight; y++) {
    for (var x = 0; x < this.constants.inputWidth; x++) {
      output += inputs[y][x] * filters[this.thread.x][i];
      i++;
    }
  }

  return output + biases[this.thread.x];
}

function predict3D(inputs, filters, biases) {
  var output = 0;
  var i = 0;

  for (var z = 0; z < this.constants.inputDepth; z++) {
    for (var y = 0; y < this.constants.inputHeight; y++) {
      for (var x = 0; x < this.constants.inputWidth; x++) {
        output += inputs[z][y][x] * filters[this.thread.x][i];
        i++;
      }
    }
  }

  return output + biases[this.thread.x];
}

function compareInputDeltas(inputDeltas, deltas, filters) {
  var sum = 0;
  var filterX = this.thread.x + this.thread.y * this.output.x;

  for (var filterY = 0; filterY < this.constants.filterCount; filterY++) {
    sum += filters[filterY][filterX] * deltas[0][filterY];
  }

  return sum + inputDeltas[this.thread.y][this.thread.x];
}

function compareInputDeltas3D(inputDeltas, deltas, filters) {
  var sum = 0;
  var filterX = this.thread.x + this.thread.y * this.output.x;

  for (var filterY = 0; filterY < this.constants.filterCount; filterY++) {
    sum += filters[filterY][filterX] * deltas[0][filterY];
  }

  return sum + inputDeltas[this.thread.z][this.thread.y][this.thread.x];
}

function compareBiases(biases, deltas) {
  return biases[this.thread.x] + deltas[this.thread.y][this.thread.x];
}

function compareFilterDeltas(filterDeltas, inputWeights, deltas) {
  return filterDeltas[this.thread.y][this.thread.x] + inputWeights[this.thread.y][this.thread.x] * deltas[this.constants.deltaY][this.constants.deltaX];
}

function compareFilterDeltas3D(filterDeltas, inputWeights, deltas) {
  var inputZ = Math.floor(this.thread.x / (this.constants.inputWidth * this.constants.inputHeight));
  var inputY = Math.floor((this.thread.x - inputZ * this.constants.inputWidth * this.constants.inputHeight) / this.constants.inputWidth);
  var inputX = this.thread.x - this.constants.inputWidth * (inputY + this.constants.inputHeight * inputZ);
  return filterDeltas[this.thread.y][this.thread.x] + inputWeights[inputZ][inputY][inputX] * deltas[0][this.thread.y];
}

var FullyConnected =
/*#__PURE__*/
function (_Filter) {
  _inherits(FullyConnected, _Filter);

  _createClass(FullyConnected, null, [{
    key: "defaults",
    get: function get() {
      return {
        bias: 0.1
      };
    }
  }]);

  function FullyConnected(settings, inputLayer) {
    var _this;

    _classCallCheck(this, FullyConnected);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FullyConnected).call(this, settings));
    _this.inputLayer = inputLayer;

    _this.validate();

    _this.compareFilterDeltasKernel = null;
    _this.compareInputDeltasKernel = null;
    _this.compareBiasesKernel = null;
    var connectionCount = inputLayer.width * inputLayer.height * inputLayer.depth;
    _this.biases = values(_this.height, _this.bias);
    _this.biasDeltas = zeros(_this.height);
    _this.filters = randos2D(connectionCount, _this.height);
    _this.filterDeltas = zeros2D(connectionCount, _this.height);

    if (_this.depth > 0) {
      _this.weights = randos3D(_this.width, _this.height);
      _this.deltas = zeros3D(_this.width, _this.height);
    } else if (_this.height > 0) {
      _this.weights = randos2D(_this.width, _this.height);
      _this.deltas = zeros2D(_this.width, _this.height);
    }

    return _this;
  }

  _createClass(FullyConnected, [{
    key: "validate",
    value: function validate() {
      _get(_getPrototypeOf(FullyConnected.prototype), "validate", this).call(this);

      if (this.depth > 0) throw new Error('depth not supported');
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {
      var inputLayer = this.inputLayer;
      var connectionCount = inputLayer.width * inputLayer.height * inputLayer.depth;

      if (inputLayer.depth > 0) {
        this.predictKernel = makeKernel(predict3D, {
          output: [this.width, this.height],
          constants: {
            inputHeight: inputLayer.height,
            inputWidth: inputLayer.width,
            inputDepth: inputLayer.depth
          }
        });
        this.compareFilterDeltasKernel = makeKernel(compareFilterDeltas3D, {
          output: [connectionCount, this.height],
          constants: {
            inputWidth: inputLayer.width,
            inputHeight: inputLayer.height
          }
        });
        this.compareInputDeltasKernel = makeKernel(compareInputDeltas3D, {
          output: [inputLayer.width, inputLayer.height, inputLayer.depth],
          constants: {
            filterCount: this.height
          }
        });
      } else {
        this.predictKernel = makeKernel(predict, {
          output: [this.width, this.height],
          constants: {
            inputHeight: inputLayer.height,
            inputWidth: inputLayer.width
          }
        });
        this.compareFilterDeltasKernel = makeKernel(compareFilterDeltas, {
          output: [connectionCount, this.height],
          constants: {
            inputWidth: inputLayer.width
          }
        });
        this.compareInputDeltasKernel = makeKernel(compareInputDeltas, {
          output: [inputLayer.width, inputLayer.height],
          constants: {
            filterCount: this.height
          }
        });
      }

      this.compareBiasesKernel = makeKernel(compareBiases, {
        output: [this.width, this.height]
      });
    }
  }, {
    key: "predict",
    value: function predict() {
      this.weights = this.predictKernel(this.inputLayer.weights, this.filters, this.biases);
    }
  }, {
    key: "compare",
    value: function compare() {
      var inputLayerDeltas = this.inputLayer.deltas;
      this.inputLayer.deltas = this.compareInputDeltasKernel(inputLayerDeltas, this.deltas, this.filters);
      release(inputLayerDeltas);
      var biasDeltas = this.biasDeltas,
          filterDeltas = this.filterDeltas; // TODO: handle biasDeltas learn

      this.biasDeltas = this.compareBiasesKernel(this.biases, this.deltas); // TODO: handle filterDeltas learn

      this.filterDeltas = this.compareFilterDeltasKernel(filterDeltas, this.inputLayer.weights, this.deltas);
      release(biasDeltas);
      release(filterDeltas);
    }
  }]);

  return FullyConnected;
}(Filter);

function fullyConnected(settings, inputLayer) {
  return new FullyConnected(settings, inputLayer);
}

module.exports = {
  FullyConnected: FullyConnected,
  fullyConnected: fullyConnected,
  predict: predict,
  predict3D: predict3D,
  compareInputDeltas: compareInputDeltas,
  compareInputDeltas3D: compareInputDeltas3D,
  compareBiases: compareBiases,
  compareFilterDeltas: compareFilterDeltas,
  compareFilterDeltas3D: compareFilterDeltas3D
};
},{"./types":"pX1U","../utilities/kernel":"L30b","../utilities/values":"Whlg","../utilities/randos-2d":"pcuE","../utilities/randos-3d":"TSfJ","../utilities/zeros":"M4LY","../utilities/zeros-2d":"C4Cz","../utilities/zeros-3d":"AN3i"}],"kuoN":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../utilities/kernel'),
    makeKernel = _require.makeKernel,
    release = _require.release;

var _require2 = require('./types'),
    Modifier = _require2.Modifier;

function predict(weights) {
  return -weights[this.thread.y][this.thread.x];
}

var Negative =
/*#__PURE__*/
function (_Modifier) {
  _inherits(Negative, _Modifier);

  function Negative(settings, inputLayer) {
    var _this;

    _classCallCheck(this, Negative);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Negative).call(this, settings));
    _this.inputLayer = inputLayer;

    _this.validate();

    return _this;
  }

  _createClass(Negative, [{
    key: "setupKernels",
    value: function setupKernels() {
      this.predictKernel = makeKernel(predict, {
        output: [this.width, this.height]
      });
    }
  }, {
    key: "predict",
    value: function predict() {
      var weights = this.weights;
      this.weights = this.predictKernel(this.inputLayer.weights);
      release(weights);
    }
  }]);

  return Negative;
}(Modifier);

function negative(settings, inputLayer) {
  return new Negative(settings, inputLayer);
}

module.exports = {
  Negative: Negative,
  negative: negative,
  predict: predict
};
},{"../utilities/kernel":"L30b","./types":"pX1U"}],"vjFV":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../utilities/kernel'),
    makeKernel = _require.makeKernel,
    release = _require.release;

var _require2 = require('./types'),
    Operator = _require2.Operator;

var zeros2D = require('../utilities/zeros-2d');

var _require3 = require('../utilities/layer-size'),
    checkSameSize = _require3.checkSameSize;

function predict(weights, inputLayerWeights) {
  return weights[this.thread.y][this.thread.x] * inputLayerWeights[this.thread.y][this.thread.x];
}

function compare(weights, deltas) {
  return weights[this.thread.y][this.thread.x] * deltas[this.thread.y][this.thread.x];
}

var MultiplyElement =
/*#__PURE__*/
function (_Operator) {
  _inherits(MultiplyElement, _Operator);

  function MultiplyElement(inputLayer1, inputLayer2) {
    var _this;

    _classCallCheck(this, MultiplyElement);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MultiplyElement).call(this));
    _this.inputLayer1 = inputLayer1;
    _this.inputLayer2 = inputLayer2;
    _this.width = inputLayer1.width;
    _this.height = inputLayer1.height;

    _this.validate();

    _this.weights = zeros2D(_this.width, _this.height);
    _this.deltas = zeros2D(_this.width, _this.height);
    return _this;
  }

  _createClass(MultiplyElement, [{
    key: "validate",
    value: function validate() {
      _get(_getPrototypeOf(MultiplyElement.prototype), "validate", this).call(this);

      checkSameSize(this.inputLayer1, this.inputLayer2);
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {
      this.predictKernel = makeKernel(predict, {
        output: [this.width, this.height]
      });
      this.compareKernel = makeKernel(compare, {
        output: [this.width, this.height]
      });
    }
  }, {
    key: "predict",
    value: function predict() {
      var weights = this.weights;
      this.weights = this.predictKernel(weights, this.inputLayer.weights);
      release(weights);
    }
  }, {
    key: "compare",
    value: function compare() {
      var deltas = this.deltas;
      this.deltas = this.compareKernel(this.weights, deltas);
      release(deltas);
    }
  }]);

  return MultiplyElement;
}(Operator);

function multiplyElement(inputLayer1, inputLayer2) {
  return new MultiplyElement(inputLayer1, inputLayer2);
}

module.exports = {
  MultiplyElement: MultiplyElement,
  multiplyElement: multiplyElement
};
},{"../utilities/kernel":"L30b","./types":"pX1U","../utilities/zeros-2d":"C4Cz","../utilities/layer-size":"T4Kr"}],"f7P8":[function(require,module,exports) {
module.exports = function ones(size) {
  return new Float32Array(size).fill(1);
};
},{}],"jZTY":[function(require,module,exports) {
var ones = require('./ones');

module.exports = function ones2D(width, height) {
  var result = new Array(height);

  for (var y = 0; y < height; y++) {
    result[y] = ones(width);
  }

  return result;
};
},{"./ones":"f7P8"}],"zJfH":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var ones2D = require('../utilities/ones-2d');

var zeros2D = require('../utilities/zeros-2d');

var _require = require('./types'),
    Model = _require.Model;

var Ones =
/*#__PURE__*/
function (_Model) {
  _inherits(Ones, _Model);

  function Ones(settings) {
    var _this;

    _classCallCheck(this, Ones);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Ones).call(this, settings));

    _this.validate();

    _this.weights = ones2D(_this.width, _this.height);
    _this.deltas = zeros2D(_this.width, _this.height);
    return _this;
  }

  return Ones;
}(Model);

function ones(settings) {
  return new Ones(settings);
}

module.exports = {
  Ones: Ones,
  ones: ones
};
},{"../utilities/ones-2d":"jZTY","../utilities/zeros-2d":"C4Cz","./types":"pX1U"}],"YNtu":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./activation'),
    Activation = _require.Activation;

var _require2 = require('../utilities/kernel'),
    makeKernel = _require2.makeKernel;

var _require3 = require('../activation/tanh'),
    activate = _require3.activate,
    measure = _require3.measure;

var _require4 = require('../utilities/kernel'),
    release = _require4.release;

function predict2D(inputs) {
  return activate(inputs[this.thread.y][this.thread.x]);
}

function predict3D(inputs) {
  return activate(inputs[this.thread.z][this.thread.y][this.thread.x]);
}

function compare2D(weights, errors) {
  return measure(weights[this.thread.y][this.thread.x], errors[this.thread.y][this.thread.x]);
}

function compare3D(weights, errors) {
  return measure(weights[this.thread.z][this.thread.y][this.thread.x], errors[this.thread.z][this.thread.y][this.thread.x]);
}

var Tanh =
/*#__PURE__*/
function (_Activation) {
  _inherits(Tanh, _Activation);

  function Tanh() {
    _classCallCheck(this, Tanh);

    return _possibleConstructorReturn(this, _getPrototypeOf(Tanh).apply(this, arguments));
  }

  _createClass(Tanh, [{
    key: "setupKernels",
    value: function setupKernels() {
      if (this.depth > 0) {
        this.predictKernel = makeKernel(predict3D, {
          output: [this.width, this.height, this.depth],
          functions: [activate]
        });
        this.compareKernel = makeKernel(compare3D, {
          output: [this.width, this.height, this.depth],
          functions: [measure]
        });
      } else {
        this.predictKernel = makeKernel(predict2D, {
          output: [this.width, this.height],
          functions: [activate]
        });
        this.compareKernel = makeKernel(compare2D, {
          output: [this.width, this.height],
          functions: [measure]
        });
      }
    }
  }, {
    key: "predict",
    value: function predict() {
      release(this.weights);
      this.weights = this.predictKernel(this.inputLayer.weights);
    }
  }, {
    key: "compare",
    value: function compare() {
      release(this.inputLayer.deltas);
      this.inputLayer.deltas = this.compareKernel(this.weights, this.deltas);
    }
  }]);

  return Tanh;
}(Activation);

function tanh(inputLayer, settings) {
  return new Tanh(inputLayer, settings);
}

module.exports = {
  Tanh: Tanh,
  tanh: tanh,
  predict2D: predict2D,
  predict3D: predict3D,
  compare2D: compare2D,
  compare3D: compare3D
};
},{"./activation":"HySO","../utilities/kernel":"L30b","../activation/tanh":"v3MV"}],"EOPb":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var zeros2D = require('../utilities/zeros-2d');

var _require = require('./types'),
    Model = _require.Model;

var Zeros =
/*#__PURE__*/
function (_Model) {
  _inherits(Zeros, _Model);

  function Zeros(settings) {
    var _this;

    _classCallCheck(this, Zeros);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Zeros).call(this, settings));

    _this.validate();

    _this.weights = zeros2D(_this.width, _this.height);
    _this.deltas = zeros2D(_this.width, _this.height);
    return _this;
  }

  _createClass(Zeros, [{
    key: "predict",
    value: function predict() {// throw new Error(`${this.constructor.name}-predict is not yet implemented`)
    }
  }, {
    key: "compare",
    value: function compare() {// throw new Error(`${this.constructor.name}-compare is not yet implemented`)
    }
  }]);

  return Zeros;
}(Model);

function zeros(settings) {
  return new Zeros(settings);
}

module.exports = {
  Zeros: Zeros,
  zeros: zeros
};
},{"../utilities/zeros-2d":"C4Cz","./types":"pX1U"}],"vCsu":[function(require,module,exports) {
var _require = require('./add'),
    add = _require.add;

var _require2 = require('./negative'),
    negative = _require2.negative;

var _require3 = require('./multiply'),
    multiply = _require3.multiply;

var _require4 = require('./multiply-element'),
    multiplyElement = _require4.multiplyElement;

var _require5 = require('./ones'),
    ones = _require5.ones;

var _require6 = require('./sigmoid'),
    sigmoid = _require6.sigmoid;

var _require7 = require('./random'),
    random = _require7.random;

var _require8 = require('./tanh'),
    tanh = _require8.tanh;

var _require9 = require('./zeros'),
    zeros = _require9.zeros;

function gru(settings, recurrentInput, input) {
  var height = settings.height;
  var updateGateWeights = random({
    height: height,
    width: input.height
  });
  var updateGatePeepholes = random({
    width: height,
    height: height
  });
  var updateGateBias = zeros({
    height: height
  });
  var updateGate = sigmoid(add(add(multiply(updateGateWeights, input), multiply(updateGatePeepholes, recurrentInput)), updateGateBias));
  var resetGateWeights = random({
    height: height,
    width: input.height
  });
  var resetGatePeepholes = random({
    width: height,
    height: height
  });
  var resetGateBias = zeros({
    height: height
  });
  var resetGate = sigmoid(add(add(multiply(resetGateWeights, input), multiply(resetGatePeepholes, recurrentInput)), resetGateBias));
  var cellWeights = random({
    height: height,
    width: input.height
  });
  var cellPeepholes = random({
    width: height,
    height: height
  });
  var cellBias = zeros({
    height: height
  });
  var cell = tanh(add(add(multiply(cellWeights, input), multiply(cellPeepholes, multiplyElement(resetGate, recurrentInput))), cellBias)); // compute hidden state as gated, saturated cell activations
  // negate updateGate

  return add(multiplyElement(add(ones(updateGate.rows, updateGate.columns), negative(updateGate)), cell), multiplyElement(recurrentInput, updateGate));
}

module.exports = {
  gru: gru
};
},{"./add":"q7CK","./negative":"kuoN","./multiply":"xJEq","./multiply-element":"vjFV","./ones":"zJfH","./sigmoid":"ED1E","./random":"yQCp","./tanh":"YNtu","./zeros":"EOPb"}],"qUrb":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Model = _require.Model;

var zeros2D = require('../utilities/zeros-2d');

var _require2 = require('../utilities/kernel'),
    makeKernel = _require2.makeKernel,
    release = _require2.release,
    kernelInput = _require2.kernelInput;

var Input =
/*#__PURE__*/
function (_Model) {
  _inherits(Input, _Model);

  function Input(settings) {
    var _this;

    _classCallCheck(this, Input);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Input).call(this, settings));

    _this.validate();

    _this.weights = null;
    _this.reshapeInput = null;
    _this.deltas = zeros2D(_this.width, _this.height);
    return _this;
  }

  _createClass(Input, [{
    key: "setupKernels",
    value: function setupKernels() {
      if (this.width === 1) {
        this.predict = this.predict1D;
        this.reshapeInput = makeKernel(function (value) {
          return value[this.thread.y];
        }, {
          output: [1, this.height]
        });
      } else {
        this.reshapeInput = function (inputs) {
          return inputs;
        };
      }
    }
  }, {
    key: "predict",
    value: function predict(inputs) {
      if (inputs.length === this.height * this.width) {
        release(this.weights);
        this.weights = kernelInput(inputs, [this.width, this.height]);
      } else if (inputs.length === this.height && inputs[0].length === this.width) {
        this.weights = inputs;
      } else {
        throw new Error('Inputs are not of sized correctly');
      }
    }
  }, {
    key: "predict1D",
    value: function predict1D(inputs) {
      if (this.weights) release(this.weights);
      this.weights = this.reshapeInput(inputs);
    }
  }, {
    key: "compare",
    value: function compare() {// throw new Error(`${this.constructor.name}-compare is not yet implemented`)
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var jsonLayer = {};
      var _this$constructor = this.constructor,
          defaults = _this$constructor.defaults,
          name = _this$constructor.name;
      var keys = Object.keys(defaults);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        if (key === 'deltas' || key === 'weights') continue;
        jsonLayer[key] = this[key];
      }

      jsonLayer.type = name;
      return jsonLayer;
    }
  }]);

  return Input;
}(Model);

function input(settings) {
  return new Input(settings);
}

module.exports = {
  Input: Input,
  input: input
};
},{"./types":"pX1U","../utilities/zeros-2d":"C4Cz","../utilities/kernel":"L30b"}],"JZX2":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Activation = _require.Activation;

var _require2 = require('../utilities/kernel'),
    makeKernel = _require2.makeKernel,
    release = _require2.release;

var _require3 = require('../activation/leaky-relu'),
    activate = _require3.activate,
    measure = _require3.measure;

function predict2D(inputs) {
  return activate(inputs[this.thread.y][this.thread.x]);
}

function predict3D(inputs) {
  return activate(inputs[this.thread.z][this.thread.y][this.thread.x]);
}

function compare2D(weights, deltas) {
  return measure(weights[this.thread.y][this.thread.x], deltas[this.thread.y][this.thread.x]);
}

function compare3D(weights, deltas) {
  return measure(weights[this.thread.z][this.thread.y][this.thread.x], deltas[this.thread.z][this.thread.y][this.thread.x]);
}

var LeakyRelu =
/*#__PURE__*/
function (_Activation) {
  _inherits(LeakyRelu, _Activation);

  function LeakyRelu() {
    _classCallCheck(this, LeakyRelu);

    return _possibleConstructorReturn(this, _getPrototypeOf(LeakyRelu).apply(this, arguments));
  }

  _createClass(LeakyRelu, [{
    key: "setupKernels",
    value: function setupKernels() {
      var _this$inputLayer = this.inputLayer,
          width = _this$inputLayer.width,
          height = _this$inputLayer.height,
          depth = _this$inputLayer.depth;

      if (this.depth > 0) {
        this.predictKernel = makeKernel(predict3D, {
          output: [width, height, depth],
          functions: [activate]
        });
        this.compareKernel = makeKernel(compare3D, {
          output: [width, height, depth],
          functions: [measure]
        });
      } else {
        this.predictKernel = makeKernel(predict2D, {
          output: [width, height],
          functions: [activate]
        });
        this.compareKernel = makeKernel(compare2D, {
          output: [width, height],
          functions: [measure]
        });
      }
    }
  }, {
    key: "predict",
    value: function predict() {
      release(this.weights);
      this.weights = this.predictKernel(this.inputLayer.weights);
    }
  }, {
    key: "compare",
    value: function compare() {
      var deltas = this.deltas;
      this.deltas = this.compareKernel(this.weights, deltas);
      release(deltas);
    }
  }]);

  return LeakyRelu;
}(Activation);

function leakyRelu(inputLayer, settings) {
  return new LeakyRelu(inputLayer, settings);
}

module.exports = {
  LeakyRelu: LeakyRelu,
  leakyRelu: leakyRelu,
  predict2D: predict2D,
  predict3D: predict3D,
  compare2D: compare2D,
  compare3D: compare3D
};
},{"./types":"pX1U","../utilities/kernel":"L30b","../activation/leaky-relu":"I3OM"}],"Mqbi":[function(require,module,exports) {
var _require = require('./add'),
    add = _require.add;

var _require2 = require('./multiply'),
    multiply = _require2.multiply;

var _require3 = require('./multiply-element'),
    multiplyElement = _require3.multiplyElement;

var _require4 = require('./random'),
    random = _require4.random;

var _require5 = require('./sigmoid'),
    sigmoid = _require5.sigmoid;

var _require6 = require('./tanh'),
    tanh = _require6.tanh;

var _require7 = require('./zeros'),
    zeros = _require7.zeros;

function lstm(settings, recurrentInput, input) {
  var height = settings.height;
  var inputGateWeights = random({
    height: height,
    width: input.height
  });
  var inputGatePeepholes = random({
    width: height,
    height: height
  });
  var inputGateBias = zeros({
    height: height
  });
  var inputGate = sigmoid(add(add(multiply(inputGateWeights, input), multiply(inputGatePeepholes, recurrentInput)), inputGateBias));
  var forgetGateWeights = random({
    height: height,
    width: input.height
  });
  var forgetGatePeepholes = random({
    width: height,
    height: height
  });
  var forgetGateBias = zeros({
    height: height
  });
  var forgetGate = sigmoid(add(add(multiply(forgetGateWeights, input), multiply(forgetGatePeepholes, recurrentInput)), forgetGateBias));
  var outputGateWeights = random({
    height: height,
    width: input.height
  });
  var outputGatePeepholes = random({
    width: height,
    height: height
  });
  var outputGateBias = zeros({
    height: height
  });
  var outputGate = sigmoid(add(add(multiply(outputGateWeights, input), multiply(outputGatePeepholes, recurrentInput)), outputGateBias));
  var memoryWeights = random({
    height: height,
    width: input.height
  });
  var memoryPeepholes = random({
    width: height,
    height: height
  });
  var memoryBias = zeros({
    height: height
  });
  var memory = tanh(add(add(multiply(memoryWeights, input), multiply(memoryPeepholes, recurrentInput)), memoryBias)); // compute new cell activation

  var retainCell = multiplyElement(forgetGate, input); // what do we keep from cell

  var writeCell = multiplyElement(inputGate, memory); // what do we write to cell

  var cell = add(retainCell, writeCell); // new cell contents
  // compute hidden state as gated, saturated cell activations

  return multiplyElement(outputGate, tanh(cell));
}

module.exports = {
  lstm: lstm
};
},{"./add":"q7CK","./multiply":"xJEq","./multiply-element":"vjFV","./random":"yQCp","./sigmoid":"ED1E","./tanh":"YNtu","./zeros":"EOPb"}],"xXoy":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../utilities/kernel'),
    makeKernel = _require.makeKernel,
    release = _require.release,
    clone = _require.clone;

var zeros = require('../utilities/zeros');

var zeros2D = require('../utilities/zeros-2d');

var zeros3D = require('../utilities/zeros-3d');

var _require2 = require('./types'),
    Filter = _require2.Filter;

function compare1D(weights, targetValues) {
  // return targetValues[this.thread.x] - weights[this.thread.y][this.thread.x];
  return weights[this.thread.y][this.thread.x] - targetValues[this.thread.x];
}

function compare2D(weights, targetValues) {
  // return targetValues[this.thread.y][this.thread.x] - weights[this.thread.y][this.thread.x];
  return weights[this.thread.y][this.thread.x] - targetValues[this.thread.y][this.thread.x];
}

var Target =
/*#__PURE__*/
function (_Filter) {
  _inherits(Target, _Filter);

  function Target(settings, inputLayer) {
    var _this;

    _classCallCheck(this, Target);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Target).call(this, settings));
    _this.inputLayer = inputLayer;
    _this.width = inputLayer.width;
    _this.height = inputLayer.height;
    _this.depth = inputLayer.depth;

    _this.validate();

    if (_this.depth > 0) {
      throw new Error('Target layer not implemented for depth');
    } else if (_this.height > 1) {
      _this.weights = zeros2D(_this.width, _this.height);
      _this.deltas = zeros2D(_this.width, _this.height);
      _this.errors = zeros2D(_this.width, _this.height);
    } else {
      _this.weights = zeros(_this.width);
      _this.deltas = zeros(_this.width);
      _this.errors = zeros(_this.width);
    }

    return _this;
  }

  _createClass(Target, [{
    key: "setupKernels",
    value: function setupKernels() {
      var compareFn = this.width === 1 ? compare1D : compare2D;
      this.compareKernel = makeKernel(compareFn, {
        output: [this.width, this.height]
      });
    }
  }, {
    key: "predict",
    value: function predict() {
      // NOTE: this looks like it shouldn't be, but the weights are immutable, and this is where they are reused.
      release(this.weights);
      this.weights = clone(this.inputLayer.weights);
    }
  }, {
    key: "compare",
    value: function compare(targetValues) {
      // this is where weights attach to deltas
      // deltas will be zero on learn, so save it in error for comparing to mse later
      release(this.deltas);
      release(this.errors);
      release(this.inputLayer.deltas);
      this.deltas = this.compareKernel(this.weights, targetValues);
      this.inputLayer.deltas = clone(this.deltas);
      this.errors = clone(this.deltas);
    }
  }, {
    key: "setupPraxis",
    value: function setupPraxis() {}
  }, {
    key: "learn",
    value: function learn() {
      release(this.weights);
      this.weights = clone(this.inputLayer.weights);
      this.resetDeltas();
    }
  }]);

  return Target;
}(Filter);

function target(settings, inputLayer) {
  return new Target(settings, inputLayer);
}

module.exports = {
  Target: Target,
  target: target
};
},{"../utilities/kernel":"L30b","../utilities/zeros":"M4LY","../utilities/zeros-2d":"C4Cz","../utilities/zeros-3d":"AN3i","./types":"pX1U"}],"YS3q":[function(require,module,exports) {
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var _require = require('./add'),
    add = _require.add;

var _require2 = require('./multiply'),
    multiply = _require2.multiply;

var _require3 = require('./random'),
    random = _require3.random;

var _require4 = require('./target'),
    target = _require4.target;

var _require5 = require('./zeros'),
    zeros = _require5.zeros;

function output(settings, inputLayer) {
  var height = settings.height;
  var outputGate = random({
    height: height,
    width: inputLayer.height,
    name: 'outputGate'
  });
  var output = zeros({
    height: height,
    name: 'output'
  });
  var outputGateConnector = multiply(outputGate, inputLayer, {
    name: 'outputGateConnected'
  });
  return target(_objectSpread({
    name: 'target'
  }, settings), add(outputGateConnector, output));
}

module.exports = {
  output: output
};
},{"./add":"q7CK","./multiply":"xJEq","./random":"yQCp","./target":"xXoy","./zeros":"EOPb"}],"vNYh":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Filter = _require.Filter;

var _require2 = require('../utilities/kernel'),
    makeKernel = _require2.makeKernel,
    release = _require2.release;

var _require3 = require('../utilities/layer-setup'),
    setPadding = _require3.setPadding,
    setStride = _require3.setStride;

var zeros3D = require('../utilities/zeros-3d');

var randos3D = require('../utilities/randos-3d');

function setSwitchY(value) {
  return value;
}

function setSwitchX(value) {
  return value;
}

function predict(inputs) {
  var x = Math.floor(this.thread.x / this.output.x * this.constants.inputWidth - this.constants.paddingX);
  var y = Math.floor(this.thread.y / this.output.y * this.constants.inputHeight - this.constants.paddingY);
  var largestValue = -Infinity;
  var largestX = -1;
  var largestY = -1; // convolve centered at this particular location

  for (var filterY = 0; filterY < this.constants.filterHeight; filterY++) {
    // coordinates in the original input array coordinates
    var inputY = filterY + y;

    for (var filterX = 0; filterX < this.constants.filterWidth; filterX++) {
      var inputX = filterX + x;

      if (inputY >= 0 && inputY < this.constants.inputHeight && inputX >= 0 && inputX < this.constants.inputWidth) {
        var input = inputs[this.thread.z][inputY][inputX];

        if (input > largestValue) {
          largestValue = input;
          largestY = inputY;
          largestX = inputX;
        }
      }
    }
  }

  setSwitchY(largestY);
  setSwitchX(largestX);
  return largestValue;
}

function compare(deltas, switchY, switchX) {
  var x = Math.floor(this.thread.x / this.output.x * this.constants.outputWidth);
  var y = Math.floor(this.thread.y / this.output.y * this.constants.outputHeight);
  var value = 0;

  for (var deltasY = 0; deltasY < this.constants.inputHeight; deltasY++) {
    for (var deltasX = 0; deltasX < this.constants.inputWidth; deltasX++) {
      var switchXValue = switchX[deltasY][deltasX];
      var switchYValue = switchY[deltasY][deltasX];

      if (switchXValue === x && switchYValue === y) {
        value += deltas[deltasY][deltasX];
      }
    }
  }

  return value;
}

function compare3D(deltas, switchY, switchX) {
  var x = Math.floor(this.thread.x / this.output.x * this.constants.outputWidth);
  var y = Math.floor(this.thread.y / this.output.y * this.constants.outputHeight);
  var value = 0;

  for (var deltasY = 0; deltasY < this.constants.inputHeight; deltasY++) {
    for (var deltasX = 0; deltasX < this.constants.inputWidth; deltasX++) {
      var switchXValue = switchX[this.thread.z][deltasY][deltasX];
      var switchYValue = switchY[this.thread.z][deltasY][deltasX];

      if (switchXValue === x && switchYValue === y) {
        value += deltas[this.thread.z][deltasY][deltasX];
      }
    }
  }

  return value;
}

var Pool =
/*#__PURE__*/
function (_Filter) {
  _inherits(Pool, _Filter);

  _createClass(Pool, null, [{
    key: "defaults",
    get: function get() {
      return {
        padding: 0,
        bias: 0,
        filterWidth: 0,
        filterHeight: 0,
        filterCount: 0
      };
    }
  }]);

  function Pool(settings, inputLayer) {
    var _this;

    _classCallCheck(this, Pool);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Pool).call(this, settings));
    _this.stride = null;
    _this.strideX = null;
    _this.strideY = null;
    setStride(_assertThisInitialized(_this), settings);
    _this.padding = null;
    _this.paddingX = null;
    _this.paddingY = null;
    setPadding(_assertThisInitialized(_this), settings);
    _this.filterCount = settings.filterCount;
    _this.filterWidth = settings.filterWidth;
    _this.filterHeight = settings.filterHeight;
    _this.width = Math.floor((inputLayer.width + _this.paddingX * 2 - _this.filterWidth) / _this.strideX + 1);
    _this.height = Math.floor((inputLayer.height + _this.paddingY * 2 - _this.filterHeight) / _this.strideY + 1); // TODO: handle 1 depth?

    _this.depth = _this.filterCount;
    _this.weights = randos3D(_this.width, _this.height, _this.depth);
    _this.deltas = zeros3D(_this.width, _this.height, _this.depth);
    _this.filters = randos3D(_this.filterWidth, _this.filterHeight, _this.filterCount);
    _this.filterDeltas = zeros3D(_this.filterWidth, _this.filterHeight, _this.filterCount);
    _this.learnFilters = null;
    _this.learnInputs = null;
    _this.inputLayer = inputLayer;

    _this.validate();

    return _this;
  }

  _createClass(Pool, [{
    key: "setupKernels",
    value: function setupKernels() {
      this.predictKernel = makeKernel(predict, {
        output: [this.width, this.height, this.depth],
        map: {
          switchX: setSwitchX,
          switchY: setSwitchY
        },
        constants: {
          inputWidth: this.inputLayer.width,
          inputHeight: this.inputLayer.height,
          paddingX: this.paddingX,
          paddingY: this.paddingY,
          filterHeight: this.filterHeight,
          filterWidth: this.filterWidth
        }
      });
      this.compareKernel = makeKernel(compare, {
        output: [this.inputLayer.width, this.inputLayer.height, this.inputLayer.depth],
        constants: {
          outputWidth: this.width,
          outputHeight: this.height,
          outputDepth: this.depth,
          paddingX: this.paddingX,
          paddingY: this.paddingY
        }
      });
    }
  }, {
    key: "predict",
    value: function predict() {
      var switchX = this.switchX,
          switchY = this.switchY,
          prevWeights = this.weights;
      release(this.switchX);
      release(this.switchY);
      var weights = this.predictKernel(this.inputLayer.weights);
      this.switchX = weights.switchX;
      this.switchY = weights.switchY;
      this.weights = weights.result;
      release(prevWeights);
      return this.weights;
    }
  }, {
    key: "compare",
    value: function compare() {
      debugger;
      var depth = this.inputLayer.deltas.length;
      var height = this.inputLayer.deltas[0].length;
      var width = this.inputLayer.deltas[0][0].length;

      var type = _typeof(this.inputLayer.deltas[0][0][0]);

      var inputLayerDeltas = this.inputLayer.deltas;
      this.inputLayer.deltas = this.compareKernel(this.deltas, this.switchX, this.switchY);
      release(inputLayerDeltas);
      debugger;
      if (depth !== this.inputLayer.deltas.length) debugger;
      if (height !== this.inputLayer.deltas[0].length) debugger;
      if (width !== this.inputLayer.deltas[0][0].length) debugger;
      if (type !== _typeof(this.inputLayer.deltas[0][0][0])) debugger;
    }
  }]);

  return Pool;
}(Filter);

function pool(settings, inputLayer) {
  return new Pool(settings, inputLayer);
}

module.exports = {
  Pool: Pool,
  pool: pool,
  predict: predict,
  compare: compare,
  compare3D: compare3D
};
},{"./types":"pX1U","../utilities/kernel":"L30b","../utilities/layer-setup":"iz6h","../utilities/zeros-3d":"AN3i","../utilities/randos-3d":"TSfJ"}],"BjPp":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Activation = _require.Activation;

var _require2 = require('../utilities/kernel'),
    makeKernel = _require2.makeKernel,
    release = _require2.release;

var _require3 = require('../activation/relu'),
    activate = _require3.activate,
    measure = _require3.measure;

function predict2D(inputs) {
  return activate(inputs[this.thread.y][this.thread.x]);
}

function compare2D(weights, deltas) {
  return measure(weights[this.thread.y][this.thread.x], deltas[this.thread.y][this.thread.x]);
}

function predict3D(inputs) {
  return activate(inputs[this.thread.z][this.thread.y][this.thread.x]);
}

function compare3D(weights, deltas) {
  return measure(weights[this.thread.z][this.thread.y][this.thread.x], deltas[this.thread.z][this.thread.y][this.thread.x]);
}

var Relu =
/*#__PURE__*/
function (_Activation) {
  _inherits(Relu, _Activation);

  function Relu() {
    _classCallCheck(this, Relu);

    return _possibleConstructorReturn(this, _getPrototypeOf(Relu).apply(this, arguments));
  }

  _createClass(Relu, [{
    key: "setupKernels",
    value: function setupKernels() {
      var _this$inputLayer = this.inputLayer,
          width = _this$inputLayer.width,
          height = _this$inputLayer.height,
          depth = _this$inputLayer.depth;

      if (depth > 0) {
        this.predictKernel = makeKernel(predict3D, {
          output: [width, height, depth],
          functions: [activate]
        });
        this.compareKernel = makeKernel(compare3D, {
          output: [width, height, depth],
          functions: [measure]
        });
      } else {
        this.predictKernel = makeKernel(predict2D, {
          output: [width, height],
          functions: [activate]
        });
        this.compareKernel = makeKernel(compare2D, {
          output: [width, height],
          functions: [measure]
        });
      }
    }
  }, {
    key: "predict",
    value: function predict() {
      release(this.weights);
      this.weights = this.predictKernel(this.inputLayer.weights);
    }
  }, {
    key: "compare",
    value: function compare() {
      release(this.inputLayer.deltas);
      this.inputLayer.deltas = this.compareKernel(this.weights, this.deltas);
    }
  }]);

  return Relu;
}(Activation);

function relu(inputLayer, settings) {
  return new Relu(inputLayer, settings);
}

module.exports = {
  Relu: Relu,
  relu: relu,
  predict2D: predict2D,
  compare2D: compare2D,
  predict3D: predict3D,
  compare3D: compare3D
};
},{"./types":"pX1U","../utilities/kernel":"L30b","../activation/relu":"kBuR"}],"ERye":[function(require,module,exports) {
var _require = require('./relu'),
    relu = _require.relu;

var _require2 = require('./add'),
    add = _require2.add;

var _require3 = require('./multiply'),
    multiply = _require3.multiply;

var _require4 = require('./random'),
    random = _require4.random;

var _require5 = require('./zeros'),
    zeros = _require5.zeros;

function recurrent(settings, input, recurrentInput) {
  var height = settings.height;
  recurrentInput.setDimensions(1, height); // wxh

  var weight = random({
    name: 'weight',
    height: height,
    width: input.height
  }); // whh

  var transition = random({
    name: 'transition',
    height: height,
    width: height
  }); // bhh

  var bias = zeros({
    name: 'bias',
    height: height
  });
  return relu(add(add(multiply(weight, input), multiply(transition, recurrentInput)), bias));
}

module.exports = {
  recurrent: recurrent
};
},{"./relu":"BjPp","./add":"q7CK","./multiply":"xJEq","./random":"yQCp","./zeros":"EOPb"}],"viPg":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./base'),
    Base = _require.Base;

var Regression =
/*#__PURE__*/
function (_Base) {
  _inherits(Regression, _Base);

  function Regression(settings) {
    var _this;

    _classCallCheck(this, Regression);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Regression).call(this, settings));

    _this.validate();

    return _this;
  }

  _createClass(Regression, [{
    key: "predict",
    value: function predict() {
      this.weights = this.inputs;
    }
  }, {
    key: "learn",
    value: function learn() {// throw new Error(`${this.constructor.name}-learn is not yet implemented`)
    }
  }]);

  return Regression;
}(Base);

function learn(inputs, targets) {
  return inputs[this.thread.x] - targets[this.thread.x];
} // TODO: handle `loss += 0.5*dy*dy;` total and sum in learn


function regression(settings, inputLayer) {
  return new Regression(settings, inputLayer);
}

module.exports = {
  Regression: Regression,
  regression: regression,
  learn: learn
};
},{"./base":"kIeX"}],"nfIB":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../utilities/kernel'),
    makeKernel = _require.makeKernel,
    release = _require.release,
    clone = _require.clone;

var _require2 = require('./types'),
    Filter = _require2.Filter;

var randos = require('../utilities/randos');

var randos2D = require('../utilities/randos-2d');

var randos3D = require('../utilities/randos-3d');

var zeros = require('../utilities/zeros');

var zeros2D = require('../utilities/zeros-2d');

var zeros3D = require('../utilities/zeros-3d');

function getMaxValue(inputs) {
  var maxInput = -Infinity;

  for (var x = 0; x < this.constants.inputWidth; x++) {
    var input = inputs[x];

    if (input > maxInput) {
      maxInput = input;
    }
  }

  return maxInput;
}

function getMaxValue2D(inputs) {
  var maxInput = -Infinity;

  for (var y = 0; y < this.constants.inputHeight; y++) {
    for (var x = 0; x < this.constants.inputWidth; x++) {
      var input = inputs[y][x];

      if (input > maxInput) {
        maxInput = input;
      }
    }
  }

  return maxInput;
}

function getMaxValue3D(inputs) {
  var maxInput = -Infinity;

  for (var z = 0; z < this.constants.inputDepth; z++) {
    for (var y = 0; y < this.constants.inputHeight; y++) {
      for (var x = 0; x < this.constants.inputWidth; x++) {
        var input = inputs[z][y][x];

        if (input > maxInput) {
          maxInput = input;
        }
      }
    }
  }

  return maxInput;
}

function getSum(inputs) {
  var sum = 0;

  for (var x = 0; x < this.constants.inputWidth; x++) {
    sum += inputs[x];
  }

  return sum;
}

function getSum2D(inputs) {
  var sum = 0;

  for (var y = 0; y < this.constants.inputHeight; y++) {
    for (var x = 0; x < this.constants.inputWidth; x++) {
      sum += inputs[y][x];
    }
  }

  return sum;
}

function getSum3D(inputs) {
  var sum = 0;

  for (var z = 0; z < this.constants.inputDepth; z++) {
    for (var y = 0; y < this.constants.inputHeight; y++) {
      for (var x = 0; x < this.constants.inputWidth; x++) {
        sum += inputs[z][y][x];
      }
    }
  }

  return sum;
}

function getExponentials(inputs, maxInput) {
  return Math.exp(inputs[this.thread.x] - maxInput[0]);
}

function getExponentials2D(inputs, maxInput) {
  return Math.exp(inputs[this.thread.y][this.thread.x] - maxInput[0]);
}

function getExponentials3D(inputs, maxInput) {
  return Math.exp(inputs[this.thread.z][this.thread.y][this.thread.x] - maxInput[0]);
}

function predict(exponentials, exponentialsSum) {
  return exponentials[this.thread.x] / exponentialsSum[0];
}

function predict2D(exponentials, exponentialsSum) {
  return exponentials[this.thread.y][this.thread.x] / exponentialsSum[0];
}

function predict3D(exponentials, exponentialsSum) {
  return exponentials[this.thread.z][this.thread.y][this.thread.x] / exponentialsSum[0];
}

function compare(target, exponentials) {
  var indicator = 0;

  if (this.thread.x === target) {
    indicator = 1;
  }

  return -(indicator - exponentials[this.thread.x]);
}

function compare2D(target, exponentials) {
  var indicator = 0;
  var index = this.thread.x + this.thread.y * this.output.x;

  if (index === target) {
    indicator = 1;
  }

  return -(indicator - exponentials[this.thread.y][this.thread.x]);
}

function compare3D(target, exponentials) {
  var indicator = 0;
  var index = this.thread.x + this.thread.y * this.output.x + this.thread.z * this.output.x * this.output.y;

  if (index === target) {
    indicator = 1;
  }

  return -(indicator - exponentials[this.thread.z][this.thread.y][this.thread.x]);
}

function loss(exponentials) {
  return -Math.log();
} // TODO: handle: `return -Math.log(this.es[y]);` in learn


var SoftMax =
/*#__PURE__*/
function (_Filter) {
  _inherits(SoftMax, _Filter);

  function SoftMax(inputLayer) {
    var _this;

    _classCallCheck(this, SoftMax);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SoftMax).call(this));
    _this.width = inputLayer.width;
    _this.height = inputLayer.height;
    _this.depth = inputLayer.depth;
    _this.getExponentialsKernel = null;
    _this.getMaxValueKernel = null;
    _this.getSumKernel = null;
    _this.inputLayer = inputLayer;

    _this.validate();

    if (_this.depth > 0) {
      _this.weights = randos3D(_this.width, _this.height, _this.depth);
      _this.deltas = zeros3D(_this.width, _this.height, _this.depth);
    } else if (_this.height > 0) {
      _this.weights = randos2D(_this.width, _this.height);
      _this.deltas = zeros2D(_this.width, _this.height);
    } else {
      _this.weights = randos(_this.width);
      _this.deltas = zeros(_this.width);
    }

    return _this;
  }

  _createClass(SoftMax, [{
    key: "setupKernels",
    value: function setupKernels() {
      var width = this.width,
          height = this.height,
          depth = this.depth;

      if (depth > 0) {
        this.getExponentialsKernel = makeKernel(getExponentials3D, {
          output: [width, height, depth]
        });
        this.getMaxValueKernel = makeKernel(getMaxValue3D, {
          output: [1, 1, 1],
          constants: {
            inputWidth: width,
            inputHeight: height,
            inputDepth: depth
          }
        });
        this.getSumKernel = makeKernel(getSum3D, {
          output: [1, 1, 1],
          constants: {
            inputWidth: width,
            inputHeight: height,
            inputDepth: depth
          }
        });
        this.predictKernel = makeKernel(predict3D, {
          output: [width, height, depth]
        });
        this.compareKernel = makeKernel(compare3D, {
          output: [width, height, depth]
        });
      } else {
        this.getExponentialsKernel = makeKernel(getExponentials, {
          output: [width, height]
        });
        this.getMaxValueKernel = makeKernel(getMaxValue2D, {
          output: [1, 1],
          constants: {
            inputWidth: width,
            inputHeight: height
          }
        });
        this.getSumKernel = makeKernel(getSum2D, {
          output: [1, 1],
          constants: {
            inputWidth: width,
            inputHeight: height
          }
        });
        this.predictKernel = makeKernel(predict2D, {
          output: [width, height]
        });
        this.compareKernel = makeKernel(compare2D, {
          output: [width, height]
        });
      }
    }
  }, {
    key: "predict",
    value: function predict() {
      var maxValue = this.getMaxValueKernel(this.inputLayer.weights);
      var exponentials = this.getExponentialsKernel(this.inputLayer.weights, maxValue);
      var exponentialsSum = this.getSumKernel(exponentials);
      this.weights = this.predictKernel(exponentials, exponentialsSum);
    }
  }, {
    key: "compare",
    value: function compare(targetValues) {
      var deltas = this.deltas,
          errors = this.errors;
      this.errors = this.compareKernel(targetValues[0], deltas);
      this.deltas = clone(this.errors);
      release(deltas);
      release(errors);
      var inputLayerDeltas = this.inputLayer.deltas;
      this.inputLayer.deltas = clone(this.deltas);
      release(inputLayerDeltas);
    }
  }]);

  return SoftMax;
}(Filter);

function softMax(settings, inputLayer) {
  return new SoftMax(settings, inputLayer);
}

module.exports = {
  SoftMax: SoftMax,
  softMax: softMax,
  getMaxValue: getMaxValue,
  getMaxValue2D: getMaxValue2D,
  getMaxValue3D: getMaxValue3D,
  getSum: getSum,
  getSum2D: getSum2D,
  getSum3D: getSum3D,
  getExponentials: getExponentials,
  getExponentials2D: getExponentials2D,
  getExponentials3D: getExponentials3D,
  predict: predict,
  predict2D: predict2D,
  predict3D: predict3D,
  compare: compare,
  compare2D: compare2D,
  compare3D: compare3D,
  loss: loss
};
},{"../utilities/kernel":"L30b","./types":"pX1U","../utilities/randos":"S8tM","../utilities/randos-2d":"pcuE","../utilities/randos-3d":"TSfJ","../utilities/zeros":"M4LY","../utilities/zeros-2d":"C4Cz","../utilities/zeros-3d":"AN3i"}],"qIAv":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./base'),
    Base = _require.Base;

var SVM =
/*#__PURE__*/
function (_Base) {
  _inherits(SVM, _Base);

  function SVM() {
    _classCallCheck(this, SVM);

    return _possibleConstructorReturn(this, _getPrototypeOf(SVM).apply(this, arguments));
  }

  _createClass(SVM, [{
    key: "predict",
    value: function predict() {
      this.weights = this.inputs;
      this.validate();
    }
  }, {
    key: "learn",
    value: function learn() {// throw new Error(`${this.constructor.name}-learn is not yet implemented`)
    }
  }]);

  return SVM;
}(Base);

function learn(target) {// if(y === i) { continue; }
  // var ydiff = -yscore + x.w[i] + margin;
  // if(ydiff > 0) {
  //   // violating dimension, apply loss
  //   x.dw[i] += 1;
  //   x.dw[y] -= 1;
  //   loss += ydiff;
  // }
}

function svm(settings, inputLayer) {
  return new SVM(settings, inputLayer);
}

module.exports = {
  SVM: SVM,
  svm: svm
};
},{"./base":"kIeX"}],"NJz4":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Modifier = _require.Modifier;

var _require2 = require('../utilities/kernel'),
    makeKernel = _require2.makeKernel,
    release = _require2.release;

function predict(array) {
  return array[this.thread.x][this.thread.y];
}

var compare = predict;

var Transpose =
/*#__PURE__*/
function (_Modifier) {
  _inherits(Transpose, _Modifier);

  function Transpose(inputLayer) {
    var _this;

    _classCallCheck(this, Transpose);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Transpose).call(this));
    _this.inputLayer = inputLayer;
    _this.width = _this.inputLayer.height;
    _this.height = _this.inputLayer.width;

    _this.validate();

    return _this;
  }

  _createClass(Transpose, [{
    key: "setupKernels",
    value: function setupKernels() {
      this.predictKernel = makeKernel(predict, {
        output: [this.height, this.width]
      });
      this.compareKernel = makeKernel(compare, {
        output: [this.width, this.height]
      });
    }
  }, {
    key: "predict",
    value: function predict() {
      var weights = this.weights;
      release(this.weights);
      this.weights = this.predictKernel(this.inputLayer.weights);
    }
  }, {
    key: "compare",
    value: function compare() {
      release(this.inputLayer.deltas); // TODO: needs switched to this.compareKernel?

      this.inputLayer.deltas = this.predictKernel(this.deltas);
    }
  }]);

  return Transpose;
}(Modifier);

function transpose(inputLayer) {
  return new Transpose(inputLayer);
}

module.exports = {
  Transpose: Transpose,
  transpose: transpose
};
},{"./types":"pX1U","../utilities/kernel":"L30b"}],"X3lc":[function(require,module,exports) {
var _require = require('./add'),
    Add = _require.Add,
    add = _require.add;

var _require2 = require('./arthur-feed-forward'),
    arthurFeedForward = _require2.arthurFeedForward;

var _require3 = require('./base'),
    Base = _require3.Base;

var _require4 = require('./convolution'),
    Convolution = _require4.Convolution,
    convolution = _require4.convolution;

var _require5 = require('./dropout'),
    Dropout = _require5.Dropout,
    dropout = _require5.dropout;

var _require6 = require('./feed-forward'),
    feedForward = _require6.feedForward;

var _require7 = require('./fully-connected'),
    FullyConnected = _require7.FullyConnected,
    fullyConnected = _require7.fullyConnected;

var _require8 = require('./gru'),
    gru = _require8.gru;

var _require9 = require('./input'),
    Input = _require9.Input,
    input = _require9.input;

var _require10 = require('./leaky-relu'),
    LeakyRelu = _require10.LeakyRelu,
    leakyRelu = _require10.leakyRelu;

var _require11 = require('./lstm'),
    lstm = _require11.lstm;

var _require12 = require('./multiply'),
    Multiply = _require12.Multiply,
    multiply = _require12.multiply;

var _require13 = require('./multiply-element'),
    MultiplyElement = _require13.MultiplyElement,
    multiplyElement = _require13.multiplyElement;

var _require14 = require('./negative'),
    Negative = _require14.Negative,
    negative = _require14.negative;

var _require15 = require('./ones'),
    Ones = _require15.Ones,
    ones = _require15.ones;

var _require16 = require('./output'),
    output = _require16.output;

var _require17 = require('./pool'),
    Pool = _require17.Pool,
    pool = _require17.pool;

var _require18 = require('./random'),
    Random = _require18.Random,
    random = _require18.random;

var _require19 = require('./recurrent'),
    recurrent = _require19.recurrent;

var _require20 = require('./regression'),
    Regression = _require20.Regression,
    regression = _require20.regression;

var _require21 = require('./relu'),
    Relu = _require21.Relu,
    relu = _require21.relu;

var _require22 = require('./sigmoid'),
    Sigmoid = _require22.Sigmoid,
    sigmoid = _require22.sigmoid;

var _require23 = require('./soft-max'),
    SoftMax = _require23.SoftMax,
    softMax = _require23.softMax;

var _require24 = require('./svm'),
    SVM = _require24.SVM,
    svm = _require24.svm;

var _require25 = require('./tanh'),
    Tanh = _require25.Tanh,
    tanh = _require25.tanh;

var _require26 = require('./target'),
    Target = _require26.Target,
    target = _require26.target;

var _require27 = require('./transpose'),
    Transpose = _require27.Transpose,
    transpose = _require27.transpose;

var _require28 = require('./zeros'),
    Zeros = _require28.Zeros,
    zeros = _require28.zeros;
/**
 * @description Layer API, to make it easier to use layers for the world
 */


module.exports = {
  Add: Add,
  add: add,
  arthurFeedForward: arthurFeedForward,
  Base: Base,
  Convolution: Convolution,
  convolution: convolution,
  Dropout: Dropout,
  dropout: dropout,
  feedForward: feedForward,
  FullyConnected: FullyConnected,
  fullyConnected: fullyConnected,
  gru: gru,
  Input: Input,
  input: input,
  LeakyRelu: LeakyRelu,
  leakyRelu: leakyRelu,
  lstm: lstm,
  Multiply: Multiply,
  multiply: multiply,
  MultiplyElement: MultiplyElement,
  multiplyElement: multiplyElement,
  Negative: Negative,
  negative: negative,
  Ones: Ones,
  ones: ones,
  output: output,
  Pool: Pool,
  pool: pool,
  Random: Random,
  random: random,
  recurrent: recurrent,
  Regression: Regression,
  regression: regression,
  Relu: Relu,
  relu: relu,
  Sigmoid: Sigmoid,
  sigmoid: sigmoid,
  SoftMax: SoftMax,
  softMax: softMax,
  SVM: SVM,
  svm: svm,
  Tanh: Tanh,
  tanh: tanh,
  Target: Target,
  target: target,
  Transpose: Transpose,
  transpose: transpose,
  Zeros: Zeros,
  zeros: zeros
};
},{"./add":"q7CK","./arthur-feed-forward":"SVHJ","./base":"kIeX","./convolution":"xL0H","./dropout":"YwJF","./feed-forward":"nL1l","./fully-connected":"Aqg2","./gru":"vCsu","./input":"qUrb","./leaky-relu":"JZX2","./lstm":"Mqbi","./multiply":"xJEq","./multiply-element":"vjFV","./negative":"kuoN","./ones":"zJfH","./output":"YS3q","./pool":"vNYh","./random":"yQCp","./recurrent":"ERye","./regression":"viPg","./relu":"BjPp","./sigmoid":"ED1E","./soft-max":"nfIB","./svm":"qIAv","./tanh":"YNtu","./target":"xXoy","./transpose":"NJz4","./zeros":"EOPb"}],"dfGl":[function(require,module,exports) {
/**
 *
 * @param {*} input
 * @param {brain.NeuralNetwork} net
 * @returns {*}
 */
module.exports = function likely(input, net) {
  var output = net.run(input);
  var maxProp = null;
  var maxValue = -1;
  Object.keys(output).forEach(function (key) {
    var value = output[key];

    if (value > maxValue) {
      maxProp = key;
      maxValue = value;
    }
  });
  return maxProp;
};
},{}],"Q1a6":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* Functions for turning sparse hashes into arrays and vice versa */
var lookup =
/*#__PURE__*/
function () {
  function lookup() {
    _classCallCheck(this, lookup);
  }

  _createClass(lookup, null, [{
    key: "toTable",

    /**
     * Performs `[{a: 1}, {b: 6, c: 7}] -> {a: 0, b: 1, c: 2}`
     * @param {Object} hashes
     * @returns {Object}
     */
    value: function toTable(hashes) {
      var hash = hashes.reduce(function (memo, hash) {
        return Object.assign(memo, hash);
      }, {});
      return lookup.toHash(hash);
    }
    /**
     * Performs `[{a: 1}, {b: 6, c: 7}] -> {a: 0, b: 1, c: 2}`
     * @param {Object} objects2D
     * @returns {Object}
     */

  }, {
    key: "toTable2D",
    value: function toTable2D(objects2D) {
      var table = {};
      var valueIndex = 0;

      for (var i = 0; i < objects2D.length; i++) {
        var objects = objects2D[i];

        for (var j = 0; j < objects.length; j++) {
          var object = objects[j];

          for (var p in object) {
            if (object.hasOwnProperty(p) && !table.hasOwnProperty(p)) {
              table[p] = valueIndex++;
            }
          }
        }
      }

      return table;
    }
  }, {
    key: "toInputTable",
    value: function toInputTable(data) {
      var table = {};
      var tableIndex = 0;

      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
        for (var p in data[dataIndex].input) {
          if (!table.hasOwnProperty(p)) {
            table[p] = tableIndex++;
          }
        }
      }

      return table;
    }
  }, {
    key: "toInputTable2D",
    value: function toInputTable2D(data) {
      var table = {};
      var tableIndex = 0;

      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
        var input = data[dataIndex].input;

        for (var i = 0; i < input.length; i++) {
          var object = input[i];

          for (var p in object) {
            if (!table.hasOwnProperty(p)) {
              table[p] = tableIndex++;
            }
          }
        }
      }

      return table;
    }
  }, {
    key: "toOutputTable",
    value: function toOutputTable(data) {
      var table = {};
      var tableIndex = 0;

      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
        for (var p in data[dataIndex].output) {
          if (!table.hasOwnProperty(p)) {
            table[p] = tableIndex++;
          }
        }
      }

      return table;
    }
  }, {
    key: "toOutputTable2D",
    value: function toOutputTable2D(data) {
      var table = {};
      var tableIndex = 0;

      for (var dataIndex = 0; dataIndex < data.length; dataIndex++) {
        var output = data[dataIndex].output;

        for (var i = 0; i < output.length; i++) {
          var object = output[i];

          for (var p in object) {
            if (!table.hasOwnProperty(p)) {
              table[p] = tableIndex++;
            }
          }
        }
      }

      return table;
    }
    /**
     * performs `{a: 6, b: 7} -> {a: 0, b: 1}`
     * @param {Object} hash
     * @returns {Object}
     */

  }, {
    key: "toHash",
    value: function toHash(hash) {
      var lookup = {};
      var index = 0;

      for (var i in hash) {
        lookup[i] = index++;
      }

      return lookup;
    }
    /**
     * performs `{a: 0, b: 1}, {a: 6} -> [6, 0]`
     * @param {*} lookup
     * @param {*} object
     * @param {*} arrayLength
     * @returns {Float32Array}
     */

  }, {
    key: "toArray",
    value: function toArray(lookup, object, arrayLength) {
      var result = new Float32Array(arrayLength);

      for (var p in lookup) {
        result[lookup[p]] = object.hasOwnProperty(p) ? object[p] : 0;
      }

      return result;
    }
  }, {
    key: "toArrayShort",
    value: function toArrayShort(lookup, object) {
      var result = [];

      for (var p in lookup) {
        if (!object.hasOwnProperty(p)) break;
        result[lookup[p]] = object[p];
      }

      return Float32Array.from(result);
    }
  }, {
    key: "toArrays",
    value: function toArrays(lookup, objects, arrayLength) {
      var result = [];

      for (var i = 0; i < objects.length; i++) {
        result.push(this.toArray(lookup, objects[i], arrayLength));
      }

      return result;
    }
    /**
     * performs `{a: 0, b: 1}, [6, 7] -> {a: 6, b: 7}`
     * @param {Object} lookup
     * @param {Array} array
     * @returns {Object}
     */

  }, {
    key: "toObject",
    value: function toObject(lookup, array) {
      var object = {};

      for (var p in lookup) {
        object[p] = array[lookup[p]];
      }

      return object;
    }
  }, {
    key: "toObjectPartial",
    value: function toObjectPartial(lookup, array) {
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var object = {};
      var i = 0;

      for (var p in lookup) {
        if (offset > 0) {
          if (i++ < offset) continue;
        }

        if (limit > 0) {
          if (i++ >= limit) continue;
        }

        object[p] = array[lookup[p] - offset];
      }

      return object;
    }
    /**
     *
     * @param {Array} array
     * @returns {*}
     */

  }, {
    key: "lookupFromArray",
    value: function lookupFromArray(array) {
      var lookup = {};
      var z = 0;
      var i = array.length;

      while (i-- > 0) {
        lookup[array[i]] = z++;
      }

      return lookup;
    }
  }, {
    key: "dataShape",
    value: function dataShape(data) {
      var shape = [];

      if (data.input) {
        shape.push('datum');
        data = data.input;
      } else if (Array.isArray(data)) {
        if (data[0].input) {
          shape.push('array', 'datum');
          data = data[0].input;
        } else {
          shape.push('array');
          data = data[0];
        }
      }

      var p;

      while (data) {
        for (p in data) {
          break;
        }

        if (!data.hasOwnProperty(p)) break;

        if (Array.isArray(data) || data.buffer instanceof ArrayBuffer) {
          shape.push('array');
          data = data[p];
        } else if (_typeof(data) === 'object') {
          shape.push('object');
          data = data[p];
        } else {
          throw new Error('unhandled signature');
        }
      }

      shape.push(_typeof(data));
      return shape;
    }
  }, {
    key: "addKeys",
    value: function addKeys(value, table) {
      if (Array.isArray(value)) return;
      table = table || {};
      var i = Object.keys(table).length;

      for (var p in value) {
        if (!value.hasOwnProperty(p)) continue;
        if (table.hasOwnProperty(p)) continue;
        table[p] = i++;
      }

      return table;
    }
  }]);

  return lookup;
}();

module.exports = lookup;
},{}],"MDrY":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// TODO: implement and test
var Adam = function Adam() {
  _classCallCheck(this, Adam);
};

function adam() {// gradient = grad_fun(theta)
  //
  //           # Update moment estimates
  // moment1 = beta1 * moment1 + (1 - beta1) * gradient
  // moment2 = beta2 * moment2 + (1 - beta2) * np.square(gradient)
  //
  //           # Yield adapted gradient
  // theta = ( theta - alpha * (1 - beta2**t)**0.5 / (1 - beta1**t) *
  //   moment1 / (epsilon + np.sqrt(moment2)) )
  // yield theta
  // t += 1
  // adam update
  // gsumi[j] = gsumi[j] * this.beta1 + (1- this.beta1) * gij; // update biased first moment estimate
  // xsumi[j] = xsumi[j] * this.beta2 + (1-this.beta2) * gij * gij; // update biased second moment estimate
  // var biasCorr1 = gsumi[j] * (1 - Math.pow(this.beta1, this.k)); // correct bias first moment estimate
  // var biasCorr2 = xsumi[j] * (1 - Math.pow(this.beta2, this.k)); // correct bias second moment estimate
  // var dx =  - this.learning_rate * biasCorr1 / (Math.sqrt(biasCorr2) + this.eps);
  // p[j] += dx;
}

module.exports = {
  Adam: Adam,
  adam: adam
};
},{}],"OMKX":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('../utilities/kernel'),
    makeKernel = _require.makeKernel,
    release = _require.release;

var zeros2D = require('../utilities/zeros-2d');

var _require2 = require('./base'),
    Base = _require2.Base;

function getMomentum(delta, decay, previousMomentum) {
  return previousMomentum * decay + (1 - decay) * delta * delta;
}

function clipByValue(value, max, min) {
  if (value > max) {
    return max;
  }

  if (value < min) {
    return min;
  }

  return value;
}
/**
 * @description Momentum Root Mean Square Propagation Function
 * @returns {number}
 */


function update(weights, deltas, previousMomenta) {
  var delta = deltas[this.thread.y][this.thread.x];
  var clippedDelta = clipByValue(delta, this.constants.clipValue, -this.constants.clipValue);
  var weight = weights[this.thread.y][this.thread.x];
  var previousMomentum = previousMomenta[this.thread.y][this.thread.x];
  var momentum = getMomentum(delta, this.constants.decayRate, previousMomentum);
  return weight + -this.constants.learningRate * clippedDelta / Math.sqrt(momentum + this.constants.smoothEps) - this.constants.regularizationStrength * weight;
}

function isClippedByValue(value, max, min) {
  if (value > max) {
    return 1;
  }

  if (value < min) {
    return 1;
  }

  return 0;
}

var MomentumRootMeanSquaredPropagation =
/*#__PURE__*/
function (_Base) {
  _inherits(MomentumRootMeanSquaredPropagation, _Base);

  _createClass(MomentumRootMeanSquaredPropagation, null, [{
    key: "defaults",
    get: function get() {
      return {
        decayRate: 0.999,
        regularizationStrength: 0.0001,
        learningRate: 0.01,
        smoothEps: 1e-8,
        clipValue: 5
      };
    }
  }]);

  function MomentumRootMeanSquaredPropagation(layerTemplate) {
    var _this;

    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, MomentumRootMeanSquaredPropagation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(MomentumRootMeanSquaredPropagation).call(this, layerTemplate, settings));
    _this.momenta = zeros2D(layerTemplate.width, layerTemplate.height);

    _this.setupKernels();

    return _this;
  }

  _createClass(MomentumRootMeanSquaredPropagation, [{
    key: "run",
    value: function run(layer, previousLayer, nextLayer, learningRate) {
      var _this$kernel = this.kernel(layer.weights, layer.deltas, this.momenta),
          momenta = _this$kernel.momenta,
          result = _this$kernel.result;

      release(this.momenta);
      this.momenta = momenta;
      return result;
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {
      this.kernel = makeKernel(update, {
        output: [this.width, this.height],
        constants: {
          clipValue: this.clipValue,
          decayRate: this.decayRate,
          learningRate: this.learningRate,
          regularizationStrength: this.regularizationStrength,
          smoothEps: this.smoothEps
        },
        functions: [clipByValue],
        map: {
          momenta: getMomentum
        }
      });
    }
  }]);

  return MomentumRootMeanSquaredPropagation;
}(Base);

function momentumRootMeanSquaredPropagation(layer, settings) {
  return new MomentumRootMeanSquaredPropagation(layer, settings);
}
/**
 * @description Mathematician friendly name of MomentumRootMeanSquaredPropagation class. For those that are not mere mortals
 * @type {MomentumRootMeanSquaredPropagation}
 */


var MRmsProp = MomentumRootMeanSquaredPropagation;
var mRmsProp = momentumRootMeanSquaredPropagation;
module.exports = {
  MomentumRootMeanSquaredPropagation: MomentumRootMeanSquaredPropagation,
  momentumRootMeanSquaredPropagation: momentumRootMeanSquaredPropagation,
  MRmsProp: MRmsProp,
  mRmsProp: mRmsProp,
  getMomentum: getMomentum,
  clipByValue: clipByValue,
  isClippedByValue: isClippedByValue
};
},{"../utilities/kernel":"L30b","../utilities/zeros-2d":"C4Cz","./base":"hKny"}],"P9Li":[function(require,module,exports) {
var _require = require('./adam'),
    Adam = _require.Adam,
    adam = _require.adam;

var _require2 = require('./arthur-deviation-biases'),
    ArthurDeviationBiases = _require2.ArthurDeviationBiases,
    arthurDeviationBiases = _require2.arthurDeviationBiases;

var _require3 = require('./arthur-deviation-weights'),
    ArthurDeviationWeights = _require3.ArthurDeviationWeights,
    arthurDeviationWeights = _require3.arthurDeviationWeights;

var _require4 = require('./momentum-root-mean-squared-propagation'),
    MomentumRootMeanSquaredPropagation = _require4.MomentumRootMeanSquaredPropagation,
    momentumRootMeanSquaredPropagation = _require4.momentumRootMeanSquaredPropagation,
    MRmsProp = _require4.MRmsProp,
    mRmsProp = _require4.mRmsProp;

module.exports = {
  Adam: Adam,
  adam: adam,
  ArthurDeviationBiases: ArthurDeviationBiases,
  arthurDeviationBiases: arthurDeviationBiases,
  ArthurDeviationWeights: ArthurDeviationWeights,
  arthurDeviationWeights: arthurDeviationWeights,
  MomentumRootMeanSquaredPropagation: MomentumRootMeanSquaredPropagation,
  momentumRootMeanSquaredPropagation: momentumRootMeanSquaredPropagation,
  MRmsProp: MRmsProp,
  mRmsProp: mRmsProp
};
},{"./adam":"MDrY","./arthur-deviation-biases":"GVwH","./arthur-deviation-weights":"xg3N","./momentum-root-mean-squared-propagation":"OMKX"}],"uJqb":[function(require,module,exports) {
module.exports = function mse2d(errors) {
  // mean squared error 2d
  var sum = 0;

  for (var y = 0; y < this.constants.height; y++) {
    for (var x = 0; x < this.constants.width; x++) {
      sum += Math.pow(errors[y][x], 2);
    }
  }

  return sum / this.constants.length;
};
},{}],"NEsT":[function(require,module,exports) {
var layer = require('../layer');

module.exports = function layerFromJSON(jsonLayer) {
  if (!layer.hasOwnProperty(jsonLayer.type)) return null;
  var Layer = layer[jsonLayer.type]; // eslint-disable-next-line

  var realLayer = Reflect.construct(Layer, arguments);
  Object.keys(jsonLayer).forEach(function (p) {
    if (p !== 'type') {
      realLayer[p] = jsonLayer[p];
    }
  });
  return realLayer;
};
},{"../layer":"X3lc"}],"WO5N":[function(require,module,exports) {
module.exports = function traverseLayersFrom(layer, cb) {
  if (layer.hasOwnProperty('inputLayer')) {
    traverseLayersFrom(layer.inputLayer, cb);
  } else {
    if (layer.hasOwnProperty('inputLayer1')) {
      traverseLayersFrom(layer.inputLayer1, cb);
    }

    if (layer.hasOwnProperty('inputLayer2')) {
      traverseLayersFrom(layer.inputLayer2, cb);
    }
  }

  cb(layer);
};
},{}],"Z71k":[function(require,module,exports) {
var traverseLayersFrom = require('./traverse-layers-from');

module.exports = function flattenLayers(layers) {
  var result = layers.slice(0);

  var _loop = function _loop(i) {
    var offset = 0;
    traverseLayersFrom(result[i], function (layer) {
      if (result.indexOf(layer) === -1) {
        result.splice(i + offset, 0, layer);
        offset++;
      }
    });
  };

  for (var i = 0; i < result.length; i++) {
    _loop(i);
  }

  return result;
};
},{"./traverse-layers-from":"WO5N"}],"eqC7":[function(require,module,exports) {
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var lookup = require('./lookup');

var mse2d = require('./utilities/mse-2d');

var layerFromJSON = require('./utilities/layer-from-json');

var _praxis = require('./praxis');

var flattenLayers = require('./utilities/flatten-layers');

var _require = require('./utilities/kernel'),
    makeKernel = _require.makeKernel,
    release = _require.release;

var FeedForward =
/*#__PURE__*/
function () {
  _createClass(FeedForward, [{
    key: "_setLogMethod",

    /**
     *
     * @param log
     * if a method is passed in method is used
     * if false passed in nothing is logged
     * @returns error
     */
    value: function _setLogMethod(log) {
      if (typeof log === 'function') {
        this.trainOpts.log = log;
      } else if (log) {
        // eslint-disable-next-line
        this.trainOpts.log = console.log;
      } else {
        this.trainOpts.log = false;
      }
    }
    /**
     *
     * @param opts
     *    Supports all `trainDefaults` properties
     *    also supports:
     *       learningRate: (number)
     */

  }, {
    key: "_updateTrainingOptions",
    value: function _updateTrainingOptions(opts) {
      var _this = this;

      Object.keys(this.constructor.trainDefaults).forEach(function (opt) {
        _this.trainOpts[opt] = opts.hasOwnProperty(opt) ? opts[opt] : _this.trainOpts[opt];
      });

      this.constructor._validateTrainingOptions(this.trainOpts);

      this._setLogMethod(opts.log || this.trainOpts.log);
    }
  }], [{
    key: "_validateTrainingOptions",

    /**
     *
     * @param options
     * @private
     */
    value: function _validateTrainingOptions(options) {
      var validations = {
        iterations: function iterations(val) {
          return typeof val === 'number' && val > 0;
        },
        errorThresh: function errorThresh(val) {
          return typeof val === 'number' && val > 0 && val < 1;
        },
        log: function log(val) {
          return typeof val === 'function' || typeof val === 'boolean';
        },
        logPeriod: function logPeriod(val) {
          return typeof val === 'number' && val > 0;
        },
        learningRate: function learningRate(val) {
          return typeof val === 'number' && val > 0 && val < 1;
        },
        callback: function callback(val) {
          return typeof val === 'function' || val === null;
        },
        callbackPeriod: function callbackPeriod(val) {
          return typeof val === 'number' && val > 0;
        },
        timeout: function timeout(val) {
          return typeof val === 'number' && val > 0;
        }
      };
      Object.keys(FeedForward.trainDefaults).forEach(function (key) {
        if (validations.hasOwnProperty(key) && !validations[key](options[key])) {
          throw new Error("[".concat(key, ", ").concat(options[key], "] is out of normal training range, your network will probably not train."));
        }
      });
    }
  }, {
    key: "trainDefaults",
    get: function get() {
      return {
        iterations: 20000,
        errorThresh: 0.005,
        log: false,
        logPeriod: 10,
        learningRate: 0.3,
        callback: null,
        callbackPeriod: 10,
        errorCheckInterval: 100,
        reinforce: false
      };
    }
  }, {
    key: "defaults",
    get: function get() {
      return {
        learningRate: 0.3,
        binaryThresh: 0.5,
        hiddenLayers: null,
        inputLayer: null,
        outputLayer: null,
        praxisOpts: null,
        praxis: function praxis(layer, settings) {
          return _praxis.momentumRootMeanSquaredPropagation(layer, layer.praxisOpts || settings);
        }
      };
    }
  }, {
    key: "structure",
    get: function get() {
      return {
        layers: null,
        _inputLayer: null,
        _outputLayer: null
      };
    }
    /**
     *
     * @param {object} options
     * @constructor
     */

  }]);

  function FeedForward() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, FeedForward);

    this.layers = null;
    this.inputLayer = null;
    this.hiddenLayers = null;
    this.outputLayer = null;
    this.praxisOpts = null;
    this.praxis = null;
    Object.assign(this, this.constructor.defaults, options);
    this.trainOpts = {};

    this._updateTrainingOptions(Object.assign({}, this.constructor.trainDefaults, options));

    Object.assign(this, this.constructor.structure);
    this._inputLayer = null;
    this._hiddenLayers = null;
    this._outputLayer = null;
  }

  _createClass(FeedForward, [{
    key: "_connectLayers",
    value: function _connectLayers() {
      var layers = [];
      this._inputLayer = this.inputLayer();

      var hiddenLayers = this._connectHiddenLayers(this._inputLayer);

      this._outputLayer = this.outputLayer(hiddenLayers[hiddenLayers.length - 1], hiddenLayers.length);
      layers.push(this._inputLayer);
      layers.push.apply(layers, _toConsumableArray(hiddenLayers));
      layers.push(this._outputLayer);
      this.layers = flattenLayers(layers);
    }
  }, {
    key: "_connectHiddenLayers",
    value: function _connectHiddenLayers(previousLayer) {
      this._hiddenLayers = [];
      var hiddenLayers = [];

      for (var i = 0; i < this.hiddenLayers.length; i++) {
        var hiddenLayer = this.hiddenLayers[i](previousLayer, i);
        hiddenLayers.push(hiddenLayer);

        this._hiddenLayers.push(hiddenLayer);

        previousLayer = hiddenLayer;
      }

      return hiddenLayers;
    }
  }, {
    key: "initialize",
    value: function initialize() {
      this._connectLayers();

      this.initializeLayers(this.layers);
    }
  }, {
    key: "initializeLayers",
    value: function initializeLayers(layers) {
      for (var i = 0; i < layers.length; i++) {
        var layer = layers[i]; // TODO: optimize for when training or just running

        layer.setupKernels(true);

        if (layer.hasOwnProperty('praxis') && layer.praxis === null) {
          layer.praxis = this.praxis(layer, layer.praxisOpts || this.praxisOpts);
        }
      }

      this._getMSE = makeKernel(mse2d, {
        output: [1],
        constants: {
          width: this._outputLayer.width,
          height: this._outputLayer.height,
          length: this._outputLayer.width * this._outputLayer.height
        }
      });
      this._addMSE = makeKernel(function (value1, value2) {
        return value1[0] + value2[0];
      }, {
        output: [1]
      });
      this._divideMSESum = makeKernel(function (length, mseSum) {
        var value = mseSum[0];

        if (value > 0) {
          return value / length;
        }

        return 0;
      }, {
        output: [1]
      });
    }
    /**
     *
     * @param input
     * @returns {*}
     */

  }, {
    key: "run",
    value: function run(input) {
      if (this.inputLookup) {
        input = lookup.toArray(this.inputLookup, input);
      }

      var output = this.runInput(input);

      if (output.toArray) {
        output = output.toArray();
      }

      if (this.outputLookup) {
        output = lookup.toHash(this.outputLookup, output);
      }

      return output;
    }
  }, {
    key: "runInput",
    value: function runInput(input) {
      this.layers[0].predict(input);

      for (var i = 1; i < this.layers.length; i++) {
        this.layers[i].predict();
      }

      return this.layers[this.layers.length - 1].weights;
    }
    /**
     *
     * @param data
     * @param options
     * @returns {{error: number, iterations: number}}
     */

  }, {
    key: "train",
    value: function train(data) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var status;
      var endTime;

      var _this$_prepTraining = this._prepTraining(data, options);

      data = _this$_prepTraining.data;
      status = _this$_prepTraining.status;
      endTime = _this$_prepTraining.endTime;

      while (this._trainingTick(data, status, endTime)) {
        ;
      }

      return status;
    }
    /**
     *
     * @param {object} data
     * @param {object} status { iterations: number, error: number }
     * @param {Number} endTime
     */

  }, {
    key: "_trainingTick",
    value: function _trainingTick(data, status, endTime) {
      if (status.iterations >= this.trainOpts.iterations || status.error <= this.trainOpts.errorThresh || Date.now() >= endTime) {
        return false;
      }

      status.iterations++;

      if (this.trainOpts.log && status.iterations % this.trainOpts.logPeriod === 0) {
        status.error = this._calculateTrainingError(data);
        this.trainOpts.log("iterations: ".concat(status.iterations, ", training error: ").concat(status.error));
      } else if (status.iterations % this.trainOpts.errorCheckInterval === 0) {
        status.error = this._calculateTrainingError(data);
      } else {
        this._trainPatterns(data);
      }

      if (this.trainOpts.callback && status.iterations % this.trainOpts.callbackPeriod === 0) {
        this.trainOpts.callback(Object.assign(status));
      }

      return true;
    }
    /**
     *
     * @param data
     * @param options
     * @protected
     * @return { data, status, endTime }
     */

  }, {
    key: "_prepTraining",
    value: function _prepTraining(data, options) {
      this._updateTrainingOptions(options);

      if (this.trainOpts.callback && this.trainOpts.callbackPeriod !== this.trainOpts.errorCheckInterval) {
        console.warn("options.callbackPeriod with value of ".concat(this.trainOpts.callbackPeriod, " does not match options.errorCheckInterval with value of ").concat(this.trainOpts.errorCheckInterval, ", if logging error, it will repeat.  These values may need to match"));
      }

      var formattedData = this._formatData(data);

      var endTime = Date.now() + this.trainOpts.timeout;
      var status = {
        error: 1,
        iterations: 0
      };

      if (!options.reinforce) {
        this.initialize();
      }

      var transferredData = new Array(formattedData.length);
      var transferInput = makeKernel(function (value) {
        return value[this.thread.x];
      }, {
        output: [formattedData[0].input.length]
      });
      var transferOutput = makeKernel(function (value) {
        return value[this.thread.x];
      }, {
        output: [formattedData[0].output.length]
      });

      for (var i = 0; i < formattedData.length; i++) {
        var formattedDatum = formattedData[i];
        transferredData[i] = {
          input: transferInput(formattedDatum.input),
          output: transferOutput(formattedDatum.output)
        };
      }

      return {
        data: transferredData,
        status: status,
        endTime: endTime
      };
    }
    /**
     *
     * @param data
     * @returns {Number} error
     */
    // _calculateTrainingError(data) {
    //   let sum = 0;
    //   for (let i = 0; i < data.length; ++i) {
    //     sum += this._trainPattern(data[i].input, data[i].output, true);
    //   }
    //   return sum / data.length;
    // }

  }, {
    key: "_calculateTrainingError",
    value: function _calculateTrainingError(data) {
      var sum = new Float32Array([0]);

      for (var i = 0; i < data.length; ++i) {
        var prevSum = sum;

        var error = this._trainPattern(data[i].input, data[i].output, true);

        sum = this._addMSE(sum, error);
        release(error);
        release(prevSum);
      }

      var result = this._divideMSESum(data.length, sum);

      release(sum);

      if (result.toArray) {
        var resultArray = result.toArray();
        release(result);
        return resultArray[0];
      }

      return result;
    }
    /**
     * @param data
     * @private
     */

  }, {
    key: "_trainPatterns",
    value: function _trainPatterns(data) {
      for (var i = 0; i < data.length; ++i) {
        this._trainPattern(data[i].input, data[i].output, false);
      }
    }
    /**
     *
     * @param input
     * @param target
     * @param {Boolean} logErrorRate
     */

  }, {
    key: "_trainPattern",
    value: function _trainPattern(input, target, logErrorRate) {
      // forward propagate
      this.runInput(input); // back propagate

      this._calculateDeltas(target);

      this.adjustWeights();

      if (logErrorRate) {
        return this._getMSE(this._outputLayer.errors);
      }

      return null;
    }
  }, {
    key: "_calculateDeltas",
    value: function _calculateDeltas(target) {
      for (var i = this.layers.length - 1; i > -1; i--) {
        this.layers[i].compare(target);
      }
    }
    /**
     *
     */

  }, {
    key: "adjustWeights",
    value: function adjustWeights() {
      for (var i = 0; i < this.layers.length; i++) {
        this.layers[i].learn(this.layers[i - 1], this.layers[i + 1], this.trainOpts.learningRate);
      }
    }
    /**
     *
     * @param data
     * @returns {*}
     */

  }, {
    key: "_formatData",
    value: function _formatData(data) {
      var _this2 = this;

      if (!Array.isArray(data)) {
        // turn stream datum into array
        var tmp = [];
        tmp.push(data);
        data = tmp;
      } // turn sparse hash input into arrays with 0s as filler


      var inputDatumCheck = data[0].input;

      if (!Array.isArray(inputDatumCheck) && !(inputDatumCheck instanceof Float32Array)) {
        if (!this.inputLookup) {
          this.inputLookup = lookup.buildLookup(data.map(function (value) {
            return value.input;
          }));
        }

        data = data.map(function (datumParam) {
          var array = lookup.toArray(_this2.inputLookup, datumParam.input);
          return Object.assign({}, datumParam, {
            input: array
          });
        }, this);
      }

      var outputDatumCheck = data[0].output;

      if (!Array.isArray(outputDatumCheck) && !(outputDatumCheck instanceof Float32Array)) {
        if (!this.outputLookup) {
          this.outputLookup = lookup.buildLookup(data.map(function (value) {
            return value.output;
          }));
        }

        data = data.map(function (datumParam) {
          var array = lookup.toArray(_this2.outputLookup, datumParam.output);
          return Object.assign({}, datumParam, {
            output: array
          });
        }, this);
      }

      return data;
    }
    /**
     *
     * @param data
     * @returns {
     *  {
     *    error: number,
     *    misclasses: Array
     *  }
     * }
     */

  }, {
    key: "test",
    value: function test() {
      throw new Error("".concat(this.constructor.name, "-test is not yet implemented"));
    }
    /**
     *
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      if (!this.layers) {
        this.initialize();
      }

      var jsonLayers = [];

      for (var i = 0; i < this.layers.length; i++) {
        var layer = this.layers[i];
        var jsonLayer = layer.toJSON();

        if (layer.hasOwnProperty('inputLayer')) {
          jsonLayer.inputLayerIndex = this.layers.indexOf(layer.inputLayer);
        } else if (layer.hasOwnProperty('inputLayer1') && layer.hasOwnProperty('inputLayer2')) {
          jsonLayer.inputLayer1Index = this.layers.indexOf(layer.inputLayer1);
          jsonLayer.inputLayer2Index = this.layers.indexOf(layer.inputLayer2);
        }

        jsonLayers.push(jsonLayer);
      }

      return {
        type: this.constructor.name,
        sizes: [this._inputLayer.height].concat(this._hiddenLayers.map(function (l) {
          return l.height;
        })).concat([this._outputLayer.height]),
        layers: jsonLayers
      };
    }
    /**
     *
     * @param json
     * @param [getLayer]
     * @returns {FeedForward}
     */

  }, {
    key: "toFunction",

    /**
     *
     * @returns {Function}
     */
    value: function toFunction() {
      throw new Error("".concat(this.constructor.name, "-toFunction is not yet implemented"));
    }
    /**
     * This will create a TrainStream (WriteStream) for us to send the training data to.
     * @param opts training options
     * @returns {TrainStream|*}
     */

  }, {
    key: "createTrainStream",
    value: function createTrainStream() {
      throw new Error("".concat(this.constructor.name, "-createTrainStream is not yet implemented"));
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(json, getLayer) {
      var jsonLayers = json.layers;
      var layers = [];
      var inputLayer = layerFromJSON(jsonLayers[0]) || getLayer(jsonLayers[0]);
      layers.push(inputLayer);

      for (var i = 1; i < jsonLayers.length; i++) {
        var jsonLayer = jsonLayers[i];

        if (jsonLayer.hasOwnProperty('inputLayerIndex')) {
          var inputLayer1 = layers[jsonLayer.inputLayerIndex];
          layers.push(layerFromJSON(jsonLayer, inputLayer1) || getLayer(jsonLayer, inputLayer1));
        } else {
          if (!jsonLayer.hasOwnProperty('inputLayer1Index')) throw new Error('inputLayer1Index not defined');
          if (!jsonLayer.hasOwnProperty('inputLayer2Index')) throw new Error('inputLayer2Index not defined');
          var _inputLayer = layers[jsonLayer.inputLayer1Index];
          var inputLayer2 = layers[jsonLayer.inputLayer2Index];
          if (_inputLayer === undefined) throw new Error("layer of index ".concat(jsonLayer.inputLayer1Index, " not found"));
          if (inputLayer2 === undefined) throw new Error("layer of index ".concat(jsonLayer.inputLayer2Index, " not found"));
          layers.push(layerFromJSON(jsonLayer, inputLayer) || getLayer(jsonLayer, _inputLayer, inputLayer2));
        }
      }

      var net = new FeedForward(json);
      net.layers = layers;
      return net;
    }
  }]);

  return FeedForward;
}();

module.exports = {
  FeedForward: FeedForward
};
},{"./lookup":"Q1a6","./utilities/mse-2d":"uJqb","./utilities/layer-from-json":"NEsT","./praxis":"P9Li","./utilities/flatten-layers":"Z71k","./utilities/kernel":"L30b"}],"Mjd7":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.thaw = thaw;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//private variables
var thawing = false;
var thaws = [];

/**
 * thaw an array of items
 * @param {Array} items
 * @param {Object} [options]
 * @constructor
 */

var Thaw = function () {
  _createClass(Thaw, null, [{
    key: "stopAll",


    /**
     * Stops all Thaw instances
     */
    value: function stopAll() {
      for (var i = 0; i < thaws.length; i++) {
        thaws[i].stop();
      }
    }
  }, {
    key: "defaultSettings",

    /**
     *
     * @type {{each: null, done: null}}
     */
    get: function get() {
      return {
        each: null,
        done: null
      };
    }

    /**
     * returns if Thaw.js is thawing
     * @returns {boolean}
     */

  }, {
    key: "isThawing",
    get: function get() {
      return thawing;
    }
  }]);

  function Thaw(items) {
    var _this = this;

    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, Thaw);

    var _constructor$defaultS = _extends({}, this.constructor.defaultSettings, options),
        each = _constructor$defaultS.each,
        done = _constructor$defaultS.done;

    this.items = items;
    this.i = 0;
    this.options = options;
    var tick = this.tick = function () {
      if (_this.i < 0) return;

      _this.timeout = setTimeout(tick, 0);

      if (thawing) return;
      var item = items[_this.i];
      if (_this.i >= items.length) {
        if (done !== null) {
          thawing = true;
          done(item, _this.i);
          thawing = false;
        }

        _this.i = -1;
        clearTimeout(_this.timeout);
        return;
      }
      if (each !== null) {
        thawing = true;
        each(item, _this.i);
        thawing = false;
      } else if (item !== undefined) {
        item();
      }
      _this.i++;
    };

    thaws.push(this);
    if (!options.delay) {
      tick();
    }
  }

  /**
   * readies thaw to continue
   * @returns {boolean} if had to get ready
   */


  _createClass(Thaw, [{
    key: "makeReady",
    value: function makeReady() {
      if (this.i < 0) {
        this.i = this.items.length;
        return true;
      }
      return false;
    }

    /**
     * Adds an item to the end of this instance of Thaw and readies Thaw to process it
     * @param item
     * @returns {Thaw}
     */

  }, {
    key: "add",
    value: function add(item) {
      var doTick = this.makeReady();

      this.items.push(item);

      if (doTick) {
        this.tick();
      }
      return this;
    }

    /**
     * Inserts an item just after the current item being processed in Thaw and readies Thaw to process it
     * @param item
     * @returns {Thaw}
     */

  }, {
    key: "insert",
    value: function insert(item) {
      var doTick = this.makeReady();

      this.items.splice(this.i, 0, item);

      if (doTick) {
        this.tick();
      }

      return this;
    }

    /**
     * Adds an Array to the end of this instance of Thaw and readies Thaw to process it
     * @param {Array} items
     * @returns {Thaw}
     */

  }, {
    key: "addArray",
    value: function addArray(items) {
      var doTick = this.makeReady();

      this.items = this.items.concat(items);

      if (doTick) {
        this.tick();
      }

      return this;
    }

    /**
     * Inserts an Array just after the current item being processed in Thaw and readies Thaw to process them
     * @param {Array} items
     * @returns {Thaw}
     */

  }, {
    key: "insertArray",
    value: function insertArray(items) {
      var doTick = this.makeReady();
      var left = this.items;
      var middle = items;
      var right = this.items.splice(this.i, this.items.length - this.i + 1);

      this.items = left.concat(middle, right);

      if (doTick) {
        this.tick();
      }
      return this;
    }

    /**
     * Stops this instance of Thaw
     * @returns {Thaw}
     */

  }, {
    key: "stop",
    value: function stop() {
      this.i = -1;
      clearTimeout(this.timeout);
      if (this.options.done) {
        this.options.done();
      }
      return this;
    }
  }]);

  return Thaw;
}();

/**
 * simple thaw
 * @param {Array} items
 * @param {Object} [options]
 * @returns Thaw
 */


exports.default = Thaw;
function thaw(items) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  return new Thaw(items, options);
}

},{}],"YsCn":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _ = require('./');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 *
 * @param {Object} [options]
 * @param {Number} [count]
 * @constructor
 */
var Block = function () {
  function Block(options, count) {
    _classCallCheck(this, Block);

    this.index = 0;
    this.thaws = [];
    this.count = count || 200;
    this.options = options;
  }

  /**
   * add an item to the end of items
   * @param item
   * @returns {Block}
   */


  _createClass(Block, [{
    key: 'add',
    value: function add(item) {
      var next = this._next();
      next.add(item);

      return this;
    }

    /**
     * add an Array to the end of items
     * @param items
     * @returns {Block}
     */

  }, {
    key: 'addArray',
    value: function addArray(items) {
      var next = this._next();
      next.addArray(items);

      return this;
    }

    /**
     * insert an item into items @ current position
     * @param item
     * @returns {Block}
     */

  }, {
    key: 'insert',
    value: function insert(item) {
      var next = this._next();
      next.insert(item);

      return this;
    }

    /**
     * insert and array into items @ current position
     * @param items
     * @returns {Block}
     */

  }, {
    key: 'insertArray',
    value: function insertArray(items) {
      var next = this._next();
      next.insertArray(items);

      return this;
    }

    /**
     * Stops all thaws in this block
     * @returns {Block}
     */

  }, {
    key: 'stop',
    value: function stop() {
      for (var i = 0; i < this.thaws.length; i++) {
        this.thaws[i].stop();
      }
      return this;
    }

    /**
     * Get next available in block
     * @returns {*}
     * @private
     */

  }, {
    key: '_next',
    value: function _next() {
      var thaw = null;
      var thaws = this.thaws;

      if (thaws.length < this.count) {
        thaws.push(thaw = new _2.default([], this.options));
      } else {
        thaw = thaws[this.index];
      }
      this.index++;
      if (this.index >= this.count) {
        this.index = 0;
      }

      return thaw;
    }
  }]);

  return Block;
}();

exports.default = Block;
;

},{"./":"AZLi"}],"AZLi":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Block = undefined;

var _thaw = require('./thaw');

var _thaw2 = _interopRequireDefault(_thaw);

var _block = require('./block');

var _block2 = _interopRequireDefault(_block);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _thaw2.default;
exports.Block = _block2.default;


if (typeof window !== 'undefined') {
  window.Thaw = _thaw2.default;
  window.Thaw.Block = _block2.default;
}

},{"./thaw":"Mjd7","./block":"YsCn"}],"FRpO":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = $getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  var args = [];

  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);

  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}
},{}],"Bm0n":[function(require,module,exports) {
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],"pBGv":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"Yj0v":[function(require,module,exports) {
var process = require("process");
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = { nextTick: nextTick };
} else {
  module.exports = process
}

function nextTick(fn, arg1, arg2, arg3) {
  if (typeof fn !== 'function') {
    throw new TypeError('"callback" argument must be a function');
  }
  var len = arguments.length;
  var args, i;
  switch (len) {
  case 0:
  case 1:
    return process.nextTick(fn);
  case 2:
    return process.nextTick(function afterTickOne() {
      fn.call(null, arg1);
    });
  case 3:
    return process.nextTick(function afterTickTwo() {
      fn.call(null, arg1, arg2);
    });
  case 4:
    return process.nextTick(function afterTickThree() {
      fn.call(null, arg1, arg2, arg3);
    });
  default:
    args = new Array(len - 1);
    i = 0;
    while (i < args.length) {
      args[i++] = arguments[i];
    }
    return process.nextTick(function afterTick() {
      fn.apply(null, args);
    });
  }
}


},{"process":"pBGv"}],"upBv":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"Q8A6":[function(require,module,exports) {
module.exports = require('events').EventEmitter;

},{"events":"FRpO"}],"yh9p":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"JgNJ":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"dskh":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"yh9p","ieee754":"JgNJ","isarray":"upBv","buffer":"dskh"}],"Wugr":[function(require,module,exports) {

/* eslint-disable node/no-deprecated-api */
var buffer = require('buffer')
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}

},{"buffer":"dskh"}],"Q14w":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{"buffer":"dskh"}],"rDCW":[function(require,module,exports) {

},{}],"Um5I":[function(require,module,exports) {

'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Buffer = require('safe-buffer').Buffer;
var util = require('util');

function copyBuffer(src, target, offset) {
  src.copy(target, offset);
}

module.exports = function () {
  function BufferList() {
    _classCallCheck(this, BufferList);

    this.head = null;
    this.tail = null;
    this.length = 0;
  }

  BufferList.prototype.push = function push(v) {
    var entry = { data: v, next: null };
    if (this.length > 0) this.tail.next = entry;else this.head = entry;
    this.tail = entry;
    ++this.length;
  };

  BufferList.prototype.unshift = function unshift(v) {
    var entry = { data: v, next: this.head };
    if (this.length === 0) this.tail = entry;
    this.head = entry;
    ++this.length;
  };

  BufferList.prototype.shift = function shift() {
    if (this.length === 0) return;
    var ret = this.head.data;
    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
    --this.length;
    return ret;
  };

  BufferList.prototype.clear = function clear() {
    this.head = this.tail = null;
    this.length = 0;
  };

  BufferList.prototype.join = function join(s) {
    if (this.length === 0) return '';
    var p = this.head;
    var ret = '' + p.data;
    while (p = p.next) {
      ret += s + p.data;
    }return ret;
  };

  BufferList.prototype.concat = function concat(n) {
    if (this.length === 0) return Buffer.alloc(0);
    if (this.length === 1) return this.head.data;
    var ret = Buffer.allocUnsafe(n >>> 0);
    var p = this.head;
    var i = 0;
    while (p) {
      copyBuffer(p.data, ret, i);
      i += p.data.length;
      p = p.next;
    }
    return ret;
  };

  return BufferList;
}();

if (util && util.inspect && util.inspect.custom) {
  module.exports.prototype[util.inspect.custom] = function () {
    var obj = util.inspect({ length: this.length });
    return this.constructor.name + ' ' + obj;
  };
}
},{"safe-buffer":"Wugr","util":"rDCW"}],"avqi":[function(require,module,exports) {
'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

// undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
  var _this = this;

  var readableDestroyed = this._readableState && this._readableState.destroyed;
  var writableDestroyed = this._writableState && this._writableState.destroyed;

  if (readableDestroyed || writableDestroyed) {
    if (cb) {
      cb(err);
    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {
      pna.nextTick(emitErrorNT, this, err);
    }
    return this;
  }

  // we set destroyed to true before firing error callbacks in order
  // to make it re-entrance safe in case destroy() is called within callbacks

  if (this._readableState) {
    this._readableState.destroyed = true;
  }

  // if this is a duplex stream mark the writable part as destroyed as well
  if (this._writableState) {
    this._writableState.destroyed = true;
  }

  this._destroy(err || null, function (err) {
    if (!cb && err) {
      pna.nextTick(emitErrorNT, _this, err);
      if (_this._writableState) {
        _this._writableState.errorEmitted = true;
      }
    } else if (cb) {
      cb(err);
    }
  });

  return this;
}

function undestroy() {
  if (this._readableState) {
    this._readableState.destroyed = false;
    this._readableState.reading = false;
    this._readableState.ended = false;
    this._readableState.endEmitted = false;
  }

  if (this._writableState) {
    this._writableState.destroyed = false;
    this._writableState.ended = false;
    this._writableState.ending = false;
    this._writableState.finished = false;
    this._writableState.errorEmitted = false;
  }
}

function emitErrorNT(self, err) {
  self.emit('error', err);
}

module.exports = {
  destroy: destroy,
  undestroy: undestroy
};
},{"process-nextick-args":"Yj0v"}],"yM1o":[function(require,module,exports) {
var global = arguments[3];

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

},{}],"I0x5":[function(require,module,exports) {
var process = require("process");

var global = arguments[3];
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/


module.exports = Writable;
/* <replacement> */

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream


function CorkedRequest(state) {
  var _this = this;

  this.next = null;
  this.entry = null;

  this.finish = function () {
    onCorkedFinish(_this, state);
  };
}
/* </replacement> */

/*<replacement>*/


var asyncWrite = !true && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;
/*</replacement>*/

/*<replacement>*/

var Duplex;
/*</replacement>*/

Writable.WritableState = WritableState;
/*<replacement>*/

var util = require('core-util-is');

util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/

var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/

/*<replacement>*/

var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/


var Buffer = require('safe-buffer').Buffer;

var OurUint8Array = global.Uint8Array || function () {};

function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}

function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*</replacement>*/


var destroyImpl = require('./internal/streams/destroy');

util.inherits(Writable, Stream);

function nop() {}

function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');
  options = options || {}; // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.

  var isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
  // contains buffers or objects.

  this.objectMode = !!options.objectMode;
  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()

  var hwm = options.highWaterMark;
  var writableHwm = options.writableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm; // cast to ints.

  this.highWaterMark = Math.floor(this.highWaterMark); // if _final has been called

  this.finalCalled = false; // drain event flag.

  this.needDrain = false; // at the start of calling end()

  this.ending = false; // when end() has been called, and returned

  this.ended = false; // when 'finish' is emitted

  this.finished = false; // has it been destroyed

  this.destroyed = false; // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.

  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.

  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.

  this.length = 0; // a flag to see when we're in the middle of a write.

  this.writing = false; // when true all writes will be buffered until .uncork() call

  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.

  this.sync = true; // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.

  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

  this.onwrite = function (er) {
    onwrite(stream, er);
  }; // the callback that the user supplies to write(chunk,encoding,cb)


  this.writecb = null; // the amount that is being written when _write is called.

  this.writelen = 0;
  this.bufferedRequest = null;
  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted

  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams

  this.prefinished = false; // True if the error was already emitted and should not be thrown again

  this.errorEmitted = false; // count buffered requests

  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
  // one allocated and free to use, and we maintain at most two

  this.corkedRequestsFree = new CorkedRequest(this);
}

WritableState.prototype.getBuffer = function getBuffer() {
  var current = this.bufferedRequest;
  var out = [];

  while (current) {
    out.push(current);
    current = current.next;
  }

  return out;
};

(function () {
  try {
    Object.defineProperty(WritableState.prototype, 'buffer', {
      get: internalUtil.deprecate(function () {
        return this.getBuffer();
      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
    });
  } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.


var realHasInstance;

if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
  realHasInstance = Function.prototype[Symbol.hasInstance];
  Object.defineProperty(Writable, Symbol.hasInstance, {
    value: function (object) {
      if (realHasInstance.call(this, object)) return true;
      if (this !== Writable) return false;
      return object && object._writableState instanceof WritableState;
    }
  });
} else {
  realHasInstance = function (object) {
    return object instanceof this;
  };
}

function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
  // `realHasInstance` is necessary because using plain `instanceof`
  // would return false, as no `_writableState` property is attached.
  // Trying to use the custom `instanceof` for Writable here will also break the
  // Node.js LazyTransform implementation, which has a non-trivial getter for
  // `_writableState` that would lead to infinite recursion.

  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {
    return new Writable(options);
  }

  this._writableState = new WritableState(options, this); // legacy.

  this.writable = true;

  if (options) {
    if (typeof options.write === 'function') this._write = options.write;
    if (typeof options.writev === 'function') this._writev = options.writev;
    if (typeof options.destroy === 'function') this._destroy = options.destroy;
    if (typeof options.final === 'function') this._final = options.final;
  }

  Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.


Writable.prototype.pipe = function () {
  this.emit('error', new Error('Cannot pipe, not readable'));
};

function writeAfterEnd(stream, cb) {
  var er = new Error('write after end'); // TODO: defer error events consistently everywhere, not just the cb

  stream.emit('error', er);
  pna.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.


function validChunk(stream, state, chunk, cb) {
  var valid = true;
  var er = false;

  if (chunk === null) {
    er = new TypeError('May not write null values to stream');
  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }

  if (er) {
    stream.emit('error', er);
    pna.nextTick(cb, er);
    valid = false;
  }

  return valid;
}

Writable.prototype.write = function (chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  var isBuf = !state.objectMode && _isUint8Array(chunk);

  if (isBuf && !Buffer.isBuffer(chunk)) {
    chunk = _uint8ArrayToBuffer(chunk);
  }

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
  if (typeof cb !== 'function') cb = nop;
  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
  }
  return ret;
};

Writable.prototype.cork = function () {
  var state = this._writableState;
  state.corked++;
};

Writable.prototype.uncork = function () {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;
    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
  return this;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
    chunk = Buffer.from(chunk, encoding);
  }

  return chunk;
}

Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.

function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
  if (!isBuf) {
    var newChunk = decodeChunk(state, chunk, encoding);

    if (chunk !== newChunk) {
      isBuf = true;
      encoding = 'buffer';
      chunk = newChunk;
    }
  }

  var len = state.objectMode ? 1 : chunk.length;
  state.length += len;
  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

  if (!ret) state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = {
      chunk: chunk,
      encoding: encoding,
      isBuf: isBuf,
      callback: cb,
      next: null
    };

    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }

    state.bufferedRequestCount += 1;
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;

  if (sync) {
    // defer the callback if we are being called synchronously
    // to avoid piling up things on the stack
    pna.nextTick(cb, er); // this can emit finish, and it will always happen
    // after error

    pna.nextTick(finishMaybe, stream, state);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er);
  } else {
    // the caller expect this to happen before if
    // it is async
    cb(er);
    stream._writableState.errorEmitted = true;
    stream.emit('error', er); // this can emit finish, but finish must
    // always follow error

    finishMaybe(stream, state);
  }
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;
  onwriteStateUpdate(state);
  if (er) onwriteError(stream, state, sync, er, cb);else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      /*<replacement>*/
      asyncWrite(afterWrite, stream, state, finished, cb);
      /*</replacement>*/
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished) onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.


function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
} // if there's something in the buffer waiting, then process it


function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var l = state.bufferedRequestCount;
    var buffer = new Array(l);
    var holder = state.corkedRequestsFree;
    holder.entry = entry;
    var count = 0;
    var allBuffers = true;

    while (entry) {
      buffer[count] = entry;
      if (!entry.isBuf) allBuffers = false;
      entry = entry.next;
      count += 1;
    }

    buffer.allBuffers = allBuffers;
    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
    // as the hot path ends with doWrite

    state.pendingcb++;
    state.lastBufferedRequest = null;

    if (holder.next) {
      state.corkedRequestsFree = holder.next;
      holder.next = null;
    } else {
      state.corkedRequestsFree = new CorkedRequest(state);
    }

    state.bufferedRequestCount = 0;
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;
      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.

      if (state.writing) {
        break;
      }
    }

    if (entry === null) state.lastBufferedRequest = null;
  }

  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function (chunk, encoding, cb) {
  cb(new Error('_write() is not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function (chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

  if (state.corked) {
    state.corked = 1;
    this.uncork();
  } // ignore unnecessary end() calls.


  if (!state.ending && !state.finished) endWritable(this, state, cb);
};

function needFinish(state) {
  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}

function callFinal(stream, state) {
  stream._final(function (err) {
    state.pendingcb--;

    if (err) {
      stream.emit('error', err);
    }

    state.prefinished = true;
    stream.emit('prefinish');
    finishMaybe(stream, state);
  });
}

function prefinish(stream, state) {
  if (!state.prefinished && !state.finalCalled) {
    if (typeof stream._final === 'function') {
      state.pendingcb++;
      state.finalCalled = true;
      pna.nextTick(callFinal, stream, state);
    } else {
      state.prefinished = true;
      stream.emit('prefinish');
    }
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);

  if (need) {
    prefinish(stream, state);

    if (state.pendingcb === 0) {
      state.finished = true;
      stream.emit('finish');
    }
  }

  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);

  if (cb) {
    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);
  }

  state.ended = true;
  stream.writable = false;
}

function onCorkedFinish(corkReq, state, err) {
  var entry = corkReq.entry;
  corkReq.entry = null;

  while (entry) {
    var cb = entry.callback;
    state.pendingcb--;
    cb(err);
    entry = entry.next;
  }

  if (state.corkedRequestsFree) {
    state.corkedRequestsFree.next = corkReq;
  } else {
    state.corkedRequestsFree = corkReq;
  }
}

Object.defineProperty(Writable.prototype, 'destroyed', {
  get: function () {
    if (this._writableState === undefined) {
      return false;
    }

    return this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._writableState) {
      return;
    } // backward compatibility, the user is explicitly
    // managing destroyed


    this._writableState.destroyed = value;
  }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;

Writable.prototype._destroy = function (err, cb) {
  this.end();
  cb(err);
};
},{"process-nextick-args":"Yj0v","core-util-is":"Q14w","inherits":"Bm0n","util-deprecate":"yM1o","./internal/streams/stream":"Q8A6","safe-buffer":"Wugr","./internal/streams/destroy":"avqi","./_stream_duplex":"wldW","process":"pBGv"}],"wldW":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    keys.push(key);
  }return keys;
};
/*</replacement>*/

module.exports = Duplex;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

{
  // avoid scope creep, the keys array can then be collected
  var keys = objectKeys(Writable.prototype);
  for (var v = 0; v < keys.length; v++) {
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
  }
}

function Duplex(options) {
  if (!(this instanceof Duplex)) return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false) this.readable = false;

  if (options && options.writable === false) this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

  this.once('end', onend);
}

Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._writableState.highWaterMark;
  }
});

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended) return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  pna.nextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

Object.defineProperty(Duplex.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined || this._writableState === undefined) {
      return false;
    }
    return this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (this._readableState === undefined || this._writableState === undefined) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
    this._writableState.destroyed = value;
  }
});

Duplex.prototype._destroy = function (err, cb) {
  this.push(null);
  this.end();

  pna.nextTick(cb, err);
};
},{"process-nextick-args":"Yj0v","core-util-is":"Q14w","inherits":"Bm0n","./_stream_readable":"Ogwm","./_stream_writable":"I0x5"}],"F7WD":[function(require,module,exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/

var isEncoding = Buffer.isEncoding || function (encoding) {
  encoding = '' + encoding;
  switch (encoding && encoding.toLowerCase()) {
    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
      return true;
    default:
      return false;
  }
};

function _normalizeEncoding(enc) {
  if (!enc) return 'utf8';
  var retried;
  while (true) {
    switch (enc) {
      case 'utf8':
      case 'utf-8':
        return 'utf8';
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return 'utf16le';
      case 'latin1':
      case 'binary':
        return 'latin1';
      case 'base64':
      case 'ascii':
      case 'hex':
        return enc;
      default:
        if (retried) return; // undefined
        enc = ('' + enc).toLowerCase();
        retried = true;
    }
  }
};

// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
  var nenc = _normalizeEncoding(enc);
  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
  return nenc || enc;
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
  this.encoding = normalizeEncoding(encoding);
  var nb;
  switch (this.encoding) {
    case 'utf16le':
      this.text = utf16Text;
      this.end = utf16End;
      nb = 4;
      break;
    case 'utf8':
      this.fillLast = utf8FillLast;
      nb = 4;
      break;
    case 'base64':
      this.text = base64Text;
      this.end = base64End;
      nb = 3;
      break;
    default:
      this.write = simpleWrite;
      this.end = simpleEnd;
      return;
  }
  this.lastNeed = 0;
  this.lastTotal = 0;
  this.lastChar = Buffer.allocUnsafe(nb);
}

StringDecoder.prototype.write = function (buf) {
  if (buf.length === 0) return '';
  var r;
  var i;
  if (this.lastNeed) {
    r = this.fillLast(buf);
    if (r === undefined) return '';
    i = this.lastNeed;
    this.lastNeed = 0;
  } else {
    i = 0;
  }
  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
  return r || '';
};

StringDecoder.prototype.end = utf8End;

// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;

// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function (buf) {
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
  this.lastNeed -= buf.length;
};

// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
  return byte >> 6 === 0x02 ? -1 : -2;
}

// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
  var j = buf.length - 1;
  if (j < i) return 0;
  var nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 1;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) self.lastNeed = nb - 2;
    return nb;
  }
  if (--j < i || nb === -2) return 0;
  nb = utf8CheckByte(buf[j]);
  if (nb >= 0) {
    if (nb > 0) {
      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
    }
    return nb;
  }
  return 0;
}

// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
  if ((buf[0] & 0xC0) !== 0x80) {
    self.lastNeed = 0;
    return '\ufffd';
  }
  if (self.lastNeed > 1 && buf.length > 1) {
    if ((buf[1] & 0xC0) !== 0x80) {
      self.lastNeed = 1;
      return '\ufffd';
    }
    if (self.lastNeed > 2 && buf.length > 2) {
      if ((buf[2] & 0xC0) !== 0x80) {
        self.lastNeed = 2;
        return '\ufffd';
      }
    }
  }
}

// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
  var p = this.lastTotal - this.lastNeed;
  var r = utf8CheckExtraBytes(this, buf, p);
  if (r !== undefined) return r;
  if (this.lastNeed <= buf.length) {
    buf.copy(this.lastChar, p, 0, this.lastNeed);
    return this.lastChar.toString(this.encoding, 0, this.lastTotal);
  }
  buf.copy(this.lastChar, p, 0, buf.length);
  this.lastNeed -= buf.length;
}

// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
  var total = utf8CheckIncomplete(this, buf, i);
  if (!this.lastNeed) return buf.toString('utf8', i);
  this.lastTotal = total;
  var end = buf.length - (total - this.lastNeed);
  buf.copy(this.lastChar, 0, end);
  return buf.toString('utf8', i, end);
}

// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + '\ufffd';
  return r;
}

// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
  if ((buf.length - i) % 2 === 0) {
    var r = buf.toString('utf16le', i);
    if (r) {
      var c = r.charCodeAt(r.length - 1);
      if (c >= 0xD800 && c <= 0xDBFF) {
        this.lastNeed = 2;
        this.lastTotal = 4;
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
        return r.slice(0, -1);
      }
    }
    return r;
  }
  this.lastNeed = 1;
  this.lastTotal = 2;
  this.lastChar[0] = buf[buf.length - 1];
  return buf.toString('utf16le', i, buf.length - 1);
}

// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) {
    var end = this.lastTotal - this.lastNeed;
    return r + this.lastChar.toString('utf16le', 0, end);
  }
  return r;
}

function base64Text(buf, i) {
  var n = (buf.length - i) % 3;
  if (n === 0) return buf.toString('base64', i);
  this.lastNeed = 3 - n;
  this.lastTotal = 3;
  if (n === 1) {
    this.lastChar[0] = buf[buf.length - 1];
  } else {
    this.lastChar[0] = buf[buf.length - 2];
    this.lastChar[1] = buf[buf.length - 1];
  }
  return buf.toString('base64', i, buf.length - n);
}

function base64End(buf) {
  var r = buf && buf.length ? this.write(buf) : '';
  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
  return r;
}

// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
  return buf.toString(this.encoding);
}

function simpleEnd(buf) {
  return buf && buf.length ? this.write(buf) : '';
}
},{"safe-buffer":"Wugr"}],"Ogwm":[function(require,module,exports) {

var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

/*<replacement>*/

var pna = require('process-nextick-args');
/*</replacement>*/

module.exports = Readable;

/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/

/*<replacement>*/
var Duplex;
/*</replacement>*/

Readable.ReadableState = ReadableState;

/*<replacement>*/
var EE = require('events').EventEmitter;

var EElistenerCount = function (emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/

/*<replacement>*/
var Stream = require('./internal/streams/stream');
/*</replacement>*/

/*<replacement>*/

var Buffer = require('safe-buffer').Buffer;
var OurUint8Array = global.Uint8Array || function () {};
function _uint8ArrayToBuffer(chunk) {
  return Buffer.from(chunk);
}
function _isUint8Array(obj) {
  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}

/*</replacement>*/

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

/*<replacement>*/
var debugUtil = require('util');
var debug = void 0;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var BufferList = require('./internal/streams/BufferList');
var destroyImpl = require('./internal/streams/destroy');
var StringDecoder;

util.inherits(Readable, Stream);

var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

function prependListener(emitter, event, fn) {
  // Sadly this is not cacheable as some libraries bundle their own
  // event emitter implementation with them.
  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);

  // This is a hack to make sure that our error handler is attached before any
  // userland ones.  NEVER DO THIS. This is here only because this code needs
  // to continue to work with older versions of Node.js that do not include
  // the prependListener() method. The goal is to eventually remove this hack.
  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
}

function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // Duplex streams are both readable and writable, but share
  // the same options object.
  // However, some cases require setting options to different
  // values for the readable and the writable sides of the duplex stream.
  // These options can be provided separately as readableXXX and writableXXX.
  var isDuplex = stream instanceof Duplex;

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var readableHwm = options.readableHighWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;

  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;

  // cast to ints.
  this.highWaterMark = Math.floor(this.highWaterMark);

  // A linked list is used to store data chunks instead of an array because the
  // linked list can remove elements from the beginning faster than
  // array.shift()
  this.buffer = new BufferList();
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the event 'readable'/'data' is emitted
  // immediately, or on a later tick.  We set this to true at first, because
  // any actions that shouldn't happen until "later" should generally also
  // not happen before the first read call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;
  this.resumeScheduled = false;

  // has it been destroyed
  this.destroyed = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable)) return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options) {
    if (typeof options.read === 'function') this._read = options.read;

    if (typeof options.destroy === 'function') this._destroy = options.destroy;
  }

  Stream.call(this);
}

Object.defineProperty(Readable.prototype, 'destroyed', {
  get: function () {
    if (this._readableState === undefined) {
      return false;
    }
    return this._readableState.destroyed;
  },
  set: function (value) {
    // we ignore the value if the stream
    // has not been initialized yet
    if (!this._readableState) {
      return;
    }

    // backward compatibility, the user is explicitly
    // managing destroyed
    this._readableState.destroyed = value;
  }
});

Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function (err, cb) {
  this.push(null);
  cb(err);
};

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function (chunk, encoding) {
  var state = this._readableState;
  var skipChunkCheck;

  if (!state.objectMode) {
    if (typeof chunk === 'string') {
      encoding = encoding || state.defaultEncoding;
      if (encoding !== state.encoding) {
        chunk = Buffer.from(chunk, encoding);
        encoding = '';
      }
      skipChunkCheck = true;
    }
  } else {
    skipChunkCheck = true;
  }

  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function (chunk) {
  return readableAddChunk(this, chunk, null, true, false);
};

function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
  var state = stream._readableState;
  if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else {
    var er;
    if (!skipChunkCheck) er = chunkInvalid(state, chunk);
    if (er) {
      stream.emit('error', er);
    } else if (state.objectMode || chunk && chunk.length > 0) {
      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {
        chunk = _uint8ArrayToBuffer(chunk);
      }

      if (addToFront) {
        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);
      } else if (state.ended) {
        stream.emit('error', new Error('stream.push() after EOF'));
      } else {
        state.reading = false;
        if (state.decoder && !encoding) {
          chunk = state.decoder.write(chunk);
          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
        } else {
          addChunk(stream, state, chunk, false);
        }
      }
    } else if (!addToFront) {
      state.reading = false;
    }
  }

  return needMoreData(state);
}

function addChunk(stream, state, chunk, addToFront) {
  if (state.flowing && state.length === 0 && !state.sync) {
    stream.emit('data', chunk);
    stream.read(0);
  } else {
    // update the buffer info.
    state.length += state.objectMode ? 1 : chunk.length;
    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

    if (state.needReadable) emitReadable(stream);
  }
  maybeReadMore(stream, state);
}

function chunkInvalid(state, chunk) {
  var er;
  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}

// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
}

Readable.prototype.isPaused = function () {
  return this._readableState.flowing === false;
};

// backwards compatibility.
Readable.prototype.setEncoding = function (enc) {
  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2 to prevent increasing hwm excessively in
    // tiny amounts
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
  if (n <= 0 || state.length === 0 && state.ended) return 0;
  if (state.objectMode) return 1;
  if (n !== n) {
    // Only flow one buffer at a time
    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
  }
  // If we're asking for more than the current hwm, then raise the hwm.
  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
  if (n <= state.length) return n;
  // Don't have enough
  if (!state.ended) {
    state.needReadable = true;
    return 0;
  }
  return state.length;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function (n) {
  debug('read', n);
  n = parseInt(n, 10);
  var state = this._readableState;
  var nOrig = n;

  if (n !== 0) state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0) endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  } else if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0) state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
    // If _read pushed data synchronously, then `reading` will be false,
    // and we need to re-evaluate how much data we can return to the user.
    if (!state.reading) n = howMuchToRead(nOrig, state);
  }

  var ret;
  if (n > 0) ret = fromList(n, state);else ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  } else {
    state.length -= n;
  }

  if (state.length === 0) {
    // If we have nothing in the buffer, then we want to know
    // as soon as we *do* get something into the buffer.
    if (!state.ended) state.needReadable = true;

    // If we tried to read() past the EOF, then emit end on the next tick.
    if (nOrig !== n && state.ended) endReadable(this);
  }

  if (ret !== null) this.emit('data', ret);

  return ret;
};

function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}

// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    pna.nextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;else len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function (n) {
  this.emit('error', new Error('_read() is not implemented'));
};

Readable.prototype.pipe = function (dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

  var endFn = doEnd ? onend : unpipe;
  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable, unpipeInfo) {
    debug('onunpipe');
    if (readable === src) {
      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
        unpipeInfo.hasUnpiped = true;
        cleanup();
      }
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', unpipe);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
  }

  // If the user pushes more data while we're writing to dest then we'll end up
  // in ondata again. However, we only want to increase awaitDrain once because
  // dest will only emit one 'drain' event for the multiple writes.
  // => Introduce a guard on increasing awaitDrain.
  var increasedAwaitDrain = false;
  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    increasedAwaitDrain = false;
    var ret = dest.write(chunk);
    if (false === ret && !increasedAwaitDrain) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      // => Check whether `dest` is still a piping destination.
      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
        increasedAwaitDrain = true;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
  }

  // Make sure our error handler is attached before userland ones.
  prependListener(dest, 'error', onerror);

  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function () {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain) state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}

Readable.prototype.unpipe = function (dest) {
  var state = this._readableState;
  var unpipeInfo = { hasUnpiped: false };

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0) return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes) return this;

    if (!dest) dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest) dest.emit('unpipe', this, unpipeInfo);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++) {
      dests[i].emit('unpipe', this, unpipeInfo);
    }return this;
  }

  // try to find the right one.
  var index = indexOf(state.pipes, dest);
  if (index === -1) return this;

  state.pipes.splice(index, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1) state.pipes = state.pipes[0];

  dest.emit('unpipe', this, unpipeInfo);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function (ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  if (ev === 'data') {
    // Start flowing on next tick if stream isn't explicitly paused
    if (this._readableState.flowing !== false) this.resume();
  } else if (ev === 'readable') {
    var state = this._readableState;
    if (!state.endEmitted && !state.readableListening) {
      state.readableListening = state.needReadable = true;
      state.emittedReadable = false;
      if (!state.reading) {
        pna.nextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function () {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    pna.nextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  state.awaitDrain = 0;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading) stream.read(0);
}

Readable.prototype.pause = function () {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  while (state.flowing && stream.read() !== null) {}
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function (stream) {
  var _this = this;

  var state = this._readableState;
  var paused = false;

  stream.on('end', function () {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length) _this.push(chunk);
    }

    _this.push(null);
  });

  stream.on('data', function (chunk) {
    debug('wrapped data');
    if (state.decoder) chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

    var ret = _this.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function (method) {
        return function () {
          return stream[method].apply(stream, arguments);
        };
      }(i);
    }
  }

  // proxy certain important events.
  for (var n = 0; n < kProxyEvents.length; n++) {
    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
  }

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  this._read = function (n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return this;
};

Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: false,
  get: function () {
    return this._readableState.highWaterMark;
  }
});

// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
  // nothing buffered
  if (state.length === 0) return null;

  var ret;
  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
    // read it all, truncate the list
    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
    state.buffer.clear();
  } else {
    // read part of list
    ret = fromListPartial(n, state.buffer, state.decoder);
  }

  return ret;
}

// Extracts only enough buffered data to satisfy the amount requested.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromListPartial(n, list, hasStrings) {
  var ret;
  if (n < list.head.data.length) {
    // slice is the same for buffers and strings
    ret = list.head.data.slice(0, n);
    list.head.data = list.head.data.slice(n);
  } else if (n === list.head.data.length) {
    // first chunk is a perfect match
    ret = list.shift();
  } else {
    // result spans more than one buffer
    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
  }
  return ret;
}

// Copies a specified amount of characters from the list of buffered data
// chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBufferString(n, list) {
  var p = list.head;
  var c = 1;
  var ret = p.data;
  n -= ret.length;
  while (p = p.next) {
    var str = p.data;
    var nb = n > str.length ? str.length : n;
    if (nb === str.length) ret += str;else ret += str.slice(0, n);
    n -= nb;
    if (n === 0) {
      if (nb === str.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = str.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

// Copies a specified amount of bytes from the list of buffered data chunks.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function copyFromBuffer(n, list) {
  var ret = Buffer.allocUnsafe(n);
  var p = list.head;
  var c = 1;
  p.data.copy(ret);
  n -= p.data.length;
  while (p = p.next) {
    var buf = p.data;
    var nb = n > buf.length ? buf.length : n;
    buf.copy(ret, ret.length - n, 0, nb);
    n -= nb;
    if (n === 0) {
      if (nb === buf.length) {
        ++c;
        if (p.next) list.head = p.next;else list.head = list.tail = null;
      } else {
        list.head = p;
        p.data = buf.slice(nb);
      }
      break;
    }
    ++c;
  }
  list.length -= c;
  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    pna.nextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function indexOf(xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}
},{"process-nextick-args":"Yj0v","isarray":"upBv","events":"FRpO","./internal/streams/stream":"Q8A6","safe-buffer":"Wugr","core-util-is":"Q14w","inherits":"Bm0n","util":"rDCW","./internal/streams/BufferList":"Um5I","./internal/streams/destroy":"avqi","./_stream_duplex":"wldW","string_decoder/":"F7WD","process":"pBGv"}],"I3bg":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);

function afterTransform(er, data) {
  var ts = this._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb) {
    return this.emit('error', new Error('write callback called multiple times'));
  }

  ts.writechunk = null;
  ts.writecb = null;

  if (data != null) // single equals check for both `null` and `undefined`
    this.push(data);

  cb(er);

  var rs = this._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    this._read(rs.highWaterMark);
  }
}

function Transform(options) {
  if (!(this instanceof Transform)) return new Transform(options);

  Duplex.call(this, options);

  this._transformState = {
    afterTransform: afterTransform.bind(this),
    needTransform: false,
    transforming: false,
    writecb: null,
    writechunk: null,
    writeencoding: null
  };

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function') this._transform = options.transform;

    if (typeof options.flush === 'function') this._flush = options.flush;
  }

  // When the writable side finishes, then flush out anything remaining.
  this.on('prefinish', prefinish);
}

function prefinish() {
  var _this = this;

  if (typeof this._flush === 'function') {
    this._flush(function (er, data) {
      done(_this, er, data);
    });
  } else {
    done(this, null, null);
  }
}

Transform.prototype.push = function (chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function (chunk, encoding, cb) {
  throw new Error('_transform() is not implemented');
};

Transform.prototype._write = function (chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function (n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};

Transform.prototype._destroy = function (err, cb) {
  var _this2 = this;

  Duplex.prototype._destroy.call(this, err, function (err2) {
    cb(err2);
    _this2.emit('close');
  });
};

function done(stream, er, data) {
  if (er) return stream.emit('error', er);

  if (data != null) // single equals check for both `null` and `undefined`
    stream.push(data);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');

  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');

  return stream.push(null);
}
},{"./_stream_duplex":"wldW","core-util-is":"Q14w","inherits":"Bm0n"}],"kQBK":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough)) return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function (chunk, encoding, cb) {
  cb(null, chunk);
};
},{"./_stream_transform":"I3bg","core-util-is":"Q14w","inherits":"Bm0n"}],"uwsL":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_readable.js":"Ogwm","./lib/_stream_writable.js":"I0x5","./lib/_stream_duplex.js":"wldW","./lib/_stream_transform.js":"I3bg","./lib/_stream_passthrough.js":"kQBK"}],"GAH2":[function(require,module,exports) {
module.exports = require('./lib/_stream_writable.js');

},{"./lib/_stream_writable.js":"I0x5"}],"dMbb":[function(require,module,exports) {
module.exports = require('./lib/_stream_duplex.js');

},{"./lib/_stream_duplex.js":"wldW"}],"yG3q":[function(require,module,exports) {
module.exports = require('./readable').Transform

},{"./readable":"uwsL"}],"jlpe":[function(require,module,exports) {
module.exports = require('./readable').PassThrough

},{"./readable":"uwsL"}],"fnRj":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":"FRpO","inherits":"Bm0n","readable-stream/readable.js":"uwsL","readable-stream/writable.js":"GAH2","readable-stream/duplex.js":"dMbb","readable-stream/transform.js":"yG3q","readable-stream/passthrough.js":"jlpe"}],"vEEq":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('stream'),
    Writable = _require.Writable;
/**
 *
 * @param opts
 * @returns {TrainStream}
 * @constructor
 */


var TrainStream =
/*#__PURE__*/
function (_Writable) {
  _inherits(TrainStream, _Writable);

  function TrainStream(options) {
    var _this;

    _classCallCheck(this, TrainStream);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(TrainStream).call(this, {
      objectMode: true
    }));
    options = options || {}; // require the neuralNetwork

    if (!options.neuralNetwork) {
      throw new Error('no neural network specified');
    }

    var _options = options,
        neuralNetwork = _options.neuralNetwork;
    _this.neuralNetwork = neuralNetwork;
    _this.dataFormatDetermined = false;
    _this.i = 0; // keep track of internal iterations

    _this.size = 0;
    _this.count = 0;
    _this.sum = 0;
    _this.floodCallback = options.floodCallback;
    _this.doneTrainingCallback = options.doneTrainingCallback; // inherit trainOpts settings from neuralNetwork

    neuralNetwork.updateTrainingOptions(options);
    var trainOpts = neuralNetwork.trainOpts;
    _this.iterations = trainOpts.iterations;
    _this.errorThresh = trainOpts.errorThresh;
    _this.log = trainOpts.log;
    _this.logPeriod = trainOpts.logPeriod;
    _this.callbackPeriod = trainOpts.callbackPeriod;
    _this.callback = trainOpts.callback;

    _this.on('finish', _this.finishStreamIteration.bind(_assertThisInitialized(_this)));

    return _this;
  }

  _createClass(TrainStream, [{
    key: "endInputs",
    value: function endInputs() {
      this.write(false);
    }
    /**
     * _write expects data to be in the form of a datum. ie. {input: {a: 1 b: 0}, output: {z: 0}}
     * @param chunk
     * @param enc
     * @param next
     * @returns {*}
     * @private
     */

  }, {
    key: "_write",
    value: function _write(chunk, enc, next) {
      if (!chunk) {
        // check for the end of one iteration of the stream
        this.emit('finish');
        return next();
      }

      if (!this.dataFormatDetermined) {
        this.size++;
        this.neuralNetwork.addFormat(chunk);
        this.firstDatum = this.firstDatum || chunk;
        return next();
      }

      this.count++;
      var data = this.neuralNetwork.formatData(chunk);
      this.sum += this.neuralNetwork.trainPattern(data[0], true); // tell the Readable Stream that we are ready for more data

      next();
    }
    /**
     *
     * @returns {*}
     */

  }, {
    key: "finishStreamIteration",
    value: function finishStreamIteration() {
      if (this.dataFormatDetermined && this.size !== this.count) {
        this.log('This iteration\'s data length was different from the first.');
      }

      if (!this.dataFormatDetermined) {
        var data = this.neuralNetwork.formatData(this.firstDatum);
        this.neuralNetwork.verifyIsInitialized(data);
        this.dataFormatDetermined = true;

        if (typeof this.floodCallback === 'function') {
          this.floodCallback();
        }

        return;
      }

      var error = this.sum / this.size;

      if (this.log && this.i % this.logPeriod === 0) {
        this.log("iterations: ".concat(this.i, ", training error: ").concat(error));
      }

      if (this.callback && this.i % this.callbackPeriod === 0) {
        this.callback({
          error: error,
          iterations: this.i
        });
      }

      this.sum = 0;
      this.count = 0; // update the iterations

      this.i++; // do a check here to see if we need the stream again

      if (this.i < this.iterations && error > this.errorThresh) {
        if (typeof this.floodCallback === 'function') {
          return this.floodCallback();
        }
      } else {
        // done training
        if (typeof this.doneTrainingCallback === 'function') {
          return this.doneTrainingCallback({
            error: error,
            iterations: this.i
          });
        }
      }
    }
  }]);

  return TrainStream;
}(Writable);

module.exports = TrainStream;
},{"stream":"fnRj"}],"HBY8":[function(require,module,exports) {
/**
 *
 * @param values
 * @returns {*}
 */
module.exports = function toArray(values) {
  if (Array.isArray(values)) {
    return values;
  }

  return new Float32Array(Object.values(values));
};
},{}],"UFcl":[function(require,module,exports) {
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var toArray = require('./to-array');
/**
 *
 * @param values
 * @returns {number}
 */


module.exports = function max(values) {
  return Math.max.apply(Math, _toConsumableArray(toArray(values)));
};
},{"./to-array":"HBY8"}],"YGn7":[function(require,module,exports) {
module.exports = function mse(errors) {
  // mean squared error
  var sum = 0;

  for (var i = 0; i < errors.length; i++) {
    sum += Math.pow(errors[i], 2);
  }

  return sum / errors.length;
};
},{}],"YhH7":[function(require,module,exports) {
/**
 *
 * @param start
 * @param end
 * @returns {Array}
 */
module.exports = function range(start, end) {
  var result = [];

  for (; start < end; start++) {
    result.push(start);
  }

  return result;
};
},{}],"kAwF":[function(require,module,exports) {
function LookupTable(data, prop) {
  this.length = 0;

  if (prop) {
    this.prop = prop;
    var table = this.table = {};

    for (var i = 0; i < data.length; i++) {
      var datum = data[i];
      var object = datum[prop];

      for (var p in object) {
        if (table.hasOwnProperty(p)) continue;
        table[p] = this.length++;
      }
    }
  } else if (Array.isArray(data[0])) {
    var _table = this.table = {};

    for (var _i = 0; _i < data.length; _i++) {
      var array = data[_i];

      for (var j = 0; j < array.length; j++) {
        var _object = array[j];

        for (var _p in _object) {
          if (_table.hasOwnProperty(_p)) continue;
          _table[_p] = this.length++;
        }
      }
    }
  } else {
    var _table2 = this.table = {};

    for (var _i2 = 0; _i2 < data.length; _i2++) {
      var _object2 = data[_i2];

      for (var _p2 in _object2) {
        if (_table2.hasOwnProperty(_p2)) continue;
        _table2[_p2] = this.length++;
      }
    }
  }
}

module.exports = LookupTable;
},{}],"Z8Xv":[function(require,module,exports) {
function arraysToFloat32Arrays(arrays) {
  var result = [];

  for (var i = 0; i < arrays.length; i++) {
    result.push(Float32Array.from(arrays[i]));
  }

  return result;
}

function arrayToFloat32Arrays(array) {
  var result = [];

  for (var i = 0; i < array.length; i++) {
    result.push(Float32Array.from([array[i]]));
  }

  return result;
}

function arrayToFloat32Array(array) {
  return Float32Array.from(array);
}

function objectsToFloat32Arrays(objects, table, length) {
  var results = [];

  for (var i = 0; i < objects.length; i++) {
    var object = objects[i];
    var result = new Float32Array(length);

    for (var p in object) {
      if (object.hasOwnProperty(p)) {
        result[table[p]] = object[p];
      }
    }

    results.push(result);
  }

  return results;
}

function objectToFloat32Arrays(object) {
  var result = [];

  for (var p in object) {
    result.push(Float32Array.from([object[p]]));
  }

  return result;
}

function objectToFloat32Array(object, table, length) {
  var result = new Float32Array(length);

  for (var p in object) {
    if (object.hasOwnProperty(p)) {
      result[table[p]] = object[p];
    }
  }

  return result;
}

module.exports = {
  arraysToFloat32Arrays: arraysToFloat32Arrays,
  arrayToFloat32Arrays: arrayToFloat32Arrays,
  arrayToFloat32Array: arrayToFloat32Array,
  objectsToFloat32Arrays: objectsToFloat32Arrays,
  objectToFloat32Arrays: objectToFloat32Arrays,
  objectToFloat32Array: objectToFloat32Array
};
},{}],"epZU":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Thaw = require('thaw.js').default;

var lookup = require('./lookup');

var TrainStream = require('./train-stream');

var max = require('./utilities/max');

var mse = require('./utilities/mse');

var randos = require('./utilities/randos');

var range = require('./utilities/range');

var toArray = require('./utilities/to-array');

var zeros = require('./utilities/zeros');

var LookupTable = require('./utilities/lookup-table');

var _require = require('./utilities/cast'),
    arrayToFloat32Array = _require.arrayToFloat32Array;
/**
 * @param {object} options
 * @constructor
 */


var NeuralNetwork =
/*#__PURE__*/
function () {
  _createClass(NeuralNetwork, null, [{
    key: "trainDefaults",
    get: function get() {
      return {
        iterations: 20000,
        // the maximum times to iterate the training data
        errorThresh: 0.005,
        // the acceptable error percentage from training data
        log: false,
        // true to use console.log, when a function is supplied it is used
        logPeriod: 10,
        // iterations between logging out
        learningRate: 0.3,
        // multiply's against the input and the delta then adds to momentum
        momentum: 0.1,
        // multiply's against the specified "change" then adds to learning rate for change
        callback: null,
        // a periodic call back that can be triggered while training
        callbackPeriod: 10,
        // the number of iterations through the training data between callback calls
        timeout: Infinity,
        // the max number of milliseconds to train for
        praxis: null,
        beta1: 0.9,
        beta2: 0.999,
        epsilon: 1e-8
      };
    }
  }, {
    key: "defaults",
    get: function get() {
      return {
        leakyReluAlpha: 0.01,
        binaryThresh: 0.5,
        hiddenLayers: null,
        // array of ints for the sizes of the hidden layers in the network
        activation: 'sigmoid' // Supported activation types ['sigmoid', 'relu', 'leaky-relu', 'tanh']

      };
    }
  }]);

  function NeuralNetwork() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, NeuralNetwork);

    Object.assign(this, this.constructor.defaults, options);
    this.trainOpts = {};
    this.updateTrainingOptions(Object.assign({}, this.constructor.trainDefaults, options));
    this.sizes = null;
    this.outputLayer = null;
    this.biases = null; // weights for bias nodes

    this.weights = null;
    this.outputs = null; // state for training

    this.deltas = null;
    this.changes = null; // for momentum

    this.errors = null;
    this.errorCheckInterval = 1;

    if (!this.constructor.prototype.hasOwnProperty('runInput')) {
      this.runInput = null;
    }

    if (!this.constructor.prototype.hasOwnProperty('calculateDeltas')) {
      this.calculateDeltas = null;
    }

    this.inputLookup = null;
    this.inputLookupLength = null;
    this.outputLookup = null;
    this.outputLookupLength = null;

    if (options.inputSize && options.hiddenLayers && options.outputSize) {
      this.sizes = [options.inputSize].concat(options.hiddenLayers).concat([options.outputSize]);
    }
  }
  /**
   *
   * Expects this.sizes to have been set
   */


  _createClass(NeuralNetwork, [{
    key: "initialize",
    value: function initialize() {
      if (!this.sizes) throw new Error('Sizes must be set before initializing');
      this.outputLayer = this.sizes.length - 1;
      this.biases = []; // weights for bias nodes

      this.weights = [];
      this.outputs = []; // state for training

      this.deltas = [];
      this.changes = []; // for momentum

      this.errors = [];

      for (var layer = 0; layer <= this.outputLayer; layer++) {
        var size = this.sizes[layer];
        this.deltas[layer] = zeros(size);
        this.errors[layer] = zeros(size);
        this.outputs[layer] = zeros(size);

        if (layer > 0) {
          this.biases[layer] = randos(size);
          this.weights[layer] = new Array(size);
          this.changes[layer] = new Array(size);

          for (var node = 0; node < size; node++) {
            var prevSize = this.sizes[layer - 1];
            this.weights[layer][node] = randos(prevSize);
            this.changes[layer][node] = zeros(prevSize);
          }
        }
      }

      this.setActivation();

      if (this.trainOpts.praxis === 'adam') {
        this._setupAdam();
      }
    }
    /**
     *
     * @param activation supported inputs: 'sigmoid', 'relu', 'leaky-relu', 'tanh'
     */

  }, {
    key: "setActivation",
    value: function setActivation(activation) {
      this.activation = activation ? activation : this.activation;

      switch (this.activation) {
        case 'sigmoid':
          this.runInput = this.runInput || this._runInputSigmoid;
          this.calculateDeltas = this.calculateDeltas || this._calculateDeltasSigmoid;
          break;

        case 'relu':
          this.runInput = this.runInput || this._runInputRelu;
          this.calculateDeltas = this.calculateDeltas || this._calculateDeltasRelu;
          break;

        case 'leaky-relu':
          this.runInput = this.runInput || this._runInputLeakyRelu;
          this.calculateDeltas = this.calculateDeltas || this._calculateDeltasLeakyRelu;
          break;

        case 'tanh':
          this.runInput = this.runInput || this._runInputTanh;
          this.calculateDeltas = this.calculateDeltas || this._calculateDeltasTanh;
          break;

        default:
          throw new Error('unknown activation ' + this.activation + ', The activation should be one of [\'sigmoid\', \'relu\', \'leaky-relu\', \'tanh\']');
      }
    }
    /**
     *
     * @returns boolean
     */

  }, {
    key: "run",

    /**
     *
     * @param input
     * @returns {*}
     */
    value: function run(input) {
      if (!this.isRunnable) return null;

      if (this.inputLookup) {
        input = lookup.toArray(this.inputLookup, input, this.inputLookupLength);
      }

      var output = this.runInput(input).slice(0);

      if (this.outputLookup) {
        output = lookup.toObject(this.outputLookup, output);
      }

      return output;
    }
    /**
     * trains via sigmoid
     * @param input
     * @returns {*}
     */

  }, {
    key: "_runInputSigmoid",
    value: function _runInputSigmoid(input) {
      this.outputs[0] = input; // set output state of input layer

      var output = null;

      for (var layer = 1; layer <= this.outputLayer; layer++) {
        var activeLayer = this.sizes[layer];
        var activeWeights = this.weights[layer];
        var activeBiases = this.biases[layer];
        var activeOutputs = this.outputs[layer];

        for (var node = 0; node < activeLayer; node++) {
          var weights = activeWeights[node];
          var sum = activeBiases[node];

          for (var k = 0; k < weights.length; k++) {
            sum += weights[k] * input[k];
          } //sigmoid


          activeOutputs[node] = 1 / (1 + Math.exp(-sum));
        }

        output = input = this.outputs[layer];
      }

      return output;
    }
  }, {
    key: "_runInputRelu",
    value: function _runInputRelu(input) {
      this.outputs[0] = input; // set output state of input layer

      var output = null;

      for (var layer = 1; layer <= this.outputLayer; layer++) {
        var currentSize = this.sizes[layer];
        var currentWeights = this.weights[layer];
        var currentBiases = this.biases[layer];
        var currentOutputs = this.outputs[layer];

        for (var node = 0; node < currentSize; node++) {
          var weights = currentWeights[node];
          var sum = currentBiases[node];

          for (var k = 0; k < weights.length; k++) {
            sum += weights[k] * input[k];
          } //relu


          currentOutputs[node] = sum < 0 ? 0 : sum;
        }

        output = input = currentOutputs;
      }

      return output;
    }
  }, {
    key: "_runInputLeakyRelu",
    value: function _runInputLeakyRelu(input) {
      this.outputs[0] = input; // set output state of input layer

      var alpha = this.leakyReluAlpha;
      var output = null;

      for (var layer = 1; layer <= this.outputLayer; layer++) {
        var currentSize = this.sizes[layer];
        var currentWeights = this.weights[layer];
        var currentBiases = this.biases[layer];
        var currentOutputs = this.outputs[layer];

        for (var node = 0; node < currentSize; node++) {
          var weights = currentWeights[node];
          var sum = currentBiases[node];

          for (var k = 0; k < weights.length; k++) {
            sum += weights[k] * input[k];
          } //leaky relu


          currentOutputs[node] = sum < 0 ? 0 : alpha * sum;
        }

        output = input = currentOutputs;
      }

      return output;
    }
  }, {
    key: "_runInputTanh",
    value: function _runInputTanh(input) {
      this.outputs[0] = input; // set output state of input layer

      var output = null;

      for (var layer = 1; layer <= this.outputLayer; layer++) {
        var currentSize = this.sizes[layer];
        var currentWeights = this.weights[layer];
        var currentBiases = this.biases[layer];
        var currentOutputs = this.outputs[layer];

        for (var node = 0; node < currentSize; node++) {
          var weights = currentWeights[node];
          var sum = currentBiases[node];

          for (var k = 0; k < weights.length; k++) {
            sum += weights[k] * input[k];
          } //tanh


          currentOutputs[node] = Math.tanh(sum);
        }

        output = input = currentOutputs;
      }

      return output;
    }
    /**
     *
     * @param data
     * Verifies network sizes are initialized
     * If they are not it will initialize them based off the data set.
     */

  }, {
    key: "verifyIsInitialized",
    value: function verifyIsInitialized(data) {
      var _this = this;

      if (this.sizes) return;
      this.sizes = [];
      this.sizes.push(data[0].input.length);

      if (!this.hiddenLayers) {
        this.sizes.push(Math.max(3, Math.floor(data[0].input.length / 2)));
      } else {
        this.hiddenLayers.forEach(function (size) {
          _this.sizes.push(size);
        });
      }

      this.sizes.push(data[0].output.length);
      this.initialize();
    }
    /**
     *
     * @param options
     *    Supports all `trainDefaults` properties
     *    also supports:
     *       learningRate: (number),
     *       momentum: (number),
     *       activation: 'sigmoid', 'relu', 'leaky-relu', 'tanh'
     */

  }, {
    key: "updateTrainingOptions",
    value: function updateTrainingOptions(options) {
      var trainDefaults = this.constructor.trainDefaults;

      for (var p in trainDefaults) {
        if (!trainDefaults.hasOwnProperty(p)) continue;
        this.trainOpts[p] = options.hasOwnProperty(p) ? options[p] : trainDefaults[p];
      }

      this.validateTrainingOptions(this.trainOpts);
      this.setLogMethod(options.log || this.trainOpts.log);
      this.activation = options.activation || this.activation;
    }
    /**
     *
     * @param options
     */

  }, {
    key: "validateTrainingOptions",
    value: function validateTrainingOptions(options) {
      var validations = {
        iterations: function iterations(val) {
          return typeof val === 'number' && val > 0;
        },
        errorThresh: function errorThresh(val) {
          return typeof val === 'number' && val > 0 && val < 1;
        },
        log: function log(val) {
          return typeof val === 'function' || typeof val === 'boolean';
        },
        logPeriod: function logPeriod(val) {
          return typeof val === 'number' && val > 0;
        },
        learningRate: function learningRate(val) {
          return typeof val === 'number' && val > 0 && val < 1;
        },
        momentum: function momentum(val) {
          return typeof val === 'number' && val > 0 && val < 1;
        },
        callback: function callback(val) {
          return typeof val === 'function' || val === null;
        },
        callbackPeriod: function callbackPeriod(val) {
          return typeof val === 'number' && val > 0;
        },
        timeout: function timeout(val) {
          return typeof val === 'number' && val > 0;
        }
      };

      for (var p in validations) {
        if (!validations.hasOwnProperty(p)) continue;
        if (!options.hasOwnProperty(p)) continue;

        if (!validations[p](options[p])) {
          throw new Error("[".concat(p, ", ").concat(options[p], "] is out of normal training range, your network will probably not train."));
        }
      }
    }
    /**
     *
     *  Gets JSON of trainOpts object
     *    NOTE: Activation is stored directly on JSON object and not in the training options
     */

  }, {
    key: "getTrainOptsJSON",
    value: function getTrainOptsJSON() {
      var _this2 = this;

      return Object.keys(this.constructor.trainDefaults).reduce(function (opts, opt) {
        if (opt === 'timeout' && _this2.trainOpts[opt] === Infinity) return opts;
        if (opt === 'callback') return opts;
        if (_this2.trainOpts[opt]) opts[opt] = _this2.trainOpts[opt];
        if (opt === 'log') opts.log = typeof opts.log === 'function';
        return opts;
      }, {});
    }
    /**
     *
     * @param log
     * if a method is passed in method is used
     * if false passed in nothing is logged
     * @returns error
     */

  }, {
    key: "setLogMethod",
    value: function setLogMethod(log) {
      if (typeof log === 'function') {
        this.trainOpts.log = log;
      } else if (log) {
        this.trainOpts.log = this.logTrainingStatus;
      } else {
        this.trainOpts.log = false;
      }
    }
    /**
     *
     * @param status
     * log training status
     */

  }, {
    key: "logTrainingStatus",
    value: function logTrainingStatus(status) {
      console.log("iterations: ".concat(status.iterations, ", training error: ").concat(status.error));
    }
    /**
     *
     * @param data
     * @returns {Number} error
     */

  }, {
    key: "calculateTrainingError",
    value: function calculateTrainingError(data) {
      var sum = 0;

      for (var i = 0; i < data.length; ++i) {
        sum += this.trainPattern(data[i], true);
      }

      return sum / data.length;
    }
    /**
     * @param data
     */

  }, {
    key: "trainPatterns",
    value: function trainPatterns(data) {
      for (var i = 0; i < data.length; ++i) {
        this.trainPattern(data[i]);
      }
    }
    /**
     *
     * @param {object} data
     * @param {object} status { iterations: number, error: number }
     * @param endTime
     */

  }, {
    key: "trainingTick",
    value: function trainingTick(data, status, endTime) {
      var _this$trainOpts = this.trainOpts,
          callback = _this$trainOpts.callback,
          callbackPeriod = _this$trainOpts.callbackPeriod,
          errorThresh = _this$trainOpts.errorThresh,
          iterations = _this$trainOpts.iterations,
          log = _this$trainOpts.log,
          logPeriod = _this$trainOpts.logPeriod;

      if (status.iterations >= iterations || status.error <= errorThresh || Date.now() >= endTime) {
        return false;
      }

      status.iterations++;

      if (log && status.iterations % logPeriod === 0) {
        status.error = this.calculateTrainingError(data);
        log(status);
      } else {
        if (status.iterations % this.errorCheckInterval === 0) {
          status.error = this.calculateTrainingError(data);
        } else {
          this.trainPatterns(data);
        }
      }

      if (callback && status.iterations % callbackPeriod === 0) {
        callback({
          iterations: status.iterations,
          error: status.error
        });
      }

      return true;
    }
    /**
     *
     * @param data
     * @param options
     * @protected
     * @return {object} { data, status, endTime }
     */

  }, {
    key: "prepTraining",
    value: function prepTraining(data, options) {
      this.updateTrainingOptions(options);
      data = this.formatData(data);
      var endTime = Date.now() + this.trainOpts.timeout;
      var status = {
        error: 1,
        iterations: 0
      };
      this.verifyIsInitialized(data);
      return {
        data: data,
        status: status,
        endTime: endTime
      };
    }
    /**
     *
     * @param data
     * @param options
     * @returns {object} {error: number, iterations: number}
     */

  }, {
    key: "train",
    value: function train(data) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var status, endTime;

      var _this$prepTraining = this.prepTraining(data, options);

      data = _this$prepTraining.data;
      status = _this$prepTraining.status;
      endTime = _this$prepTraining.endTime;

      while (this.trainingTick(data, status, endTime)) {
        ;
      }

      return status;
    }
    /**
     *
     * @param data
     * @param options
     * @returns {Promise}
     * @resolves {{error: number, iterations: number}}
     * @rejects {{trainError: string, status: {error: number, iterations: number}}
     */

  }, {
    key: "trainAsync",
    value: function trainAsync(data) {
      var _this3 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var status, endTime;

      var _this$prepTraining2 = this.prepTraining(data, options);

      data = _this$prepTraining2.data;
      status = _this$prepTraining2.status;
      endTime = _this$prepTraining2.endTime;
      return new Promise(function (resolve, reject) {
        try {
          var thawedTrain = new Thaw(new Array(_this3.trainOpts.iterations), {
            delay: true,
            each: function each() {
              return _this3.trainingTick(data, status, endTime) || thawedTrain.stop();
            },
            done: function done() {
              return resolve(status);
            }
          });
          thawedTrain.tick();
        } catch (trainError) {
          reject({
            trainError: trainError,
            status: status
          });
        }
      });
    }
    /**
     *
     * @param {object} value
     * @param {boolean} [logErrorRate]
     */

  }, {
    key: "trainPattern",
    value: function trainPattern(value, logErrorRate) {
      // forward propagate
      this.runInput(value.input); // back propagate

      this.calculateDeltas(value.output);
      this.adjustWeights();

      if (logErrorRate) {
        return mse(this.errors[this.outputLayer]);
      } else {
        return null;
      }
    }
    /**
     *
     * @param target
     */

  }, {
    key: "_calculateDeltasSigmoid",
    value: function _calculateDeltasSigmoid(target) {
      for (var layer = this.outputLayer; layer >= 0; layer--) {
        var activeSize = this.sizes[layer];
        var activeOutput = this.outputs[layer];
        var activeError = this.errors[layer];
        var activeDeltas = this.deltas[layer];
        var nextLayer = this.weights[layer + 1];

        for (var node = 0; node < activeSize; node++) {
          var output = activeOutput[node];
          var error = 0;

          if (layer === this.outputLayer) {
            error = target[node] - output;
          } else {
            var deltas = this.deltas[layer + 1];

            for (var k = 0; k < deltas.length; k++) {
              error += deltas[k] * nextLayer[k][node];
            }
          }

          activeError[node] = error;
          activeDeltas[node] = error * output * (1 - output);
        }
      }
    }
    /**
     *
     * @param target
     */

  }, {
    key: "_calculateDeltasRelu",
    value: function _calculateDeltasRelu(target) {
      for (var layer = this.outputLayer; layer >= 0; layer--) {
        var currentSize = this.sizes[layer];
        var currentOutputs = this.outputs[layer];
        var nextWeights = this.weights[layer + 1];
        var nextDeltas = this.deltas[layer + 1];
        var currentErrors = this.errors[layer];
        var currentDeltas = this.deltas[layer];

        for (var node = 0; node < currentSize; node++) {
          var output = currentOutputs[node];
          var error = 0;

          if (layer === this.outputLayer) {
            error = target[node] - output;
          } else {
            for (var k = 0; k < nextDeltas.length; k++) {
              error += nextDeltas[k] * nextWeights[k][node];
            }
          }

          currentErrors[node] = error;
          currentDeltas[node] = output > 0 ? error : 0;
        }
      }
    }
    /**
     *
     * @param target
     */

  }, {
    key: "_calculateDeltasLeakyRelu",
    value: function _calculateDeltasLeakyRelu(target) {
      var alpha = this.leakyReluAlpha;

      for (var layer = this.outputLayer; layer >= 0; layer--) {
        var currentSize = this.sizes[layer];
        var currentOutputs = this.outputs[layer];
        var nextDeltas = this.deltas[layer + 1];
        var nextWeights = this.weights[layer + 1];
        var currentErrors = this.errors[layer];
        var currentDeltas = this.deltas[layer];

        for (var node = 0; node < currentSize; node++) {
          var output = currentOutputs[node];
          var error = 0;

          if (layer === this.outputLayer) {
            error = target[node] - output;
          } else {
            for (var k = 0; k < nextDeltas.length; k++) {
              error += nextDeltas[k] * nextWeights[k][node];
            }
          }

          currentErrors[node] = error;
          currentDeltas[node] = output > 0 ? error : alpha * error;
        }
      }
    }
    /**
     *
     * @param target
     */

  }, {
    key: "_calculateDeltasTanh",
    value: function _calculateDeltasTanh(target) {
      for (var layer = this.outputLayer; layer >= 0; layer--) {
        var currentSize = this.sizes[layer];
        var currentOutputs = this.outputs[layer];
        var nextDeltas = this.deltas[layer + 1];
        var nextWeights = this.weights[layer + 1];
        var currentErrors = this.errors[layer];
        var currentDeltas = this.deltas[layer];

        for (var node = 0; node < currentSize; node++) {
          var output = currentOutputs[node];
          var error = 0;

          if (layer === this.outputLayer) {
            error = target[node] - output;
          } else {
            for (var k = 0; k < nextDeltas.length; k++) {
              error += nextDeltas[k] * nextWeights[k][node];
            }
          }

          currentErrors[node] = error;
          currentDeltas[node] = (1 - output * output) * error;
        }
      }
    }
    /**
     *
     * Changes weights of networks
     */

  }, {
    key: "adjustWeights",
    value: function adjustWeights() {
      var _this$trainOpts2 = this.trainOpts,
          learningRate = _this$trainOpts2.learningRate,
          momentum = _this$trainOpts2.momentum;

      for (var layer = 1; layer <= this.outputLayer; layer++) {
        var incoming = this.outputs[layer - 1];
        var activeSize = this.sizes[layer];
        var activeDelta = this.deltas[layer];
        var activeChanges = this.changes[layer];
        var activeWeights = this.weights[layer];
        var activeBiases = this.biases[layer];

        for (var node = 0; node < activeSize; node++) {
          var delta = activeDelta[node];

          for (var k = 0; k < incoming.length; k++) {
            var change = activeChanges[node][k];
            change = learningRate * delta * incoming[k] + momentum * change;
            activeChanges[node][k] = change;
            activeWeights[node][k] += change;
          }

          activeBiases[node] += learningRate * delta;
        }
      }
    }
  }, {
    key: "_setupAdam",
    value: function _setupAdam() {
      this.biasChangesLow = [];
      this.biasChangesHigh = [];
      this.changesLow = [];
      this.changesHigh = [];
      this.iterations = 0;

      for (var layer = 0; layer <= this.outputLayer; layer++) {
        var size = this.sizes[layer];

        if (layer > 0) {
          this.biasChangesLow[layer] = zeros(size);
          this.biasChangesHigh[layer] = zeros(size);
          this.changesLow[layer] = new Array(size);
          this.changesHigh[layer] = new Array(size);

          for (var node = 0; node < size; node++) {
            var prevSize = this.sizes[layer - 1];
            this.changesLow[layer][node] = zeros(prevSize);
            this.changesHigh[layer][node] = zeros(prevSize);
          }
        }
      }

      this.adjustWeights = this._adjustWeightsAdam;
    }
  }, {
    key: "_adjustWeightsAdam",
    value: function _adjustWeightsAdam() {
      this.iterations++;
      var iterations = this.iterations;
      var _this$trainOpts3 = this.trainOpts,
          beta1 = _this$trainOpts3.beta1,
          beta2 = _this$trainOpts3.beta2,
          epsilon = _this$trainOpts3.epsilon,
          learningRate = _this$trainOpts3.learningRate;

      for (var layer = 1; layer <= this.outputLayer; layer++) {
        var incoming = this.outputs[layer - 1];
        var currentSize = this.sizes[layer];
        var currentDeltas = this.deltas[layer];
        var currentChangesLow = this.changesLow[layer];
        var currentChangesHigh = this.changesHigh[layer];
        var currentWeights = this.weights[layer];
        var currentBiases = this.biases[layer];
        var currentBiasChangesLow = this.biasChangesLow[layer];
        var currentBiasChangesHigh = this.biasChangesHigh[layer];

        for (var node = 0; node < currentSize; node++) {
          var delta = currentDeltas[node];

          for (var k = 0; k < incoming.length; k++) {
            var gradient = delta * incoming[k];
            var changeLow = currentChangesLow[node][k] * beta1 + (1 - beta1) * gradient;
            var changeHigh = currentChangesHigh[node][k] * beta2 + (1 - beta2) * gradient * gradient;
            var momentumCorrection = changeLow / (1 - Math.pow(beta1, iterations));
            var gradientCorrection = changeHigh / (1 - Math.pow(beta2, iterations));
            currentChangesLow[node][k] = changeLow;
            currentChangesHigh[node][k] = changeHigh;
            currentWeights[node][k] += learningRate * momentumCorrection / (Math.sqrt(gradientCorrection) + epsilon);
          }

          var biasGradient = currentDeltas[node];
          var biasChangeLow = currentBiasChangesLow[node] * beta1 + (1 - beta1) * biasGradient;
          var biasChangeHigh = currentBiasChangesHigh[node] * beta2 + (1 - beta2) * biasGradient * biasGradient;
          var biasMomentumCorrection = currentBiasChangesLow[node] / (1 - Math.pow(beta1, iterations));
          var biasGradientCorrection = currentBiasChangesHigh[node] / (1 - Math.pow(beta2, iterations));
          currentBiasChangesLow[node] = biasChangeLow;
          currentBiasChangesHigh[node] = biasChangeHigh;
          currentBiases[node] += learningRate * biasMomentumCorrection / (Math.sqrt(biasGradientCorrection) + epsilon);
        }
      }
    }
    /**
     *
     * @param data
     * @returns {*}
     */

  }, {
    key: "formatData",
    value: function formatData(data) {
      if (!Array.isArray(data)) {
        // turn stream datum into array
        data = [data];
      }

      if (!Array.isArray(data[0].input)) {
        if (this.inputLookup) {
          this.inputLookupLength = Object.keys(this.inputLookup).length;
        } else {
          var inputLookup = new LookupTable(data, 'input');
          this.inputLookup = inputLookup.table;
          this.inputLookupLength = inputLookup.length;
        }
      }

      if (!Array.isArray(data[0].output)) {
        if (this.outputLookup) {
          this.outputLookupLength = Object.keys(this.outputLookup).length;
        } else {
          var _lookup = new LookupTable(data, 'output');

          this.outputLookup = _lookup.table;
          this.outputLookupLength = _lookup.length;
        }
      }

      if (typeof this._formatInput === 'undefined') {
        this._formatInput = getTypedArrayFn(data[0].input, this.inputLookup);
        this._formatOutput = getTypedArrayFn(data[0].output, this.outputLookup);
      } // turn sparse hash input into arrays with 0s as filler


      if (this._formatInput && this._formatOutput) {
        var result = [];

        for (var i = 0; i < data.length; i++) {
          result.push({
            input: this._formatInput(data[i].input),
            output: this._formatOutput(data[i].output)
          });
        }

        return result;
      } else if (this._formatInput) {
        var _result = [];

        for (var _i = 0; _i < data.length; _i++) {
          _result.push({
            input: this._formatInput(data[_i].input),
            output: data[_i].output
          });
        }

        return _result;
      } else if (this._formatOutput) {
        var _result2 = [];

        for (var _i2 = 0; _i2 < data.length; _i2++) {
          _result2.push({
            input: data[_i2].input,
            output: this._formatOutput(data[_i2].output)
          });
        }

        return _result2;
      }

      return data;
    }
  }, {
    key: "addFormat",
    value: function addFormat(data) {
      this.inputLookup = lookup.addKeys(data.input, this.inputLookup);

      if (this.inputLookup) {
        this.inputLookupLength = Object.keys(this.inputLookup).length;
      }

      this.outputLookup = lookup.addKeys(data.output, this.outputLookup);

      if (this.outputLookup) {
        this.outputLookupLength = Object.keys(this.outputLookup).length;
      }
    }
    /**
     *
     * @param data
     * @returns {
     *  {
     *    error: number,
     *    misclasses: Array,
     *  }
     * }
     */

  }, {
    key: "test",
    value: function test(data) {
      var _this4 = this;

      data = this.formatData(data); // for binary classification problems with one output node

      var isBinary = data[0].output.length === 1; // for classification problems

      var misclasses = []; // run each pattern through the trained network and collect
      // error and misclassification statistics

      var errorSum = 0;

      if (isBinary) {
        var falsePos = 0;
        var falseNeg = 0;
        var truePos = 0;
        var trueNeg = 0;

        var _loop = function _loop(i) {
          var output = _this4.runInput(data[i].input);

          var target = data[i].output;
          var actual = output[0] > _this4.binaryThresh ? 1 : 0;
          var expected = target[0];

          if (actual !== expected) {
            var misclass = data[i];
            misclasses.push({
              input: misclass.input,
              output: misclass.output,
              actual: actual,
              expected: expected
            });
          }

          if (actual === 0 && expected === 0) {
            trueNeg++;
          } else if (actual === 1 && expected === 1) {
            truePos++;
          } else if (actual === 0 && expected === 1) {
            falseNeg++;
          } else if (actual === 1 && expected === 0) {
            falsePos++;
          }

          errorSum += mse(output.map(function (value, i) {
            return target[i] - value;
          }));
        };

        for (var i = 0; i < data.length; i++) {
          _loop(i);
        }

        return {
          error: errorSum / data.length,
          misclasses: misclasses,
          total: data.length,
          trueNeg: trueNeg,
          truePos: truePos,
          falseNeg: falseNeg,
          falsePos: falsePos,
          precision: truePos > 0 ? truePos / (truePos + falsePos) : 0,
          recall: truePos > 0 ? truePos / (truePos + falseNeg) : 0,
          accuracy: (trueNeg + truePos) / data.length
        };
      }

      var _loop2 = function _loop2(_i3) {
        var output = _this4.runInput(data[_i3].input);

        var target = data[_i3].output;
        var actual = output.indexOf(max(output));
        var expected = target.indexOf(max(target));

        if (actual !== expected) {
          var misclass = data[_i3];
          misclasses.push({
            input: misclass.input,
            output: misclass.output,
            actual: actual,
            expected: expected
          });
        }

        errorSum += mse(output.map(function (value, i) {
          return target[i] - value;
        }));
      };

      for (var _i3 = 0; _i3 < data.length; _i3++) {
        _loop2(_i3);
      }

      return {
        error: errorSum / data.length,
        misclasses: misclasses,
        total: data.length
      };
    }
    /**
     *
     * @returns
     *  {
     *    layers: [
     *      {
     *        x: {},
     *        y: {}
     *      },
     *      {
     *        '0': {
     *          bias: -0.98771313,
     *          weights: {
     *            x: 0.8374838,
     *            y: 1.245858
     *          },
     *        '1': {
     *          bias: 3.48192004,
     *          weights: {
     *            x: 1.7825821,
     *            y: -2.67899
     *          }
     *        }
     *      },
     *      {
     *        f: {
     *          bias: 0.27205739,
     *          weights: {
     *            '0': 1.3161821,
     *            '1': 2.00436
     *          }
     *        }
     *      }
     *    ]
     *  }
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      if (this.sizes === null) {
        this.initialize();
      }

      var layers = [];

      for (var layer = 0; layer <= this.outputLayer; layer++) {
        layers[layer] = {};
        var nodes = void 0; // turn any internal arrays back into hashes for readable json

        if (layer === 0 && this.inputLookup) {
          nodes = Object.keys(this.inputLookup);
        } else if (this.outputLookup && layer === this.outputLayer) {
          nodes = Object.keys(this.outputLookup);
        } else {
          nodes = range(0, this.sizes[layer]);
        }

        for (var j = 0; j < nodes.length; j++) {
          var node = nodes[j];
          layers[layer][node] = {};

          if (layer > 0) {
            layers[layer][node].bias = this.biases[layer][j];
            layers[layer][node].weights = {};

            for (var k in layers[layer - 1]) {
              var index = k;

              if (layer === 1 && this.inputLookup) {
                index = this.inputLookup[k];
              }

              layers[layer][node].weights[k] = this.weights[layer][j][index];
            }
          }
        }
      }

      return {
        sizes: this.sizes.slice(0),
        layers: layers,
        outputLookup: this.outputLookup !== null,
        inputLookup: this.inputLookup !== null,
        activation: this.activation,
        trainOpts: this.getTrainOptsJSON()
      };
    }
    /**
     *
     * @param json
     * @returns {NeuralNetwork}
     */

  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      Object.assign(this, this.constructor.defaults, json);
      this.sizes = json.sizes;
      this.initialize();

      for (var i = 0; i <= this.outputLayer; i++) {
        var layer = json.layers[i];

        if (i === 0 && (!layer[0] || json.inputLookup)) {
          this.inputLookup = lookup.toHash(layer);
          this.inputLookupLength = Object.keys(this.inputLookup).length;
        } else if (i === this.outputLayer && (!layer[0] || json.outputLookup)) {
          this.outputLookup = lookup.toHash(layer);
        }

        if (i > 0) {
          var nodes = Object.keys(layer);
          this.sizes[i] = nodes.length;

          for (var j in nodes) {
            if (nodes.hasOwnProperty(j)) {
              var node = nodes[j];
              this.biases[i][j] = layer[node].bias;
              this.weights[i][j] = toArray(layer[node].weights);
            }
          }
        }
      }

      if (json.hasOwnProperty('trainOpts')) {
        this.updateTrainingOptions(json.trainOpts);
      }

      return this;
    }
    /**
     * @param {Function} [cb]
     * @returns {Function}
     */

  }, {
    key: "toFunction",
    value: function toFunction(cb) {
      var activation = this.activation;
      var leakyReluAlpha = this.leakyReluAlpha;
      var needsVar = false;

      function nodeHandle(layers, layerNumber, nodeKey) {
        if (layerNumber === 0) {
          return typeof nodeKey === 'string' ? "(input['".concat(nodeKey, "']||0)") : "(input[".concat(nodeKey, "]||0)");
        }

        var layer = layers[layerNumber];
        var node = layer[nodeKey];
        var result = ['(', node.bias];

        for (var w in node.weights) {
          if (node.weights[w] < 0) {
            result.push("".concat(node.weights[w], "*").concat(nodeHandle(layers, layerNumber - 1, w)));
          } else {
            result.push("+".concat(node.weights[w], "*").concat(nodeHandle(layers, layerNumber - 1, w)));
          }
        }

        result.push(')');

        switch (activation) {
          case 'sigmoid':
            return "1/(1+1/Math.exp(".concat(result.join(''), "))");

          case 'relu':
            {
              needsVar = true;
              return "((v=".concat(result.join(''), ")<0?0:v)");
            }

          case 'leaky-relu':
            {
              needsVar = true;
              return "((v=".concat(result.join(''), ")<0?0:").concat(leakyReluAlpha, "*v)");
            }

          case 'tanh':
            return "Math.tanh(".concat(result.join(''), ")");

          default:
            throw new Error("unknown activation type ".concat(activation));
        }
      }

      var layers = this.toJSON().layers;
      var layersAsMath = [];
      var result;

      for (var i in layers[layers.length - 1]) {
        layersAsMath.push(nodeHandle(layers, layers.length - 1, i));
      }

      if (this.outputLookup) {
        result = "{".concat(Object.keys(this.outputLookup).map(function (key, i) {
          return "'".concat(key, "':").concat(layersAsMath[i]);
        }), "}");
      } else {
        result = "[".concat(layersAsMath.join(','), "]");
      }

      var source = "".concat(needsVar ? 'var v;' : '', "return ").concat(result, ";");
      return new Function('input', cb ? cb(source) : source);
    }
  }, {
    key: "isRunnable",
    get: function get() {
      var _this5 = this;

      if (!this.runInput) {
        console.error('Activation function has not been initialized, did you run train()?');
        return false;
      }

      var checkFns = ['sizes', 'outputLayer', 'biases', 'weights', 'outputs', 'deltas', 'changes', 'errors'].filter(function (c) {
        return _this5[c] === null;
      });

      if (checkFns.length > 0) {
        console.error("Some settings have not been initialized correctly, did you run train()? Found issues with: ".concat(checkFns.join(', ')));
        return false;
      }

      return true;
    }
  }]);

  return NeuralNetwork;
}();

function getTypedArrayFn(value, table) {
  if (value.buffer instanceof ArrayBuffer) {
    return null;
  } else if (Array.isArray(value)) {
    return arrayToFloat32Array;
  } else {
    var length = Object.keys(table).length;
    return function (v) {
      var array = new Float32Array(length);

      for (var p in table) {
        array[table[p]] = v[p] || 0;
      }

      return array;
    };
  }
}

module.exports = NeuralNetwork;
},{"thaw.js":"AZLi","./lookup":"Q1a6","./train-stream":"vEEq","./utilities/max":"UFcl","./utilities/mse":"YGn7","./utilities/randos":"S8tM","./utilities/range":"YhH7","./utilities/to-array":"HBY8","./utilities/zeros":"M4LY","./utilities/lookup-table":"kAwF","./utilities/cast":"Z8Xv"}],"trgF":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('gpu.js'),
    GPU = _require.GPU,
    alias = _require.alias,
    gpuUtils = _require.utils;

var NeuralNetwork = require('./neural-network');

var lookup = require('./lookup');

var _require2 = require('./utilities/kernel'),
    release = _require2.release;

function weightedSumSigmoid(weights, biases, inputs) {
  var sum = biases[this.thread.x];

  for (var k = 0; k < this.constants.size; k++) {
    sum += weights[this.thread.x][k] * inputs[k];
  } // sigmoid


  return 1 / (1 + Math.exp(-sum));
}

function weightedSumRelu(weights, biases, inputs) {
  var sum = biases[this.thread.x];

  for (var k = 0; k < this.constants.size; k++) {
    sum += weights[this.thread.x][k] * inputs[k];
  } // relu


  return sum < 0 ? 0 : sum;
}

function weightedSumLeakyRelu(weights, biases, inputs) {
  var sum = biases[this.thread.x];

  for (var k = 0; k < this.constants.size; k++) {
    sum += weights[this.thread.x][k] * inputs[k];
  } // leaky relu


  return sum < 0 ? 0 : 0.01 * sum;
}

function weightedSumTanh(weights, biases, inputs) {
  var sum = biases[this.thread.x];

  for (var k = 0; k < this.constants.size; k++) {
    sum += weights[this.thread.x][k] * inputs[k];
  } // tanh


  return Math.tanh(sum);
}

function calcErrorOutput(output, targets) {
  return targets[this.thread.x] - output;
}

function calcDeltasSigmoid(error, output) {
  // sigmoid derivative
  return error * output * (1 - output);
}

function calcDeltasRelu(error, output) {
  // relu derivative
  return output > 0 ? error : 0;
}

function calcDeltasLeakyRelu(error, output) {
  // leaky relu derivative
  return output > 0 ? error : 0.01 * error;
}

function calcDeltasTanh(error, output) {
  // tanh derivative
  return (1 - output * output) * error;
}

function calcError(nextWeights, nextDeltas) {
  var error = 0;

  for (var k = 0; k < this.constants.size; k++) {
    error += nextDeltas[k] * nextWeights[k][this.thread.x];
  }

  return error;
}

function calcChanges(previousChanges, deltas, previousOutputs) {
  return this.constants.learningRate * deltas[this.thread.y] * previousOutputs[this.thread.x] + this.constants.momentum * previousChanges[this.thread.y][this.thread.x];
}

function addWeights(change, weights) {
  return change + weights[this.thread.y][this.thread.x];
}

function addBiases(biases, deltas) {
  return biases[this.thread.x] + deltas[this.thread.x] * this.constants.learningRate;
} // mean squared error, reimplemented for GPU


function mse(errors) {
  var sum = 0;

  for (var i = 0; i < this.constants.size; i++) {
    sum += Math.pow(errors[i], 2);
  }

  return sum / this.constants.size;
}
/**
 *
 * @param {object} options
 * @constructor
 */


var NeuralNetworkGPU =
/*#__PURE__*/
function (_NeuralNetwork) {
  _inherits(NeuralNetworkGPU, _NeuralNetwork);

  function NeuralNetworkGPU() {
    var _this;

    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, NeuralNetworkGPU);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(NeuralNetworkGPU).call(this, options));
    _this.forwardPropagate = [];
    _this.backwardPropagate = [];
    _this.changesPropagate = [];
    _this.biasesPropagate = [];
    _this.errorCheckInterval = 100;
    _this.gpu = new GPU({
      mode: options.mode
    });
    return _this;
  }
  /**
   *
   */


  _createClass(NeuralNetworkGPU, [{
    key: "initialize",
    value: function initialize() {
      _get(_getPrototypeOf(NeuralNetworkGPU.prototype), "initialize", this).call(this);

      this.buildRunInput();
      this.buildCalculateDeltas();
      this.buildGetChanges();
      this.buildChangeBiases();
      this.buildGetMSE();
    }
  }, {
    key: "setActivation",
    value: function setActivation() {
      return;
      throw new Error("".concat(this.constructor.name, "-setActivation is not yet implemented"));
    }
    /**
     *
     * @param value
     * @param logErrorRate
     */

  }, {
    key: "trainPattern",
    value: function trainPattern(value, logErrorRate) {
      // forward propagate
      this.runInput(value.input); // back propagate

      this.calculateDeltas(value.output);
      this.adjustWeights();

      if (logErrorRate) {
        return this.getMSE(this.errors[this.outputLayer]);
      } else {
        return null;
      }
    }
  }, {
    key: "calculateTrainingError",
    value: function calculateTrainingError(data) {
      var sum = new Float32Array([0]);

      for (var i = 0; i < data.length; ++i) {
        var prevSum = sum;
        var error = this.trainPattern(data[i], true);
        sum = this._addMSE(sum, error);
        release(error);
        release(prevSum);
      }

      var result = this._divideMSESum(data.length, sum)[0];

      release(sum);
      return result;
    }
  }, {
    key: "adjustWeights",
    value: function adjustWeights() {
      this.getChanges();
      this.changeBiases();
    }
  }, {
    key: "buildRunInput",
    value: function buildRunInput() {
      var weightedSum = null;

      switch (this.activation) {
        case 'sigmoid':
          weightedSum = weightedSumSigmoid;
          break;

        case 'relu':
          weightedSum = weightedSumRelu;
          break;

        case 'leaky-relu':
          weightedSum = weightedSumLeakyRelu;
          break;

        case 'tanh':
          weightedSum = weightedSumTanh;
          break;

        default:
          throw new Error("unknown activation ".concat(this.activation));
      }

      for (var layer = 1; layer <= this.outputLayer; layer++) {
        this.forwardPropagate[layer] = this.gpu.createKernel(weightedSum, {
          output: [this.sizes[layer]],
          pipeline: true,
          constants: {
            size: this.sizes[layer - 1]
          }
        });
      }

      this.texturizeInputData = this.gpu.createKernel(function (value) {
        return value[this.thread.x];
      }, {
        output: [this.sizes[1]],
        pipeline: true
      });
    }
    /**
     *
     * @param input
     * @returns {*}
     */

  }, {
    key: "runInput",
    value: function runInput(input) {
      var output;
      this.outputs[0] = input;

      for (var layer = 1; layer <= this.outputLayer; layer++) {
        release(this.outputs[layer]);
        this.outputs[layer] = this.forwardPropagate[layer](this.weights[layer], this.biases[layer], input);
        output = input = this.outputs[layer];
      }

      return output;
    }
  }, {
    key: "buildCalculateDeltas",
    value: function buildCalculateDeltas() {
      var calcDeltas = null;

      switch (this.activation) {
        case 'sigmoid':
          calcDeltas = calcDeltasSigmoid;
          break;

        case 'relu':
          calcDeltas = calcDeltasRelu;
          break;

        case 'leaky-relu':
          calcDeltas = calcDeltasLeakyRelu;
          break;

        case 'tanh':
          calcDeltas = calcDeltasTanh;
          break;

        default:
          throw new Error("unknown activation ".concat(this.activation));
      }

      calcDeltas = alias(gpuUtils.getMinifySafeName(function () {
        return calcDeltas;
      }), calcDeltas);
      this.gpu.addFunction(calcDeltas);

      for (var layer = this.outputLayer; layer > 0; layer--) {
        if (layer === this.outputLayer) {
          this.backwardPropagate[this.outputLayer] = this.gpu.createKernelMap({
            error: calcErrorOutput
          }, function (outputs, targets) {
            var output = outputs[this.thread.x];
            return calcDeltas(calcErrorOutput(output, targets), output);
          }, {
            output: [this.sizes[this.outputLayer]],
            pipeline: true
          });
        } else {
          this.backwardPropagate[layer] = this.gpu.createKernelMap({
            error: calcError
          }, function (nextWeights, outputs, nextDeltas) {
            var output = outputs[this.thread.x];
            return calcDeltas(calcError(nextWeights, nextDeltas), output);
          }, {
            output: [this.sizes[layer]],
            pipeline: true,
            constants: {
              size: this.deltas[layer + 1].length
            }
          });
        }
      }
    }
  }, {
    key: "calculateDeltas",
    value: function calculateDeltas(target) {
      for (var layer = this.outputLayer; layer > 0; layer--) {
        var output = void 0;
        release(this.deltas[layer]);
        release(this.errors[layer]);

        if (layer === this.outputLayer) {
          output = this.backwardPropagate[layer](this.outputs[layer], target);
        } else {
          output = this.backwardPropagate[layer](this.weights[layer + 1], this.outputs[layer], this.deltas[layer + 1]);
        }

        this.deltas[layer] = output.result;
        this.errors[layer] = output.error;
      }
    }
  }, {
    key: "buildGetChanges",
    value: function buildGetChanges() {
      for (var layer = 1; layer <= this.outputLayer; layer++) {
        this.changesPropagate[layer] = this.gpu.createKernelMap({
          weights: addWeights,
          changes: calcChanges
        }, function (previousOutputs, deltas, weights, changes) {
          var change = calcChanges(changes, deltas, previousOutputs);
          return addWeights(change, weights);
        }, {
          output: [this.sizes[layer - 1], this.sizes[layer]],
          pipeline: true,
          constants: {
            size: this.outputs[layer - 1].length,
            learningRate: this.trainOpts.learningRate,
            momentum: this.trainOpts.momentum
          }
        });
      }
    }
  }, {
    key: "getChanges",
    value: function getChanges() {
      for (var layer = 1; layer <= this.outputLayer; layer++) {
        var weights = this.weights[layer];
        var changes = this.changes[layer];
        var output = this.changesPropagate[layer](this.outputs[layer - 1], this.deltas[layer], weights, changes);
        release(weights);
        release(changes);
        this.weights[layer] = output.weights;
        this.changes[layer] = output.changes;
        release(output.result);
      }
    }
  }, {
    key: "buildChangeBiases",
    value: function buildChangeBiases() {
      for (var layer = 1; layer <= this.outputLayer; layer++) {
        this.biasesPropagate[layer] = this.gpu.createKernel(addBiases, {
          output: [this.sizes[layer]],
          pipeline: true,
          constants: {
            learningRate: this.trainOpts.learningRate
          }
        });
      }
    }
  }, {
    key: "changeBiases",
    value: function changeBiases() {
      for (var layer = 1; layer <= this.outputLayer; layer++) {
        var biases = this.biases[layer];
        this.biases[layer] = this.biasesPropagate[layer](biases, this.deltas[layer]);
        release(biases);
      }
    }
  }, {
    key: "buildGetMSE",
    value: function buildGetMSE() {
      this.getMSE = this.gpu.createKernel(mse, {
        output: [1],
        constants: {
          size: this.sizes[this.outputLayer]
        },
        pipeline: true
      });
      this._addMSE = this.gpu.createKernel(function (value1, value2) {
        return value1[0] + value2[0];
      }, {
        output: [1],
        pipeline: true
      });
      this._divideMSESum = this.gpu.createKernel(function (length, mseSum) {
        var value = mseSum[0];

        if (value > 0) {
          return value / length;
        }

        return 0;
      }, {
        output: [1]
      });
    }
    /**
     *
     * @param input
     * @returns {*}
     */

  }, {
    key: "run",
    value: function run(input) {
      if (!this.isRunnable) return null;

      if (this.inputLookup) {
        input = lookup.toArray(this.inputLookup, input, this.inputLookupLength);
      }

      var inputTexture = this.texturizeInputData(input);
      var outputTextures = this.runInput(inputTexture);
      var output = outputTextures.toArray ? outputTextures.toArray() : outputTextures;

      if (this.outputLookup) {
        output = lookup.toObject(this.outputLookup, output);
      }

      return output;
    }
    /**
     *
     * @param data
     * @param options
     * @protected
     * @return { data, status, endTime }
     */

  }, {
    key: "prepTraining",
    value: function prepTraining(data, options) {
      var _this2 = this;

      this.updateTrainingOptions(options);
      data = this.formatData(data);
      var endTime = Date.now() + this.trainOpts.timeout;
      var status = {
        error: 1,
        iterations: 0
      };
      this.verifyIsInitialized(data);
      var texturizeOutputData = this.gpu.createKernel(function (value) {
        return value[this.thread.x];
      }, {
        output: [data[0].output.length],
        pipeline: true
      });
      return {
        data: data.map(function (set) {
          return {
            input: _this2.texturizeInputData(set.input),
            output: texturizeOutputData(set.output)
          };
        }),
        status: status,
        endTime: endTime
      };
    }
  }, {
    key: "toFunction",
    value: function toFunction() {
      throw new Error("".concat(this.constructor.name, "-toFunction is not yet implemented"));
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var _this3 = this;

      if (!this.weights[1].toArray) {
        // in fallback mode
        return _get(_getPrototypeOf(NeuralNetworkGPU.prototype), "toJSON", this).call(this);
      } // in GPU mode


      var weights = [];
      var biases = [];

      for (var layer = 1; layer <= this.outputLayer; layer++) {
        weights[layer] = Array.from(this.weights[layer].toArray());
        biases[layer] = Array.from(this.biases[layer].toArray());
      } // pseudo lo-fi decorator


      return NeuralNetwork.prototype.toJSON.call({
        activation: this.activation,
        inputLookup: this.inputLookup,
        outputLookup: this.outputLookup,
        outputLayer: this.outputLayer,
        sizes: this.sizes,
        getTrainOptsJSON: function getTrainOptsJSON() {
          return _this3.getTrainOptsJSON();
        },
        weights: weights,
        biases: biases
      });
    }
  }]);

  return NeuralNetworkGPU;
}(NeuralNetwork);

module.exports = NeuralNetworkGPU;
},{"gpu.js":"GwyX","./neural-network":"epZU","./lookup":"Q1a6","./utilities/kernel":"L30b"}],"sLgS":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Internal = _require.Internal;

var zeros2D = require('../utilities/zeros-2d');

var _require2 = require('../utilities/kernel'),
    release = _require2.release;

var RecurrentConnection =
/*#__PURE__*/
function (_Internal) {
  _inherits(RecurrentConnection, _Internal);

  function RecurrentConnection() {
    _classCallCheck(this, RecurrentConnection);

    return _possibleConstructorReturn(this, _getPrototypeOf(RecurrentConnection).apply(this, arguments));
  }

  _createClass(RecurrentConnection, [{
    key: "setLayer",
    value: function setLayer(layer) {
      this.layer = layer;
    }
  }, {
    key: "predict",
    value: function predict() {// throw new Error(`${this.constructor.name}-predict is not yet implemented`)
    }
  }, {
    key: "compare",
    value: function compare() {// throw new Error(`${this.constructor.name}-compare is not yet implemented`)
    }
  }, {
    key: "learn",
    value: function learn() {
      var layerDeltas = this.layer.deltas;
      this.layer.deltas = zeros2D(this.width, this.height);
      release(layerDeltas);
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {// throw new Error(
      //   `${this.constructor.name}-setupKernels is not yet implemented`
      // )
    }
  }, {
    key: "reuseKernels",
    value: function reuseKernels() {// throw new Error(
      //   `${this.constructor.name}-reuseKernels is not yet implemented`
      // )
    }
  }, {
    key: "width",
    get: function get() {
      return this.layer.width;
    },
    set: function set(value) {
      throw new Error("".concat(this.constructor.name, "-width is not yet implemented"));
    }
  }, {
    key: "height",
    get: function get() {
      return this.layer.height;
    },
    set: function set(value) {
      throw new Error("".concat(this.constructor.name, "-height is not yet implemented"));
    }
  }, {
    key: "deltas",
    get: function get() {
      return this.layer.deltas;
    },
    set: function set(deltas) {
      release(this.layer.deltas);
      this.layer.deltas = deltas;
    }
  }, {
    key: "weights",
    get: function get() {
      return this.layer.weights;
    },
    set: function set(weights) {
      release(this.layer.weights);
      this.layer.weights = weights;
    }
  }]);

  return RecurrentConnection;
}(Internal);

module.exports = {
  RecurrentConnection: RecurrentConnection
};
},{"./types":"pX1U","../utilities/zeros-2d":"C4Cz","../utilities/kernel":"L30b"}],"kvWK":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./types'),
    Internal = _require.Internal;

var _require2 = require('./base'),
    Base = _require2.Base;

var _require3 = require('../utilities/kernel'),
    release = _require3.release;

var RecurrentInput =
/*#__PURE__*/
function (_Internal) {
  _inherits(RecurrentInput, _Internal);

  function RecurrentInput() {
    _classCallCheck(this, RecurrentInput);

    return _possibleConstructorReturn(this, _getPrototypeOf(RecurrentInput).apply(this, arguments));
  }

  _createClass(RecurrentInput, [{
    key: "setRecurrentInput",
    value: function setRecurrentInput(recurrentInput) {
      this.recurrentInput = recurrentInput;
      this.validate();
    }
  }, {
    key: "validate",
    value: function validate() {
      Base.prototype.validate.call(this);

      if (this.width !== this.recurrentInput.width) {
        throw new Error("".concat(this.constructor.name, " layer width ").concat(this.width, " and ").concat(this.recurrentInput.constructor.name, " width (").concat(this.recurrentInput.width, ") are not same"));
      }

      if (this.height !== this.recurrentInput.height) {
        throw new Error("".concat(this.constructor.name, " layer height ").concat(this.height, " and ").concat(this.recurrentInput.constructor.name, " width (").concat(this.recurrentInput.height, ") are not same"));
      }
    }
  }, {
    key: "setDimensions",
    value: function setDimensions(width, height) {
      this.width = width;
      this.height = height;
    }
  }, {
    key: "predict",
    value: function predict() {// throw new Error(`${this.constructor.name}-predict is not yet implemented`)
    }
  }, {
    key: "compare",
    value: function compare() {// throw new Error(`${this.constructor.name}-compare is not yet implemented`)
    }
  }, {
    key: "learn",
    value: function learn() {// throw new Error(`${this.constructor.name}-learn is not yet implemented`)
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {// throw new Error(
      //   `${this.constructor.name}-setupKernels is not yet implemented`
      // )
    }
  }, {
    key: "reuseKernels",
    value: function reuseKernels() {// throw new Error(
      //   `${this.constructor.name}-reuseKernels is not yet implemented`
      // )
    }
  }, {
    key: "deltas",
    get: function get() {
      return this.recurrentInput.deltas;
    },
    set: function set(deltas) {
      var recurrentInputDeltas = this.recurrentInput.deltas;
      this.recurrentInput.deltas = deltas;
      release(recurrentInputDeltas);
    }
  }, {
    key: "weights",
    get: function get() {
      return this.recurrentInput.weights;
    },
    set: function set(weights) {
      var recurrentInputWeights = this.recurrentInput.weights;
      this.recurrentInput.weights = weights;
      release(recurrentInputWeights);
    }
  }]);

  return RecurrentInput;
}(Internal);

module.exports = {
  RecurrentInput: RecurrentInput
};
},{"./types":"pX1U","./base":"kIeX","../utilities/kernel":"L30b"}],"ZE4I":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var zeros2D = require('../utilities/zeros-2d');

var _require = require('./types'),
    Internal = _require.Internal;

var _require2 = require('../utilities/kernel'),
    release = _require2.release;

var RecurrentZeros =
/*#__PURE__*/
function (_Internal) {
  _inherits(RecurrentZeros, _Internal);

  function RecurrentZeros() {
    _classCallCheck(this, RecurrentZeros);

    return _possibleConstructorReturn(this, _getPrototypeOf(RecurrentZeros).apply(this, arguments));
  }

  _createClass(RecurrentZeros, [{
    key: "setDimensions",
    value: function setDimensions(width, height) {
      this.praxis = null;
      this.width = width;
      this.height = height;
      this.weights = zeros2D(width, height);
      this.deltas = zeros2D(width, height);
    }
  }, {
    key: "setupKernels",
    value: function setupKernels() {// throw new Error(
      //   `${this.constructor.name}-setupKernels is not yet implemented`
      // )
    }
  }, {
    key: "reuseKernels",
    value: function reuseKernels() {// throw new Error(
      //   `${this.constructor.name}-reuseKernels is not yet implemented`
      // )
    }
  }, {
    key: "predict",
    value: function predict() {// throw new Error(`${this.constructor.name}-predict is not yet implemented`)
    }
  }, {
    key: "compare",
    value: function compare() {// throw new Error(`${this.constructor.name}-compare is not yet implemented`)
    }
  }, {
    key: "learn",
    value: function learn(previousLayer, nextLayer, learningRate) {
      var weights = this.weights;
      this.weights = this.praxis.run(this, previousLayer, nextLayer, learningRate);
      release(weights); //TODO: put this on the GPU

      release(this.deltas);
      this.deltas = zeros2D(this.width, this.height);
    }
  }, {
    key: "validate",
    value: function validate() {
      throw new Error("".concat(this.constructor.name, "-validate is not yet implemented"));
    }
  }, {
    key: "reset",
    value: function reset() {
      throw new Error("".concat(this.constructor.name, "-reset is not yet implemented"));
    }
  }]);

  return RecurrentZeros;
}(Internal);

function recurrentZeros() {
  return new RecurrentZeros();
}

module.exports = {
  RecurrentZeros: RecurrentZeros,
  recurrentZeros: recurrentZeros
};
},{"../utilities/zeros-2d":"C4Cz","./types":"pX1U","../utilities/kernel":"L30b"}],"JVtt":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var _require = require('./layer/recurrent-connection'),
    RecurrentConnection = _require.RecurrentConnection;

var _require2 = require('./layer/recurrent-input'),
    RecurrentInput = _require2.RecurrentInput;

var _require3 = require('./layer/recurrent-zeros'),
    RecurrentZeros = _require3.RecurrentZeros;

var flattenLayers = require('./utilities/flatten-layers');

var mse2d = require('./utilities/mse-2d');

var _require4 = require('./feed-forward'),
    FeedForward = _require4.FeedForward; // const Base from './layer/base'


var Recurrent =
/*#__PURE__*/
function (_FeedForward) {
  _inherits(Recurrent, _FeedForward);

  function Recurrent() {
    _classCallCheck(this, Recurrent);

    return _possibleConstructorReturn(this, _getPrototypeOf(Recurrent).apply(this, arguments));
  }

  _createClass(Recurrent, [{
    key: "_connectLayers",
    value: function _connectLayers() {
      var initialLayers = [];
      var inputLayer = this.inputLayer();
      this._inputLayer = inputLayer;
      this.layers.push(inputLayer);

      var hiddenLayers = this._connectHiddenLayers(inputLayer);

      this._hiddenLayerSets = hiddenLayers;

      this._outputConnection.setLayer(hiddenLayers[hiddenLayers.length - 1]);

      var outputLayer = this.outputLayer(this._outputConnection, hiddenLayers.length);
      this._outputLayer = outputLayer;
      this.layers.push(outputLayer);
      initialLayers.push(inputLayer);
      initialLayers.push.apply(initialLayers, _toConsumableArray(hiddenLayers));
      initialLayers.push(outputLayer);
      var flattenedLayers = flattenLayers(initialLayers);
      this._inputLayers = flattenedLayers.slice(0, flattenedLayers.indexOf(inputLayer) + 1);
      this._hiddenLayerSets = [flattenedLayers.slice(flattenedLayers.indexOf(inputLayer) + 1, flattenedLayers.indexOf(hiddenLayers[hiddenLayers.length - 1]) + 1)];
      this._outputLayers = flattenedLayers.slice(flattenedLayers.indexOf(hiddenLayers[hiddenLayers.length - 1]) + 1);

      this._outputLayers.unshift();

      this._recurrentIndices = [];
      this._model = [];

      for (var i = 0; i < this._hiddenLayerSets[0].length; i++) {
        if (Object.getPrototypeOf(this._hiddenLayerSets[0][i].constructor).name === 'Model') {
          this._model.push(this._hiddenLayerSets[0][i]);

          this._hiddenLayerSets[0].splice(i, 1);
        }
      }

      for (var _i = 0; _i < hiddenLayers.length; _i++) {
        this._recurrentIndices.push(this._hiddenLayerSets[0].indexOf(hiddenLayers[_i]));
      }
    }
  }, {
    key: "_connectHiddenLayers",
    value: function _connectHiddenLayers(previousLayer) {
      this._hiddenLayers = [];
      var hiddenLayers = [];

      for (var i = 0; i < this.hiddenLayers.length; i++) {
        var recurrentInput = new RecurrentZeros();
        var hiddenLayer = this.hiddenLayers[i](previousLayer, recurrentInput, i);

        this._hiddenLayers.push(hiddenLayer);

        previousLayer = hiddenLayer;
        hiddenLayers.push(hiddenLayer);
        this.layers.push(hiddenLayer);
      }

      return hiddenLayers;
    }
  }, {
    key: "_connectHiddenLayersDeep",
    value: function _connectHiddenLayersDeep() {
      var hiddenLayers = [];
      var previousHiddenLayers = this._hiddenLayerSets[this._hiddenLayerSets.length - 1];
      var firstLayer = this._hiddenLayerSets[0];
      var recurrentIndex = 0;

      for (var i = 0; i < previousHiddenLayers.length; i++) {
        var previousHiddenLayer = previousHiddenLayers[i];
        var layer = null;

        switch (Object.getPrototypeOf(firstLayer[i].constructor).name) {
          case 'Activation':
            {
              var inputLayer = hiddenLayers[previousHiddenLayers.indexOf(previousHiddenLayer.inputLayer)] || previousHiddenLayer.inputLayer;
              layer = new previousHiddenLayer.constructor(inputLayer);
              break;
            }

          case 'Filter':
            {
              var settings = previousHiddenLayer;

              var _inputLayer = hiddenLayers[previousHiddenLayers.indexOf(previousHiddenLayer.inputLayer)] || previousHiddenLayer.inputLayer;

              layer = new previousHiddenLayer.constructor(settings, _inputLayer);
              break;
            }

          case 'Internal':
            {
              switch (previousHiddenLayer.constructor.name) {
                case 'RecurrentConnection':
                  break;

                case 'RecurrentInput':
                case 'RecurrentZeros':
                default:
                  layer = new RecurrentInput();
                  layer.setDimensions(previousHiddenLayer.width, previousHiddenLayer.height);
                  layer.setRecurrentInput(previousHiddenLayers[this._recurrentIndices[recurrentIndex]]);
                  recurrentIndex++;
                  break;
              }

              break;
            }

          case 'Model':
            {
              layer = previousHiddenLayer;
              break;
            }

          case 'Modifier':
            {
              var _inputLayer2 = hiddenLayers[previousHiddenLayers.indexOf(previousHiddenLayer.inputLayer)] || previousHiddenLayer.inputLayer;

              layer = new previousHiddenLayer.constructor(_inputLayer2);
              break;
            }

          case 'Operator':
            {
              var inputLayer1 = hiddenLayers[previousHiddenLayers.indexOf(previousHiddenLayer.inputLayer1)] || previousHiddenLayer.inputLayer1;
              var inputLayer2 = hiddenLayers[previousHiddenLayers.indexOf(previousHiddenLayer.inputLayer2)] || previousHiddenLayer.inputLayer2;
              layer = new previousHiddenLayer.constructor(inputLayer1, inputLayer2);
              break;
            }

          default:
            throw new Error("hidden layer ".concat(previousHiddenLayer.constructor.name, " extends unknown hidden layer ").concat(Object.getPrototypeOf(previousHiddenLayer.constructor).name));
        }

        hiddenLayers[i] = layer;
      }

      this._hiddenLayerSets.push(hiddenLayers);

      return hiddenLayers;
    }
  }, {
    key: "initialize",
    value: function initialize() {
      this.layers = [];
      this._previousInputs = [];
      this._outputConnection = new RecurrentConnection();

      this._connectLayers();

      this.initializeLayers(this._model);
      this.initializeLayers(this._inputLayers);
      this.initializeLayers(this._hiddenLayerSets[0]);
      this.initializeLayers(this._outputLayers);
    }
  }, {
    key: "initializeDeep",
    value: function initializeDeep() {
      var hiddenLayers = this._connectHiddenLayersDeep();

      for (var i = 0; i < hiddenLayers.length; i++) {
        var hiddenLayer = hiddenLayers[i];
        hiddenLayer.reuseKernels(this._hiddenLayerSets[0][i]);
      }
    }
  }, {
    key: "runInput",
    value: function runInput(input) {
      var max = input.length - 1;

      for (var x = 0; x < max; x++) {
        var hiddenLayers = this._hiddenLayerSets[x];
        var hiddenConnection = hiddenLayers[hiddenLayers.length - 1];

        this._outputConnection.setLayer(hiddenConnection);

        this._inputLayers[0].predict([input[x]]);

        this._previousInputs.push(this._inputLayers[0].weights);

        for (var i = 1; i < this._inputLayers.length; i++) {
          this._inputLayers[i].predict();
        }

        for (var _i2 = 0; _i2 < this._hiddenLayerSets[x].length; _i2++) {
          this._hiddenLayerSets[x][_i2].predict();
        }

        for (var _i3 = 0; _i3 < this._outputLayers.length; _i3++) {
          this._outputLayers[_i3].predict();
        }
      }

      return this._outputLayers[this._outputLayers.length - 1].weights;
    }
  }, {
    key: "_prepTraining",
    value: function _prepTraining(data, options) {
      var stats = _get(_getPrototypeOf(Recurrent.prototype), "_prepTraining", this).call(this, data, options);

      this.initializeDeep();
      return stats;
    }
  }, {
    key: "_calculateDeltas",
    value: function _calculateDeltas(target, offset) {
      for (var x = target.length - 1; x >= 0; x--) {
        var hiddenLayersIndex = offset + x;
        var hiddenLayers = this._hiddenLayerSets[hiddenLayersIndex];
        var hiddenConnection = hiddenLayers[hiddenLayers.length - 1];

        this._outputConnection.setLayer(hiddenConnection);

        if (this._previousInputs.length > 0) {
          this._inputLayers[0].weights = this._previousInputs.pop();
        }

        this._outputLayers[this._outputLayers.length - 1].compare([[target[x]]]);

        for (var i = this._outputLayers.length - 2; i >= 0; i--) {
          this._outputLayers[i].compare();
        }

        for (var _i4 = hiddenLayers.length - 1; _i4 >= 0; _i4--) {
          hiddenLayers[_i4].compare();
        }

        for (var _i5 = this._inputLayers.length - 1; _i5 >= 1; _i5--) {
          this._inputLayers[_i5].compare();
        }
      }
    }
  }, {
    key: "adjustWeights",
    value: function adjustWeights() {
      for (var hiddenLayersIndex = 0; hiddenLayersIndex < this._hiddenLayerSets.length; hiddenLayersIndex++) {
        var hiddenLayers = this._hiddenLayerSets[hiddenLayersIndex];
        var hiddenConnection = hiddenLayers[hiddenLayers.length - 1];

        this._outputConnection.setLayer(hiddenConnection);

        for (var i = 0; i < this._inputLayers.length; i++) {
          this._inputLayers[i].learn();
        }

        for (var _i6 = 0; _i6 < hiddenLayers.length; _i6++) {
          hiddenLayers[_i6].learn();
        }

        for (var _i7 = 0; _i7 < this._outputLayers.length; _i7++) {
          this._outputLayers[_i7].learn();
        }

        for (var _i8 = 0; _i8 < this._model.length; _i8++) {
          this._model[_i8].learn();
        }
      }
    }
    /**
     *
     * @param {number[]} input
     * @param {number[]} target
     * @param {Boolean} [logErrorRate]
     */

  }, {
    key: "_trainPattern",
    value: function _trainPattern(input, target, logErrorRate) {
      // forward propagate
      this.runInput(input); // back propagate

      this._calculateDeltas(target, input.length - 1);

      this._calculateDeltas(input.slice(1), 0);

      this.adjustWeights();

      if (logErrorRate) {
        var outputLayer = this._outputLayers[this._outputLayers.length - 1];
        return mse2d(outputLayer.errors.hasOwnProperty('toArray') ? outputLayer.errors.toArray() : outputLayer.errors);
      }

      return null;
    }
  }], [{
    key: "structure",
    get: function get() {
      return {
        /**
         *
         * _inputLayers are a 1 dimensional array of input layers defined once
         * @type Object[]
         * @private
         */
        _inputLayers: null,

        /**
         * _hiddenLayers are a 1 dimensional array of hidden layers defined from results from settings.hiddenLayers
         * @type Object[]
         * @private
         */
        _hiddenLayers: null,

        /**
         * _hiddenLayerSets are a 2 dimensional array of hidden layers defined for each recursion
         * @type Object[][]
         * @private
         */
        _hiddenLayerSets: null,

        /**
         * _outputLayers are a 1 dimensional array of output layers defined once
         * @type Object[]
         * @private
         */
        _outputLayers: null,
        _outputConnection: null,
        _previousInputs: null,
        _model: null,
        _recurrentIndices: null
      };
    }
  }]);

  return Recurrent;
}(FeedForward);

module.exports = {
  Recurrent: Recurrent
};
},{"./layer/recurrent-connection":"sLgS","./layer/recurrent-input":"kvWK","./layer/recurrent-zeros":"ZE4I","./utilities/flatten-layers":"Z71k","./utilities/mse-2d":"uJqb","./feed-forward":"eqC7"}],"v84l":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var zeros = require('../../utilities/zeros');
/**
 * A matrix
 * @param {Number} [rows]
 * @param {Number} [columns]
 * @constructor
 */


var Matrix =
/*#__PURE__*/
function () {
  function Matrix(rows, columns) {
    _classCallCheck(this, Matrix);

    if (rows === undefined) return;
    if (columns === undefined) return;
    this.rows = rows;
    this.columns = columns;
    this.weights = zeros(rows * columns);
    this.deltas = zeros(rows * columns);
  }
  /**
   *
   * @param {Number} row
   * @param {Number} col
   * @returns {Float32Array|Array}
   */


  _createClass(Matrix, [{
    key: "getWeights",
    value: function getWeights(row, col) {
      // slow but careful accessor function
      // we want row-major order
      var ix = this.columns * row + col;
      if (ix < 0 && ix >= this.weights.length) throw new Error('get accessor is skewed');
      return this.weights[ix];
    }
    /**
     *
     * @param {Number} row
     * @param {Number} col
     * @param v
     * @returns {Matrix}
     */

  }, {
    key: "setWeight",
    value: function setWeight(row, col, v) {
      // slow but careful accessor function
      var ix = this.columns * row + col;
      if (ix < 0 && ix >= this.weights.length) throw new Error('set accessor is skewed');
      this.weights[ix] = v;
    }
    /**
     *
     * @param {Number} row
     * @param {Number} col
     * @param v
     * @returns {Matrix}
     */

  }, {
    key: "setDeltas",
    value: function setDeltas(row, col, v) {
      // slow but careful accessor function
      var ix = this.columns * row + col;
      if (ix < 0 && ix >= this.weights.length) throw new Error('set accessor is skewed');
      this.deltas[ix] = v;
    }
    /**
     *
     * @returns {{rows: *, columns: *, weights: Array}}
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        rows: this.rows,
        columns: this.columns,
        weights: this.weights.slice(0)
      };
    }
  }, {
    key: "weightsToArray",
    value: function weightsToArray() {
      var deltas = [];
      var row = 0;
      var column = 0;

      for (var i = 0; i < this.weights.length; i++) {
        if (column === 0) {
          deltas.push([]);
        }

        deltas[row].push(this.weights[i]);
        column++;

        if (column >= this.columns) {
          column = 0;
          row++;
        }
      }

      return deltas;
    }
  }, {
    key: "deltasToArray",
    value: function deltasToArray() {
      var deltas = [];
      var row = 0;
      var column = 0;

      for (var i = 0; i < this.deltas.length; i++) {
        if (column === 0) {
          deltas.push([]);
        }

        deltas[row].push(this.deltas[i]);
        column++;

        if (column >= this.columns) {
          column = 0;
          row++;
        }
      }

      return deltas;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      var matrix = new Matrix(json.rows, json.columns);

      for (var i = 0, max = json.rows * json.columns; i < max; i++) {
        matrix.weights[i] = json.weights[i]; // copy over weights
      }

      return matrix;
    }
    /**
     *
     * @param weightRows
     * @param [deltasRows]
     * @returns {Matrix}
     */

  }, {
    key: "fromArray",
    value: function fromArray(weightRows, deltasRows) {
      var rows = weightRows.length;
      var columns = weightRows[0].length;
      var m = new Matrix(rows, columns);
      deltasRows = deltasRows || weightRows;

      for (var rowIndex = 0; rowIndex < rows; rowIndex++) {
        var weightValues = weightRows[rowIndex];
        var deltasValues = deltasRows[rowIndex];

        for (var columnIndex = 0; columnIndex < columns; columnIndex++) {
          m.setWeight(rowIndex, columnIndex, weightValues[columnIndex]);
          m.setDeltas(rowIndex, columnIndex, deltasValues[columnIndex]);
        }
      }

      return m;
    }
  }]);

  return Matrix;
}();

module.exports = Matrix;
},{"../../utilities/zeros":"M4LY"}],"Sd27":[function(require,module,exports) {
function randomFloat(a, b) {
  return Math.random() * (b - a) + a;
} // Random numbers utils


function gaussRandom() {
  if (gaussRandom.returnV) {
    gaussRandom.returnV = false;
    return gaussRandom.vVal;
  }

  var u = 2 * Math.random() - 1;
  var v = 2 * Math.random() - 1;
  var r = u * u + v * v;

  if (r === 0 || r > 1) {
    return gaussRandom();
  }

  var c = Math.sqrt(-2 * Math.log(r) / r);
  gaussRandom.vVal = v * c; // cache this

  gaussRandom.returnV = true;
  return u * c;
}

function randomInteger(a, b) {
  return Math.floor(Math.random() * (b - a) + a);
}

function randomN(mu, std) {
  return mu + gaussRandom() * std;
}

gaussRandom.returnV = false;
gaussRandom.vVal = 0;
module.exports = {
  randomFloat: randomFloat,
  randomInteger: randomInteger,
  randomN: randomN
};
},{}],"zGuK":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Matrix = require('.');

var _require = require('../../utilities/random'),
    randomFloat = _require.randomFloat;
/** return Matrix but filled with random numbers from gaussian
 * @param {Number} [rows]
 * @param {Number} [columns]
 * @param std
 * @constructor
 */


var RandomMatrix =
/*#__PURE__*/
function (_Matrix) {
  _inherits(RandomMatrix, _Matrix);

  function RandomMatrix(rows, columns, std) {
    var _this;

    _classCallCheck(this, RandomMatrix);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RandomMatrix).call(this, rows, columns));
    _this.rows = rows;
    _this.columns = columns;
    _this.std = std;

    for (var i = 0, max = _this.weights.length; i < max; i++) {
      _this.weights[i] = randomFloat(-std, std);
    }

    return _this;
  }

  return RandomMatrix;
}(Matrix);

module.exports = RandomMatrix;
},{".":"v84l","../../utilities/random":"Sd27"}],"yuFB":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Matrix = require('.');

var ones = require('../../utilities/ones');
/** return Matrix but filled with random numbers from gaussian
 * @param {Number} [rows]
 * @param {Number} [columns]
 * @constructor
 */


var OnesMatrix =
/*#__PURE__*/
function (_Matrix) {
  _inherits(OnesMatrix, _Matrix);

  function OnesMatrix(rows, columns) {
    var _this;

    _classCallCheck(this, OnesMatrix);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(OnesMatrix).call(this, rows, columns));
    _this.rows = rows;
    _this.columns = columns;
    _this.weights = ones(rows * columns);
    _this.deltas = ones(rows * columns);
    return _this;
  }

  return OnesMatrix;
}(Matrix);

module.exports = OnesMatrix;
},{".":"v84l","../../utilities/ones":"f7P8"}],"SjoR":[function(require,module,exports) {
/*
 *
 * @param {Matrix} product
 * @param {Matrix} left
 */
module.exports = function copy(product, left) {
  product.rows = parseInt(left.rows, 10);
  product.columns = parseInt(left.columns, 10);
  product.weights = left.weights.slice(0);
  product.deltas = left.deltas.slice(0);
};
},{}],"gPcR":[function(require,module,exports) {
/**
 *
 * @param {Matrix} product
 * @param {Matrix} left
 */
module.exports = function cloneNegative(product, left) {
  product.rows = parseInt(left.rows, 10);
  product.columns = parseInt(left.columns, 10);
  product.weights = left.weights.slice(0);
  product.deltas = left.deltas.slice(0);

  for (var i = 0; i < left.weights.length; i++) {
    product.weights[i] = -left.weights[i];
    product.deltas[i] = 0;
  }
};
},{}],"Be3c":[function(require,module,exports) {
/**
 * add {left} and {right} matrix weights into {into}
 * @param {Matrix} product
 * @param {Matrix} left
 * @param {Matrix} right
 */
module.exports = function add(product, left, right) {
  for (var i = 0; i < left.weights.length; i++) {
    product.weights[i] = left.weights[i] + right.weights[i];
    product.deltas[i] = 0;
  }
};
},{}],"pGzG":[function(require,module,exports) {
/**
 * adds {from} deltas to {left} and {right} deltas
 * @param {Matrix} product
 * @param {Matrix} left
 * @param {Matrix} right
 */
module.exports = function addB(product, left, right) {
  for (var i = 0; i < product.deltas.length; i++) {
    left.deltas[i] = product.deltas[i];
    right.deltas[i] = product.deltas[i];
  }
};
},{}],"WPA9":[function(require,module,exports) {
/**
 * makes matrix weights and deltas all ones
 * @param {Matrix} product
 */
module.exports = function allOnes(product) {
  for (var i = 0; i < product.weights.length; i++) {
    product.weights[i] = 1;
    product.deltas[i] = 0;
  }
};
},{}],"in8z":[function(require,module,exports) {
/**
 * multiply {left} and {right} matrix weights to {into}
 * @param {Matrix} product
 * @param {Matrix} left
 * @param {Matrix} right
 */
module.exports = function multiply(product, left, right) {
  var leftRows = left.rows;
  var leftColumns = left.columns;
  var rightColumns = right.columns; // loop over rows of left

  for (var leftRow = 0; leftRow < leftRows; leftRow++) {
    var leftRowBase = leftColumns * leftRow;
    var rightRowBase = rightColumns * leftRow; // loop over cols of right

    for (var rightColumn = 0; rightColumn < rightColumns; rightColumn++) {
      // dot product loop
      var dot = 0; // loop over columns of left

      for (var leftColumn = 0; leftColumn < leftColumns; leftColumn++) {
        var rightColumnBase = rightColumns * leftColumn;
        var leftIndex = leftRowBase + leftColumn;
        var rightIndex = rightColumnBase + rightColumn;
        dot += left.weights[leftIndex] * right.weights[rightIndex];
        left.deltas[leftIndex] = 0;
        right.deltas[rightIndex] = 0;
      }

      product.weights[rightRowBase + rightColumn] = dot;
    }
  }
};
},{}],"UbH8":[function(require,module,exports) {
/**
 * multiplies {from} deltas to {left} and {right}
 * @param {Matrix} product
 * @param {Matrix} left
 * @param {Matrix} right
 */
module.exports = function multiplyB(product, left, right) {
  var leftRows = left.rows;
  var leftColumns = left.columns;
  var rightColumns = right.columns; // loop over rows of left

  for (var leftRowRoot = 0; leftRowRoot < leftRows; leftRowRoot++) {
    var leftRowBase = leftColumns * leftRowRoot;
    var rightRowBase = rightColumns * leftRowRoot; // loop over cols of right

    for (var rightColumn = 0; rightColumn < rightColumns; rightColumn++) {
      // loop over columns of left
      for (var leftColumn = 0; leftColumn < leftColumns; leftColumn++) {
        var rightColumnBase = rightColumns * leftColumn;
        var leftRow = leftRowBase + leftColumn;
        var rightRow = rightColumnBase + rightColumn;
        var backPropagateValue = product.deltas[rightRowBase + rightColumn];
        left.deltas[leftRow] += right.weights[rightRow] * backPropagateValue;
        right.deltas[rightRow] += left.weights[leftRow] * backPropagateValue;
      }
    }
  }
};
},{}],"lIUj":[function(require,module,exports) {
/**
 * @param {Matrix} product
 * @param {Matrix} left
 * @param {Matrix} right
 */
module.exports = function multiplyElement(product, left, right) {
  var weights = left.weights;

  for (var i = 0; i < weights.length; i++) {
    product.weights[i] = left.weights[i] * right.weights[i];
    product.deltas[i] = 0;
  }
};
},{}],"zl5N":[function(require,module,exports) {
/**
 * multiplies {left} and {right} weight by {from} deltas into {left} and {right} deltas
 * @param {Matrix} product
 * @param {Matrix} left
 * @param {Matrix} right
 */
module.exports = function multiplyElementB(product, left, right) {
  for (var i = 0; i < left.weights.length; i++) {
    left.deltas[i] = right.weights[i] * product.deltas[i];
    right.deltas[i] = left.weights[i] * product.deltas[i];
  }
};
},{}],"i7sA":[function(require,module,exports) {
/**
 *
 * relu {m} weights to {into} weights
 * @param {Matrix} product
 * @param {Matrix} left
 */
module.exports = function relu(product, left) {
  for (var i = 0; i < left.weights.length; i++) {
    product.weights[i] = Math.max(0, left.weights[i]); // relu

    product.deltas[i] = 0;
  }
};
},{}],"PfXl":[function(require,module,exports) {
/**
 * adds {from} deltas to {m} deltas when {m} weights are above other a threshold of 0
 * @param {Matrix} product
 * @param {Matrix} m
 */
module.exports = function reluB(product, left) {
  for (var i = 0; i < product.deltas.length; i++) {
    left.deltas[i] = left.weights[i] > 0 ? product.deltas[i] : 0;
  }
};
},{}],"OR1n":[function(require,module,exports) {
/**
 * @param {Matrix} product
 * @param {Matrix} left
 * @param {Number} rowPluckIndex
 */
module.exports = function rowPluck(product, left, rowPluckIndex) {
  var columns = left.columns;
  var rowBase = columns * rowPluckIndex;

  for (var column = 0; column < columns; column++) {
    product.weights[column] = left.weights[rowBase + column];
    product.deltas[column] = 0;
  }
};
},{}],"DWTe":[function(require,module,exports) {
/**
 * adds {from} deltas into {m} deltas
 * @param {Matrix} product
 * @param {Matrix} left
 * @param {Number} rowIndex
 */
module.exports = function rowPluckB(product, left, rowIndex) {
  var columns = left.columns;
  var rowBase = columns * rowIndex;

  for (var column = 0; column < columns; column++) {
    left.deltas[rowBase + column] = product.deltas[column];
  }
};
},{}],"flLU":[function(require,module,exports) {
/**
 * @param {Matrix} product
 * @param {Matrix} left
 */
module.exports = function sigmoid(product, left) {
  // sigmoid nonlinearity
  for (var i = 0; i < left.weights.length; i++) {
    product.weights[i] = 1 / (1 + Math.exp(-left.weights[i]));
    product.deltas[i] = 0;
  }
};

function sig(x) {
  // helper function for computing sigmoid
  return 1 / (1 + Math.exp(-x));
}
},{}],"QxYO":[function(require,module,exports) {
/**
 *
 * @param {Matrix} product
 * @param {Matrix} left
 */
module.exports = function sigmoidB(product, left) {
  for (var i = 0; i < product.deltas.length; i++) {
    var mwi = product.weights[i];
    left.deltas[i] = mwi * (1 - mwi) * product.deltas[i];
  }
};
},{}],"OmLq":[function(require,module,exports) {
/**
 * @param {Matrix} product
 * @param {Matrix} left
 */
module.exports = function tanh(product, left) {
  // tanh nonlinearity
  for (var i = 0; i < left.weights.length; i++) {
    product.weights[i] = Math.tanh(left.weights[i]);
    product.deltas[i] = 0;
  }
};
},{}],"fARu":[function(require,module,exports) {
/**
 *
 * @param {Matrix} product
 * @param {Matrix} left
 */
module.exports = function tanhB(product, left) {
  for (var i = 0; i < product.deltas.length; i++) {
    // grad for z = tanh(x) is (1 - z^2)
    var mwi = product.weights[i];
    left.deltas[i] = (1 - mwi * mwi) * product.deltas[i];
  }
};
},{}],"Ens1":[function(require,module,exports) {
var Matrix = require('.');
/**
 *
 * @param {Matrix} m
 * @returns {Matrix}
 */


module.exports = function softmax(m) {
  var result = new Matrix(m.rows, m.columns); // probability volume

  var maxVal = -999999;

  for (var i = 0; i < m.weights.length; i++) {
    if (m.weights[i] > maxVal) {
      maxVal = m.weights[i];
    }
  }

  var s = 0;

  for (var _i = 0; _i < m.weights.length; _i++) {
    result.weights[_i] = Math.exp(m.weights[_i] - maxVal);
    s += result.weights[_i];
  }

  for (var _i2 = 0; _i2 < m.weights.length; _i2++) {
    result.weights[_i2] /= s;
  } // no backward pass here needed
  // since we will use the computed probabilities outside
  // to set gradients directly on m


  return result;
};
},{".":"v84l"}],"ytIu":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Matrix = require('./');

var OnesMatrix = require('./ones-matrix');

var copy = require('./copy');

var _cloneNegative = require('./clone-negative');

var _add = require('./add');

var addB = require('./add-b');

var _allOnes = require('./all-ones');

var _multiply = require('./multiply');

var multiplyB = require('./multiply-b');

var _multiplyElement = require('./multiply-element');

var multiplyElementB = require('./multiply-element-b');

var _relu = require('./relu');

var reluB = require('./relu-b');

var rowPluck = require('./row-pluck');

var rowPluckB = require('./row-pluck-b');

var _sigmoid = require('./sigmoid');

var sigmoidB = require('./sigmoid-b');

var _tanh = require('./tanh');

var tanhB = require('./tanh-b');

var softmax = require('./softmax');

var Equation =
/*#__PURE__*/
function () {
  function Equation() {
    _classCallCheck(this, Equation);

    this.inputRow = 0;
    this.inputValue = null;
    this.states = [];
  }
  /**
   * connects two matrices together by add
   * @param {Matrix} left
   * @param {Matrix} right
   * @returns {Matrix}
   */


  _createClass(Equation, [{
    key: "add",
    value: function add(left, right) {
      if (left.weights.length !== right.weights.length) {
        throw new Error('misaligned matrices');
      }

      var product = new Matrix(left.rows, left.columns);
      this.states.push({
        left: left,
        right: right,
        product: product,
        forwardFn: _add,
        backpropagationFn: addB
      });
      return product;
    }
    /**
     *
     * @param {Number} rows
     * @param {Number} columns
     * @returns {Matrix}
     */

  }, {
    key: "allOnes",
    value: function allOnes(rows, columns) {
      var product = new Matrix(rows, columns);
      this.states.push({
        left: product,
        product: product,
        forwardFn: _allOnes
      });
      return product;
    }
    /**
     *
     * @param {Matrix} m
     * @returns {Matrix}
     */

  }, {
    key: "cloneNegative",
    value: function cloneNegative(m) {
      var product = new Matrix(m.rows, m.columns);
      this.states.push({
        left: m,
        product: product,
        forwardFn: _cloneNegative
      });
      return product;
    }
    /**
     * connects two matrices together by subtract
     * @param {Matrix} left
     * @param {Matrix} right
     * @returns {Matrix}
     */

  }, {
    key: "subtract",
    value: function subtract(left, right) {
      if (left.weights.length !== right.weights.length) {
        throw new Error('misaligned matrices');
      }

      return this.add(this.add(this.allOnes(left.rows, left.columns), this.cloneNegative(left)), right);
    }
    /**
     * connects two matrices together by multiply
     * @param {Matrix} left
     * @param {Matrix} right
     * @returns {Matrix}
     */

  }, {
    key: "multiply",
    value: function multiply(left, right) {
      if (left.columns !== right.rows) {
        throw new Error('misaligned matrices');
      }

      var product = new Matrix(left.rows, right.columns);
      this.states.push({
        left: left,
        right: right,
        product: product,
        forwardFn: _multiply,
        backpropagationFn: multiplyB
      });
      return product;
    }
    /**
     * connects two matrices together by multiplyElement
     * @param {Matrix} left
     * @param {Matrix} right
     * @returns {Matrix}
     */

  }, {
    key: "multiplyElement",
    value: function multiplyElement(left, right) {
      if (left.weights.length !== right.weights.length) {
        throw new Error('misaligned matrices');
      }

      var product = new Matrix(left.rows, left.columns);
      this.states.push({
        left: left,
        right: right,
        product: product,
        forwardFn: _multiplyElement,
        backpropagationFn: multiplyElementB
      });
      return product;
    }
    /**
     * connects a matrix to relu
     * @param {Matrix} m
     * @returns {Matrix}
     */

  }, {
    key: "relu",
    value: function relu(m) {
      var product = new Matrix(m.rows, m.columns);
      this.states.push({
        left: m,
        product: product,
        forwardFn: _relu,
        backpropagationFn: reluB
      });
      return product;
    }
    /**
     * copy a matrix
     * @param {Matrix} input
     * @returns {Matrix}
     */

  }, {
    key: "input",
    value: function input(_input) {
      var _this = this;

      this.states.push({
        product: _input,
        forwardFn: function forwardFn(product) {
          product.weights = _input.weights = _this.inputValue;
        }
      });
      return _input;
    }
    /**
     * connects a matrix via a row
     * @param {Matrix} m
     * @returns {Matrix}
     */

  }, {
    key: "inputMatrixToRow",
    value: function inputMatrixToRow(m) {
      var self = this;
      var product = new Matrix(m.columns, 1);
      this.states.push({
        left: m,

        get right() {
          return self.inputRow;
        },

        product: product,
        forwardFn: rowPluck,
        backpropagationFn: rowPluckB
      });
      return product;
    }
    /**
     * connects a matrix to sigmoid
     * @param {Matrix} m
     * @returns {Matrix}
     */

  }, {
    key: "sigmoid",
    value: function sigmoid(m) {
      var product = new Matrix(m.rows, m.columns);
      this.states.push({
        left: m,
        product: product,
        forwardFn: _sigmoid,
        backpropagationFn: sigmoidB
      });
      return product;
    }
    /**
     * connects a matrix to tanh
     * @param {Matrix} m
     * @returns {Matrix}
     */

  }, {
    key: "tanh",
    value: function tanh(m) {
      var product = new Matrix(m.rows, m.columns);
      this.states.push({
        left: m,
        product: product,
        forwardFn: _tanh,
        backpropagationFn: tanhB
      });
      return product;
    }
    /**
     *
     * @param m
     * @returns {Matrix}
     */

  }, {
    key: "observe",
    value: function observe(m) {
      var iForward = 0;
      var iBackpropagate = 0;
      this.states.push({
        forwardFn: function forwardFn() {
          iForward++;
        },
        backpropagationFn: function backpropagationFn() {
          iBackpropagate++;
        }
      });
      return m;
    }
    /**
     * @patam {Number} [rowIndex]
     * @output {Matrix}
     */

  }, {
    key: "runIndex",
    value: function runIndex() {
      var rowIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      this.inputRow = rowIndex;
      var state;

      for (var i = 0, max = this.states.length; i < max; i++) {
        state = this.states[i];

        if (!state.hasOwnProperty('forwardFn')) {
          continue;
        }

        state.forwardFn(state.product, state.left, state.right);
      }

      return state.product;
    }
    /**
     * @patam {Number} [rowIndex]
     * @output {Matrix}
     */

  }, {
    key: "runInput",
    value: function runInput(inputValue) {
      this.inputValue = inputValue;
      var state;

      for (var i = 0, max = this.states.length; i < max; i++) {
        state = this.states[i];

        if (!state.hasOwnProperty('forwardFn')) {
          continue;
        }

        state.forwardFn(state.product, state.left, state.right);
      }

      return state.product;
    }
    /**
     * @patam {Number} [rowIndex]
     * @output {Matrix}
     */

  }, {
    key: "backpropagate",
    value: function backpropagate() {
      var i = this.states.length;
      var state;

      while (i-- > 0) {
        state = this.states[i];

        if (!state.hasOwnProperty('backpropagationFn')) {
          continue;
        }

        state.backpropagationFn(state.product, state.left, state.right);
      }

      return state.product;
    }
    /**
     * @patam {Number} [rowIndex]
     * @output {Matrix}
     */

  }, {
    key: "backpropagateIndex",
    value: function backpropagateIndex() {
      var rowIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      this.inputRow = rowIndex;
      var i = this.states.length;
      var state;

      while (i-- > 0) {
        state = this.states[i];

        if (!state.hasOwnProperty('backpropagationFn')) {
          continue;
        }

        state.backpropagationFn(state.product, state.left, state.right);
      }

      return state.product;
    }
  }, {
    key: "predictTarget",
    value: function predictTarget(input, target) {
      var output = this.runInput(input);
      var errorSum = 0;

      for (var i = 0; i < output.weights.length; i++) {
        var error = output.weights[i] - target[i]; // set gradients into log probabilities

        errorSum += Math.abs(error); // write gradients into log probabilities

        output.deltas[i] = error;
      }

      return errorSum;
    }
  }, {
    key: "predictTargetIndex",
    value: function predictTargetIndex(input, target) {
      var output = this.runIndex(input); // set gradients into log probabilities

      var logProbabilities = output; // interpret output as log probabilities

      var probabilities = softmax(output); // compute the softmax probabilities
      // write gradients into log probabilities

      logProbabilities.deltas = probabilities.weights.slice(0);
      logProbabilities.deltas[target] -= 1; // accumulate base 2 log prob and do smoothing

      return -Math.log2(probabilities.weights[target]);
    }
  }]);

  return Equation;
}();

module.exports = Equation;
},{"./":"v84l","./ones-matrix":"yuFB","./copy":"SjoR","./clone-negative":"gPcR","./add":"Be3c","./add-b":"pGzG","./all-ones":"WPA9","./multiply":"in8z","./multiply-b":"UbH8","./multiply-element":"lIUj","./multiply-element-b":"zl5N","./relu":"i7sA","./relu-b":"PfXl","./row-pluck":"OR1n","./row-pluck-b":"DWTe","./sigmoid":"flLU","./sigmoid-b":"QxYO","./tanh":"OmLq","./tanh-b":"fARu","./softmax":"Ens1"}],"lOwB":[function(require,module,exports) {
var _require = require('../../utilities/random'),
    randomFloat = _require.randomFloat;
/**
 *
 * @param {Matrix} m
 * @returns {number}
 */


module.exports = function sampleI(m) {
  // sample argmax from w, assuming w are
  // probabilities that sum to one
  var r = randomFloat(0, 1);
  var x = 0;
  var i = 0;
  var w = m.weights;

  while (true) {
    x += w[i];

    if (x > r) {
      return i;
    }

    i++;
  }
};
},{"../../utilities/random":"Sd27"}],"wnUe":[function(require,module,exports) {
/**
 *
 * @param {Matrix} m
 * @returns {number}
 */
module.exports = function maxI(m) {
  // argmax of array w
  var weights = m.weights;
  var maxv = weights[0];
  var maxix = 0;

  for (var i = 1; i < weights.length; i++) {
    var v = weights[i];
    if (v < maxv) continue;
    maxix = i;
    maxv = v;
  }

  return maxix;
};
},{}],"u3NV":[function(require,module,exports) {
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 *
 * @param {String[]|Number[]} values
 * @param maxThreshold
 * @constructor
 */
var DataFormatter =
/*#__PURE__*/
function () {
  function DataFormatter(values) {
    var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    _classCallCheck(this, DataFormatter);

    if (values === undefined) return;
    this.values = values; // go over all characters and keep track of all unique ones seen
    // count up all characters

    this.indexTable = {};
    this.characterTable = {};
    this.characters = [];
    this.specialIndexes = [];
    this.buildCharactersFromIterable(values);
    this.buildTables(maxThreshold);
  }

  _createClass(DataFormatter, [{
    key: "buildCharactersFromIterable",
    value: function buildCharactersFromIterable(values) {
      var tempCharactersTable = {};

      for (var dataFormatterIndex = 0, dataFormatterLength = values.length; dataFormatterIndex < dataFormatterLength; dataFormatterIndex++) {
        var characters = values[dataFormatterIndex];

        if (characters.hasOwnProperty('length')) {
          for (var characterIndex = 0, charactersLength = characters.length; characterIndex < charactersLength; characterIndex++) {
            var character = characters[characterIndex];
            if (tempCharactersTable.hasOwnProperty(character)) continue;
            tempCharactersTable[character] = true;
            this.characters.push(character);
          }
        } else {
          var _character = values[dataFormatterIndex];
          if (tempCharactersTable.hasOwnProperty(_character)) continue;
          tempCharactersTable[dataFormatterIndex] = true;
          this.characters.push(_character);
        }
      }
    }
  }, {
    key: "buildTables",
    value: function buildTables(maxThreshold) {
      // filter by count threshold and create pointers
      var charactersLength = this.characters.length;

      for (var characterIndex = 0; characterIndex < charactersLength; characterIndex++) {
        var character = this.characters[characterIndex];

        if (characterIndex >= maxThreshold) {
          // add character to dataFormatter
          this.indexTable[character] = characterIndex;
          this.characterTable[characterIndex] = character;
        }
      }
    }
  }, {
    key: "toIndexes",
    value: function toIndexes(value) {
      var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var result = [];
      var indexTable = this.indexTable;

      for (var i = 0, max = value.length; i < max; i++) {
        var character = value[i];
        var index = indexTable[character];

        if (index === undefined) {
          if (indexTable['unrecognized']) {
            index = indexTable['unrecognized'];
          } else {
            throw new Error("unrecognized character \"".concat(character, "\""));
          }
        }

        if (index < maxThreshold) continue;
        result.push(index);
      }

      return result;
    }
  }, {
    key: "toIndexesInputOutput",
    value: function toIndexesInputOutput(value1) {
      var value2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var maxThreshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var result = null;

      if (typeof value1 === 'string') {
        result = this.toIndexes(value1.split('').concat(['stop-input', 'start-output']), maxThreshold);
      } else {
        result = this.toIndexes(value1.concat(['stop-input', 'start-output']), maxThreshold);
      }

      if (value2 === null) return result;

      if (typeof value2 === 'string') {
        return result.concat(this.toIndexes(value2.split(''), maxThreshold));
      } else {
        return result.concat(this.toIndexes(value2, maxThreshold));
      }
    }
  }, {
    key: "toCharacters",
    value: function toCharacters(indices) {
      var maxThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var result = [];
      var indexTable = this.indexTable,
          characterTable = this.characterTable;

      for (var i = 0, max = indices.length; i < max; i++) {
        var index = indices[i];
        if (index < maxThreshold) continue;
        var character = characterTable[index];

        if (character === undefined) {
          if (indexTable['unrecognized']) {
            character = characterTable[indexTable['unrecognized']];
          } else {
            throw new Error("unrecognized index \"".concat(index, "\""));
          }
        } else if (character !== null) {
          result.push(character);
        }
      }

      return result;
    }
  }, {
    key: "toString",
    value: function toString(indices, maxThreshold) {
      return this.toCharacters(indices, maxThreshold).join('');
    }
  }, {
    key: "addInputOutput",
    value: function addInputOutput() {
      this.addSpecial('stop-input');
      this.addSpecial('start-output');
    }
  }, {
    key: "addUnrecognized",
    value: function addUnrecognized() {
      this.addSpecial('unrecognized');
    }
  }, {
    key: "addSpecial",
    value: function addSpecial(special) {
      var character = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var specialIndex = this.indexTable[special] = this.characters.length;
      this.characterTable[specialIndex] = character;
      this.specialIndexes.push(this.characters.length);
      this.characters.push(special);
    }
  }, {
    key: "countSpecial",
    value: function countSpecial(output) {
      var sum = 0;

      for (var i = 0; i < this.specialIndexes; i++) {
        var index = -1;

        while (index = output.indexOf(this.specialIndexes[i], index) > -1) {
          sum++;
        }
      }

      return sum;
    }
  }, {
    key: "toFunctionString",
    value: function toFunctionString() {
      return "\nvar characterTable = ".concat(JSON.stringify(this.characterTable), ";\nvar indexTable = ").concat(JSON.stringify(this.indexTable), ";\nvar characters = ").concat(JSON.stringify(this.characters), ";\nvar dataFormatter = {\n  ").concat(this.toIndexes.toString(), ",\n  ").concat(this.toIndexesInputOutput.toString(), ",\n  ").concat(this.toCharacters.toString(), "\n};");
    }
  }], [{
    key: "fromAllPrintable",
    value: function fromAllPrintable(maxThreshold) {
      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['\n'];

      for (var i = 32; i <= 126; i++) {
        values.push(String.fromCharCode(i));
      }

      return new DataFormatter(values, maxThreshold);
    }
  }, {
    key: "fromAllPrintableInputOutput",
    value: function fromAllPrintableInputOutput(maxThreshold) {
      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['\n'];
      var dataFormatter = DataFormatter.fromAllPrintable(maxThreshold, values);
      dataFormatter.addInputOutput();
      return dataFormatter;
    }
  }, {
    key: "fromStringInputOutput",
    value: function fromStringInputOutput(string, maxThreshold) {
      var _String$prototype;

      var values = (_String$prototype = String.prototype).concat.apply(_String$prototype, _toConsumableArray(new Set(string)));

      var dataFormatter = new DataFormatter(values, maxThreshold);
      dataFormatter.addInputOutput();
      return dataFormatter;
    }
  }, {
    key: "fromArrayInputOutput",
    value: function fromArrayInputOutput(array, maxThreshold) {
      var dataFormatter = new DataFormatter(array.filter(function (v, i, a) {
        return a.indexOf(v) === i;
      }), maxThreshold);
      dataFormatter.addInputOutput();
      return dataFormatter;
    }
  }, {
    key: "fromString",
    value: function fromString(string, maxThreshold) {
      var _String$prototype2;

      var values = (_String$prototype2 = String.prototype).concat.apply(_String$prototype2, _toConsumableArray(new Set(string)));

      return new DataFormatter(values, maxThreshold);
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      var dataFormatter = new DataFormatter();
      dataFormatter.indexTable = json.indexTable;
      dataFormatter.characterTable = json.characterTable;
      dataFormatter.values = json.values;
      dataFormatter.characters = json.characters;
      dataFormatter.specialIndexes = json.specialIndexes;
      return dataFormatter;
    }
  }]);

  return DataFormatter;
}();

module.exports = DataFormatter;
},{}],"gJGF":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Matrix = require('./matrix');

var RandomMatrix = require('./matrix/random-matrix');

var Equation = require('./matrix/equation');

var sampleI = require('./matrix/sample-i');

var maxI = require('./matrix/max-i');

var softmax = require('./matrix/softmax');

var copy = require('./matrix/copy');

var _require = require('../utilities/random'),
    randomFloat = _require.randomFloat;

var zeros = require('../utilities/zeros');

var DataFormatter = require('../utilities/data-formatter');

var NeuralNetwork = require('../neural-network');

var RNN =
/*#__PURE__*/
function () {
  function RNN() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RNN);

    var defaults = this.constructor.defaults;
    Object.assign(this, defaults, options);
    this.trainOpts = {};
    this.updateTrainingOptions(Object.assign({}, this.constructor.trainDefaults, options));
    this.stepCache = {};
    this.runs = 0;
    this.ratioClipped = null;
    this.model = null;
    this.inputLookup = null;
    this.inputLookupLength = null;
    this.outputLookup = null;
    this.outputLookupLength = null;

    if (options.json) {
      this.fromJSON(options.json);
    }
  }

  _createClass(RNN, [{
    key: "initialize",
    value: function initialize() {
      this.model = {
        input: null,
        hiddenLayers: [],
        output: null,
        equations: [],
        allMatrices: [],
        equationConnections: [],
        outputConnector: null
      };

      if (this.dataFormatter) {
        this.inputSize = this.inputRange = this.outputSize = this.dataFormatter.characters.length;
      }

      this.mapModel();
    }
  }, {
    key: "createHiddenLayers",
    value: function createHiddenLayers() {
      //0 is end, so add 1 to offset
      this.model.hiddenLayers.push(this.constructor.getModel(this.hiddenLayers[0], this.inputSize));
      var prevSize = this.hiddenLayers[0];

      for (var d = 1; d < this.hiddenLayers.length; d++) {
        // loop over depths
        var hiddenSize = this.hiddenLayers[d];
        this.model.hiddenLayers.push(this.constructor.getModel(hiddenSize, prevSize));
        prevSize = hiddenSize;
      }
    }
    /**
     *
     * @param {Number} hiddenSize
     * @param {Number} prevSize
     * @returns {object}
     */

  }, {
    key: "createInputMatrix",
    value: function createInputMatrix() {
      // 0 is end, so add 1 to offset
      this.model.input = new RandomMatrix(this.inputRange + 1, this.inputSize, 0.08);
    }
  }, {
    key: "createOutputMatrix",
    value: function createOutputMatrix() {
      var model = this.model;
      var outputSize = this.outputSize;
      var lastHiddenSize = this.hiddenLayers[this.hiddenLayers.length - 1]; // 0 is end, so add 1 to offset
      // whd

      model.outputConnector = new RandomMatrix(outputSize + 1, lastHiddenSize, 0.08); // 0 is end, so add 1 to offset
      // bd

      model.output = new Matrix(outputSize + 1, 1);
    }
  }, {
    key: "bindEquation",
    value: function bindEquation() {
      var model = this.model;
      var equation = new Equation();
      var outputs = [];
      var equationConnection = model.equationConnections.length > 0 ? model.equationConnections[model.equationConnections.length - 1] : this.initialLayerInputs; // 0 index

      var output = this.constructor.getEquation(equation, equation.inputMatrixToRow(model.input), equationConnection[0], model.hiddenLayers[0]);
      outputs.push(output); // 1+ indices

      for (var i = 1, max = this.hiddenLayers.length; i < max; i++) {
        output = this.constructor.getEquation(equation, output, equationConnection[i], model.hiddenLayers[i]);
        outputs.push(output);
      }

      model.equationConnections.push(outputs);
      equation.add(equation.multiply(model.outputConnector, output), model.output);
      model.equations.push(equation);
    }
  }, {
    key: "mapModel",
    value: function mapModel() {
      var model = this.model;
      var hiddenLayers = model.hiddenLayers;
      var allMatrices = model.allMatrices;
      this.initialLayerInputs = this.hiddenLayers.map(function (size) {
        return new Matrix(size, 1);
      });
      this.createInputMatrix();
      if (!model.input) throw new Error('net.model.input not set');
      allMatrices.push(model.input);
      this.createHiddenLayers();
      if (!model.hiddenLayers.length) throw new Error('net.hiddenLayers not set');

      for (var i = 0, max = hiddenLayers.length; i < max; i++) {
        var hiddenMatrix = hiddenLayers[i];

        for (var property in hiddenMatrix) {
          if (!hiddenMatrix.hasOwnProperty(property)) continue;
          allMatrices.push(hiddenMatrix[property]);
        }
      }

      this.createOutputMatrix();
      if (!model.outputConnector) throw new Error('net.model.outputConnector not set');
      if (!model.output) throw new Error('net.model.output not set');
      allMatrices.push(model.outputConnector);
      allMatrices.push(model.output);
    }
    /**
     *
     * @param {Number[]|string[]|string} input
     * @param {boolean} [logErrorRate]
     * @returns {number}
     */

  }, {
    key: "trainPattern",
    value: function trainPattern(input, logErrorRate) {
      var error = this.trainInput(input);
      this.backpropagate(input);
      this.adjustWeights();

      if (logErrorRate) {
        return error;
      }
    }
    /**
     *
     * @param {Number[]} input
     * @returns {number}
     */

  }, {
    key: "trainInput",
    value: function trainInput(input) {
      this.runs++;
      var model = this.model;
      var max = input.length;
      var log2ppl = 0;
      var equation;

      while (model.equations.length <= input.length + 1) {
        //last is zero
        this.bindEquation();
      }

      for (var inputIndex = -1, inputMax = input.length; inputIndex < inputMax; inputIndex++) {
        // start and end tokens are zeros
        var equationIndex = inputIndex + 1;
        equation = model.equations[equationIndex];
        var source = inputIndex === -1 ? 0 : input[inputIndex] + 1; // first step: start with START token

        var target = inputIndex === max - 1 ? 0 : input[inputIndex + 1] + 1; // last step: end with END token

        log2ppl += equation.predictTargetIndex(source, target);
      }

      return Math.pow(2, log2ppl / (max - 1)) / 100;
    }
    /**
     * @param {Number[]} input
     */

  }, {
    key: "backpropagate",
    value: function backpropagate(input) {
      var i = input.length;
      var model = this.model;
      var equations = model.equations;

      while (i > 0) {
        equations[i].backpropagateIndex(input[i - 1] + 1);
        i--;
      }

      equations[0].backpropagateIndex(0);
    }
  }, {
    key: "adjustWeights",
    value: function adjustWeights() {
      var regc = this.regc,
          clipval = this.clipval,
          model = this.model,
          decayRate = this.decayRate,
          stepCache = this.stepCache,
          smoothEps = this.smoothEps,
          trainOpts = this.trainOpts;
      var learningRate = trainOpts.learningRate;
      var allMatrices = model.allMatrices;
      var numClipped = 0;
      var numTot = 0;

      for (var matrixIndex = 0; matrixIndex < allMatrices.length; matrixIndex++) {
        var matrix = allMatrices[matrixIndex];
        var weights = matrix.weights,
            deltas = matrix.deltas;

        if (!(matrixIndex in stepCache)) {
          stepCache[matrixIndex] = zeros(matrix.rows * matrix.columns);
        }

        var cache = stepCache[matrixIndex];

        for (var i = 0; i < weights.length; i++) {
          var r = deltas[i];
          var w = weights[i]; // rmsprop adaptive learning rate

          cache[i] = cache[i] * decayRate + (1 - decayRate) * r * r; // gradient clip

          if (r > clipval) {
            r = clipval;
            numClipped++;
          }

          if (r < -clipval) {
            r = -clipval;
            numClipped++;
          }

          numTot++; // update (and regularize)

          weights[i] = w + -learningRate * r / Math.sqrt(cache[i] + smoothEps) - regc * w;
        }
      }

      this.ratioClipped = numClipped / numTot;
    }
    /**
     *
     * @returns boolean
     */

  }, {
    key: "run",

    /**
     *
     * @param {Number[]|*} [rawInput]
     * @param {Boolean} [isSampleI]
     * @param {Number} temperature
     * @returns {*}
     */
    value: function run() {
      var rawInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var isSampleI = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var temperature = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      var maxPredictionLength = this.maxPredictionLength + rawInput.length + (this.dataFormatter ? this.dataFormatter.specialIndexes.length : 0);
      if (!this.isRunnable) return null;
      var input = this.formatDataIn(rawInput);
      var model = this.model;
      var output = [];
      var i = 0;

      while (true) {
        var previousIndex = i === 0 ? 0 : i < input.length ? input[i - 1] + 1 : output[i - 1];

        while (model.equations.length <= i) {
          this.bindEquation();
        }

        var equation = model.equations[i]; // sample predicted letter

        var outputMatrix = equation.runIndex(previousIndex);
        var logProbabilities = new Matrix(model.output.rows, model.output.columns);
        copy(logProbabilities, outputMatrix);

        if (temperature !== 1 && isSampleI) {
          /**
           * scale log probabilities by temperature and re-normalize
           * if temperature is high, logProbabilities will go towards zero
           * and the softmax outputs will be more diffuse. if temperature is
           * very low, the softmax outputs will be more peaky
           */
          for (var j = 0, max = logProbabilities.weights.length; j < max; j++) {
            logProbabilities.weights[j] /= temperature;
          }
        }

        var probs = softmax(logProbabilities);
        var nextIndex = isSampleI ? sampleI(probs) : maxI(probs);
        i++;

        if (nextIndex === 0) {
          // END token predicted, break out
          break;
        }

        if (i >= maxPredictionLength) {
          // something is wrong
          break;
        }

        output.push(nextIndex);
      }
      /**
       * we slice the input length here, not because output contains it, but it will be erroneous as we are sending the
       * network what is contained in input, so the data is essentially guessed by the network what could be next, till it
       * locks in on a value.
       * Kind of like this, values are from input:
       * 0 -> 4 (or in English: "beginning on input" -> "I have no idea? I'll guess what they want next!")
       * 2 -> 2 (oh how interesting, I've narrowed down values...)
       * 1 -> 9 (oh how interesting, I've now know what the values are...)
       * then the output looks like: [4, 2, 9,...]
       * so we then remove the erroneous data to get our true output
       */


      return this.formatDataOut(input, output.slice(input.length).map(function (value) {
        return value - 1;
      }));
    }
    /**
     *
     * @param data
     * Verifies network sizes are initilaized
     * If they are not it will initialize them based off the data set.
     */

  }, {
    key: "verifyIsInitialized",
    value: function verifyIsInitialized(data) {
      if (!this.model) {
        this.initialize();
      }
    }
    /**
     *
     * @param options
     *    Supports all `trainDefaults` properties
     *    also supports:
     *       learningRate: (number),
     *       momentum: (number),
     *       activation: 'sigmoid', 'relu', 'leaky-relu', 'tanh'
     */

  }, {
    key: "updateTrainingOptions",
    value: function updateTrainingOptions(options) {
      var _this = this;

      Object.keys(this.constructor.trainDefaults).forEach(function (p) {
        return _this.trainOpts[p] = options.hasOwnProperty(p) ? options[p] : _this.trainOpts[p];
      });
      this.validateTrainingOptions(this.trainOpts);
      this.setLogMethod(options.log || this.trainOpts.log);
      this.activation = options.activation || this.activation;
    }
  }, {
    key: "validateTrainingOptions",
    value: function validateTrainingOptions(options) {
      NeuralNetwork.prototype.validateTrainingOptions.call(this, options);
    }
    /**
     *
     * @param log
     * if a method is passed in method is used
     * if false passed in nothing is logged
     * @returns error
     */

  }, {
    key: "setLogMethod",
    value: function setLogMethod(log) {
      if (typeof log === 'function') {
        this.trainOpts.log = log;
      } else if (log) {
        this.trainOpts.log = console.log;
      } else {
        this.trainOpts.log = false;
      }
    }
    /**
     *
     * @param data
     * @param options
     * @protected
     * @return {object} { data, status, endTime }
     */

  }, {
    key: "prepTraining",
    value: function prepTraining(data, options) {
      this.updateTrainingOptions(options);
      data = this.formatData(data);
      var endTime = Date.now() + this.trainOpts.timeout;
      var status = {
        error: 1,
        iterations: 0
      };
      this.verifyIsInitialized(data);
      return {
        data: data,
        status: status,
        endTime: endTime
      };
    }
    /**
     *
     * @param {Object[]|String[]} data an array of objects: `{input: 'string', output: 'string'}` or an array of strings
     * @param {Object} [options]
     * @returns {{error: number, iterations: number}}
     */

  }, {
    key: "train",
    value: function train(data) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.trainOpts = options = Object.assign({}, this.constructor.trainDefaults, options);
      var iterations = options.iterations;
      var errorThresh = options.errorThresh;
      var log = options.log === true ? console.log : options.log;
      var logPeriod = options.logPeriod;
      var callback = options.callback;
      var callbackPeriod = options.callbackPeriod;
      var error = Infinity;
      var i;

      if (this.hasOwnProperty('setupData')) {
        data = this.setupData(data);
      }

      this.verifyIsInitialized();

      for (i = 0; i < iterations && error > errorThresh; i++) {
        var sum = 0;

        for (var j = 0; j < data.length; j++) {
          var err = this.trainPattern(data[j], true);
          sum += err;
        }

        error = sum / data.length;
        if (isNaN(error)) throw new Error('network error rate is unexpected NaN, check network configurations and try again');

        if (log && i % logPeriod === 0) {
          log("iterations: ".concat(i, ", training error: ").concat(error));
        }

        if (callback && i % callbackPeriod === 0) {
          callback({
            error: error,
            iterations: i
          });
        }
      }

      return {
        error: error,
        iterations: i
      };
    }
  }, {
    key: "addFormat",
    value: function addFormat() {
      throw new Error('not yet implemented');
    }
    /**
     *
     * @returns {Object}
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var defaults = this.constructor.defaults;

      if (!this.model) {
        this.initialize();
      }

      var model = this.model;
      var options = {};

      for (var p in defaults) {
        if (defaults.hasOwnProperty(p)) {
          options[p] = this[p];
        }
      }

      return {
        type: this.constructor.name,
        options: options,
        input: model.input.toJSON(),
        hiddenLayers: model.hiddenLayers.map(function (hiddenLayer) {
          var layers = {};

          for (var _p in hiddenLayer) {
            layers[_p] = hiddenLayer[_p].toJSON();
          }

          return layers;
        }),
        outputConnector: this.model.outputConnector.toJSON(),
        output: this.model.output.toJSON()
      };
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      var defaults = this.constructor.defaults;
      var options = json.options;
      this.model = null;
      this.hiddenLayers = null;
      var allMatrices = [];
      var input = Matrix.fromJSON(json.input);
      allMatrices.push(input);
      var hiddenLayers = []; // backward compatibility for hiddenSizes

      (json.hiddenLayers || json.hiddenSizes).forEach(function (hiddenLayer) {
        var layers = {};

        for (var p in hiddenLayer) {
          layers[p] = Matrix.fromJSON(hiddenLayer[p]);
          allMatrices.push(layers[p]);
        }

        hiddenLayers.push(layers);
      });
      var outputConnector = Matrix.fromJSON(json.outputConnector);
      allMatrices.push(outputConnector);
      var output = Matrix.fromJSON(json.output);
      allMatrices.push(output);
      Object.assign(this, defaults, options); // backward compatibility

      if (options.hiddenSizes) {
        this.hiddenLayers = options.hiddenSizes;
      }

      if (options.dataFormatter) {
        this.dataFormatter = DataFormatter.fromJSON(options.dataFormatter);
      }

      this.model = {
        input: input,
        hiddenLayers: hiddenLayers,
        output: output,
        allMatrices: allMatrices,
        outputConnector: outputConnector,
        equations: [],
        equationConnections: []
      };
      this.initialLayerInputs = this.hiddenLayers.map(function (size) {
        return new Matrix(size, 1);
      });
      this.bindEquation();
    }
    /**
     * @param {Function} [cb]
     * @returns {Function}
     */

  }, {
    key: "toFunction",
    value: function toFunction(cb) {
      var model = this.model;
      var equations = this.model.equations;
      var equation = equations[1];
      var states = equation.states;
      var jsonString = JSON.stringify(this.toJSON());

      function matrixOrigin(m, stateIndex) {
        for (var i = 0, max = states.length; i < max; i++) {
          var state = states[i];

          if (i === stateIndex) {
            var j = previousConnectionIndex(m);

            if (j > -1 && (m === state.left || m === state.right)) {
              return "typeof prevStates[".concat(j, "] === 'object' ? prevStates[").concat(j, "].product : new Matrix(").concat(m.rows, ", ").concat(m.columns, ")");
            } else {
              return "new Matrix(".concat(m.rows, ", ").concat(m.columns, ")");
            }
          }

          if (m === state.product) return "states[".concat(i, "].product");
          if (m === state.right) return "states[".concat(i, "].right");
          if (m === state.left) return "states[".concat(i, "].left");
        }
      }

      function previousConnectionIndex(m) {
        var connection = model.equationConnections[0];
        var states = equations[0].states;

        for (var i = 0, max = states.length; i < max; i++) {
          if (states[i].product === m) {
            return i;
          }
        }

        return connection.indexOf(m);
      }

      function matrixToString(m, stateIndex) {
        if (!m || !m.rows || !m.columns) return 'null';
        if (m === model.input) return "json.input";
        if (m === model.outputConnector) return "json.outputConnector";
        if (m === model.output) return "json.output";

        for (var i = 0, max = model.hiddenLayers.length; i < max; i++) {
          var hiddenLayer = model.hiddenLayers[i];

          for (var p in hiddenLayer) {
            if (!hiddenLayer.hasOwnProperty(p)) continue;
            if (hiddenLayer[p] !== m) continue;
            return "json.hiddenLayers[".concat(i, "].").concat(p);
          }
        }

        return matrixOrigin(m, stateIndex);
      }

      function toInner(fnString) {
        // crude, but should be sufficient for now
        // function() { body }
        fnString = fnString.toString().split('{');
        fnString.shift(); // body }

        fnString = fnString.join('{');
        fnString = fnString.split('}');
        fnString.pop(); // body

        return fnString.join('}').split('\n').join('\n        ').replace('product.deltas[i] = 0;', '').replace('product.deltas[column] = 0;', '').replace('left.deltas[leftIndex] = 0;', '').replace('right.deltas[rightIndex] = 0;', '').replace('product.deltas = left.deltas.slice(0);', '');
      }

      function fileName(fnName) {
        return "src/recurrent/matrix/".concat(fnName.replace(/[A-Z]/g, function (value) {
          return '-' + value.toLowerCase();
        }), ".js");
      }

      var statesRaw = [];
      var usedFunctionNames = {};
      var innerFunctionsSwitch = [];

      for (var i = 0, max = states.length; i < max; i++) {
        var state = states[i];
        statesRaw.push("states[".concat(i, "] = {\n      name: '").concat(state.forwardFn.name, "',\n      left: ").concat(matrixToString(state.left, i), ",\n      right: ").concat(matrixToString(state.right, i), ",\n      product: ").concat(matrixToString(state.product, i), "\n    }"));
        var fnName = state.forwardFn.name;

        if (!usedFunctionNames[fnName]) {
          usedFunctionNames[fnName] = true;
          innerFunctionsSwitch.push("        case '".concat(fnName, "': //compiled from ").concat(fileName(fnName), "\n          ").concat(toInner(state.forwardFn.toString()), "\n          break;"));
        }
      }

      var src = "\n  if (typeof rawInput === 'undefined') rawInput = [];\n  if (typeof isSampleI === 'undefined') isSampleI = false;\n  if (typeof temperature === 'undefined') temperature = 1;\n  var json = ".concat(jsonString, ";\n  ").concat(this.dataFormatter ? "".concat(this.dataFormatter.toFunctionString(), ";\n  Object.assign(dataFormatter, json.options.dataFormatter);") : '', "\n  ").concat(this.dataFormatter && typeof this.formatDataIn === 'function' ? "const formatDataIn = function (input, output) { ".concat(toInner(this.formatDataIn.toString()), " }.bind({ dataFormatter });") : '', "\n  ").concat(this.dataFormatter !== null && typeof this.formatDataOut === 'function' ? "const formatDataOut = function formatDataOut(input, output) { ".concat(toInner(this.formatDataOut.toString()), " }.bind({ dataFormatter });") : '', "\n  var input = ").concat(this.dataFormatter && typeof this.formatDataIn === 'function' ? 'formatDataIn(rawInput)' : 'rawInput', ";\n  var maxPredictionLength = input.length + ").concat(this.maxPredictionLength, ";\n  var _i = 0;\n  var output = [];\n  var states = [];\n  var prevStates;\n  while (true) {\n    var previousIndex = (_i === 0\n        ? 0\n        : _i < input.length\n          ? input[_i - 1] + 1\n          : output[_i - 1])\n          ;\n    var rowPluckIndex = previousIndex;\n    prevStates = states;\n    states = [];\n    ").concat(statesRaw.join(';\n    '), ";\n    for (var stateIndex = 0, stateMax = ").concat(statesRaw.length, "; stateIndex < stateMax; stateIndex++) {\n      var state = states[stateIndex];\n      var product = state.product;\n      var left = state.left;\n      var right = state.right;\n      switch (state.name) {\n").concat(innerFunctionsSwitch.join('\n'), "\n      }\n    }\n    \n    var logProbabilities = state.product;\n    if (temperature !== 1 && isSampleI) {\n      for (var q = 0, nq = logProbabilities.weights.length; q < nq; q++) {\n        logProbabilities.weights[q] /= temperature;\n      }\n    }\n\n    var probs = softmax(logProbabilities);\n    var nextIndex = isSampleI ? sampleI(probs) : maxI(probs);\n    \n    _i++;\n    if (nextIndex === 0) {\n      break;\n    }\n    if (_i >= maxPredictionLength) {\n      break;\n    }\n\n    output.push(nextIndex);\n  }\n  ").concat(this.dataFormatter && typeof this.formatDataOut === 'function' ? 'return formatDataOut(input, output.slice(input.length).map(function(value) { return value - 1; }))' : 'return output.slice(input.length).map(function(value) { return value - 1; })', ";\n  function Matrix(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    this.weights = zeros(rows * columns);\n  }\n  ").concat(zeros.toString(), "\n  ").concat(softmax.toString(), "\n  ").concat(randomFloat.toString(), "\n  ").concat(sampleI.toString(), "\n  ").concat(maxI.toString());
      return new Function('rawInput', 'isSampleI', 'temperature', cb ? cb(src) : src);
    }
  }, {
    key: "isRunnable",
    get: function get() {
      if (this.model.equations.length === 0) {
        console.error("No equations bound, did you run train()?");
        return false;
      }

      return true;
    }
  }], [{
    key: "getModel",
    value: function getModel(hiddenSize, prevSize) {
      return {
        //wxh
        weight: new RandomMatrix(hiddenSize, prevSize, 0.08),
        //whh
        transition: new RandomMatrix(hiddenSize, hiddenSize, 0.08),
        //bhh
        bias: new Matrix(hiddenSize, 1)
      };
    }
    /**
     *
     * @param {Equation} equation
     * @param {Matrix} inputMatrix
     * @param {Matrix} previousResult
     * @param {Object} hiddenLayer
     * @returns {Matrix}
     */

  }, {
    key: "getEquation",
    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {
      var relu = equation.relu.bind(equation);
      var add = equation.add.bind(equation);
      var multiply = equation.multiply.bind(equation);
      return relu(add(add(multiply(hiddenLayer.weight, inputMatrix), multiply(hiddenLayer.transition, previousResult)), hiddenLayer.bias));
    }
  }]);

  return RNN;
}();

RNN.defaults = {
  inputSize: 20,
  inputRange: 20,
  hiddenLayers: [20, 20],
  outputSize: 20,
  decayRate: 0.999,
  smoothEps: 1e-8,
  regc: 0.000001,
  clipval: 5,
  maxPredictionLength: 100,

  /**
   *
   * @param {*[]} data
   * @returns {Number[]}
   */
  setupData: function setupData(data) {
    if (typeof data[0] !== 'string' && !Array.isArray(data[0]) && (!data[0].hasOwnProperty('input') || !data[0].hasOwnProperty('output'))) {
      return data;
    }

    var values = [];
    var result = [];

    if (typeof data[0] === 'string' || Array.isArray(data[0])) {
      if (!this.dataFormatter) {
        for (var i = 0; i < data.length; i++) {
          values.push(data[i]);
        }

        this.dataFormatter = new DataFormatter(values);
        this.dataFormatter.addUnrecognized();
      }

      for (var _i = 0, max = data.length; _i < max; _i++) {
        result.push(this.formatDataIn(data[_i]));
      }
    } else {
      if (!this.dataFormatter) {
        for (var _i2 = 0; _i2 < data.length; _i2++) {
          values.push(data[_i2].input);
          values.push(data[_i2].output);
        }

        this.dataFormatter = DataFormatter.fromArrayInputOutput(values);
        this.dataFormatter.addUnrecognized();
      }

      for (var _i3 = 0, _max = data.length; _i3 < _max; _i3++) {
        result.push(this.formatDataIn(data[_i3].input, data[_i3].output));
      }
    }

    return result;
  },

  /**
   *
   * @param {*[]} input
   * @param {*[]} output
   * @returns {Number[]}
   */
  formatDataIn: function formatDataIn(input) {
    var output = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (this.dataFormatter) {
      if (this.dataFormatter.indexTable.hasOwnProperty('stop-input')) {
        return this.dataFormatter.toIndexesInputOutput(input, output);
      } else {
        return this.dataFormatter.toIndexes(input);
      }
    }

    return input;
  },

  /**
   *
   * @param {Number[]} input
   * @param {Number[]} output
   * @returns {*}
   */
  formatDataOut: function formatDataOut(input, output) {
    if (this.dataFormatter) {
      return this.dataFormatter.toCharacters(output).join('');
    }

    return output;
  },
  dataFormatter: null
};
RNN.trainDefaults = {
  iterations: 20000,
  errorThresh: 0.005,
  log: false,
  logPeriod: 10,
  learningRate: 0.01,
  callback: null,
  callbackPeriod: 10
};
module.exports = RNN;
},{"./matrix":"v84l","./matrix/random-matrix":"zGuK","./matrix/equation":"ytIu","./matrix/sample-i":"lOwB","./matrix/max-i":"wnUe","./matrix/softmax":"Ens1","./matrix/copy":"SjoR","../utilities/random":"Sd27","../utilities/zeros":"M4LY","../utilities/data-formatter":"u3NV","../neural-network":"epZU"}],"V51U":[function(require,module,exports) {
function ArrayLookupTable(data, prop) {
  this.length = 0;
  this.prop = prop;
  var table = this.table = {};

  for (var i = 0; i < data.length; i++) {
    var datum = data[i];
    var input = datum[prop];

    for (var j = 0; j < input.length; j++) {
      for (var p in input[j]) {
        if (table.hasOwnProperty(p)) continue;
        table[p] = this.length++;
      }
    }
  }
}

module.exports = ArrayLookupTable;
},{}],"zri4":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Matrix = require('./matrix');

var RandomMatrix = require('./matrix/random-matrix');

var Equation = require('./matrix/equation');

var RNN = require('./rnn');

var zeros = require('../utilities/zeros');

var softmax = require('./matrix/softmax');

var _require = require('../utilities/random'),
    randomFloat = _require.randomFloat;

var sampleI = require('./matrix/sample-i');

var maxI = require('./matrix/max-i');

var lookup = require("../lookup");

var LookupTable = require('../utilities/lookup-table');

var ArrayLookupTable = require('../utilities/array-lookup-table');

var _require2 = require('../utilities/cast'),
    arraysToFloat32Arrays = _require2.arraysToFloat32Arrays,
    arrayToFloat32Arrays = _require2.arrayToFloat32Arrays,
    objectsToFloat32Arrays = _require2.objectsToFloat32Arrays,
    objectToFloat32Arrays = _require2.objectToFloat32Arrays,
    objectToFloat32Array = _require2.objectToFloat32Array;

var RNNTimeStep =
/*#__PURE__*/
function (_RNN) {
  _inherits(RNNTimeStep, _RNN);

  // eslint-disable-next-line
  function RNNTimeStep(options) {
    _classCallCheck(this, RNNTimeStep);

    return _possibleConstructorReturn(this, _getPrototypeOf(RNNTimeStep).call(this, options));
  }

  _createClass(RNNTimeStep, [{
    key: "createInputMatrix",
    value: function createInputMatrix() {}
  }, {
    key: "createOutputMatrix",
    value: function createOutputMatrix() {
      var model = this.model;
      var outputSize = this.outputSize;
      var lastHiddenSize = this.hiddenLayers[this.hiddenLayers.length - 1]; //whd

      model.outputConnector = new RandomMatrix(outputSize, lastHiddenSize, 0.08); //bd

      model.output = new RandomMatrix(outputSize, 1, 0.08);
    }
  }, {
    key: "bindEquation",
    value: function bindEquation() {
      var model = this.model;
      var hiddenLayers = this.hiddenLayers;
      var layers = model.hiddenLayers;
      var equation = new Equation();
      var outputs = [];
      var equationConnection = model.equationConnections.length > 0 ? model.equationConnections[model.equationConnections.length - 1] : this.initialLayerInputs; // 0 index

      var output = this.constructor.getEquation(equation, equation.input(new Matrix(this.inputSize, 1)), equationConnection[0], layers[0]);
      outputs.push(output); // 1+ indices

      for (var i = 1, max = hiddenLayers.length; i < max; i++) {
        output = this.constructor.getEquation(equation, output, equationConnection[i], layers[i]);
        outputs.push(output);
      }

      model.equationConnections.push(outputs);
      equation.add(equation.multiply(model.outputConnector, output), model.output);
      model.equations.push(equation);
    }
  }, {
    key: "mapModel",
    value: function mapModel() {
      var model = this.model;
      var hiddenLayers = model.hiddenLayers;
      var allMatrices = model.allMatrices;
      this.initialLayerInputs = this.hiddenLayers.map(function (size) {
        return new Matrix(size, 1);
      });
      this.createHiddenLayers();
      if (!model.hiddenLayers.length) throw new Error('net.hiddenLayers not set');

      for (var i = 0, max = hiddenLayers.length; i < max; i++) {
        var hiddenMatrix = hiddenLayers[i];

        for (var property in hiddenMatrix) {
          if (!hiddenMatrix.hasOwnProperty(property)) continue;
          allMatrices.push(hiddenMatrix[property]);
        }
      }

      this.createOutputMatrix();
      if (!model.outputConnector) throw new Error('net.model.outputConnector not set');
      if (!model.output) throw new Error('net.model.output not set');
      allMatrices.push(model.outputConnector);
      allMatrices.push(model.output);
    }
  }, {
    key: "backpropagate",
    value: function backpropagate() {
      for (var i = this.model.equations.length - 1; i > -1; i--) {
        this.model.equations[i].backpropagate();
      }
    }
    /**
     *
     * @param {number[]|number[][]|object|object[][]} [rawInput]
     * @returns {number[]|number|object|object[]|object[][]}
     */

  }, {
    key: "run",
    value: function run(rawInput) {
      if (this.inputSize === 1) {
        if (this.outputLookup) {
          this.run = this.runObject;
          return this.runObject(rawInput);
        }

        this.run = this.runNumbers;
        return this.runNumbers(rawInput);
      }

      if (this.outputLookup) {
        this.run = this.runObjects;
        return this.runObjects(rawInput);
      }

      this.run = this.runArrays;
      return this.runArrays(rawInput);
    }
  }, {
    key: "forecast",
    value: function forecast(input, count) {
      if (this.inputSize === 1) {
        if (this.outputLookup) {
          this.forecast = this.runObject;
          return this.runObject(input);
        }

        this.forecast = this.forecastNumbers;
        return this.forecastNumbers(input, count);
      }

      if (this.outputLookup) {
        this.forecast = this.forecastObjects;
        return this.forecastObjects(input, count);
      }

      this.forecast = this.forecastArrays;
      return this.forecastArrays(input, count);
    }
    /**
     *
     * @param {Object[]|String[]} data an array of objects: `{input: 'string', output: 'string'}` or an array of strings
     * @param {Object} [options]
     * @returns {{error: number, iterations: number}}
     */

  }, {
    key: "train",
    value: function train(data) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.trainOpts = options = Object.assign({}, this.constructor.trainDefaults, options);
      var iterations = options.iterations;
      var errorThresh = options.errorThresh;
      var log = options.log === true ? console.log : options.log;
      var logPeriod = options.logPeriod;
      var callback = options.callback;
      var callbackPeriod = options.callbackPeriod;

      if (this.inputSize === 1 || !this.inputSize) {
        this.setSize(data);
      }

      data = this.formatData(data);
      var error = Infinity;
      var i;
      this.verifyIsInitialized(data);

      for (i = 0; i < iterations && error > errorThresh; i++) {
        var sum = 0;

        for (var j = 0; j < data.length; j++) {
          var err = this.trainPattern(data[j], true);
          sum += err;
        }

        error = sum / data.length;
        if (isNaN(error)) throw new Error('network error rate is unexpected NaN, check network configurations and try again');

        if (log && i % logPeriod === 0) {
          log("iterations: ".concat(i, ", training error: ").concat(error));
        }

        if (callback && i % callbackPeriod === 0) {
          callback({
            error: error,
            iterations: i
          });
        }
      }

      return {
        error: error,
        iterations: i
      };
    }
    /**
     *
     * @param data
     * Verifies network sizes are initialized
     * If they are not it will initialize them based off the data set.
     */

  }, {
    key: "verifyIsInitialized",
    value: function verifyIsInitialized(data) {
      if (data[0].input) {
        this.trainInput = this.trainInputOutput;
      } else if (data[0].length > 0) {
        if (data[0][0].length > 0) {
          this.trainInput = this.trainArrays;
        } else {
          if (this.inputSize > 1) {
            this.trainInput = this.trainArrays;
          } else {
            this.trainInput = this.trainNumbers;
          }
        }
      }

      if (!this.model) {
        this.initialize();
      }
    }
  }, {
    key: "setSize",
    value: function setSize(data) {
      var dataShape = lookup.dataShape(data).join(',');

      switch (dataShape) {
        case 'array,array,number':
        case 'array,object,number':
        case 'array,datum,array,number':
        case 'array,datum,object,number':
          // probably 1
          break;

        case 'array,array,array,number':
          this.inputSize = this.outputSize = data[0][0].length;
          break;

        case 'array,array,object,number':
          this.inputSize = this.outputSize = Object.keys(lookup.toTable2D(data)).length;
          break;

        case 'array,datum,array,array,number':
          this.inputSize = this.outputSize = data[0].input[0].length;
          break;

        case 'array,datum,array,object,number':
          this.inputSize = Object.keys(lookup.toInputTable2D(data)).length;
          this.outputSize = Object.keys(lookup.toOutputTable2D(data)).length;
          break;

        default:
          throw new Error('unknown data shape or configuration');
      }
    }
  }, {
    key: "trainNumbers",
    value: function trainNumbers(input) {
      var model = this.model;
      var equations = model.equations;

      while (equations.length < input.length) {
        this.bindEquation();
      }

      var errorSum = 0;

      for (var i = 0, max = input.length - 1; i < max; i++) {
        errorSum += equations[i].predictTarget([input[i]], [input[i + 1]]);
      }

      this.end();
      return errorSum / input.length;
    }
  }, {
    key: "runNumbers",
    value: function runNumbers(input) {
      if (!this.isRunnable) return null;
      var model = this.model;
      var equations = model.equations;

      if (this.inputLookup) {
        input = lookup.toArray(this.inputLookup, input, this.inputLookupLength);
      }

      while (equations.length <= input.length) {
        this.bindEquation();
      }

      var lastOutput;

      for (var i = 0; i < input.length; i++) {
        lastOutput = equations[i].runInput([input[i]]);
      }

      this.end();
      return lastOutput.weights[0];
    }
  }, {
    key: "forecastNumbers",
    value: function forecastNumbers(input, count) {
      if (!this.isRunnable) return null;
      var model = this.model;
      var equations = model.equations;
      var length = input.length + count;

      while (equations.length <= length) {
        this.bindEquation();
      }

      var lastOutput;
      var equationIndex = 0;

      for (var i = 0; i < input.length; i++) {
        lastOutput = equations[equationIndex++].runInput([input[i]]);
      }

      var result = [lastOutput.weights[0]];

      for (var _i = 0, max = count - 1; _i < max; _i++) {
        lastOutput = equations[equationIndex++].runInput(lastOutput.weights);
        result.push(lastOutput.weights[0]);
      }

      this.end();
      return result;
    }
  }, {
    key: "runObject",
    value: function runObject(input) {
      if (this.inputLookup === this.outputLookup) {
        var inputArray = lookup.toArrayShort(this.inputLookup, input);
        return lookup.toObjectPartial(this.outputLookup, this.forecastNumbers(inputArray, this.outputLookupLength - inputArray.length), inputArray.length);
      }

      return lookup.toObject(this.outputLookup, this.forecastNumbers(lookup.toArray(this.inputLookup, input, this.inputLookupLength), this.outputLookupLength));
    }
  }, {
    key: "runObjects",
    value: function runObjects(input) {
      var _this = this;

      input = input.map(function (value) {
        return lookup.toArray(_this.inputLookup, value, _this.inputLookupLength);
      });
      return this.forecastArrays(input, 1).map(function (value) {
        return lookup.toObject(_this.outputLookup, value);
      })[0];
    }
  }, {
    key: "forecastObjects",
    value: function forecastObjects(input, count) {
      var _this2 = this;

      input = input.map(function (value) {
        return lookup.toArray(_this2.inputLookup, value, _this2.inputLookupLength);
      });
      return this.forecastArrays(input, count).map(function (value) {
        return lookup.toObject(_this2.outputLookup, value);
      });
    }
  }, {
    key: "trainInputOutput",
    value: function trainInputOutput(object) {
      var model = this.model;
      var input = object.input;
      var output = object.output;
      var totalSize = input.length + output.length;
      var equations = model.equations;

      while (equations.length < totalSize) {
        this.bindEquation();
      }

      var errorSum = 0;
      var equationIndex = 0;

      for (var inputIndex = 0, max = input.length - 1; inputIndex < max; inputIndex++) {
        errorSum += equations[equationIndex++].predictTarget(input[inputIndex], input[inputIndex + 1]);
      }

      errorSum += equations[equationIndex++].predictTarget(input[input.length - 1], output[0]);

      for (var outputIndex = 0, _max = output.length - 1; outputIndex < _max; outputIndex++) {
        errorSum += equations[equationIndex++].predictTarget(output[outputIndex], output[outputIndex + 1]);
      }

      this.end();
      return errorSum / totalSize;
    }
  }, {
    key: "trainArrays",
    value: function trainArrays(input) {
      var model = this.model;
      var equations = model.equations;

      while (equations.length < input.length) {
        this.bindEquation();
      }

      var errorSum = 0;

      for (var i = 0, max = input.length - 1; i < max; i++) {
        errorSum += equations[i].predictTarget(input[i], input[i + 1]);
      }

      this.end();
      return errorSum / input.length;
    }
  }, {
    key: "runArrays",
    value: function runArrays(input) {
      if (!this.isRunnable) return null;
      var model = this.model;
      var equations = model.equations;

      while (equations.length <= input.length) {
        this.bindEquation();
      }

      if (this.inputLookup) {
        input = lookup.toArrays(this.inputLookup, input, this.inputLookupLength);
      }

      var lastOutput;

      for (var i = 0; i < input.length; i++) {
        var outputMatrix = equations[i].runInput(input[i]);
        lastOutput = outputMatrix.weights;
      }

      this.end();

      if (this.outputLookup) {
        return lookup.toObject(this.outputLookup, lastOutput);
      }

      return lastOutput;
    }
  }, {
    key: "forecastArrays",
    value: function forecastArrays(input, count) {
      if (!this.isRunnable) return null;
      var model = this.model;
      var equations = model.equations;
      var length = input.length + count;

      while (equations.length <= length) {
        this.bindEquation();
      }

      var lastOutput;
      var equationIndex = 0;

      for (var i = 0; i < input.length; i++) {
        lastOutput = equations[equationIndex++].runInput(input[i]);
      }

      var result = [lastOutput.weights];

      for (var _i2 = 0, max = count - 1; _i2 < max; _i2++) {
        lastOutput = equations[equationIndex++].runInput(lastOutput.weights);
        result.push(lastOutput.weights.slice(0));
      }

      this.end();
      return result;
    }
  }, {
    key: "end",
    value: function end() {
      this.model.equations[this.model.equations.length - 1].runInput(new Float32Array(this.outputSize));
    }
    /**
     *
     * @param data
     * @returns {*}
     */

  }, {
    key: "formatData",
    value: function formatData(data) {
      var dataShape = lookup.dataShape(data).join(',');
      var result = [];

      switch (dataShape) {
        case 'array,number':
          {
            if (this.inputSize !== 1) {
              throw new Error('inputSize must be 1 for this data size');
            }

            if (this.outputSize !== 1) {
              throw new Error('outputSize must be 1 for this data size');
            }

            for (var i = 0; i < data.length; i++) {
              result.push(Float32Array.from([data[i]]));
            }

            return [result];
          }

        case 'array,array,number':
          {
            if (this.inputSize === 1 && this.outputSize === 1) {
              for (var _i3 = 0; _i3 < data.length; _i3++) {
                result.push(arrayToFloat32Arrays(data[_i3]));
              }

              return result;
            }

            if (this.inputSize !== data[0].length) {
              throw new Error('inputSize must match data input size');
            }

            if (this.outputSize !== data[0].length) {
              throw new Error('outputSize must match data input size');
            }

            for (var _i4 = 0; _i4 < data.length; _i4++) {
              result.push(Float32Array.from(data[_i4]));
            }

            return [result];
          }

        case 'array,object,number':
          {
            if (this.inputSize !== 1) {
              throw new Error('inputSize must be 1 for this data size');
            }

            if (this.outputSize !== 1) {
              throw new Error('outputSize must be 1 for this data size');
            }

            if (!this.inputLookup) {
              var lookupTable = new LookupTable(data);
              this.inputLookup = this.outputLookup = lookupTable.table;
              this.inputLookupLength = this.outputLookupLength = lookupTable.length;
            }

            for (var _i5 = 0; _i5 < data.length; _i5++) {
              result.push(objectToFloat32Arrays(data[_i5]));
            }

            return result;
          }

        case 'array,datum,array,number':
          {
            if (this.inputSize !== 1) {
              throw new Error('inputSize must be 1 for this data size');
            }

            if (this.outputSize !== 1) {
              throw new Error('outputSize must be 1 for this data size');
            }

            for (var _i6 = 0; _i6 < data.length; _i6++) {
              var datum = data[_i6];
              result.push({
                input: arrayToFloat32Arrays(datum.input),
                output: arrayToFloat32Arrays(datum.output)
              });
            }

            return result;
          }

        case 'array,datum,object,number':
          {
            if (this.inputSize !== 1) {
              throw new Error('inputSize must be 1 for this data size');
            }

            if (this.outputSize !== 1) {
              throw new Error('outputSize must be 1 for this data size');
            }

            if (!this.inputLookup) {
              var inputLookup = new LookupTable(data, 'input');
              this.inputLookup = inputLookup.table;
              this.inputLookupLength = inputLookup.length;
            }

            if (!this.outputLookup) {
              var outputLookup = new LookupTable(data, 'output');
              this.outputLookup = outputLookup.table;
              this.outputLookupLength = outputLookup.length;
            }

            for (var _i7 = 0; _i7 < data.length; _i7++) {
              var _datum = data[_i7];
              result.push({
                input: objectToFloat32Arrays(_datum.input),
                output: objectToFloat32Arrays(_datum.output)
              });
            }

            return result;
          }

        case 'array,array,array,number':
          {
            for (var _i8 = 0; _i8 < data.length; _i8++) {
              result.push(arraysToFloat32Arrays(data[_i8]));
            }

            return result;
          }

        case 'array,array,object,number':
          {
            if (!this.inputLookup) {
              var _lookupTable = new LookupTable(data);

              this.inputLookup = this.outputLookup = _lookupTable.table;
              this.inputLookupLength = this.outputLookupLength = _lookupTable.length;
            }

            for (var _i9 = 0; _i9 < data.length; _i9++) {
              var array = [];

              for (var j = 0; j < data[_i9].length; j++) {
                array.push(objectToFloat32Array(data[_i9][j], this.inputLookup, this.inputLookupLength));
              }

              result.push(array);
            }

            return result;
          }

        case 'array,datum,array,array,number':
          {
            if (this.inputSize === 1 && this.outputSize === 1) {
              for (var _i10 = 0; _i10 < data.length; _i10++) {
                var _datum2 = data[_i10];
                result.push({
                  input: Float32Array.from(_datum2.input),
                  output: Float32Array.from(_datum2.output)
                });
              }
            } else {
              if (this.inputSize !== data[0].input[0].length) {
                throw new Error('inputSize must match data input size');
              }

              if (this.outputSize !== data[0].output[0].length) {
                throw new Error('outputSize must match data output size');
              }

              for (var _i11 = 0; _i11 < data.length; _i11++) {
                var _datum3 = data[_i11];
                result.push({
                  input: arraysToFloat32Arrays(_datum3.input),
                  output: arraysToFloat32Arrays(_datum3.output)
                });
              }
            }

            return result;
          }

        case 'array,datum,array,object,number':
          {
            if (!this.inputLookup) {
              var _inputLookup = new ArrayLookupTable(data, 'input');

              this.inputLookup = _inputLookup.table;
              this.inputLookupLength = _inputLookup.length;
            }

            if (!this.outputLookup) {
              var _outputLookup = new ArrayLookupTable(data, 'output');

              this.outputLookup = _outputLookup.table;
              this.outputLookupLength = _outputLookup.length;
            }

            for (var _i12 = 0; _i12 < data.length; _i12++) {
              var _datum4 = data[_i12];
              result.push({
                input: objectsToFloat32Arrays(_datum4.input, this.inputLookup, this.inputLookupLength),
                output: objectsToFloat32Arrays(_datum4.output, this.outputLookup, this.outputLookupLength)
              });
            }

            return result;
          }

        default:
          throw new Error('unknown data shape or configuration');
      }
    }
    /**
     *
     * @param data
     * @returns {
     *  {
     *    error: number,
     *    misclasses: Array
     *  }
     * }
     */

  }, {
    key: "test",
    value: function test(data) {
      var formattedData = this.formatData(data); // for classification problems

      var misclasses = []; // run each pattern through the trained network and collect
      // error and misclassification statistics

      var errorSum = 0;
      var dataShape = lookup.dataShape(data).join(',');

      switch (dataShape) {
        case 'array,array,number':
          {
            if (this.inputSize === 1) {
              for (var i = 0; i < formattedData.length; i++) {
                var input = formattedData[i];
                var output = this.run(input.splice(0, input.length - 1));
                var target = input[input.length - 1][0];
                var error = target - output;
                var errorMSE = error * error;
                errorSum += errorMSE;
                var errorsAbs = Math.abs(errorMSE);

                if (errorsAbs > this.trainOpts.errorThresh) {
                  var misclass = data[i];
                  Object.assign(misclass, {
                    value: input,
                    actual: output
                  });
                  misclasses.push(misclass);
                }
              }

              break;
            }

            throw new Error('unknown data shape or configuration');
          }

        case 'array,array,array,number':
          {
            for (var _i13 = 0; _i13 < formattedData.length; _i13++) {
              var _input = formattedData[_i13];

              var _output = this.run(_input.splice(0, _input.length - 1));

              var _target = _input[_input.length - 1];
              var errors = 0;
              var errorCount = 0;

              for (var j = 0; j < _output.length; j++) {
                errorCount++;

                var _error = _target[j] - _output[j]; // mse


                errors += _error * _error;
              }

              errorSum += errors / errorCount;

              var _errorsAbs = Math.abs(errors);

              if (_errorsAbs > this.trainOpts.errorThresh) {
                var _misclass = data[_i13];
                misclasses.push({
                  value: _misclass,
                  actual: _output
                });
              }
            }

            break;
          }

        case 'array,object,number':
          {
            for (var _i14 = 0; _i14 < formattedData.length; _i14++) {
              var _input2 = formattedData[_i14];

              var _output2 = this.run(lookup.toObjectPartial(this.outputLookup, _input2, 0, _input2.length - 1));

              var _target2 = _input2[_input2.length - 1];
              var _errors = 0;
              var p = void 0;

              for (p in _output2) {}

              var _error2 = _target2[_i14] - _output2[p]; // mse


              _errors += _error2 * _error2;
              errorSum += _errors;

              var _errorsAbs2 = Math.abs(_errors);

              if (_errorsAbs2 > this.trainOpts.errorThresh) {
                var _misclass2 = data[_i14];
                misclasses.push({
                  value: _misclass2,
                  actual: _output2
                });
              }
            }

            break;
          }

        case 'array,array,object,number':
          {
            for (var _i15 = 0; _i15 < formattedData.length; _i15++) {
              var _input3 = formattedData[_i15];

              var _output3 = this.run(_input3.slice(0, _input3.length - 1));

              var _target3 = data[_i15][_input3.length - 1];
              var _errors2 = 0;
              var _errorCount = 0;

              for (var _p in _output3) {
                var _error3 = _target3[_p] - _output3[_p]; // mse


                _errors2 += _error3 * _error3;
                _errorCount++;
              }

              errorSum += _errors2 / _errorCount;

              var _errorsAbs3 = Math.abs(_errors2);

              if (_errorsAbs3 > this.trainOpts.errorThresh) {
                var _misclass3 = data[_i15];
                misclasses.push({
                  value: _misclass3,
                  actual: _output3
                });
              }
            }

            break;
          }

        case 'array,datum,array,number':
        case 'array,datum,object,number':
          {
            for (var _i16 = 0; _i16 < formattedData.length; _i16++) {
              var datum = formattedData[_i16];

              var _output4 = this.forecast(datum.input, datum.output.length);

              var _errors3 = 0;
              var _errorCount2 = 0;

              for (var _j = 0; _j < _output4.length; _j++) {
                var _error4 = datum.output[_j][0] - _output4[_j];

                _errors3 += _error4 * _error4;
                _errorCount2++;
              }

              errorSum += _errors3 / _errorCount2;

              var _errorsAbs4 = Math.abs(_errors3);

              if (_errorsAbs4 > this.trainOpts.errorThresh) {
                var _misclass4 = data[_i16];
                Object.assign(_misclass4, {
                  actual: this.outputLookup ? lookup.toObject(this.outputLookup, _output4) : _output4
                });
                misclasses.push(_misclass4);
              }
            }

            break;
          }

        case 'array,datum,array,array,number':
          {
            for (var _i17 = 0; _i17 < formattedData.length; _i17++) {
              var _datum5 = formattedData[_i17];

              var _output5 = this.forecast(_datum5.input, _datum5.output.length);

              var _errors4 = 0;

              for (var _j2 = 0; _j2 < _output5.length; _j2++) {
                for (var k = 0; k < _output5[_j2].length; k++) {
                  var _error5 = _datum5.output[_j2][k] - _output5[_j2][k];

                  _errors4 += _error5 * _error5;
                }
              }

              errorSum += _errors4;

              var _errorsAbs5 = Math.abs(_errors4);

              if (_errorsAbs5 > this.trainOpts.errorThresh) {
                var _misclass5 = data[_i17];
                misclasses.push({
                  input: _misclass5.input,
                  output: _misclass5.output,
                  actual: _output5
                });
              }
            }

            break;
          }

        case 'array,datum,array,object,number':
          {
            for (var _i18 = 0; _i18 < formattedData.length; _i18++) {
              var _datum6 = formattedData[_i18];

              var _output6 = this.forecast(_datum6.input, _datum6.output.length);

              var _errors5 = 0;

              for (var _j3 = 0; _j3 < _output6.length; _j3++) {
                for (var _p2 in _output6[_j3]) {
                  var _error6 = data[_i18].output[_j3][_p2] - _output6[_j3][_p2];

                  _errors5 += _error6 * _error6;
                }
              }

              errorSum += _errors5;

              var _errorsAbs6 = Math.abs(_errors5);

              if (_errorsAbs6 > this.trainOpts.errorThresh) {
                var _misclass6 = data[_i18];
                misclasses.push({
                  input: _misclass6.input,
                  output: _misclass6.output,
                  actual: _output6
                });
              }
            }

            break;
          }

        default:
          throw new Error('unknown data shape or configuration');
      }

      return {
        error: errorSum / formattedData.length,
        misclasses: misclasses,
        total: formattedData.length
      };
    }
  }, {
    key: "addFormat",
    value: function addFormat(value) {
      var dataShape = lookup.dataShape(value).join(',');

      switch (dataShape) {
        case 'array,array,number':
        case 'datum,array,array,number':
        case 'array,number':
        case 'datum,array,number':
          return;

        case 'datum,object,number':
          {
            this.inputLookup = lookup.addKeys(value.input, this.inputLookup);

            if (this.inputLookup) {
              this.inputLookupLength = Object.keys(this.inputLookup).length;
            }

            this.outputLookup = lookup.addKeys(value.output, this.outputLookup);

            if (this.outputLookup) {
              this.outputLookupLength = Object.keys(this.outputLookup).length;
            }

            break;
          }

        case 'object,number':
          {
            this.inputLookup = this.outputLookup = lookup.addKeys(value, this.inputLookup);

            if (this.inputLookup) {
              this.inputLookupLength = this.outputLookupLength = Object.keys(this.inputLookup).length;
            }

            break;
          }

        case 'array,object,number':
          {
            for (var i = 0; i < value.length; i++) {
              this.inputLookup = this.outputLookup = lookup.addKeys(value[i], this.inputLookup);

              if (this.inputLookup) {
                this.inputLookupLength = this.outputLookupLength = Object.keys(this.inputLookup).length;
              }
            }

            break;
          }

        case 'datum,array,object,number':
          {
            for (var _i19 = 0; _i19 < value.input.length; _i19++) {
              this.inputLookup = lookup.addKeys(value.input[_i19], this.inputLookup);

              if (this.inputLookup) {
                this.inputLookupLength = Object.keys(this.inputLookup).length;
              }
            }

            for (var _i20 = 0; _i20 < value.output.length; _i20++) {
              this.outputLookup = lookup.addKeys(value.output[_i20], this.outputLookup);

              if (this.outputLookup) {
                this.outputLookupLength = Object.keys(this.outputLookup).length;
              }
            }

            break;
          }

        default:
          throw new Error('unknown data shape or configuration');
      }
    }
    /**
     *
     * @returns {Object}
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var defaults = this.constructor.defaults;

      if (!this.model) {
        this.initialize();
      }

      var model = this.model;
      var options = {};

      for (var p in defaults) {
        if (defaults.hasOwnProperty(p)) {
          options[p] = this[p];
        }
      }

      return {
        type: this.constructor.name,
        options: options,
        hiddenLayers: model.hiddenLayers.map(function (hiddenLayer) {
          var layers = {};

          for (var _p3 in hiddenLayer) {
            layers[_p3] = hiddenLayer[_p3].toJSON();
          }

          return layers;
        }),
        outputConnector: this.model.outputConnector.toJSON(),
        output: this.model.output.toJSON(),
        inputLookup: this.inputLookup,
        inputLookupLength: this.inputLookupLength,
        outputLookup: this.outputLookup,
        outputLookupLength: this.outputLookupLength
      };
    }
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      var defaults = this.constructor.defaults;
      var options = json.options;
      this.model = null;
      this.hiddenLayers = null;
      var allMatrices = [];
      var hiddenLayers = []; // backward compatibility for hiddenSizes

      (json.hiddenLayers || json.hiddenSizes).forEach(function (hiddenLayer) {
        var layers = {};

        for (var p in hiddenLayer) {
          layers[p] = Matrix.fromJSON(hiddenLayer[p]);
          allMatrices.push(layers[p]);
        }

        hiddenLayers.push(layers);
      });
      var outputConnector = Matrix.fromJSON(json.outputConnector);
      allMatrices.push(outputConnector);
      var output = Matrix.fromJSON(json.output);
      allMatrices.push(output);
      Object.assign(this, defaults, options); // backward compatibility

      if (options.hiddenSizes) {
        this.hiddenLayers = options.hiddenSizes;
      }

      this.inputLookup = json.inputLookup;
      this.inputLookupLength = json.inputLookupLength;
      this.outputLookup = json.outputLookup;
      this.outputLookupLength = json.outputLookupLength;
      this.model = {
        hiddenLayers: hiddenLayers,
        output: output,
        allMatrices: allMatrices,
        outputConnector: outputConnector,
        equations: [],
        equationConnections: []
      };
      this.initialLayerInputs = this.hiddenLayers.map(function (size) {
        return new Matrix(size, 1);
      });
      this.bindEquation();
    }
    /**
     * @param {Function} [cb]
     * @returns {Function}
     */

  }, {
    key: "toFunction",
    value: function toFunction(cb) {
      var model = this.model;
      var equations = this.model.equations;
      var inputSize = this.inputSize;
      var inputLookup = this.inputLookup;
      var inputLookupLength = this.inputLookupLength;
      var outputLookup = this.outputLookup;
      var outputLookupLength = this.outputLookupLength;
      var equation = equations[1];
      var states = equation.states;
      var jsonString = JSON.stringify(this.toJSON());

      function matrixOrigin(m, stateIndex) {
        for (var i = 0, max = states.length; i < max; i++) {
          var state = states[i];

          if (i === stateIndex) {
            var j = previousConnectionIndex(m);

            switch (m) {
              case state.left:
                if (j > -1) {
                  return "typeof prevStates[".concat(j, "] === 'object' ? prevStates[").concat(j, "].product : new Matrix(").concat(m.rows, ", ").concat(m.columns, ")");
                }

              case state.right:
                if (j > -1) {
                  return "typeof prevStates[".concat(j, "] === 'object' ? prevStates[").concat(j, "].product : new Matrix(").concat(m.rows, ", ").concat(m.columns, ")");
                }

              case state.product:
                return "new Matrix(".concat(m.rows, ", ").concat(m.columns, ")");

              default:
                throw Error('unknown state');
            }
          }

          if (m === state.product) return "states[".concat(i, "].product");
          if (m === state.right) return "states[".concat(i, "].right");
          if (m === state.left) return "states[".concat(i, "].left");
        }
      }

      function previousConnectionIndex(m) {
        var connection = model.equationConnections[0];
        var states = equations[0].states;

        for (var i = 0, max = states.length; i < max; i++) {
          if (states[i].product === m) {
            return i;
          }
        }

        return connection.indexOf(m);
      }

      function matrixToString(m, stateIndex) {
        if (!m || !m.rows || !m.columns) return 'null';
        if (m === model.outputConnector) return "json.outputConnector";
        if (m === model.output) return "json.output";

        for (var i = 0, max = model.hiddenLayers.length; i < max; i++) {
          var hiddenLayer = model.hiddenLayers[i];

          for (var p in hiddenLayer) {
            if (!hiddenLayer.hasOwnProperty(p)) continue;
            if (hiddenLayer[p] !== m) continue;
            return "json.hiddenLayers[".concat(i, "].").concat(p);
          }
        }

        return matrixOrigin(m, stateIndex);
      }

      function formatInputData() {
        if (!inputLookup) return '';

        if (inputSize === 1) {
          if (inputLookup === outputLookup) {
            return "function lookupInput(input) {\n            var table = ".concat(JSON.stringify(inputLookup), ";\n            var result = [];\n            for (var p in table) {\n              if (!input.hasOwnProperty(p)) break;\n              result.push(Float32Array.from([input[p]]));\n            }\n            return result;\n          }");
          }

          return "function lookupInput(input) {\n          var table = ".concat(JSON.stringify(inputLookup), ";\n          var result = [];\n          for (var p in table) {\n            result.push(Float32Array.from([input[p]]));\n          }\n          return result;\n        }");
        }

        return "function lookupInput(rawInputs) {\n        var table = ".concat(JSON.stringify(inputLookup), ";\n        var result = [];\n        for (var i = 0; i < rawInputs.length; i++) {\n          var rawInput = rawInputs[i];\n          var input = new Float32Array(").concat(inputLookupLength, ");\n          for (var p in table) {\n            input[table[p]] = rawInput.hasOwnProperty(p) ? rawInput[p] : 0;\n          }\n          result.push(input);\n        }\n        return result;\n      }");
      }

      function formatOutputData() {
        if (!outputLookup) return '';

        if (inputSize === 1) {
          if (inputLookup === outputLookup) {
            return "function lookupOutputPartial(output, input) {\n            var table = ".concat(JSON.stringify(outputLookup), ";\n            var offset = input.length;\n            var result = {};\n            var i = 0;\n            for (var p in table) {\n              if (i++ < offset) continue;\n              result[p] = output[table[p] - offset][0];\n            }\n            return result;\n          }");
          }

          return "function lookupOutput(output) {\n          var table = ".concat(JSON.stringify(outputLookup), ";\n          var result = {};\n          for (var p in table) {\n            result[p] = output[table[p]][0];\n          }\n          return result;\n        }");
        }

        return "function lookupOutput(output) {\n        var table = ".concat(JSON.stringify(outputLookup), ";\n        var result = {};\n        for (var p in table) {\n          result[p] = output[table[p]];\n        }\n        return result;\n      }");
      }

      function toInner(fnString) {
        // crude, but should be sufficient for now
        // function() { body }
        fnString = fnString.toString().split('{');
        fnString.shift(); // body }

        fnString = fnString.join('{');
        fnString = fnString.split('}');
        fnString.pop(); // body

        return fnString.join('}').split('\n').join('\n        ').replace('product.weights = input.weights = this.inputValue;', inputLookup && inputSize === 1 ? 'product.weights = _i < input.length ? input[_i]: prevStates[prevStates.length - 1].product.weights;' : inputSize === 1 ? 'product.weights = [input[_i]];' : 'product.weights = input[_i];').replace('product.deltas[i] = 0;', '').replace('product.deltas[column] = 0;', '').replace('left.deltas[leftIndex] = 0;', '').replace('right.deltas[rightIndex] = 0;', '').replace('product.deltas = left.deltas.slice(0);', '');
      }

      function fileName(fnName) {
        return "src/recurrent/matrix/".concat(fnName.replace(/[A-Z]/g, function (value) {
          return '-' + value.toLowerCase();
        }), ".js");
      }

      var statesRaw = [];
      var usedFunctionNames = {};
      var innerFunctionsSwitch = [];

      for (var i = 0, max = states.length; i < max; i++) {
        var state = states[i];
        statesRaw.push("states[".concat(i, "] = {\n      name: '").concat(state.forwardFn.name, "',\n      left: ").concat(matrixToString(state.left, i), ",\n      right: ").concat(matrixToString(state.right, i), ",\n      product: ").concat(matrixToString(state.product, i), "\n    }"));
        var fnName = state.forwardFn.name;

        if (!usedFunctionNames[fnName]) {
          usedFunctionNames[fnName] = true;
          innerFunctionsSwitch.push("        case '".concat(fnName, "':").concat(fnName !== 'forwardFn' ? " //compiled from ".concat(fileName(fnName)) : '', "\n          ").concat(toInner(state.forwardFn.toString()), "\n          break;"));
        }
      }

      var forceForecast = this.inputSize === 1 && this.outputLookup;
      var src = "\n  var input = ".concat(this.inputLookup ? 'lookupInput(rawInput)' : 'rawInput', ";\n  var json = ").concat(jsonString, ";\n  var output = [];\n  var states = [];\n  var prevStates;\n  var state;\n  var max = ").concat(forceForecast ? inputLookup === outputLookup ? inputLookupLength : "input.length + ".concat(outputLookupLength - 1) : 'input.length', ";\n  for (var _i = 0; _i < max; _i++) {\n    prevStates = states;\n    states = [];\n    ").concat(statesRaw.join(';\n    '), ";\n    for (var stateIndex = 0, stateMax = ").concat(statesRaw.length, "; stateIndex < stateMax; stateIndex++) {\n      state = states[stateIndex];\n      var product = state.product;\n      var left = state.left;\n      var right = state.right;\n      \n      switch (state.name) {\n").concat(innerFunctionsSwitch.join('\n'), "\n      }\n    }\n    ").concat(inputSize === 1 && inputLookup ? 'if (_i >= input.length - 1) { output.push(state.product.weights); }' : 'output = state.product.weights;', "\n  }\n  ").concat(outputLookup ? outputLookup === inputLookup ? 'return lookupOutputPartial(output, input)' : 'return lookupOutput(output)' : inputSize === 1 ? 'return output[0]' : 'return output', ";\n  ").concat(formatInputData(), "\n  ").concat(formatOutputData(), "\n  \n  function Matrix(rows, columns) {\n    this.rows = rows;\n    this.columns = columns;\n    this.weights = zeros(rows * columns);\n  }\n  ").concat(zeros.toString(), "\n  ").concat(softmax.toString().replace('_2.default', 'Matrix'), "\n  ").concat(randomFloat.toString(), "\n  ").concat(sampleI.toString(), "\n  ").concat(maxI.toString());
      return new Function('rawInput', cb ? cb(src) : src);
    }
  }]);

  return RNNTimeStep;
}(RNN);

RNNTimeStep.defaults = {
  inputSize: 1,
  hiddenLayers: [20],
  outputSize: 1,
  learningRate: RNN.defaults.learningRate,
  decayRate: RNN.defaults.decayRate,
  smoothEps: RNN.defaults.smoothEps,
  regc: RNN.defaults.regc,
  clipval: RNN.defaults.clipval
};
RNNTimeStep.trainDefaults = RNN.trainDefaults;
module.exports = RNNTimeStep;
},{"./matrix":"v84l","./matrix/random-matrix":"zGuK","./matrix/equation":"ytIu","./rnn":"gJGF","../utilities/zeros":"M4LY","./matrix/softmax":"Ens1","../utilities/random":"Sd27","./matrix/sample-i":"lOwB","./matrix/max-i":"wnUe","../lookup":"Q1a6","../utilities/lookup-table":"kAwF","../utilities/array-lookup-table":"V51U","../utilities/cast":"Z8Xv"}],"e2Ix":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Matrix = require('./matrix');

var RandomMatrix = require('./matrix/random-matrix');

var RNN = require('./rnn');

var LSTM =
/*#__PURE__*/
function (_RNN) {
  _inherits(LSTM, _RNN);

  function LSTM() {
    _classCallCheck(this, LSTM);

    return _possibleConstructorReturn(this, _getPrototypeOf(LSTM).apply(this, arguments));
  }

  _createClass(LSTM, null, [{
    key: "getModel",
    value: function getModel(hiddenSize, prevSize) {
      return {
        // gates parameters
        // wix
        inputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),
        // wih
        inputHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),
        // bi
        inputBias: new Matrix(hiddenSize, 1),
        // wfx
        forgetMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),
        // wfh
        forgetHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),
        // bf
        forgetBias: new Matrix(hiddenSize, 1),
        // wox
        outputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),
        // woh
        outputHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),
        // bo
        outputBias: new Matrix(hiddenSize, 1),
        // cell write params
        // wcx
        cellActivationMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),
        // wch
        cellActivationHidden: new RandomMatrix(hiddenSize, hiddenSize, 0.08),
        // bc
        cellActivationBias: new Matrix(hiddenSize, 1)
      };
    }
    /**
     *
     * @param {Equation} equation
     * @param {Matrix} inputMatrix
     * @param {Matrix} previousResult
     * @param {Object} hiddenLayer
     * @returns {Matrix}
     */

  }, {
    key: "getEquation",
    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {
      var sigmoid = equation.sigmoid.bind(equation);
      var add = equation.add.bind(equation);
      var multiply = equation.multiply.bind(equation);
      var multiplyElement = equation.multiplyElement.bind(equation);
      var tanh = equation.tanh.bind(equation);
      var inputGate = sigmoid(add(add(multiply(hiddenLayer.inputMatrix, inputMatrix), multiply(hiddenLayer.inputHidden, previousResult)), hiddenLayer.inputBias));
      var forgetGate = sigmoid(add(add(multiply(hiddenLayer.forgetMatrix, inputMatrix), multiply(hiddenLayer.forgetHidden, previousResult)), hiddenLayer.forgetBias)); // output gate

      var outputGate = sigmoid(add(add(multiply(hiddenLayer.outputMatrix, inputMatrix), multiply(hiddenLayer.outputHidden, previousResult)), hiddenLayer.outputBias)); // write operation on cells

      var cellWrite = tanh(add(add(multiply(hiddenLayer.cellActivationMatrix, inputMatrix), multiply(hiddenLayer.cellActivationHidden, previousResult)), hiddenLayer.cellActivationBias)); // compute new cell activation

      var retainCell = multiplyElement(forgetGate, previousResult); // what do we keep from cell

      var writeCell = multiplyElement(inputGate, cellWrite); // what do we write to cell

      var cell = add(retainCell, writeCell); // new cell contents
      // compute hidden state as gated, saturated cell activations

      return multiplyElement(outputGate, tanh(cell));
    }
  }]);

  return LSTM;
}(RNN);

module.exports = LSTM;
},{"./matrix":"v84l","./matrix/random-matrix":"zGuK","./rnn":"gJGF"}],"hEPI":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Matrix = require('./matrix');

var LSTM = require('./lstm');

var RNNTimeStep = require('./rnn-time-step');

var LSTMTimeStep =
/*#__PURE__*/
function (_RNNTimeStep) {
  _inherits(LSTMTimeStep, _RNNTimeStep);

  function LSTMTimeStep() {
    _classCallCheck(this, LSTMTimeStep);

    return _possibleConstructorReturn(this, _getPrototypeOf(LSTMTimeStep).apply(this, arguments));
  }

  _createClass(LSTMTimeStep, null, [{
    key: "getModel",
    value: function getModel(hiddenSize, prevSize) {
      return LSTM.getModel.call(this, hiddenSize, prevSize);
    }
    /**
     *
     * @param {Equation} equation
     * @param {Matrix} inputMatrix
     * @param {Matrix} previousResult
     * @param {Object} hiddenLayer
     * @returns {Matrix}
     */

  }, {
    key: "getEquation",
    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {
      return LSTM.getEquation.call(this, equation, inputMatrix, previousResult, hiddenLayer);
    }
  }]);

  return LSTMTimeStep;
}(RNNTimeStep);

module.exports = LSTMTimeStep;
},{"./matrix":"v84l","./lstm":"e2Ix","./rnn-time-step":"zri4"}],"wLPK":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Matrix = require('./matrix');

var RandomMatrix = require('./matrix/random-matrix');

var RNN = require('./rnn');

var GRU =
/*#__PURE__*/
function (_RNN) {
  _inherits(GRU, _RNN);

  function GRU() {
    _classCallCheck(this, GRU);

    return _possibleConstructorReturn(this, _getPrototypeOf(GRU).apply(this, arguments));
  }

  _createClass(GRU, null, [{
    key: "getModel",
    value: function getModel(hiddenSize, prevSize) {
      return {
        // update Gate
        // wzxh
        updateGateInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),
        // wzhh
        updateGateHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),
        // bz
        updateGateBias: new Matrix(hiddenSize, 1),
        // reset Gate
        // wrxh
        resetGateInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),
        // wrhh
        resetGateHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),
        // br
        resetGateBias: new Matrix(hiddenSize, 1),
        // cell write parameters
        // wcxh
        cellWriteInputMatrix: new RandomMatrix(hiddenSize, prevSize, 0.08),
        // wchh
        cellWriteHiddenMatrix: new RandomMatrix(hiddenSize, hiddenSize, 0.08),
        // bc
        cellWriteBias: new Matrix(hiddenSize, 1)
      };
    }
    /**
     *
     * @param {Equation} equation
     * @param {Matrix} inputMatrix
     * @param {Matrix} previousResult
     * @param {Object} hiddenLayer
     * @returns {Matrix}
     */

  }, {
    key: "getEquation",
    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {
      var sigmoid = equation.sigmoid.bind(equation);
      var add = equation.add.bind(equation);
      var multiply = equation.multiply.bind(equation);
      var multiplyElement = equation.multiplyElement.bind(equation);
      var tanh = equation.tanh.bind(equation);
      var allOnes = equation.allOnes.bind(equation);
      var cloneNegative = equation.cloneNegative.bind(equation); // update gate

      var updateGate = sigmoid(add(add(multiply(hiddenLayer.updateGateInputMatrix, inputMatrix), multiply(hiddenLayer.updateGateHiddenMatrix, previousResult)), hiddenLayer.updateGateBias)); // reset gate

      var resetGate = sigmoid(add(add(multiply(hiddenLayer.resetGateInputMatrix, inputMatrix), multiply(hiddenLayer.resetGateHiddenMatrix, previousResult)), hiddenLayer.resetGateBias)); // cell

      var cell = tanh(add(add(multiply(hiddenLayer.cellWriteInputMatrix, inputMatrix), multiply(hiddenLayer.cellWriteHiddenMatrix, multiplyElement(resetGate, previousResult))), hiddenLayer.cellWriteBias)); // compute hidden state as gated, saturated cell activations
      // negate updateGate

      return add(multiplyElement(add(allOnes(updateGate.rows, updateGate.columns), cloneNegative(updateGate)), cell), multiplyElement(previousResult, updateGate));
    }
  }]);

  return GRU;
}(RNN);

module.exports = GRU;
},{"./matrix":"v84l","./matrix/random-matrix":"zGuK","./rnn":"gJGF"}],"gCoU":[function(require,module,exports) {
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

// import Matrix from './matrix'
var GRU = require('./gru');

var RNNTimeStep = require('./rnn-time-step');

var GRUTimeStep =
/*#__PURE__*/
function (_RNNTimeStep) {
  _inherits(GRUTimeStep, _RNNTimeStep);

  function GRUTimeStep() {
    _classCallCheck(this, GRUTimeStep);

    return _possibleConstructorReturn(this, _getPrototypeOf(GRUTimeStep).apply(this, arguments));
  }

  _createClass(GRUTimeStep, null, [{
    key: "getModel",
    value: function getModel(hiddenSize, prevSize) {
      return GRU.getModel(hiddenSize, prevSize);
    }
    /**
     *
     * @param {Equation} equation
     * @param {Matrix} inputMatrix
     * @param {Matrix} previousResult
     * @param {Object} hiddenLayer
     * @returns {Matrix}
     */

  }, {
    key: "getEquation",
    value: function getEquation(equation, inputMatrix, previousResult, hiddenLayer) {
      return GRU.getEquation(equation, inputMatrix, previousResult, hiddenLayer);
    }
  }]);

  return GRUTimeStep;
}(RNNTimeStep);

module.exports = GRUTimeStep;
},{"./gru":"wLPK","./rnn-time-step":"zri4"}],"UFo7":[function(require,module,exports) {
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NeuralNetwork = require('../neural-network');

var RNN = require('../recurrent/rnn');

var RNNTimeStep = require('../recurrent/rnn-time-step');

var _require = require('../feed-forward'),
    FeedForward = _require.FeedForward;

var _require2 = require('../recurrent'),
    Recurrent = _require2.Recurrent;

var _require3 = require('../layer/recurrent-zeros'),
    recurrentZeros = _require3.recurrentZeros;

var recurrentJSONTypes = ['RNN', 'LSTM', 'GRU', 'RNNTimeStep', 'LSTMTimeStep', 'GRUTimeStep', 'Recurrent'];

function drawInput(_ref) {
  var pixelX = _ref.pixelX,
      pixelY = _ref.pixelY,
      radius = _ref.radius,
      inputs = _ref.inputs,
      row = _ref.row,
      line = _ref.line,
      fontSize = _ref.fontSize,
      fontClassName = _ref.fontClassName;
  var svg = "<rect\n              x=\"".concat(pixelX / 2 - radius, "\"\n              y=\"").concat(pixelY / 2 + row * pixelY - radius, "\"\n              width=\"").concat(2 * radius, "\"\n              height=\"").concat(2 * radius, "\"\n              stroke=\"black\"\n              stroke-width=\"1\"\n              fill=\"").concat(inputs.color, "\" \n              class=\"").concat(inputs.className, "\" />\n            <line\n              x1=\"").concat(pixelX / 4, "\"\n              y1=\"").concat(pixelY / 2 + row * pixelY, "\"\n              x2=\"").concat(pixelX / 2 - radius, "\"\n              y2=\"").concat(pixelY / 2 + row * pixelY, "\"\n              style=\"stroke:").concat(line.color, ";stroke-width:").concat(line.width, "\"\n              class=\"").concat(line.className, "\" />");

  if (inputs.labels) {
    svg += "<text\n              x=\"".concat(pixelX / 8, "\"\n              y=\"").concat(pixelY / 2 + row * pixelY - 5, "\"\n              fill=\"black\"\n              font-size=\"").concat(fontSize, "\"\n              class=\"").concat(fontClassName, "\">").concat(inputs.labels[row], "</text>");
  }

  return svg;
}

function drawNeuron(_ref2) {
  var pixelX = _ref2.pixelX,
      pixelY = _ref2.pixelY,
      row = _ref2.row,
      column = _ref2.column,
      radius = _ref2.radius,
      hidden = _ref2.hidden;
  return "<circle\n            cx=\"".concat(pixelX / 2 + column * pixelX, "\"\n            cy=\"").concat(pixelY / 2 + row * pixelY, "\"\n            r=\"").concat(radius, "\"\n            stroke=\"black\"\n            stroke-width=\"1\"\n            fill=\"").concat(hidden.color, "\"\n            class=\"").concat(hidden.className, "\" />");
}

function drawOutput(_ref3) {
  var pixelX = _ref3.pixelX,
      pixelY = _ref3.pixelY,
      row = _ref3.row,
      column = _ref3.column,
      line = _ref3.line,
      outputs = _ref3.outputs,
      radius = _ref3.radius;
  return "<circle\n            cx=\"".concat(pixelX / 2 + column * pixelX, "\"\n            cy=\"").concat(pixelY / 2 + row * pixelY, "\"\n            r=\"").concat(radius, "\"\n            stroke=\"black\"\n            stroke-width=\"1\"\n            fill=\"").concat(outputs.color, "\"\n            class=\"").concat(outputs.className, "\" />\n          <line\n            x1=\"").concat(pixelX / 2 + column * pixelX + radius, "\"\n            y1=\"").concat(pixelY / 2 + row * pixelY, "\"\n            x2=\"").concat(pixelX / 2 + column * pixelX + pixelX / 4, "\"\n            y2=\"").concat(pixelY / 2 + row * pixelY, "\"\n            style=\"stroke:").concat(line.color, ";stroke-width:").concat(line.width, "\"\n            class=\"").concat(line.className, "\" />");
}

function drawBackwardConnections(_ref4) {
  var pixelX = _ref4.pixelX,
      pixelY = _ref4.pixelY,
      row = _ref4.row,
      column = _ref4.column,
      radius = _ref4.radius,
      lineY = _ref4.lineY,
      line = _ref4.line,
      previousConnectionIndex = _ref4.previousConnectionIndex;
  return "<line\n            x1=\"".concat(pixelX / 2 + (column - 1) * pixelX + radius, "\"\n            y1=\"").concat(lineY / 2 + previousConnectionIndex * lineY, "\"\n            x2=\"").concat(pixelX / 2 + column * pixelX - radius, "\"\n            y2=\"").concat(pixelY / 2 + row * pixelY, "\"\n            style=\"stroke:").concat(line.color, ";stroke-width:").concat(line.width, "\"\n            class=\"").concat(line.className, "\" />");
}

function neuralNetworkToSVG(options) {
  var sizes = options.sizes,
      height = options.height,
      width = options.width;
  var svg = '';
  var pixelX = width / sizes.length;

  for (var column = 0; column < sizes.length; column++) {
    var size = sizes[column];
    var pixelY = height / size;

    for (var row = 0; row < size; row++) {
      if (column === 0) {
        svg += drawInput(Object.assign({
          pixelX: pixelX,
          pixelY: pixelY,
          row: row,
          column: column
        }, options));
      } else {
        if (column === sizes.length - 1) {
          svg += drawOutput(Object.assign({
            pixelX: pixelX,
            pixelY: pixelY,
            row: row,
            column: column
          }, options));
        } else {
          svg += drawNeuron(Object.assign({
            pixelX: pixelX,
            pixelY: pixelY,
            row: row,
            column: column
          }, options));
        }

        var previousSize = sizes[column - 1];
        var lineY = height / previousSize;

        for (var previousConnectionIndex = 0; previousConnectionIndex < previousSize; previousConnectionIndex++) {
          svg += drawBackwardConnections(Object.assign({
            pixelX: pixelX,
            pixelY: pixelY,
            row: row,
            column: column,
            lineY: lineY,
            previousConnectionIndex: previousConnectionIndex
          }, options));
        }
      }
    }
  }

  return svg;
}

function rnnToSVG(options) {
  var width = options.width,
      height = options.height,
      recurrentLine = options.recurrentLine,
      sizes = options.sizes,
      radius = options.radius;
  var pixelX = width / sizes.length;
  var svg = "<defs>\n              <marker id=\"arrow\" markerWidth=\"10\" markerHeight=\"10\" refX=\"8\" refY=\"3\" orient=\"auto\" markerUnits=\"strokeWidth\">\n                <path d=\"M0,0 L0,6 L9,3 z\" fill=\"".concat(recurrentLine.color, "\" />\n              </marker>\n            </defs>");
  svg += neuralNetworkToSVG(options);

  for (var column = 1; column < sizes.length; column++) {
    var size = sizes[column];
    var pixelY = height / size;

    for (var row = 0; row < size; row++) {
      svg += drawRecurrentConnections({
        pixelX: pixelX,
        pixelY: pixelY,
        row: row,
        column: column,
        radius: radius,
        recurrentLine: recurrentLine
      });
    }
  }

  return svg;

  function drawRecurrentConnections(_ref5) {
    var pixelX = _ref5.pixelX,
        pixelY = _ref5.pixelY,
        row = _ref5.row,
        column = _ref5.column,
        radius = _ref5.radius,
        recurrentLine = _ref5.recurrentLine;
    var moveX = pixelX / 2 + column * pixelX + radius + 1;
    var moveY = pixelY / 2 + row * pixelY;
    var x = moveX - radius * 2 - 2;
    var y = moveY;
    var x1 = x + 100;
    var y1 = y + 50;
    var x2 = moveX - 100;
    var y2 = moveY + 50;
    return "<path\n              d=\"M ".concat(moveX, " ").concat(moveY, " C ").concat(x1, " ").concat(y1, ", ").concat(x2, " ").concat(y2, ", ").concat(x, " ").concat(y, "\"\n              stroke=\"").concat(recurrentLine.color, "\"\n              stroke-width=\"").concat(recurrentLine.width, "\"\n              fill=\"transparent\"\n              stroke-linecap=\"round\"\n              marker-end=\"url(#arrow)\"\n              class=\"").concat(recurrentLine.className, "\" />");
  }
}

function getFeedForwardLayers(network) {
  var inputLayer = network.inputLayer();
  var hiddenLayers = [];
  hiddenLayers.push(network.hiddenLayers[0](inputLayer));

  for (var i = 1; i < network.hiddenLayers.length; i++) {
    hiddenLayers.push(network.hiddenLayers[i](hiddenLayers[i - 1]));
  }

  var outputLayer = network.outputLayer(hiddenLayers[hiddenLayers.length - 1]);
  return {
    inputLayer: inputLayer,
    hiddenLayers: hiddenLayers,
    outputLayer: outputLayer,
    layerCount: 1 + hiddenLayers.length + 1
  };
}

function getRecurrentLayers(network) {
  var inputLayer = network.inputLayer();
  var hiddenLayers = [];
  hiddenLayers.push(network.hiddenLayers[0](inputLayer, recurrentZeros(), 0));

  for (var i = 1; i < network.hiddenLayers.length; i++) {
    hiddenLayers.push(network.hiddenLayers[i](hiddenLayers[i - 1], recurrentZeros(), i));
  }

  var outputLayer = network.outputLayer(hiddenLayers[hiddenLayers.length - 1]);
  return {
    inputLayer: inputLayer,
    hiddenLayers: hiddenLayers,
    outputLayer: outputLayer,
    layerCount: 1 + hiddenLayers.length + 1
  };
}

function wrapSVG(svgBody, width, height) {
  return "<svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            version=\"1.1\"\n            width=\"".concat(width, "\"\n            height=\"").concat(height, "\">").concat(svgBody, "</svg>");
}

function getSizes(_ref6) {
  var sizes = _ref6.sizes,
      inputSize = _ref6.inputSize,
      outputSize = _ref6.outputSize,
      hiddenLayers = _ref6.hiddenLayers;
  return typeof inputSize === 'number' && Array.isArray(hiddenLayers) && hiddenLayers.every(function (l) {
    return typeof l === 'number';
  }) && typeof outputSize === 'number' ? [inputSize].concat(hiddenLayers).concat([outputSize]) : sizes;
}

function toSVG(net, options) {
  //default values
  var defaultOptions = {
    line: {
      width: 0.5,
      color: 'black',
      className: 'connection'
    },
    recurrentLine: {
      width: 1,
      color: 'red',
      className: 'recurrence'
    },
    inputs: {
      color: 'rgba(0, 128, 0, 0.5)',
      labels: null,
      className: 'input'
    },
    outputs: {
      color: 'rgba(100, 149, 237, 0.5)',
      className: 'output'
    },
    hidden: {
      color: 'rgba(255, 127, 80, 0.5)',
      className: 'hidden-neuron'
    },
    fontSize: '14px',
    fontClassName: 'label',
    radius: 8,
    width: 400,
    height: 250
  };

  var mergedOptions = _objectSpread({}, defaultOptions, {}, options);

  var width = mergedOptions.width,
      height = mergedOptions.height,
      inputs = mergedOptions.inputs;
  var isRNN = net.hasOwnProperty('model') || net instanceof Recurrent || net.type && recurrentJSONTypes.indexOf(net.type) !== -1; // Get network size array for NeuralNetwork or NeuralNetworkGPU

  var sizes = null;

  if (net instanceof NeuralNetwork || net instanceof RNN || net instanceof RNNTimeStep) {
    sizes = getSizes(net);
  } // Get network size array for NeuralNetwork json
  else if (net.sizes) {
      sizes = net.sizes;
    } // get network size for Recurrent
    else if (net instanceof Recurrent) {
        var _getRecurrentLayers = getRecurrentLayers(net),
            inputLayer = _getRecurrentLayers.inputLayer,
            hiddenLayers = _getRecurrentLayers.hiddenLayers,
            outputLayer = _getRecurrentLayers.outputLayer;

        sizes = [inputLayer.height].concat(hiddenLayers.map(function (l) {
          return l.height;
        })).concat([outputLayer.height]);
      } // get network size for FeedForward
      else if (net instanceof FeedForward) {
          var _getFeedForwardLayers = getFeedForwardLayers(net),
              _inputLayer = _getFeedForwardLayers.inputLayer,
              _hiddenLayers = _getFeedForwardLayers.hiddenLayers,
              _outputLayer = _getFeedForwardLayers.outputLayer;

          sizes = [_inputLayer.height].concat(_hiddenLayers.map(function (l) {
            return l.height;
          })).concat([_outputLayer.height]);
        } // handle json, recurrent first
        else if (isRNN) {
            if (net.options) {
              sizes = getSizes(net.options);
            }
          } // handle json, NeuralNetwork
          else {
              sizes = getSizes(net);
            }

  if (!sizes) throw new Error('sizes not set');
  if (inputs.labels && inputs.labels.length !== sizes[0]) throw new Error('not enough labels for inputs');

  if (isRNN) {
    return wrapSVG(rnnToSVG(_objectSpread({}, mergedOptions, {
      sizes: sizes
    })), width, height);
  } else {
    return wrapSVG(neuralNetworkToSVG(_objectSpread({}, mergedOptions, {
      sizes: sizes
    })), width, height);
  }
}

module.exports = toSVG;
},{"../neural-network":"epZU","../recurrent/rnn":"gJGF","../recurrent/rnn-time-step":"zri4","../feed-forward":"eqC7","../recurrent":"JVtt","../layer/recurrent-zeros":"ZE4I"}],"Focm":[function(require,module,exports) {
var activation = require('./activation');

var CrossValidate = require('./cross-validate');

var layer = require('./layer');

var layerTypes = require('./layer/types');

var likely = require('./likely');

var lookup = require('./lookup');

var praxis = require('./praxis');

var _require = require('./feed-forward'),
    FeedForward = _require.FeedForward;

var NeuralNetwork = require('./neural-network');

var NeuralNetworkGPU = require('./neural-network-gpu');

var TrainStream = require('./train-stream');

var _require2 = require('./recurrent'),
    Recurrent = _require2.Recurrent;

var RNNTimeStep = require('./recurrent/rnn-time-step');

var LSTMTimeStep = require('./recurrent/lstm-time-step');

var GRUTimeStep = require('./recurrent/gru-time-step');

var RNN = require('./recurrent/rnn');

var LSTM = require('./recurrent/lstm');

var GRU = require('./recurrent/gru');

var max = require('./utilities/max');

var mse = require('./utilities/mse');

var ones = require('./utilities/ones');

var random = require('./utilities/random');

var randomWeight = require('./utilities/random-weight');

var randos = require('./utilities/randos');

var range = require('./utilities/range');

var toArray = require('./utilities/to-array');

var DataFormatter = require('./utilities/data-formatter');

var zeros = require('./utilities/zeros');

var toSVG = require('./utilities/to-svg');

var brain = {
  activation: activation,
  CrossValidate: CrossValidate,
  likely: likely,
  layer: layer,
  layerTypes: layerTypes,
  lookup: lookup,
  praxis: praxis,
  FeedForward: FeedForward,
  NeuralNetwork: NeuralNetwork,
  NeuralNetworkGPU: NeuralNetworkGPU,
  Recurrent: Recurrent,
  TrainStream: TrainStream,
  recurrent: {
    RNNTimeStep: RNNTimeStep,
    LSTMTimeStep: LSTMTimeStep,
    GRUTimeStep: GRUTimeStep,
    RNN: RNN,
    LSTM: LSTM,
    GRU: GRU
  },
  utilities: {
    max: max,
    mse: mse,
    ones: ones,
    random: random,
    randomWeight: randomWeight,
    randos: randos,
    range: range,
    toArray: toArray,
    DataFormatter: DataFormatter,
    zeros: zeros,
    toSVG: toSVG
  }
};

if (typeof window !== 'undefined') {
  window.brain = brain; //eslint-disable-line
}

if (typeof module !== 'undefined') {
  module.exports = brain;
}
},{"./activation":"l4UD","./cross-validate":"wYjf","./layer":"X3lc","./layer/types":"pX1U","./likely":"dfGl","./lookup":"Q1a6","./praxis":"P9Li","./feed-forward":"eqC7","./neural-network":"epZU","./neural-network-gpu":"trgF","./train-stream":"vEEq","./recurrent":"JVtt","./recurrent/rnn-time-step":"zri4","./recurrent/lstm-time-step":"hEPI","./recurrent/gru-time-step":"gCoU","./recurrent/rnn":"gJGF","./recurrent/lstm":"e2Ix","./recurrent/gru":"wLPK","./utilities/max":"UFcl","./utilities/mse":"YGn7","./utilities/ones":"f7P8","./utilities/random":"Sd27","./utilities/random-weight":"TX07","./utilities/randos":"S8tM","./utilities/range":"YhH7","./utilities/to-array":"HBY8","./utilities/data-formatter":"u3NV","./utilities/zeros":"M4LY","./utilities/to-svg":"UFo7"}]},{},["Focm"], null)
//# sourceMappingURL=/brain-browser.js.map