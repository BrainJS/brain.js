{"version":3,"sources":["../src/neural-network-gpu.js"],"names":["NeuralNetworkGPU","options","forwardPropagate","backwardPropagate","changesPropagate","biasesPropagate","biasCopies","copyBias","changesCopies","copyChanges","weightsCopies","copyWeights","errorCheckInterval","gpu","GPU","mode","buildRunInput","buildCalculateDeltas","buildGetChanges","buildChangeBiases","buildGetMSE","input","target","logErrorRate","runInput","calculateDeltas","getChanges","changeBiases","getMSE","errors","outputLayer","weightedSum","activation","weightedSumSigmoid","weightedSumRelu","weightedSumLeakyRelu","weightedSumTanh","Error","layer","createKernel","output","sizes","outputToTexture","hardcodeConstants","constants","size","_texturizeInputData","value","thread","x","outputImmutable","outputs","weights","biases","calcDeltas","calcDeltasSigmoid","calcDeltasRelu","calcDeltasLeakyRelu","calcDeltasTanh","createKernelMap","error","alias","calcErrorOutput","deltas","targets","calcError","nextWeights","nextDeltas","length","addWeights","changes","calcChanges","previousOutputs","change","learningRate","trainOpts","momentum","y","hardCodeConstants","addBiases","mse","isRunnable","inputLookup","lookup","toArray","inputTexture","outputTextures","outputLookup","toHash","data","push","hiddenSizes","Math","max","floor","forEach","_initialize","_updateTrainingOptions","_formatData","endTime","Date","now","timeout","status","iterations","_verifyIsInitialized","texturizeOutputData","map","set","NeuralNetwork","inputs","sum","k","exp","tanh","previousChanges","i","pow"],"mappings":"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","file":"neural-network-gpu.js","sourcesContent":["import NeuralNetwork from './neural-network';\nimport lookup from './lookup';\nimport GPU from 'gpu.js';\n\n/**\n *\n * @param {object} options\n * @constructor\n */\nexport default class NeuralNetworkGPU extends NeuralNetwork {\n  constructor(options = {}) {\n    super(options);\n    this.forwardPropagate = [];\n    this.backwardPropagate = [];\n    this.changesPropagate = [];\n    this.biasesPropagate = [];\n    this.biasCopies = [];\n    this.copyBias = [];\n    this.changesCopies = [];\n    this.copyChanges = [];\n    this.weightsCopies = [];\n    this.copyWeights = [];\n    this.errorCheckInterval = 100;\n    this.gpu = new GPU({mode: options.mode});\n  }\n\n  /**\n   *\n   */\n  _initialize() {\n    super._initialize();\n    this.buildRunInput();\n    this.buildCalculateDeltas();\n    this.buildGetChanges();\n    this.buildChangeBiases();\n    this.buildGetMSE();\n  }\n\n  setActivation() {}\n\n  /**\n   *\n   * @param input\n   * @param target\n   * @param logErrorRate\n   */\n  _trainPattern(input, target, logErrorRate) {\n    // forward propagate\n    this.runInput(input);\n\n    // backward propagate\n    this.calculateDeltas(target);\n    this.getChanges();\n    this.changeBiases();\n\n    if (logErrorRate) {\n      return this.getMSE(this.errors[this.outputLayer])[0];\n    } else {\n      return null;\n    }\n  }\n\n  buildRunInput() {\n    let weightedSum = null;\n\n    switch (this.activation) {\n      case 'sigmoid':\n        weightedSum = weightedSumSigmoid;\n        break;\n      case 'relu':\n        weightedSum = weightedSumRelu;\n        break;\n      case 'leaky-relu':\n        weightedSum = weightedSumLeakyRelu;\n        break;\n      case 'tanh':\n        weightedSum = weightedSumTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation);\n    }\n\n    for(let layer = 1; layer <= this.outputLayer; layer++){\n      this.forwardPropagate[layer] = this.gpu.createKernel(weightedSum, {\n        output: [this.sizes[layer]],\n        outputToTexture: true,\n        hardcodeConstants: true,\n        constants: {\n          size: this.sizes[layer - 1]\n        }\n      });\n    }\n\n    this._texturizeInputData = this.gpu.createKernel(function(value) {\n      return value[this.thread.x];\n    }, {\n      output: [this.sizes[1]],\n      outputToTexture: true,\n      hardcodeConstants: true,\n      outputImmutable: true\n    });\n  }\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  runInput(input) {\n    let output;\n    this.outputs[0] = input;\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.outputs[layer] = this.forwardPropagate[layer](\n        this.weights[layer], \n        this.biases[layer], \n        input\n      );\n      output = input = this.outputs[layer];\n    }\n    return output;\n  }\n\n  buildCalculateDeltas() {\n    let calcDeltas = null;\n\n    switch (this.activation) {\n      case 'sigmoid':\n        calcDeltas = calcDeltasSigmoid;\n        break;\n      case 'relu':\n        calcDeltas = calcDeltasRelu;\n        break;\n      case 'leaky-relu':\n        calcDeltas = calcDeltasLeakyRelu;\n        break;\n      case 'tanh':\n        calcDeltas = calcDeltasTanh;\n        break;\n      default:\n        throw new Error('unknown activation ' + this.activation);\n    }\n\n    for (let layer = this.outputLayer; layer > 0; layer--) {\n      if (layer === this.outputLayer) {\n        this.backwardPropagate[layer] = this.gpu.createKernelMap({\n            error: GPU.alias('calcErrorOutput', calcErrorOutput),\n            deltas: GPU.alias('calcDeltas', calcDeltas)\n          }, function(outputs, targets) {\n            const output = outputs[this.thread.x];\n            return calcDeltas(calcErrorOutput(output, targets), output);\n          }, {\n            output: [this.sizes[layer]],\n            outputToTexture: true,\n            hardcodeConstants: true\n          });\n      } else {\n        this.backwardPropagate[layer] = this.gpu.createKernelMap({\n            error: GPU.alias('calcError', calcError),\n            deltas: GPU.alias('calcDeltas', calcDeltas),\n          }, function(nextWeights, outputs, nextDeltas){\n            let output = outputs[this.thread.x];\n            return calcDeltas(calcError(nextWeights, nextDeltas), output);\n          }, {\n            output: [this.sizes[layer]],\n            outputToTexture: true,\n            hardcodeConstants: true,\n            constants: {\n              size: this.deltas[layer + 1].length\n            }\n          });\n      }\n    }\n  }\n\n  calculateDeltas(target) {\n    for (let layer = this.outputLayer; layer > 0; layer--) {\n      let output;\n\n      if (layer === this.outputLayer) {\n        output = this.backwardPropagate[layer](\n          this.outputs[layer],\n          target);\n      } else {\n        output = this.backwardPropagate[layer](\n          this.weights[layer + 1],\n          this.outputs[layer],\n          this.deltas[layer + 1],\n        );\n      }\n\n      this.deltas[layer] = output.deltas;\n      this.errors[layer] = output.error;\n    }\n  }\n\n  buildGetChanges() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.changesPropagate[layer] = this.gpu.createKernelMap({\n          weights: GPU.alias('addWeights', addWeights),\n          changes: GPU.alias('calcChanges', calcChanges)\n        },\n        function(previousOutputs, deltas, weights, changes) {\n          let change = calcChanges(\n            changes,\n            deltas,\n            previousOutputs);\n\n            return addWeights(change, weights);\n        }, {\n          output: [this.sizes[layer - 1], this.sizes[layer]],\n          outputToTexture: true,\n          hardcodeConstants: true,\n          constants:{\n            size: this.outputs[layer - 1].length,\n            learningRate: this.trainOpts.learningRate,\n            momentum: this.trainOpts.momentum\n          }\n        });\n\n      this.copyChanges[layer] = this.gpu.createKernel(function(value) {\n        return value[this.thread.y][this.thread.x];\n      }, {\n        output: this.changesPropagate[layer].output,\n        outputToTexture: true,\n        hardCodeConstants: true\n      });\n\n      this.copyWeights[layer] = this.gpu.createKernel(function(value) {\n        return value[this.thread.y][this.thread.x];\n      }, {\n        output: this.changesPropagate[layer].output,\n        outputToTexture: true,\n        hardCodeConstants: true\n      });\n    }    \n  }\n  \n  getChanges() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      let output = this.changesPropagate[layer](\n        this.outputs[layer - 1],\n        this.deltas[layer],\n        this.weightsCopies[layer] || this.weights[layer],\n        this.changesCopies[layer] || this.changes[layer]\n      );\n      this.changes[layer] = output.changes;\n      this.weights[layer] = output.weights;\n\n      this.changesCopies[layer] = this.copyChanges[layer](output.changes);\n      this.weightsCopies[layer] = this.copyWeights[layer](output.weights);\n    }\n  }\n\n  buildChangeBiases() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.biasesPropagate[layer] = this.gpu.createKernel(addBiases, {\n        output: [this.sizes[layer]],\n        outputToTexture: true,\n        hardcodeConstants: true,\n        constants: {\n          learningRate: this.trainOpts.learningRate\n        }\n      });\n      this.copyBias[layer] = this.gpu.createKernel(function(value) {\n        return value[this.thread.x];\n      }, {\n        output: this.biasesPropagate[layer].output,\n        outputToTexture: true,\n        hardCodeConstants: true\n      });\n    }\n  }\n\n  changeBiases() {\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\n      this.biases[layer] = this.biasesPropagate[layer](\n        this.biasCopies[layer] || this.biases[layer],\n        this.deltas[layer]\n      );\n      this.biasCopies[layer] = this.copyBias[layer](this.biases[layer]);\n    }\n  }\n\n  buildGetMSE() {\n    this.getMSE = this.gpu.createKernel(mse, {\n      output: [1],\n      hardcodeConstants: true,\n      constants: {\n        size: this.sizes[this.outputLayer]\n      }\n    });\n  }\n\n  /**\n   *\n   * @param input\n   * @returns {*}\n   */\n  run(input) {\n    if (!this.isRunnable) return null;\n    if (this.inputLookup) {\n      input = lookup.toArray(this.inputLookup, input);\n    }\n    const inputTexture = this._texturizeInputData(input);\n    const outputTextures = this.runInput(inputTexture);\n    let output = outputTextures.toArray(this.gpu);\n\n    if (this.outputLookup) {\n      output = lookup.toHash(this.outputLookup, output);\n    }\n    return output;\n  }\n\n\n  /**\n   *\n   * @param data\n   * Verifies network sizes are initilaized\n   * If they are not it will initialize them based off the data set.\n   */\n  _verifyIsInitialized(data) {\n    if (this.sizes) return;\n\n    this.sizes = [];\n    if (!data[0].size) {\n      data[0].size = { input: data[0].input.length, output: data[0].output.length };\n    }\n\n    this.sizes.push(data[0].size.input);\n    if (!this.hiddenSizes) {\n      this.sizes.push(Math.max(3, Math.floor(data[0].size.input / 2)));\n    } else {\n      this.hiddenSizes.forEach(size => {\n        this.sizes.push(size);\n      });\n    }\n    this.sizes.push(data[0].size.output);\n\n    this._initialize();\n  }\n\n  /**\n   *\n   * @param data\n   * @param options\n   * @protected\n   * @return { data, status, endTime }\n   */\n  _prepTraining(data, options) {\n    this._updateTrainingOptions(options);\n    data = this._formatData(data);\n    const endTime = Date.now() + this.trainOpts.timeout;\n\n    const status = {\n      error: 1,\n      iterations: 0\n    };\n\n    this._verifyIsInitialized(data);\n\n    const texturizeOutputData = this.gpu.createKernel(function(value) {\n      return value[this.thread.x];\n    }, {\n      output: [data[0].output.length],\n      outputToTexture: true,\n      hardcodeConstants: true,\n      outputImmutable: true\n    });\n\n    return {\n      data: data.map((set) => {\n        return {\n          size: set.size,\n          input: this._texturizeInputData(set.input),\n          output: texturizeOutputData(set.output)\n        }\n      }),\n      status,\n      endTime\n    };\n  }\n\n  toFunction() {\n    throw new Error('not implemented on NeuralNetworkGPU');\n  }\n\n}\n\nfunction weightedSumSigmoid(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //sigmoid\n  return 1 / (1 + Math.exp(-sum));\n}\n\nfunction weightedSumRelu(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //relu\n  return (sum < 0 ? 0 : sum);\n}\n\nfunction weightedSumLeakyRelu(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //leaky relu\n  return (sum < 0 ? 0 : 0.01 * sum);\n}\n\nfunction weightedSumTanh(weights, biases, inputs) {\n  let sum = biases[this.thread.x];\n  for (let k = 0; k < this.constants.size; k++) {\n    sum += weights[this.thread.x][k] * inputs[k];\n  }\n  //tanh\n  return Math.tanh(sum);\n}\n\nfunction calcErrorOutput(output, targets) {\n  return targets[this.thread.x] - output;\n}\n\nfunction calcDeltasSigmoid(error, output) {\n  //sigmoid derivative\n  return error * output * (1 - output);\n}\n\nfunction calcDeltasRelu(error, output) {\n  //relu derivative\n  return output > 0 ? error : 0;\n}\n\nfunction calcDeltasLeakyRelu(error, output) {\n  //leaky relu derivative\n  return output > 0 ? error : 0.01 * error;\n}\n\nfunction calcDeltasTanh(error, output) {\n  //tanh derivative\n  return (1 - output * output) * error;\n}\n\nfunction calcError(nextWeights, nextDeltas){\n  let error = 0;\n  for(let k = 0; k < this.constants.size; k++){\n    error += nextDeltas[k] * nextWeights[k][this.thread.x];\n  }\n  return error;\n}\n\nfunction calcChanges(\n  previousChanges,\n  deltas,\n  previousOutputs\n) {\n  return (this.constants.learningRate * deltas[this.thread.y] * previousOutputs[this.thread.x])\n      + (this.constants.momentum * previousChanges[this.thread.y][this.thread.x]);\n}\n\nfunction addWeights(change, weights){\n  return change + weights[this.thread.y][this.thread.x];\n}\n\nfunction addBiases(biases, deltas){\n  return biases[this.thread.x] + (deltas[this.thread.x] * this.constants.learningRate);\n}\n\n// mean squared error, reimplemented for GPU\nfunction mse(errors) {\n  let sum = 0;\n  for (let i = 0; i < this.constants.size; i++) {\n    sum += Math.pow(errors[i], 2);\n  }\n  return sum / this.constants.size;\n}"]}