{"version":3,"sources":["../src/neural-network.js"],"names":["NeuralNetwork","options","Object","assign","defaults","hiddenSizes","hiddenLayers","sizes","outputLayer","biases","weights","outputs","deltas","changes","errors","keepNetworkIntact","length","layer","size","Array","node","prevSize","input","inputLookup","toArray","output","runInput","outputLookup","toHash","sum","k","Math","exp","data","_options","trainDefaults","formatData","iterations","errorThresh","log","console","logPeriod","learningRate","callback","callbackPeriod","inputSize","outputSize","push","max","floor","forEach","unshift","initialize","error","i","j","err","trainPattern","target","calculateDeltas","adjustWeights","incoming","delta","change","momentum","constructor","tmp","datum","Float64Array","buildLookup","map","value","array","isBinary","falsePos","falseNeg","truePos","trueNeg","misclasses","actual","expected","binaryThresh","indexOf","misclass","stats","total","precision","recall","accuracy","layers","nodes","keys","bias","index","json","lookupFromHash","nodeHandle","layerNumber","nodeKey","result","w","join","toJSON","layersAsMath","key","Function","opts","neuralNetwork","trainStream"],"mappings":"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","file":"neural-network.js","sourcesContent":["import lookup from './lookup';\r\nimport TrainStream from './train-stream';\r\nimport max from './utilities/max';\r\nimport mse from './utilities/mse';\r\nimport randos from './utilities/randos';\r\nimport range from './utilities/range';\r\nimport toArray from './utilities/to-array';\r\nimport zeros from './utilities/zeros';\r\n\r\n/**\r\n *\r\n * @param {object} options\r\n * @constructor\r\n */\r\nexport default class NeuralNetwork {\r\n  constructor(options = {}) {\r\n    Object.assign(this, NeuralNetwork.defaults, options);\r\n    this.hiddenSizes = options.hiddenLayers;\r\n\r\n    this.sizes = null;\r\n    this.outputLayer = null;\r\n    this.biases = null; // weights for bias nodes\r\n    this.weights = null;\r\n    this.outputs = null;\r\n\r\n    // state for training\r\n    this.deltas = null;\r\n    this.changes = null; // for momentum\r\n    this.errors = null;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {} sizes\r\n   * @param {Boolean} keepNetworkIntact\r\n   */\r\n  initialize(sizes, keepNetworkIntact) {\r\n    this.sizes = sizes;\r\n    this.outputLayer = this.sizes.length - 1;\r\n\r\n    if (!keepNetworkIntact) {\r\n      this.biases = []; // weights for bias nodes\r\n      this.weights = [];\r\n      this.outputs = [];\r\n    }\r\n\r\n    // state for training\r\n    this.deltas = [];\r\n    this.changes = []; // for momentum\r\n    this.errors = [];\r\n\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      let size = this.sizes[layer];\r\n      this.deltas[layer] = zeros(size);\r\n      this.errors[layer] = zeros(size);\r\n      if (!keepNetworkIntact) {\r\n        this.outputs[layer] = zeros(size);\r\n      }\r\n\r\n      if (layer > 0) {\r\n        this.biases[layer] = randos(size);\r\n        if (!keepNetworkIntact) {\r\n          this.weights[layer] = new Array(size);\r\n        }\r\n        this.changes[layer] = new Array(size);\r\n\r\n        for (let node = 0; node < size; node++) {\r\n          let prevSize = this.sizes[layer - 1];\r\n          if (!keepNetworkIntact) {\r\n            this.weights[layer][node] = randos(prevSize);\r\n          }\r\n          this.changes[layer][node] = zeros(prevSize);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   * @returns {*}\r\n   */\r\n  run(input) {\r\n    if (this.inputLookup) {\r\n      input = lookup.toArray(this.inputLookup, input);\r\n    }\r\n\r\n    let output = this.runInput(input);\r\n\r\n    if (this.outputLookup) {\r\n      output = lookup.toHash(this.outputLookup, output);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   * @returns {*}\r\n   */\r\n  runInput(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param options\r\n   * @returns {{error: number, iterations: number}}\r\n   */\r\n  train(data, _options = {}) {\r\n    const options = Object.assign({}, NeuralNetwork.trainDefaults, _options);\r\n    data = this.formatData(data);\r\n    let iterations = options.iterations;\r\n    let errorThresh = options.errorThresh;\r\n    let log = options.log === true ? console.log : options.log;\r\n    let logPeriod = options.logPeriod;\r\n    let learningRate = _options.learningRate || this.learningRate || options.learningRate;\r\n    let callback = options.callback;\r\n    let callbackPeriod = options.callbackPeriod;\r\n    let sizes = [];\r\n    let inputSize = data[0].input.length;\r\n    let outputSize = data[0].output.length;\r\n    let hiddenSizes = this.hiddenSizes;\r\n    if (!hiddenSizes) {\r\n      sizes.push(Math.max(3, Math.floor(inputSize / 2)));\r\n    } else {\r\n      hiddenSizes.forEach(size => {\r\n        sizes.push(size);\r\n      });\r\n    }\r\n\r\n    sizes.unshift(inputSize);\r\n    sizes.push(outputSize);\r\n\r\n    this.initialize(sizes, options.keepNetworkIntact);\r\n\r\n    let error = 1;\r\n    let i;\r\n    for (i = 0; i < iterations && error > errorThresh; i++) {\r\n      let sum = 0;\r\n      for (let j = 0; j < data.length; j++) {\r\n        let err = this.trainPattern(data[j].input, data[j].output, learningRate);\r\n        sum += err;\r\n      }\r\n      error = sum / data.length;\r\n\r\n      if (log && (i % logPeriod == 0)) {\r\n        log('iterations:', i, 'training error:', error);\r\n      }\r\n      if (callback && (i % callbackPeriod == 0)) {\r\n        callback({ error: error, iterations: i });\r\n      }\r\n    }\r\n\r\n    return {\r\n      error: error,\r\n      iterations: i\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   * @param target\r\n   * @param learningRate\r\n   */\r\n  trainPattern(input, target, learningRate) {\r\n    learningRate = learningRate || this.learningRate;\r\n\r\n    // forward propagate\r\n    this.runInput(input);\r\n\r\n    // back propagate\r\n    this.calculateDeltas(target);\r\n    this.adjustWeights(learningRate);\r\n\r\n    let error = mse(this.errors[this.outputLayer]);\r\n    return error;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  calculateDeltas(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer == this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = error * output * (1 - output);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param learningRate\r\n   */\r\n  adjustWeights(learningRate) {\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      let incoming = this.outputs[layer - 1];\r\n\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let delta = this.deltas[layer][node];\r\n\r\n        for (let k = 0; k < incoming.length; k++) {\r\n          let change = this.changes[layer][node][k];\r\n\r\n          change = (learningRate * delta * incoming[k])\r\n            + (this.momentum * change);\r\n\r\n          this.changes[layer][node][k] = change;\r\n          this.weights[layer][node][k] += change;\r\n        }\r\n        this.biases[layer][node] += learningRate * delta;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @returns {*}\r\n   */\r\n  formatData(data) {\r\n    if (data.constructor !== Array) { // turn stream datum into array\r\n      let tmp = [];\r\n      tmp.push(data);\r\n      data = tmp;\r\n    }\r\n    // turn sparse hash input into arrays with 0s as filler\r\n    let datum = data[0].input;\r\n    if (datum.constructor !== Array && !(datum instanceof Float64Array)) {\r\n      if (!this.inputLookup) {\r\n        this.inputLookup = lookup.buildLookup(data.map(value => value['input']));\r\n      }\r\n      data = data.map(datum => {\r\n        let array = lookup.toArray(this.inputLookup, datum.input);\r\n        return Object.assign({}, datum, { input: array });\r\n      }, this);\r\n    }\r\n\r\n    if (data[0].output.constructor !== Array) {\r\n      if (!this.outputLookup) {\r\n        this.outputLookup = lookup.buildLookup(data.map(value => value['output']));\r\n      }\r\n      data = data.map(datum => {\r\n        let array = lookup.toArray(this.outputLookup, datum.output);\r\n        return Object.assign({}, datum, { output: array });\r\n      }, this);\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @returns {\r\n   *  {\r\n   *    error: number,\r\n   *    misclasses: Array\r\n   *  }\r\n   * }\r\n   */\r\n  test(data) {\r\n    data = this.formatData(data);\r\n\r\n    // for binary classification problems with one output node\r\n    let isBinary = data[0].output.length == 1;\r\n    let falsePos = 0;\r\n    let falseNeg = 0;\r\n    let truePos = 0;\r\n    let trueNeg = 0;\r\n\r\n    // for classification problems\r\n    let misclasses = [];\r\n\r\n    // run each pattern through the trained network and collect\r\n    // error and misclassification statistics\r\n    let sum = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n      let output = this.runInput(data[i].input);\r\n      let target = data[i].output;\r\n\r\n      let actual, expected;\r\n      if (isBinary) {\r\n        actual = output[0] > this.binaryThresh ? 1 : 0;\r\n        expected = target[0];\r\n      }\r\n      else {\r\n        actual = output.indexOf(max(output));\r\n        expected = target.indexOf(max(target));\r\n      }\r\n\r\n      if (actual != expected) {\r\n        let misclass = data[i];\r\n        Object.assign(misclass, {\r\n          actual: actual,\r\n          expected: expected\r\n        });\r\n        misclasses.push(misclass);\r\n      }\r\n\r\n      if (isBinary) {\r\n        if (actual == 0 && expected == 0) {\r\n          trueNeg++;\r\n        }\r\n        else if (actual == 1 && expected == 1) {\r\n          truePos++;\r\n        }\r\n        else if (actual == 0 && expected == 1) {\r\n          falseNeg++;\r\n        }\r\n        else if (actual == 1 && expected == 0) {\r\n          falsePos++;\r\n        }\r\n      }\r\n\r\n      let errors = output.map((value, i) => {\r\n        return target[i] - value;\r\n      });\r\n      sum += mse(errors);\r\n    }\r\n    let error = sum / data.length;\r\n\r\n    let stats = {\r\n      error: error,\r\n      misclasses: misclasses\r\n    };\r\n\r\n    if (isBinary) {\r\n      Object.assign(stats, {\r\n        trueNeg: trueNeg,\r\n        truePos: truePos,\r\n        falseNeg: falseNeg,\r\n        falsePos: falsePos,\r\n        total: data.length,\r\n        precision: truePos / (truePos + falsePos),\r\n        recall: truePos / (truePos + falseNeg),\r\n        accuracy: (trueNeg + truePos) / data.length\r\n      });\r\n    }\r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns\r\n   *  {\r\n   *    layers: [\r\n   *      {\r\n   *        x: {},\r\n   *        y: {}\r\n   *      },\r\n   *      {\r\n   *        '0': {\r\n   *          bias: -0.98771313,\r\n   *          weights: {\r\n   *            x: 0.8374838,\r\n   *            y: 1.245858\r\n   *          },\r\n   *        '1': {\r\n   *          bias: 3.48192004,\r\n   *          weights: {\r\n   *            x: 1.7825821,\r\n   *            y: -2.67899\r\n   *          }\r\n   *        }\r\n   *      },\r\n   *      {\r\n   *        f: {\r\n   *          bias: 0.27205739,\r\n   *          weights: {\r\n   *            '0': 1.3161821,\r\n   *            '1': 2.00436\r\n   *          }\r\n   *        }\r\n   *      }\r\n   *    ]\r\n   *  }\r\n   */\r\n  toJSON() {\r\n    let layers = [];\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      layers[layer] = {};\r\n\r\n      let nodes;\r\n      // turn any internal arrays back into hashes for readable json\r\n      if (layer == 0 && this.inputLookup) {\r\n        nodes = Object.keys(this.inputLookup);\r\n      }\r\n      else if (layer == this.outputLayer && this.outputLookup) {\r\n        nodes = Object.keys(this.outputLookup);\r\n      }\r\n      else {\r\n        nodes = range(0, this.sizes[layer]);\r\n      }\r\n\r\n      for (let j = 0; j < nodes.length; j++) {\r\n        let node = nodes[j];\r\n        layers[layer][node] = {};\r\n\r\n        if (layer > 0) {\r\n          layers[layer][node].bias = this.biases[layer][j];\r\n          layers[layer][node].weights = {};\r\n          for (let k in layers[layer - 1]) {\r\n            let index = k;\r\n            if (layer == 1 && this.inputLookup) {\r\n              index = this.inputLookup[k];\r\n            }\r\n            layers[layer][node].weights[k] = this.weights[layer][j][index];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return { layers: layers, outputLookup:!!this.outputLookup, inputLookup:!!this.inputLookup };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param json\r\n   * @returns {NeuralNetwork}\r\n   */\r\n  fromJSON(json) {\r\n    let size = json.layers.length;\r\n    this.outputLayer = size - 1;\r\n\r\n    this.sizes = new Array(size);\r\n    this.weights = new Array(size);\r\n    this.biases = new Array(size);\r\n    this.outputs = new Array(size);\r\n\r\n    for (let i = 0; i <= this.outputLayer; i++) {\r\n      let layer = json.layers[i];\r\n      if (i == 0 && (!layer[0] || json.inputLookup)) {\r\n        this.inputLookup = lookup.lookupFromHash(layer);\r\n      }\r\n      else if (i == this.outputLayer && (!layer[0] || json.outputLookup)) {\r\n        this.outputLookup = lookup.lookupFromHash(layer);\r\n      }\r\n\r\n      let nodes = Object.keys(layer);\r\n      this.sizes[i] = nodes.length;\r\n      this.weights[i] = [];\r\n      this.biases[i] = [];\r\n      this.outputs[i] = [];\r\n\r\n      for (let j in nodes) {\r\n        let node = nodes[j];\r\n        this.biases[i][j] = layer[node].bias;\r\n        this.weights[i][j] = toArray(layer[node].weights);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Function}\r\n   */\r\n  toFunction() {\r\n    function nodeHandle(layers, layerNumber, nodeKey) {\r\n      if (layerNumber === 0) {\r\n        return (typeof nodeKey === 'string'\r\n          ? `input['${nodeKey}']`\r\n          : `input[${nodeKey}]`);\r\n      }\r\n\r\n      const layer = layers[layerNumber];\r\n      const node = layer[nodeKey];\r\n      let result = [node.bias];\r\n      for (let w in node.weights) {\r\n        if (node.weights[w] < 0) {\r\n          result.push(`${node.weights[w]}*(${nodeHandle(layers, layerNumber - 1, w)})`);\r\n        } else {\r\n          result.push(`+${node.weights[w]}*(${nodeHandle(layers, layerNumber - 1, w)})`);\r\n        }\r\n      }\r\n      return `1/(1+1/Math.exp(${result.join('')}))`;\r\n    }\r\n\r\n    const layers = this.toJSON().layers;\r\n    const layersAsMath = [];\r\n    let result;\r\n    for (let i in layers[layers.length - 1]) {\r\n      layersAsMath.push(nodeHandle(layers, layers.length - 1, i));\r\n    }\r\n    if (this.outputLookup) {\r\n      result = `{${\r\n        Object.keys(this.outputLookup)\r\n          .map((key, i) => `'${key}':${layersAsMath[i]}`)\r\n      }}`;\r\n    } else {\r\n      result = `[${layersAsMath.join(',')}]`;\r\n    }\r\n    return new Function('input', `return ${result}`);\r\n  }\r\n\r\n  /**\r\n   * This will create a TrainStream (WriteStream) for us to send the training data to.\r\n   * @param opts training options\r\n   * @returns {TrainStream|*}\r\n   */\r\n  createTrainStream(opts) {\r\n    opts = opts || {};\r\n    opts.neuralNetwork = this;\r\n    this.trainStream = new TrainStream(opts);\r\n    return this.trainStream;\r\n  }\r\n}\r\n\r\nNeuralNetwork.trainDefaults = {\r\n  iterations: 20000,\r\n  errorThresh: 0.005,\r\n  log: false,\r\n  logPeriod: 10,\r\n  learningRate: 0.3,\r\n  callback: null,\r\n  callbackPeriod: 10,\r\n  keepNetworkIntact: false\r\n};\r\n\r\nNeuralNetwork.defaults = {\r\n  learningRate: 0.3,\r\n  momentum: 0.1,\r\n  binaryThresh: 0.5,\r\n  hiddenLayers: null\r\n};"]}