{"version":3,"sources":["../src/neural-network.js"],"names":["NeuralNetwork","iterations","errorThresh","log","logPeriod","learningRate","momentum","callback","callbackPeriod","timeout","Infinity","praxis","beta1","beta2","epsilon","leakyReluAlpha","binaryThresh","hiddenLayers","activation","options","Object","assign","constructor","defaults","trainOpts","updateTrainingOptions","trainDefaults","sizes","outputLayer","biases","weights","outputs","deltas","changes","errors","errorCheckInterval","prototype","hasOwnProperty","runInput","calculateDeltas","inputLookup","inputLookupLength","outputLookup","outputLookupLength","Error","length","layer","size","Array","node","prevSize","setActivation","_setupAdam","_runInputSigmoid","_calculateDeltasSigmoid","_runInputRelu","_calculateDeltasRelu","_runInputLeakyRelu","_calculateDeltasLeakyRelu","_runInputTanh","_calculateDeltasTanh","input","isRunnable","lookup","toArray","output","slice","toObject","sum","k","Math","exp","alpha","tanh","data","push","max","floor","forEach","initialize","p","validateTrainingOptions","setLogMethod","validations","val","keys","reduce","opts","opt","console","i","trainPattern","status","endTime","error","Date","now","calculateTrainingError","trainPatterns","formatData","verifyIsInitialized","prepTraining","trainingTick","Promise","resolve","reject","thawedTrain","Thaw","delay","each","stop","done","tick","trainError","value","logErrorRate","adjustWeights","target","incoming","delta","change","biasChangesLow","biasChangesHigh","changesLow","changesHigh","_adjustWeightsAdam","gradient","changeLow","changeHigh","momentumCorrection","pow","gradientCorrection","sqrt","biasGradient","biasChangeLow","biasChangeHigh","biasMomentumCorrection","biasGradientCorrection","isArray","LookupTable","table","_formatInput","getTypedArrayFn","_formatOutput","result","addKeys","isBinary","misclasses","errorSum","falsePos","falseNeg","truePos","trueNeg","actual","expected","misclass","map","total","precision","recall","accuracy","indexOf","layers","nodes","j","bias","index","getTrainOptsJSON","json","toHash","needsVar","nodeHandle","layerNumber","nodeKey","w","join","toJSON","layersAsMath","key","Function","checkFns","filter","c","buffer","ArrayBuffer","arrayToFloat32Array","v","array","Float32Array"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;IAIqBA,a;;;wBACQ;AACzB,aAAO;AACLC,oBAAY,KADP,EACiB;AACtBC,qBAAa,KAFR,EAEiB;AACtBC,aAAK,KAHA,EAGiB;AACtBC,mBAAW,EAJN,EAIiB;AACtBC,sBAAc,GALT,EAKiB;AACtBC,kBAAU,GANL,EAMiB;AACtBC,kBAAU,IAPL,EAOiB;AACtBC,wBAAgB,EARX,EAQiB;AACtBC,iBAASC,QATJ,EASiB;AACtBC,gBAAQ,IAVH;AAWLC,eAAO,GAXF;AAYLC,eAAO,KAZF;AAaLC,iBAAS;AAbJ,OAAP;AAeD;;;wBAEqB;AACpB,aAAO;AACLC,wBAAgB,IADX;AAELC,sBAAc,GAFT;AAGLC,sBAAc,IAHT,EAGmB;AACxBC,oBAAY,SAJP,CAIkB;AAJlB,OAAP;AAMD;;;AAED,2BAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AACxBC,WAAOC,MAAP,CAAc,IAAd,EAAoB,KAAKC,WAAL,CAAiBC,QAArC,EAA+CJ,OAA/C;AACA,SAAKK,SAAL,GAAiB,EAAjB;AACA,SAAKC,qBAAL,CAA2BL,OAAOC,MAAP,CAAc,EAAd,EAAkB,KAAKC,WAAL,CAAiBI,aAAnC,EAAkDP,OAAlD,CAA3B;;AAEA,SAAKQ,KAAL,GAAa,IAAb;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,MAAL,GAAc,IAAd,CAPwB,CAOJ;AACpB,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,OAAL,GAAe,IAAf,CAbwB,CAaH;AACrB,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,kBAAL,GAA0B,CAA1B;AACA,QAAI,CAAC,KAAKb,WAAL,CAAiBc,SAAjB,CAA2BC,cAA3B,CAA0C,UAA1C,CAAL,EAA4D;AAC1D,WAAKC,QAAL,GAAgB,IAAhB;AACD;AACD,QAAI,CAAC,KAAKhB,WAAL,CAAiBc,SAAjB,CAA2BC,cAA3B,CAA0C,iBAA1C,CAAL,EAAmE;AACjE,WAAKE,eAAL,GAAuB,IAAvB;AACD;AACD,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,iBAAL,GAAyB,IAAzB;AACA,SAAKC,YAAL,GAAoB,IAApB;AACA,SAAKC,kBAAL,GAA0B,IAA1B;AACD;;AAED;;;;;;;;iCAIa;AACX,UAAI,CAAC,KAAKhB,KAAV,EAAiB,MAAM,IAAIiB,KAAJ,CAAW,uCAAX,CAAN;;AAEjB,WAAKhB,WAAL,GAAmB,KAAKD,KAAL,CAAWkB,MAAX,GAAoB,CAAvC;AACA,WAAKhB,MAAL,GAAc,EAAd,CAJW,CAIO;AAClB,WAAKC,OAAL,GAAe,EAAf;AACA,WAAKC,OAAL,GAAe,EAAf;;AAEA;AACA,WAAKC,MAAL,GAAc,EAAd;AACA,WAAKC,OAAL,GAAe,EAAf,CAVW,CAUQ;AACnB,WAAKC,MAAL,GAAc,EAAd;;AAEA,WAAK,IAAIY,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,YAAIC,OAAO,KAAKpB,KAAL,CAAWmB,KAAX,CAAX;AACA,aAAKd,MAAL,CAAYc,KAAZ,IAAqB,qBAAMC,IAAN,CAArB;AACA,aAAKb,MAAL,CAAYY,KAAZ,IAAqB,qBAAMC,IAAN,CAArB;AACA,aAAKhB,OAAL,CAAae,KAAb,IAAsB,qBAAMC,IAAN,CAAtB;;AAEA,YAAID,QAAQ,CAAZ,EAAe;AACb,eAAKjB,MAAL,CAAYiB,KAAZ,IAAqB,sBAAOC,IAAP,CAArB;AACA,eAAKjB,OAAL,CAAagB,KAAb,IAAsB,IAAIE,KAAJ,CAAUD,IAAV,CAAtB;AACA,eAAKd,OAAL,CAAaa,KAAb,IAAsB,IAAIE,KAAJ,CAAUD,IAAV,CAAtB;;AAEA,eAAK,IAAIE,OAAO,CAAhB,EAAmBA,OAAOF,IAA1B,EAAgCE,MAAhC,EAAwC;AACtC,gBAAIC,WAAW,KAAKvB,KAAL,CAAWmB,QAAQ,CAAnB,CAAf;AACA,iBAAKhB,OAAL,CAAagB,KAAb,EAAoBG,IAApB,IAA4B,sBAAOC,QAAP,CAA5B;AACA,iBAAKjB,OAAL,CAAaa,KAAb,EAAoBG,IAApB,IAA4B,qBAAMC,QAAN,CAA5B;AACD;AACF;AACF;;AAED,WAAKC,aAAL;AACA,UAAI,KAAK3B,SAAL,CAAeb,MAAf,KAA0B,MAA9B,EAAsC;AACpC,aAAKyC,UAAL;AACD;AACF;;AAED;;;;;;;kCAIclC,U,EAAY;AACxB,WAAKA,UAAL,GAAkBA,aAAaA,UAAb,GAA0B,KAAKA,UAAjD;AACA,cAAQ,KAAKA,UAAb;AACE,aAAK,SAAL;AACE,eAAKoB,QAAL,GAAgB,KAAKA,QAAL,IAAiB,KAAKe,gBAAtC;AACA,eAAKd,eAAL,GAAuB,KAAKA,eAAL,IAAwB,KAAKe,uBAApD;AACA;AACF,aAAK,MAAL;AACE,eAAKhB,QAAL,GAAgB,KAAKA,QAAL,IAAiB,KAAKiB,aAAtC;AACA,eAAKhB,eAAL,GAAuB,KAAKA,eAAL,IAAwB,KAAKiB,oBAApD;AACA;AACF,aAAK,YAAL;AACE,eAAKlB,QAAL,GAAgB,KAAKA,QAAL,IAAiB,KAAKmB,kBAAtC;AACA,eAAKlB,eAAL,GAAuB,KAAKA,eAAL,IAAwB,KAAKmB,yBAApD;AACA;AACF,aAAK,MAAL;AACE,eAAKpB,QAAL,GAAgB,KAAKA,QAAL,IAAiB,KAAKqB,aAAtC;AACA,eAAKpB,eAAL,GAAuB,KAAKA,eAAL,IAAwB,KAAKqB,oBAApD;AACA;AACF;AACE,gBAAM,IAAIhB,KAAJ,CAAU,wBAAwB,KAAK1B,UAA7B,GAA0C,qFAApD,CAAN;AAlBJ;AAoBD;;AAED;;;;;;;;;AA6BA;;;;;wBAKI2C,K,EAAO;AACT,UAAI,CAAC,KAAKC,UAAV,EAAsB,OAAO,IAAP;AACtB,UAAI,KAAKtB,WAAT,EAAsB;AACpBqB,gBAAQE,iBAAOC,OAAP,CAAe,KAAKxB,WAApB,EAAiCqB,KAAjC,EAAwC,KAAKpB,iBAA7C,CAAR;AACD;;AAED,UAAIwB,SAAS,KAAK3B,QAAL,CAAcuB,KAAd,EAAqBK,KAArB,CAA2B,CAA3B,CAAb;;AAEA,UAAI,KAAKxB,YAAT,EAAuB;AACrBuB,iBAASF,iBAAOI,QAAP,CAAgB,KAAKzB,YAArB,EAAmCuB,MAAnC,CAAT;AACD;AACD,aAAOA,MAAP;AACD;;AAED;;;;;;;;qCAKiBJ,K,EAAO;AACtB,WAAK9B,OAAL,CAAa,CAAb,IAAkB8B,KAAlB,CADsB,CACI;;AAE1B,UAAII,SAAS,IAAb;AACA,WAAK,IAAInB,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKtB,KAAL,CAAWmB,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAInB,UAAU,KAAKA,OAAL,CAAagB,KAAb,EAAoBG,IAApB,CAAd;;AAEA,cAAImB,MAAM,KAAKvC,MAAL,CAAYiB,KAAZ,EAAmBG,IAAnB,CAAV;AACA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIvC,QAAQe,MAA5B,EAAoCwB,GAApC,EAAyC;AACvCD,mBAAOtC,QAAQuC,CAAR,IAAaR,MAAMQ,CAAN,CAApB;AACD;AACD;AACA,eAAKtC,OAAL,CAAae,KAAb,EAAoBG,IAApB,IAA4B,KAAK,IAAIqB,KAAKC,GAAL,CAAS,CAACH,GAAV,CAAT,CAA5B;AACD;AACDH,iBAASJ,QAAQ,KAAK9B,OAAL,CAAae,KAAb,CAAjB;AACD;AACD,aAAOmB,MAAP;AACD;;;kCAEaJ,K,EAAO;AACnB,WAAK9B,OAAL,CAAa,CAAb,IAAkB8B,KAAlB,CADmB,CACO;;AAE1B,UAAII,SAAS,IAAb;AACA,WAAK,IAAInB,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKtB,KAAL,CAAWmB,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAInB,UAAU,KAAKA,OAAL,CAAagB,KAAb,EAAoBG,IAApB,CAAd;;AAEA,cAAImB,MAAM,KAAKvC,MAAL,CAAYiB,KAAZ,EAAmBG,IAAnB,CAAV;AACA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIvC,QAAQe,MAA5B,EAAoCwB,GAApC,EAAyC;AACvCD,mBAAOtC,QAAQuC,CAAR,IAAaR,MAAMQ,CAAN,CAApB;AACD;AACD;AACA,eAAKtC,OAAL,CAAae,KAAb,EAAoBG,IAApB,IAA6BmB,MAAM,CAAN,GAAU,CAAV,GAAcA,GAA3C;AACD;AACDH,iBAASJ,QAAQ,KAAK9B,OAAL,CAAae,KAAb,CAAjB;AACD;AACD,aAAOmB,MAAP;AACD;;;uCAEkBJ,K,EAAO;AACxB,WAAK9B,OAAL,CAAa,CAAb,IAAkB8B,KAAlB,CADwB,CACE;AAC1B,UAAIW,QAAQ,KAAKzD,cAAjB;AACA,UAAIkD,SAAS,IAAb;AACA,WAAK,IAAInB,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKtB,KAAL,CAAWmB,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAInB,UAAU,KAAKA,OAAL,CAAagB,KAAb,EAAoBG,IAApB,CAAd;;AAEA,cAAImB,MAAM,KAAKvC,MAAL,CAAYiB,KAAZ,EAAmBG,IAAnB,CAAV;AACA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIvC,QAAQe,MAA5B,EAAoCwB,GAApC,EAAyC;AACvCD,mBAAOtC,QAAQuC,CAAR,IAAaR,MAAMQ,CAAN,CAApB;AACD;AACD;AACA,eAAKtC,OAAL,CAAae,KAAb,EAAoBG,IAApB,IAA6BmB,MAAM,CAAN,GAAU,CAAV,GAAcI,QAAQJ,GAAnD;AACD;AACDH,iBAASJ,QAAQ,KAAK9B,OAAL,CAAae,KAAb,CAAjB;AACD;AACD,aAAOmB,MAAP;AACD;;;kCAEaJ,K,EAAO;AACnB,WAAK9B,OAAL,CAAa,CAAb,IAAkB8B,KAAlB,CADmB,CACO;;AAE1B,UAAII,SAAS,IAAb;AACA,WAAK,IAAInB,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKtB,KAAL,CAAWmB,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAInB,UAAU,KAAKA,OAAL,CAAagB,KAAb,EAAoBG,IAApB,CAAd;;AAEA,cAAImB,MAAM,KAAKvC,MAAL,CAAYiB,KAAZ,EAAmBG,IAAnB,CAAV;AACA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIvC,QAAQe,MAA5B,EAAoCwB,GAApC,EAAyC;AACvCD,mBAAOtC,QAAQuC,CAAR,IAAaR,MAAMQ,CAAN,CAApB;AACD;AACD;AACA,eAAKtC,OAAL,CAAae,KAAb,EAAoBG,IAApB,IAA4BqB,KAAKG,IAAL,CAAUL,GAAV,CAA5B;AACD;AACDH,iBAASJ,QAAQ,KAAK9B,OAAL,CAAae,KAAb,CAAjB;AACD;AACD,aAAOmB,MAAP;AACD;;AAED;;;;;;;;;wCAMoBS,I,EAAM;AAAA;;AACxB,UAAI,KAAK/C,KAAT,EAAgB;;AAEhB,WAAKA,KAAL,GAAa,EAAb;AACA,WAAKA,KAAL,CAAWgD,IAAX,CAAgBD,KAAK,CAAL,EAAQb,KAAR,CAAchB,MAA9B;AACA,UAAI,CAAC,KAAK5B,YAAV,EAAwB;AACtB,aAAKU,KAAL,CAAWgD,IAAX,CAAgBL,KAAKM,GAAL,CAAS,CAAT,EAAYN,KAAKO,KAAL,CAAWH,KAAK,CAAL,EAAQb,KAAR,CAAchB,MAAd,GAAuB,CAAlC,CAAZ,CAAhB;AACD,OAFD,MAEO;AACL,aAAK5B,YAAL,CAAkB6D,OAAlB,CAA0B,gBAAQ;AAChC,gBAAKnD,KAAL,CAAWgD,IAAX,CAAgB5B,IAAhB;AACD,SAFD;AAGD;AACD,WAAKpB,KAAL,CAAWgD,IAAX,CAAgBD,KAAK,CAAL,EAAQT,MAAR,CAAepB,MAA/B;;AAEA,WAAKkC,UAAL;AACD;;AAED;;;;;;;;;;;;0CASsB5D,O,EAAS;AAC7B,UAAMO,gBAAgB,KAAKJ,WAAL,CAAiBI,aAAvC;AACA,WAAK,IAAMsD,CAAX,IAAgBtD,aAAhB,EAA+B;AAC7B,YAAI,CAACA,cAAcW,cAAd,CAA6B2C,CAA7B,CAAL,EAAsC;AACtC,aAAKxD,SAAL,CAAewD,CAAf,IAAoB7D,QAAQkB,cAAR,CAAuB2C,CAAvB,IAChB7D,QAAQ6D,CAAR,CADgB,GAEhBtD,cAAcsD,CAAd,CAFJ;AAGD;AACD,WAAKC,uBAAL,CAA6B,KAAKzD,SAAlC;AACA,WAAK0D,YAAL,CAAkB/D,QAAQhB,GAAR,IAAe,KAAKqB,SAAL,CAAerB,GAAhD;AACA,WAAKe,UAAL,GAAkBC,QAAQD,UAAR,IAAsB,KAAKA,UAA7C;AACD;;AAED;;;;;;;4CAIwBC,O,EAAS;AAC/B,UAAMgE,cAAc;AAClBlF,oBAAY,oBAACmF,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAxC;AAA4C,SADjD;AAElBlF,qBAAa,qBAACkF,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAjC,IAAsCA,MAAM,CAAnD;AAAuD,SAF7D;AAGlBjF,aAAK,aAACiF,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,UAAf,IAA6B,OAAOA,GAAP,KAAe,SAAnD;AAA+D,SAH7D;AAIlBhF,mBAAW,mBAACgF,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAxC;AAA4C,SAJhD;AAKlB/E,sBAAc,sBAAC+E,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAjC,IAAsCA,MAAM,CAAnD;AAAuD,SAL9D;AAMlB9E,kBAAU,kBAAC8E,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAjC,IAAsCA,MAAM,CAAnD;AAAuD,SAN1D;AAOlB7E,kBAAU,kBAAC6E,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,UAAf,IAA6BA,QAAQ,IAA5C;AAAkD,SAPrD;AAQlB5E,wBAAgB,wBAAC4E,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAxC;AAA4C,SARrD;AASlB3E,iBAAS,iBAAC2E,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAxC;AAA2C;AAT7C,OAApB;AAWA,WAAK,IAAMJ,CAAX,IAAgBG,WAAhB,EAA6B;AAC3B,YAAI,CAACA,YAAY9C,cAAZ,CAA2B2C,CAA3B,CAAL,EAAoC;AACpC,YAAI,CAAC7D,QAAQkB,cAAR,CAAuB2C,CAAvB,CAAL,EAAgC;AAChC,YAAI,CAACG,YAAYH,CAAZ,EAAe7D,QAAQ6D,CAAR,CAAf,CAAL,EAAiC;AAC/B,gBAAM,IAAIpC,KAAJ,OAAcoC,CAAd,UAAoB7D,QAAQ6D,CAAR,CAApB,8EAAN;AACD;AACF;AACF;;AAED;;;;;;;;uCAKmB;AAAA;;AACjB,aAAO5D,OAAOiE,IAAP,CAAY,KAAK/D,WAAL,CAAiBI,aAA7B,EACJ4D,MADI,CACG,UAACC,IAAD,EAAOC,GAAP,EAAe;AACrB,YAAIA,QAAQ,SAAR,IAAqB,OAAKhE,SAAL,CAAegE,GAAf,MAAwB9E,QAAjD,EAA2D,OAAO6E,IAAP;AAC3D,YAAIC,QAAQ,UAAZ,EAAwB,OAAOD,IAAP;AACxB,YAAI,OAAK/D,SAAL,CAAegE,GAAf,CAAJ,EAAyBD,KAAKC,GAAL,IAAY,OAAKhE,SAAL,CAAegE,GAAf,CAAZ;AACzB,YAAIA,QAAQ,KAAZ,EAAmBD,KAAKpF,GAAL,GAAW,OAAOoF,KAAKpF,GAAZ,KAAoB,UAA/B;AACnB,eAAOoF,IAAP;AACD,OAPI,EAOF,EAPE,CAAP;AAQD;;AAED;;;;;;;;;;iCAOapF,G,EAAK;AAChB,UAAI,OAAOA,GAAP,KAAe,UAAnB,EAA8B;AAC5B,aAAKqB,SAAL,CAAerB,GAAf,GAAqBA,GAArB;AACD,OAFD,MAEO,IAAIA,GAAJ,EAAS;AACd,aAAKqB,SAAL,CAAerB,GAAf,GAAqBsF,QAAQtF,GAA7B;AACD,OAFM,MAEA;AACL,aAAKqB,SAAL,CAAerB,GAAf,GAAqB,KAArB;AACD;AACF;;AAED;;;;;;;;2CAKuBuE,I,EAAM;AAC3B,UAAIN,MAAM,CAAV;AACA,WAAK,IAAIsB,IAAI,CAAb,EAAgBA,IAAIhB,KAAK7B,MAAzB,EAAiC,EAAE6C,CAAnC,EAAsC;AACpCtB,eAAO,KAAKuB,YAAL,CAAkBjB,KAAKgB,CAAL,CAAlB,EAA2B,IAA3B,CAAP;AACD;AACD,aAAOtB,MAAMM,KAAK7B,MAAlB;AACD;;AAED;;;;;;kCAGc6B,I,EAAM;AAClB,WAAK,IAAIgB,IAAI,CAAb,EAAgBA,IAAIhB,KAAK7B,MAAzB,EAAiC,EAAE6C,CAAnC,EAAsC;AACpC,aAAKC,YAAL,CAAkBjB,KAAKgB,CAAL,CAAlB;AACD;AACF;;AAED;;;;;;;;;iCAMahB,I,EAAMkB,M,EAAQC,O,EAAS;AAClC,UAAID,OAAO3F,UAAP,IAAqB,KAAKuB,SAAL,CAAevB,UAApC,IAAkD2F,OAAOE,KAAP,IAAgB,KAAKtE,SAAL,CAAetB,WAAjF,IAAgG6F,KAAKC,GAAL,MAAcH,OAAlH,EAA2H;AACzH,eAAO,KAAP;AACD;;AAEDD,aAAO3F,UAAP;;AAEA,UAAI,KAAKuB,SAAL,CAAerB,GAAf,IAAuByF,OAAO3F,UAAP,GAAoB,KAAKuB,SAAL,CAAepB,SAAnC,KAAiD,CAA5E,EAAgF;AAC9EwF,eAAOE,KAAP,GAAe,KAAKG,sBAAL,CAA4BvB,IAA5B,CAAf;AACA,aAAKlD,SAAL,CAAerB,GAAf,kBAAkCyF,OAAO3F,UAAzC,0BAAwE2F,OAAOE,KAA/E;AACD,OAHD,MAGO;AACL,YAAIF,OAAO3F,UAAP,GAAoB,KAAKkC,kBAAzB,KAAgD,CAApD,EAAuD;AACrDyD,iBAAOE,KAAP,GAAe,KAAKG,sBAAL,CAA4BvB,IAA5B,CAAf;AACD,SAFD,MAEO;AACL,eAAKwB,aAAL,CAAmBxB,IAAnB;AACD;AACF;;AAED,UAAI,KAAKlD,SAAL,CAAejB,QAAf,IAA4BqF,OAAO3F,UAAP,GAAoB,KAAKuB,SAAL,CAAehB,cAAnC,KAAsD,CAAtF,EAA0F;AACxF,aAAKgB,SAAL,CAAejB,QAAf,CAAwB;AACtBN,sBAAY2F,OAAO3F,UADG;AAEtB6F,iBAAOF,OAAOE;AAFQ,SAAxB;AAID;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;;;;iCAOapB,I,EAAMvD,O,EAAS;AAC1B,WAAKM,qBAAL,CAA2BN,OAA3B;AACAuD,aAAO,KAAKyB,UAAL,CAAgBzB,IAAhB,CAAP;AACA,UAAMmB,UAAUE,KAAKC,GAAL,KAAa,KAAKxE,SAAL,CAAef,OAA5C;;AAEA,UAAMmF,SAAS;AACbE,eAAO,CADM;AAEb7F,oBAAY;AAFC,OAAf;;AAKA,WAAKmG,mBAAL,CAAyB1B,IAAzB;;AAEA,aAAO;AACLA,kBADK;AAELkB,sBAFK;AAGLC;AAHK,OAAP;AAKD;;AAED;;;;;;;;;0BAMMnB,I,EAAoB;AAAA,UAAdvD,OAAc,uEAAJ,EAAI;;AACxB,UAAIyE,eAAJ;AAAA,UAAYC,gBAAZ;;AADwB,0BAEK,KAAKQ,YAAL,CAAkB3B,IAAlB,EAAwBvD,OAAxB,CAFL;;AAErBuD,UAFqB,iBAErBA,IAFqB;AAEfkB,YAFe,iBAEfA,MAFe;AAEPC,aAFO,iBAEPA,OAFO;;;AAIxB,aAAO,KAAKS,YAAL,CAAkB5B,IAAlB,EAAwBkB,MAAxB,EAAgCC,OAAhC,CAAP;AACA,aAAOD,MAAP;AACD;;AAED;;;;;;;;;;;+BAQWlB,I,EAAoB;AAAA;;AAAA,UAAdvD,OAAc,uEAAJ,EAAI;;AAC7B,UAAIyE,eAAJ;AAAA,UAAYC,gBAAZ;;AAD6B,2BAEA,KAAKQ,YAAL,CAAkB3B,IAAlB,EAAwBvD,OAAxB,CAFA;;AAE1BuD,UAF0B,kBAE1BA,IAF0B;AAEpBkB,YAFoB,kBAEpBA,MAFoB;AAEZC,aAFY,kBAEZA,OAFY;;;AAI7B,aAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI;AACF,cAAMC,cAAc,IAAIC,cAAJ,CAAS,IAAI3D,KAAJ,CAAU,OAAKxB,SAAL,CAAevB,UAAzB,CAAT,EAA+C;AACjE2G,mBAAO,IAD0D;AAEjEC,kBAAM;AAAA,qBAAM,OAAKP,YAAL,CAAkB5B,IAAlB,EAAwBkB,MAAxB,EAAgCC,OAAhC,KAA4Ca,YAAYI,IAAZ,EAAlD;AAAA,aAF2D;AAGjEC,kBAAM;AAAA,qBAAMP,QAAQZ,MAAR,CAAN;AAAA;AAH2D,WAA/C,CAApB;AAKAc,sBAAYM,IAAZ;AACD,SAPD,CAOE,OAAOC,UAAP,EAAmB;AACnBR,iBAAO,EAACQ,sBAAD,EAAarB,cAAb,EAAP;AACD;AACF,OAXM,CAAP;AAYD;;AAED;;;;;;;;iCAKasB,K,EAAOC,Y,EAAc;AAChC;AACA,WAAK7E,QAAL,CAAc4E,MAAMrD,KAApB;;AAEA;AACA,WAAKtB,eAAL,CAAqB2E,MAAMjD,MAA3B;AACA,WAAKmD,aAAL;;AAEA,UAAKD,YAAL,EAAmB;AACjB,eAAO,mBAAI,KAAKjF,MAAL,CAAY,KAAKN,WAAjB,CAAJ,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;AAED;;;;;;;4CAIwByF,M,EAAQ;AAC9B,WAAK,IAAIvE,QAAQ,KAAKlB,WAAtB,EAAmCkB,SAAS,CAA5C,EAA+CA,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKtB,KAAL,CAAWmB,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIgB,SAAS,KAAKlC,OAAL,CAAae,KAAb,EAAoBG,IAApB,CAAb;;AAEA,cAAI6C,QAAQ,CAAZ;AACA,cAAIhD,UAAU,KAAKlB,WAAnB,EAAgC;AAC9BkE,oBAAQuB,OAAOpE,IAAP,IAAegB,MAAvB;AACD,WAFD,MAGK;AACH,gBAAIjC,SAAS,KAAKA,MAAL,CAAYc,QAAQ,CAApB,CAAb;AACA,iBAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAIrC,OAAOa,MAA3B,EAAmCwB,GAAnC,EAAwC;AACtCyB,uBAAS9D,OAAOqC,CAAP,IAAY,KAAKvC,OAAL,CAAagB,QAAQ,CAArB,EAAwBuB,CAAxB,EAA2BpB,IAA3B,CAArB;AACD;AACF;AACD,eAAKf,MAAL,CAAYY,KAAZ,EAAmBG,IAAnB,IAA2B6C,KAA3B;AACA,eAAK9D,MAAL,CAAYc,KAAZ,EAAmBG,IAAnB,IAA2B6C,QAAQ7B,MAAR,IAAkB,IAAIA,MAAtB,CAA3B;AACD;AACF;AACF;;AAED;;;;;;;yCAIqBoD,M,EAAQ;AAC3B,WAAK,IAAIvE,QAAQ,KAAKlB,WAAtB,EAAmCkB,SAAS,CAA5C,EAA+CA,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKtB,KAAL,CAAWmB,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIgB,SAAS,KAAKlC,OAAL,CAAae,KAAb,EAAoBG,IAApB,CAAb;;AAEA,cAAI6C,QAAQ,CAAZ;AACA,cAAIhD,UAAU,KAAKlB,WAAnB,EAAgC;AAC9BkE,oBAAQuB,OAAOpE,IAAP,IAAegB,MAAvB;AACD,WAFD,MAGK;AACH,gBAAIjC,SAAS,KAAKA,MAAL,CAAYc,QAAQ,CAApB,CAAb;AACA,iBAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAIrC,OAAOa,MAA3B,EAAmCwB,GAAnC,EAAwC;AACtCyB,uBAAS9D,OAAOqC,CAAP,IAAY,KAAKvC,OAAL,CAAagB,QAAQ,CAArB,EAAwBuB,CAAxB,EAA2BpB,IAA3B,CAArB;AACD;AACF;AACD,eAAKf,MAAL,CAAYY,KAAZ,EAAmBG,IAAnB,IAA2B6C,KAA3B;AACA,eAAK9D,MAAL,CAAYc,KAAZ,EAAmBG,IAAnB,IAA2BgB,SAAS,CAAT,GAAa6B,KAAb,GAAqB,CAAhD;AACD;AACF;AACF;;AAED;;;;;;;8CAI0BuB,M,EAAQ;AAChC,UAAI7C,QAAQ,KAAKzD,cAAjB;AACA,WAAK,IAAI+B,QAAQ,KAAKlB,WAAtB,EAAmCkB,SAAS,CAA5C,EAA+CA,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKtB,KAAL,CAAWmB,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIgB,SAAS,KAAKlC,OAAL,CAAae,KAAb,EAAoBG,IAApB,CAAb;;AAEA,cAAI6C,QAAQ,CAAZ;AACA,cAAIhD,UAAU,KAAKlB,WAAnB,EAAgC;AAC9BkE,oBAAQuB,OAAOpE,IAAP,IAAegB,MAAvB;AACD,WAFD,MAGK;AACH,gBAAIjC,SAAS,KAAKA,MAAL,CAAYc,QAAQ,CAApB,CAAb;AACA,iBAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAIrC,OAAOa,MAA3B,EAAmCwB,GAAnC,EAAwC;AACtCyB,uBAAS9D,OAAOqC,CAAP,IAAY,KAAKvC,OAAL,CAAagB,QAAQ,CAArB,EAAwBuB,CAAxB,EAA2BpB,IAA3B,CAArB;AACD;AACF;AACD,eAAKf,MAAL,CAAYY,KAAZ,EAAmBG,IAAnB,IAA2B6C,KAA3B;AACA,eAAK9D,MAAL,CAAYc,KAAZ,EAAmBG,IAAnB,IAA2BgB,SAAS,CAAT,GAAa6B,KAAb,GAAqBtB,QAAQsB,KAAxD;AACD;AACF;AACF;;AAED;;;;;;;yCAIqBuB,M,EAAQ;AAC3B,WAAK,IAAIvE,QAAQ,KAAKlB,WAAtB,EAAmCkB,SAAS,CAA5C,EAA+CA,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKtB,KAAL,CAAWmB,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIgB,SAAS,KAAKlC,OAAL,CAAae,KAAb,EAAoBG,IAApB,CAAb;;AAEA,cAAI6C,QAAQ,CAAZ;AACA,cAAIhD,UAAU,KAAKlB,WAAnB,EAAgC;AAC9BkE,oBAAQuB,OAAOpE,IAAP,IAAegB,MAAvB;AACD,WAFD,MAGK;AACH,gBAAIjC,SAAS,KAAKA,MAAL,CAAYc,QAAQ,CAApB,CAAb;AACA,iBAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAIrC,OAAOa,MAA3B,EAAmCwB,GAAnC,EAAwC;AACtCyB,uBAAS9D,OAAOqC,CAAP,IAAY,KAAKvC,OAAL,CAAagB,QAAQ,CAArB,EAAwBuB,CAAxB,EAA2BpB,IAA3B,CAArB;AACD;AACF;AACD,eAAKf,MAAL,CAAYY,KAAZ,EAAmBG,IAAnB,IAA2B6C,KAA3B;AACA,eAAK9D,MAAL,CAAYc,KAAZ,EAAmBG,IAAnB,IAA2B,CAAC,IAAIgB,SAASA,MAAd,IAAwB6B,KAAnD;AACD;AACF;AACF;;AAED;;;;;;;oCAIgB;AACd,WAAK,IAAIhD,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,YAAIwE,WAAW,KAAKvF,OAAL,CAAae,QAAQ,CAArB,CAAf;;AAEA,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKtB,KAAL,CAAWmB,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIsE,QAAQ,KAAKvF,MAAL,CAAYc,KAAZ,EAAmBG,IAAnB,CAAZ;;AAEA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIiD,SAASzE,MAA7B,EAAqCwB,GAArC,EAA0C;AACxC,gBAAImD,SAAS,KAAKvF,OAAL,CAAaa,KAAb,EAAoBG,IAApB,EAA0BoB,CAA1B,CAAb;;AAEAmD,qBAAU,KAAKhG,SAAL,CAAenB,YAAf,GAA8BkH,KAA9B,GAAsCD,SAASjD,CAAT,CAAvC,GACJ,KAAK7C,SAAL,CAAelB,QAAf,GAA0BkH,MAD/B;;AAGA,iBAAKvF,OAAL,CAAaa,KAAb,EAAoBG,IAApB,EAA0BoB,CAA1B,IAA+BmD,MAA/B;AACA,iBAAK1F,OAAL,CAAagB,KAAb,EAAoBG,IAApB,EAA0BoB,CAA1B,KAAgCmD,MAAhC;AACD;AACD,eAAK3F,MAAL,CAAYiB,KAAZ,EAAmBG,IAAnB,KAA4B,KAAKzB,SAAL,CAAenB,YAAf,GAA8BkH,KAA1D;AACD;AACF;AACF;;;iCAEY;AACX,WAAKE,cAAL,GAAsB,EAAtB;AACA,WAAKC,eAAL,GAAuB,EAAvB;AACA,WAAKC,UAAL,GAAkB,EAAlB;AACA,WAAKC,WAAL,GAAmB,EAAnB;AACA,WAAK3H,UAAL,GAAkB,CAAlB;;AAEA,WAAK,IAAI6C,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,YAAIC,OAAO,KAAKpB,KAAL,CAAWmB,KAAX,CAAX;AACA,YAAIA,QAAQ,CAAZ,EAAe;AACb,eAAK2E,cAAL,CAAoB3E,KAApB,IAA6B,qBAAMC,IAAN,CAA7B;AACA,eAAK2E,eAAL,CAAqB5E,KAArB,IAA8B,qBAAMC,IAAN,CAA9B;AACA,eAAK4E,UAAL,CAAgB7E,KAAhB,IAAyB,IAAIE,KAAJ,CAAUD,IAAV,CAAzB;AACA,eAAK6E,WAAL,CAAiB9E,KAAjB,IAA0B,IAAIE,KAAJ,CAAUD,IAAV,CAA1B;;AAEA,eAAK,IAAIE,OAAO,CAAhB,EAAmBA,OAAOF,IAA1B,EAAgCE,MAAhC,EAAwC;AACtC,gBAAIC,WAAW,KAAKvB,KAAL,CAAWmB,QAAQ,CAAnB,CAAf;AACA,iBAAK6E,UAAL,CAAgB7E,KAAhB,EAAuBG,IAAvB,IAA+B,qBAAMC,QAAN,CAA/B;AACA,iBAAK0E,WAAL,CAAiB9E,KAAjB,EAAwBG,IAAxB,IAAgC,qBAAMC,QAAN,CAAhC;AACD;AACF;AACF;;AAED,WAAKkE,aAAL,GAAqB,KAAKS,kBAA1B;AACD;;;yCAEoB;AACnB,UAAMrG,YAAY,KAAKA,SAAvB;AACA,WAAKvB,UAAL;;AAEA,WAAK,IAAI6C,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtD,YAAMwE,WAAW,KAAKvF,OAAL,CAAae,QAAQ,CAArB,CAAjB;;AAEA,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKtB,KAAL,CAAWmB,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAMsE,QAAQ,KAAKvF,MAAL,CAAYc,KAAZ,EAAmBG,IAAnB,CAAd;;AAEA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIiD,SAASzE,MAA7B,EAAqCwB,GAArC,EAA0C;AACxC,gBAAMyD,WAAWP,QAAQD,SAASjD,CAAT,CAAzB;AACA,gBAAM0D,YAAY,KAAKJ,UAAL,CAAgB7E,KAAhB,EAAuBG,IAAvB,EAA6BoB,CAA7B,IAAkC7C,UAAUZ,KAA5C,GAAoD,CAAC,IAAIY,UAAUZ,KAAf,IAAwBkH,QAA9F;AACA,gBAAME,aAAa,KAAKJ,WAAL,CAAiB9E,KAAjB,EAAwBG,IAAxB,EAA8BoB,CAA9B,IAAmC7C,UAAUX,KAA7C,GAAqD,CAAC,IAAIW,UAAUX,KAAf,IAAwBiH,QAAxB,GAAmCA,QAA3G;;AAEA,gBAAMG,qBAAqBF,aAAa,IAAIzD,KAAK4D,GAAL,CAAS1G,UAAUZ,KAAnB,EAA0B,KAAKX,UAA/B,CAAjB,CAA3B;AACA,gBAAMkI,qBAAqBH,cAAc,IAAI1D,KAAK4D,GAAL,CAAS1G,UAAUX,KAAnB,EAA0B,KAAKZ,UAA/B,CAAlB,CAA3B;;AAEA,iBAAK0H,UAAL,CAAgB7E,KAAhB,EAAuBG,IAAvB,EAA6BoB,CAA7B,IAAkC0D,SAAlC;AACA,iBAAKH,WAAL,CAAiB9E,KAAjB,EAAwBG,IAAxB,EAA8BoB,CAA9B,IAAmC2D,UAAnC;AACA,iBAAKlG,OAAL,CAAagB,KAAb,EAAoBG,IAApB,EAA0BoB,CAA1B,KAAgC,KAAK7C,SAAL,CAAenB,YAAf,GAA8B4H,kBAA9B,IAAoD3D,KAAK8D,IAAL,CAAUD,kBAAV,IAAgC3G,UAAUV,OAA9F,CAAhC;AACD;;AAED,cAAMuH,eAAe,KAAKrG,MAAL,CAAYc,KAAZ,EAAmBG,IAAnB,CAArB;AACA,cAAMqF,gBAAgB,KAAKb,cAAL,CAAoB3E,KAApB,EAA2BG,IAA3B,IAAmCzB,UAAUZ,KAA7C,GAAqD,CAAC,IAAIY,UAAUZ,KAAf,IAAwByH,YAAnG;AACA,cAAME,iBAAiB,KAAKb,eAAL,CAAqB5E,KAArB,EAA4BG,IAA5B,IAAoCzB,UAAUX,KAA9C,GAAsD,CAAC,IAAIW,UAAUX,KAAf,IAAwBwH,YAAxB,GAAuCA,YAApH;;AAEA,cAAMG,yBAAyB,KAAKf,cAAL,CAAoB3E,KAApB,EAA2BG,IAA3B,KAAoC,IAAIqB,KAAK4D,GAAL,CAAS1G,UAAUZ,KAAnB,EAA0B,KAAKX,UAA/B,CAAxC,CAA/B;AACA,cAAMwI,yBAAyB,KAAKf,eAAL,CAAqB5E,KAArB,EAA4BG,IAA5B,KAAqC,IAAIqB,KAAK4D,GAAL,CAAS1G,UAAUX,KAAnB,EAA0B,KAAKZ,UAA/B,CAAzC,CAA/B;;AAEA,eAAKwH,cAAL,CAAoB3E,KAApB,EAA2BG,IAA3B,IAAmCqF,aAAnC;AACA,eAAKZ,eAAL,CAAqB5E,KAArB,EAA4BG,IAA5B,IAAoCsF,cAApC;AACA,eAAK1G,MAAL,CAAYiB,KAAZ,EAAmBG,IAAnB,KAA4BzB,UAAUnB,YAAV,GAAyBmI,sBAAzB,IAAmDlE,KAAK8D,IAAL,CAAUK,sBAAV,IAAoCjH,UAAUV,OAAjG,CAA5B;AACD;AACF;AACF;;AAED;;;;;;;;+BAKW4D,I,EAAM;AACf,UAAI,CAAC1B,MAAM0F,OAAN,CAAchE,IAAd,CAAL,EAA0B;AAAE;AAC1BA,eAAO,CAACA,IAAD,CAAP;AACD;;AAED,UAAI,CAAC1B,MAAM0F,OAAN,CAAchE,KAAK,CAAL,EAAQb,KAAtB,CAAL,EAAmC;AACjC,YAAI,KAAKrB,WAAT,EAAsB;AACpB,eAAKC,iBAAL,GAAyBrB,OAAOiE,IAAP,CAAY,KAAK7C,WAAjB,EAA8BK,MAAvD;AACD,SAFD,MAEO;AACL,cAAML,cAAc,IAAImG,qBAAJ,CAAgBjE,IAAhB,EAAsB,OAAtB,CAApB;AACA,eAAKlC,WAAL,GAAmBA,YAAYoG,KAA/B;AACA,eAAKnG,iBAAL,GAAyBD,YAAYK,MAArC;AACD;AACF;;AAED,UAAI,CAACG,MAAM0F,OAAN,CAAchE,KAAK,CAAL,EAAQT,MAAtB,CAAL,EAAoC;AAClC,YAAI,KAAKvB,YAAT,EAAuB;AACrB,eAAKC,kBAAL,GAA0BvB,OAAOiE,IAAP,CAAY,KAAK3C,YAAjB,EAA+BG,MAAzD;AACD,SAFD,MAEO;AACL,cAAMkB,UAAS,IAAI4E,qBAAJ,CAAgBjE,IAAhB,EAAsB,QAAtB,CAAf;AACA,eAAKhC,YAAL,GAAoBqB,QAAO6E,KAA3B;AACA,eAAKjG,kBAAL,GAA0BoB,QAAOlB,MAAjC;AACD;AACF;;AAED,UAAI,OAAO,KAAKgG,YAAZ,KAA6B,WAAjC,EAA8C;AAC5C,aAAKA,YAAL,GAAoBC,gBAAgBpE,KAAK,CAAL,EAAQb,KAAxB,EAA+B,KAAKrB,WAApC,CAApB;AACA,aAAKuG,aAAL,GAAqBD,gBAAgBpE,KAAK,CAAL,EAAQT,MAAxB,EAAgC,KAAKvB,YAArC,CAArB;AACD;;AAED;AACA,UAAI,KAAKmG,YAAL,IAAqB,KAAKE,aAA9B,EAA6C;AAC3C,YAAMC,SAAS,EAAf;AACA,aAAK,IAAItD,IAAI,CAAb,EAAgBA,IAAIhB,KAAK7B,MAAzB,EAAiC6C,GAAjC,EAAsC;AACpCsD,iBAAOrE,IAAP,CAAY;AACVd,mBAAO,KAAKgF,YAAL,CAAkBnE,KAAKgB,CAAL,EAAQ7B,KAA1B,CADG;AAEVI,oBAAQ,KAAK8E,aAAL,CAAmBrE,KAAKgB,CAAL,EAAQzB,MAA3B;AAFE,WAAZ;AAID;AACD,eAAO+E,MAAP;AACD,OATD,MASO,IAAI,KAAKH,YAAT,EAAuB;AAC5B,YAAMG,UAAS,EAAf;AACA,aAAK,IAAItD,KAAI,CAAb,EAAgBA,KAAIhB,KAAK7B,MAAzB,EAAiC6C,IAAjC,EAAsC;AACpCsD,kBAAOrE,IAAP,CAAY;AACVd,mBAAO,KAAKgF,YAAL,CAAkBnE,KAAKgB,EAAL,EAAQ7B,KAA1B,CADG;AAEVI,oBAAQS,KAAKgB,EAAL,EAAQzB;AAFN,WAAZ;AAID;AACD,eAAO+E,OAAP;AACD,OATM,MASA,IAAI,KAAKD,aAAT,EAAwB;AAC7B,YAAMC,WAAS,EAAf;AACA,aAAK,IAAItD,MAAI,CAAb,EAAgBA,MAAIhB,KAAK7B,MAAzB,EAAiC6C,KAAjC,EAAsC;AACpCsD,mBAAOrE,IAAP,CAAY;AACVd,mBAAOa,KAAKgB,GAAL,EAAQ7B,KADL;AAEVI,oBAAQ,KAAK8E,aAAL,CAAmBrE,KAAKgB,GAAL,EAAQzB,MAA3B;AAFE,WAAZ;AAID;AACD,eAAO+E,QAAP;AACD;AACD,aAAOtE,IAAP;AACD;;;8BAESA,I,EAAM;AACd,WAAKlC,WAAL,GAAmBuB,iBAAOkF,OAAP,CAAevE,KAAKb,KAApB,EAA2B,KAAKrB,WAAhC,CAAnB;AACA,UAAI,KAAKA,WAAT,EAAsB;AACpB,aAAKC,iBAAL,GAAyBrB,OAAOiE,IAAP,CAAY,KAAK7C,WAAjB,EAA8BK,MAAvD;AACD;AACD,WAAKH,YAAL,GAAoBqB,iBAAOkF,OAAP,CAAevE,KAAKT,MAApB,EAA4B,KAAKvB,YAAjC,CAApB;AACA,UAAI,KAAKA,YAAT,EAAuB;AACrB,aAAKC,kBAAL,GAA0BvB,OAAOiE,IAAP,CAAY,KAAK3C,YAAjB,EAA+BG,MAAzD;AACD;AACF;;AAED;;;;;;;;;;;;;yBAUK6B,I,EAAM;AAAA;;AACTA,aAAO,KAAKyB,UAAL,CAAgBzB,IAAhB,CAAP;AACA;AACA,UAAMwE,WAAWxE,KAAK,CAAL,EAAQT,MAAR,CAAepB,MAAf,KAA0B,CAA3C;AACA;AACA,UAAMsG,aAAa,EAAnB;AACA;AACA;AACA,UAAIC,WAAW,CAAf;;AAEA,UAAIF,QAAJ,EAAc;AACZ,YAAIG,WAAW,CAAf;AACA,YAAIC,WAAW,CAAf;AACA,YAAIC,UAAU,CAAd;AACA,YAAIC,UAAU,CAAd;;AAJY,mCAMH9D,CANG;AAOV,cAAMzB,SAAS,OAAK3B,QAAL,CAAcoC,KAAKgB,CAAL,EAAQ7B,KAAtB,CAAf;AACA,cAAMwD,SAAS3C,KAAKgB,CAAL,EAAQzB,MAAvB;AACA,cAAMwF,SAASxF,OAAO,CAAP,IAAY,OAAKjD,YAAjB,GAAgC,CAAhC,GAAoC,CAAnD;AACA,cAAM0I,WAAWrC,OAAO,CAAP,CAAjB;;AAEA,cAAIoC,WAAWC,QAAf,EAAyB;AACvB,gBAAMC,WAAWjF,KAAKgB,CAAL,CAAjB;AACAyD,uBAAWxE,IAAX,CAAgB;AACdd,qBAAO8F,SAAS9F,KADF;AAEdI,sBAAQ0F,SAAS1F,MAFH;AAGdwF,4BAHc;AAIdC;AAJc,aAAhB;AAMD;;AAED,cAAID,WAAW,CAAX,IAAgBC,aAAa,CAAjC,EAAoC;AAClCF;AACD,WAFD,MAEO,IAAIC,WAAW,CAAX,IAAgBC,aAAa,CAAjC,EAAoC;AACzCH;AACD,WAFM,MAEA,IAAIE,WAAW,CAAX,IAAgBC,aAAa,CAAjC,EAAoC;AACzCJ;AACD,WAFM,MAEA,IAAIG,WAAW,CAAX,IAAgBC,aAAa,CAAjC,EAAoC;AACzCL;AACD;;AAEDD,sBAAY,mBAAInF,OAAO2F,GAAP,CAAW,UAAC1C,KAAD,EAAQxB,CAAR,EAAc;AACvC,mBAAO2B,OAAO3B,CAAP,IAAYwB,KAAnB;AACD,WAFe,CAAJ,CAAZ;AAhCU;;AAMZ,aAAK,IAAIxB,IAAI,CAAb,EAAgBA,IAAIhB,KAAK7B,MAAzB,EAAiC6C,GAAjC,EAAsC;AAAA,gBAA7BA,CAA6B;AA6BrC;;AAED,eAAO;AACLI,iBAAOsD,WAAW1E,KAAK7B,MADlB;AAELsG,sBAAYA,UAFP;AAGLU,iBAAOnF,KAAK7B,MAHP;AAIL2G,mBAASA,OAJJ;AAKLD,mBAASA,OALJ;AAMLD,oBAAUA,QANL;AAOLD,oBAAUA,QAPL;AAQLS,qBAAWP,UAAU,CAAV,GAAcA,WAAWA,UAAUF,QAArB,CAAd,GAA+C,CARrD;AASLU,kBAAQR,UAAU,CAAV,GAAcA,WAAWA,UAAUD,QAArB,CAAd,GAA+C,CATlD;AAULU,oBAAU,CAACR,UAAUD,OAAX,IAAsB7E,KAAK7B;AAVhC,SAAP;AAYD;;AA3DQ,mCA6DA6C,CA7DA;AA8DP,YAAMzB,SAAS,OAAK3B,QAAL,CAAcoC,KAAKgB,CAAL,EAAQ7B,KAAtB,CAAf;AACA,YAAMwD,SAAS3C,KAAKgB,CAAL,EAAQzB,MAAvB;AACA,YAAMwF,SAASxF,OAAOgG,OAAP,CAAe,mBAAIhG,MAAJ,CAAf,CAAf;AACA,YAAMyF,WAAWrC,OAAO4C,OAAP,CAAe,mBAAI5C,MAAJ,CAAf,CAAjB;;AAEA,YAAIoC,WAAWC,QAAf,EAAyB;AACvB,cAAMC,WAAWjF,KAAKgB,CAAL,CAAjB;AACAyD,qBAAWxE,IAAX,CAAgB;AACdd,mBAAO8F,SAAS9F,KADF;AAEdI,oBAAQ0F,SAAS1F,MAFH;AAGdwF,0BAHc;AAIdC;AAJc,WAAhB;AAMD;;AAEDN,oBAAY,mBAAInF,OAAO2F,GAAP,CAAW,UAAC1C,KAAD,EAAQxB,CAAR,EAAc;AACvC,iBAAO2B,OAAO3B,CAAP,IAAYwB,KAAnB;AACD,SAFe,CAAJ,CAAZ;AA7EO;;AA6DT,WAAK,IAAIxB,IAAI,CAAb,EAAgBA,IAAIhB,KAAK7B,MAAzB,EAAiC6C,GAAjC,EAAsC;AAAA,eAA7BA,CAA6B;AAmBrC;AACD,aAAO;AACLI,eAAOsD,WAAW1E,KAAK7B,MADlB;AAELsG,oBAAYA,UAFP;AAGLU,eAAOnF,KAAK7B;AAHP,OAAP;AAKD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAoCS;AACP,UAAMqH,SAAS,EAAf;AACA,WAAK,IAAIpH,QAAQ,CAAjB,EAAoBA,SAAS,KAAKlB,WAAlC,EAA+CkB,OAA/C,EAAwD;AACtDoH,eAAOpH,KAAP,IAAgB,EAAhB;;AAEA,YAAIqH,cAAJ;AACA;AACA,YAAIrH,UAAU,CAAV,IAAe,KAAKN,WAAxB,EAAqC;AACnC2H,kBAAQ/I,OAAOiE,IAAP,CAAY,KAAK7C,WAAjB,CAAR;AACD,SAFD,MAEO,IAAI,KAAKE,YAAL,IAAqBI,UAAU,KAAKlB,WAAxC,EAAqD;AAC1DuI,kBAAQ/I,OAAOiE,IAAP,CAAY,KAAK3C,YAAjB,CAAR;AACD,SAFM,MAEA;AACLyH,kBAAQ,qBAAM,CAAN,EAAS,KAAKxI,KAAL,CAAWmB,KAAX,CAAT,CAAR;AACD;;AAED,aAAK,IAAIsH,IAAI,CAAb,EAAgBA,IAAID,MAAMtH,MAA1B,EAAkCuH,GAAlC,EAAuC;AACrC,cAAMnH,OAAOkH,MAAMC,CAAN,CAAb;AACAF,iBAAOpH,KAAP,EAAcG,IAAd,IAAsB,EAAtB;;AAEA,cAAIH,QAAQ,CAAZ,EAAe;AACboH,mBAAOpH,KAAP,EAAcG,IAAd,EAAoBoH,IAApB,GAA2B,KAAKxI,MAAL,CAAYiB,KAAZ,EAAmBsH,CAAnB,CAA3B;AACAF,mBAAOpH,KAAP,EAAcG,IAAd,EAAoBnB,OAApB,GAA8B,EAA9B;AACA,iBAAK,IAAIuC,CAAT,IAAc6F,OAAOpH,QAAQ,CAAf,CAAd,EAAiC;AAC/B,kBAAIwH,QAAQjG,CAAZ;AACA,kBAAIvB,UAAU,CAAV,IAAe,KAAKN,WAAxB,EAAqC;AACnC8H,wBAAQ,KAAK9H,WAAL,CAAiB6B,CAAjB,CAAR;AACD;AACD6F,qBAAOpH,KAAP,EAAcG,IAAd,EAAoBnB,OAApB,CAA4BuC,CAA5B,IAAiC,KAAKvC,OAAL,CAAagB,KAAb,EAAoBsH,CAApB,EAAuBE,KAAvB,CAAjC;AACD;AACF;AACF;AACF;AACD,aAAO;AACL3I,eAAO,KAAKA,KAAL,CAAWuC,KAAX,CAAiB,CAAjB,CADF;AAELgG,sBAFK;AAGLxH,sBAAc,KAAKA,YAAL,KAAsB,IAH/B;AAILF,qBAAa,KAAKA,WAAL,KAAqB,IAJ7B;AAKLtB,oBAAY,KAAKA,UALZ;AAMLM,mBAAW,KAAK+I,gBAAL;AANN,OAAP;AAQD;;AAED;;;;;;;;6BAKSC,I,EAAM;AACbpJ,aAAOC,MAAP,CAAc,IAAd,EAAoB,KAAKC,WAAL,CAAiBC,QAArC,EAA+CiJ,IAA/C;AACA,WAAK7I,KAAL,GAAa6I,KAAK7I,KAAlB;AACA,WAAKoD,UAAL;;AAEA,WAAK,IAAIW,IAAI,CAAb,EAAgBA,KAAK,KAAK9D,WAA1B,EAAuC8D,GAAvC,EAA4C;AAC1C,YAAI5C,QAAQ0H,KAAKN,MAAL,CAAYxE,CAAZ,CAAZ;AACA,YAAIA,MAAM,CAAN,KAAY,CAAC5C,MAAM,CAAN,CAAD,IAAa0H,KAAKhI,WAA9B,CAAJ,EAAgD;AAC9C,eAAKA,WAAL,GAAmBuB,iBAAO0G,MAAP,CAAc3H,KAAd,CAAnB;AACA,eAAKL,iBAAL,GAAyBrB,OAAOiE,IAAP,CAAY,KAAK7C,WAAjB,EAA8BK,MAAvD;AACD,SAHD,MAIK,IAAI6C,MAAM,KAAK9D,WAAX,KAA2B,CAACkB,MAAM,CAAN,CAAD,IAAa0H,KAAK9H,YAA7C,CAAJ,EAAgE;AACnE,eAAKA,YAAL,GAAoBqB,iBAAO0G,MAAP,CAAc3H,KAAd,CAApB;AACD;AACD,YAAI4C,IAAI,CAAR,EAAW;AACT,cAAMyE,QAAQ/I,OAAOiE,IAAP,CAAYvC,KAAZ,CAAd;AACA,eAAKnB,KAAL,CAAW+D,CAAX,IAAgByE,MAAMtH,MAAtB;AACA,eAAK,IAAIuH,CAAT,IAAcD,KAAd,EAAqB;AACnB,gBAAIA,MAAM9H,cAAN,CAAqB+H,CAArB,CAAJ,EAA6B;AAC3B,kBAAMnH,OAAOkH,MAAMC,CAAN,CAAb;AACA,mBAAKvI,MAAL,CAAY6D,CAAZ,EAAe0E,CAAf,IAAoBtH,MAAMG,IAAN,EAAYoH,IAAhC;AACA,mBAAKvI,OAAL,CAAa4D,CAAb,EAAgB0E,CAAhB,IAAqB,uBAAQtH,MAAMG,IAAN,EAAYnB,OAApB,CAArB;AACD;AACF;AACF;AACF;AACD,UAAI0I,KAAKnI,cAAL,CAAoB,WAApB,CAAJ,EAAsC;AACpC,aAAKZ,qBAAL,CAA2B+I,KAAKhJ,SAAhC;AACD;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;iCAIa;AACX,UAAMN,aAAa,KAAKA,UAAxB;AACA,UAAMH,iBAAiB,KAAKA,cAA5B;AACA,UAAI2J,WAAW,KAAf;AACA,eAASC,UAAT,CAAoBT,MAApB,EAA4BU,WAA5B,EAAyCC,OAAzC,EAAkD;AAChD,YAAID,gBAAgB,CAApB,EAAuB;AACrB,iBAAQ,OAAOC,OAAP,KAAmB,QAAnB,gBACMA,OADN,sBAEKA,OAFL,MAAR;AAGD;;AAED,YAAM/H,QAAQoH,OAAOU,WAAP,CAAd;AACA,YAAM3H,OAAOH,MAAM+H,OAAN,CAAb;AACA,YAAI7B,SAAS,CAAC,GAAD,EAAO/F,KAAKoH,IAAZ,CAAb;AACA,aAAK,IAAIS,CAAT,IAAc7H,KAAKnB,OAAnB,EAA4B;AAC1B,cAAImB,KAAKnB,OAAL,CAAagJ,CAAb,IAAkB,CAAtB,EAAyB;AACvB9B,mBAAOrE,IAAP,CAAe1B,KAAKnB,OAAL,CAAagJ,CAAb,CAAf,SAAkCH,WAAWT,MAAX,EAAmBU,cAAc,CAAjC,EAAoCE,CAApC,CAAlC;AACD,WAFD,MAEO;AACL9B,mBAAOrE,IAAP,OAAgB1B,KAAKnB,OAAL,CAAagJ,CAAb,CAAhB,SAAmCH,WAAWT,MAAX,EAAmBU,cAAc,CAAjC,EAAoCE,CAApC,CAAnC;AACD;AACF;AACD9B,eAAOrE,IAAP,CAAY,GAAZ;;AAEA,gBAAQzD,UAAR;AACE,eAAK,SAAL;AACE,wCAA0B8H,OAAO+B,IAAP,CAAY,EAAZ,CAA1B;AACF,eAAK,MAAL;AAAa;AACXL,yBAAW,IAAX;AACA,8BAAc1B,OAAO+B,IAAP,CAAY,EAAZ,CAAd;AACD;AACD,eAAK,YAAL;AAAmB;AACjBL,yBAAW,IAAX;AACA,8BAAc1B,OAAO+B,IAAP,CAAY,EAAZ,CAAd,cAAsChK,cAAtC;AACD;AACD,eAAK,MAAL;AACE,kCAAoBiI,OAAO+B,IAAP,CAAY,EAAZ,CAApB;AACF;AACE,kBAAM,IAAInI,KAAJ,CAAU,6BAA6B1B,UAAvC,CAAN;AAdJ;AAgBD;;AAED,UAAMgJ,SAAS,KAAKc,MAAL,GAAcd,MAA7B;AACA,UAAMe,eAAe,EAArB;AACA,UAAIjC,eAAJ;AACA,WAAK,IAAItD,CAAT,IAAcwE,OAAOA,OAAOrH,MAAP,GAAgB,CAAvB,CAAd,EAAyC;AACvCoI,qBAAatG,IAAb,CAAkBgG,WAAWT,MAAX,EAAmBA,OAAOrH,MAAP,GAAgB,CAAnC,EAAsC6C,CAAtC,CAAlB;AACD;AACD,UAAI,KAAKhD,YAAT,EAAuB;AACrBsG,uBACE5H,OAAOiE,IAAP,CAAY,KAAK3C,YAAjB,EACGkH,GADH,CACO,UAACsB,GAAD,EAAMxF,CAAN;AAAA,wBAAgBwF,GAAhB,WAAwBD,aAAavF,CAAb,CAAxB;AAAA,SADP,CADF;AAID,OALD,MAKO;AACLsD,uBAAaiC,aAAaF,IAAb,CAAkB,GAAlB,CAAb;AACD;;AAED,aAAO,IAAII,QAAJ,CAAa,OAAb,GAA0BT,WAAW,QAAX,GAAsB,EAAhD,gBAA6D1B,MAA7D,OAAP;AACD;;;wBAl5Be;AAAA;;AACd,UAAG,CAAC,KAAK1G,QAAT,EAAkB;AAChBmD,gBAAQK,KAAR,CAAc,oEAAd;AACA,eAAO,KAAP;AACD;;AAED,UAAMsF,WAAW,CACf,OADe,EAEf,aAFe,EAGf,QAHe,EAIf,SAJe,EAKf,SALe,EAMf,QANe,EAOf,SAPe,EAQf,QARe,EASfC,MATe,CASR;AAAA,eAAK,OAAKC,CAAL,MAAY,IAAjB;AAAA,OATQ,CAAjB;;AAWA,UAAGF,SAASvI,MAAT,GAAkB,CAArB,EAAuB;AACrB4C,gBAAQK,KAAR,iGAA4GsF,SAASL,IAAT,CAAc,IAAd,CAA5G;AACA,eAAO,KAAP;AACD;AACD,aAAO,IAAP;AACD;;;;;;kBAxJkB/K,a;;;AAwhCrB,SAAS8I,eAAT,CAAyB5B,KAAzB,EAAgC0B,KAAhC,EAAuC;AACrC,MAAI1B,MAAMqE,MAAN,YAAwBC,WAA5B,EAAyC;AACvC,WAAO,IAAP;AACD,GAFD,MAEO,IAAIxI,MAAM0F,OAAN,CAAcxB,KAAd,CAAJ,EAA0B;AAC/B,WAAOuE,yBAAP;AACD,GAFM,MAEA;AACL,QAAM5I,SAASzB,OAAOiE,IAAP,CAAYuD,KAAZ,EAAmB/F,MAAlC;AACA,WAAO,UAAC6I,CAAD,EAAO;AACZ,UAAMC,QAAQ,IAAIC,YAAJ,CAAiB/I,MAAjB,CAAd;AACA,WAAK,IAAImC,CAAT,IAAc4D,KAAd,EAAqB;AACnB+C,cAAM/C,MAAM5D,CAAN,CAAN,IAAkB0G,EAAE1G,CAAF,KAAQ,CAA1B;AACD;AACD,aAAO2G,KAAP;AACD,KAND;AAOD;AACF","file":"neural-network.js","sourcesContent":["import Thaw from 'thaw.js';\r\nimport lookup from './lookup';\r\nimport max from './utilities/max';\r\nimport mse from './utilities/mse';\r\nimport randos from './utilities/randos';\r\nimport range from './utilities/range';\r\nimport toArray from './utilities/to-array';\r\nimport zeros from './utilities/zeros';\r\nimport LookupTable from './utilities/lookup-table';\r\nimport { arrayToFloat32Array } from './utilities/cast';\r\n\r\n/**\r\n * @param {object} options\r\n * @constructor\r\n */\r\nexport default class NeuralNetwork {\r\n  static get trainDefaults() {\r\n    return {\r\n      iterations: 20000,    // the maximum times to iterate the training data\r\n      errorThresh: 0.005,   // the acceptable error percentage from training data\r\n      log: false,           // true to use console.log, when a function is supplied it is used\r\n      logPeriod: 10,        // iterations between logging out\r\n      learningRate: 0.3,    // multiply's against the input and the delta then adds to momentum\r\n      momentum: 0.1,        // multiply's against the specified \"change\" then adds to learning rate for change\r\n      callback: null,       // a periodic call back that can be triggered while training\r\n      callbackPeriod: 10,   // the number of iterations through the training data between callback calls\r\n      timeout: Infinity,    // the max number of milliseconds to train for\r\n      praxis: null,\r\n      beta1: 0.9,\r\n      beta2: 0.999,\r\n      epsilon: 1e-8,\r\n    };\r\n  }\r\n\r\n  static get defaults() {\r\n    return {\r\n      leakyReluAlpha: 0.01,\r\n      binaryThresh: 0.5,\r\n      hiddenLayers: null,     // array of ints for the sizes of the hidden layers in the network\r\n      activation: 'sigmoid'  // Supported activation types ['sigmoid', 'relu', 'leaky-relu', 'tanh']\r\n    };\r\n  }\r\n\r\n  constructor(options = {}) {\r\n    Object.assign(this, this.constructor.defaults, options);\r\n    this.trainOpts = {};\r\n    this.updateTrainingOptions(Object.assign({}, this.constructor.trainDefaults, options));\r\n\r\n    this.sizes = null;\r\n    this.outputLayer = null;\r\n    this.biases = null; // weights for bias nodes\r\n    this.weights = null;\r\n    this.outputs = null;\r\n\r\n    // state for training\r\n    this.deltas = null;\r\n    this.changes = null; // for momentum\r\n    this.errors = null;\r\n    this.errorCheckInterval = 1;\r\n    if (!this.constructor.prototype.hasOwnProperty('runInput')) {\r\n      this.runInput = null;\r\n    }\r\n    if (!this.constructor.prototype.hasOwnProperty('calculateDeltas')) {\r\n      this.calculateDeltas = null;\r\n    }\r\n    this.inputLookup = null;\r\n    this.inputLookupLength = null;\r\n    this.outputLookup = null;\r\n    this.outputLookupLength = null;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Expects this.sizes to have been set\r\n   */\r\n  initialize() {\r\n    if (!this.sizes) throw new Error ('Sizes must be set before initializing');\r\n\r\n    this.outputLayer = this.sizes.length - 1;\r\n    this.biases = []; // weights for bias nodes\r\n    this.weights = [];\r\n    this.outputs = [];\r\n\r\n    // state for training\r\n    this.deltas = [];\r\n    this.changes = []; // for momentum\r\n    this.errors = [];\r\n\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      let size = this.sizes[layer];\r\n      this.deltas[layer] = zeros(size);\r\n      this.errors[layer] = zeros(size);\r\n      this.outputs[layer] = zeros(size);\r\n\r\n      if (layer > 0) {\r\n        this.biases[layer] = randos(size);\r\n        this.weights[layer] = new Array(size);\r\n        this.changes[layer] = new Array(size);\r\n\r\n        for (let node = 0; node < size; node++) {\r\n          let prevSize = this.sizes[layer - 1];\r\n          this.weights[layer][node] = randos(prevSize);\r\n          this.changes[layer][node] = zeros(prevSize);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setActivation();\r\n    if (this.trainOpts.praxis === 'adam') {\r\n      this._setupAdam();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param activation supported inputs: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\r\n   */\r\n  setActivation(activation) {\r\n    this.activation = activation ? activation : this.activation;\r\n    switch (this.activation) {\r\n      case 'sigmoid':\r\n        this.runInput = this.runInput || this._runInputSigmoid;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasSigmoid;\r\n        break;\r\n      case 'relu':\r\n        this.runInput = this.runInput || this._runInputRelu;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasRelu;\r\n        break;\r\n      case 'leaky-relu':\r\n        this.runInput = this.runInput || this._runInputLeakyRelu;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasLeakyRelu;\r\n        break;\r\n      case 'tanh':\r\n        this.runInput = this.runInput || this._runInputTanh;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasTanh;\r\n        break;\r\n      default:\r\n        throw new Error('unknown activation ' + this.activation + ', The activation should be one of [\\'sigmoid\\', \\'relu\\', \\'leaky-relu\\', \\'tanh\\']');\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns boolean\r\n   */\r\n  get isRunnable(){\r\n    if(!this.runInput){\r\n      console.error('Activation function has not been initialized, did you run train()?');\r\n      return false;\r\n    }\r\n\r\n    const checkFns = [\r\n      'sizes',\r\n      'outputLayer',\r\n      'biases',\r\n      'weights',\r\n      'outputs',\r\n      'deltas',\r\n      'changes',\r\n      'errors',\r\n    ].filter(c => this[c] === null);\r\n\r\n    if(checkFns.length > 0){\r\n      console.error(`Some settings have not been initialized correctly, did you run train()? Found issues with: ${checkFns.join(', ')}`);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   * @returns {*}\r\n   */\r\n  run(input) {\r\n    if (!this.isRunnable) return null;\r\n    if (this.inputLookup) {\r\n      input = lookup.toArray(this.inputLookup, input, this.inputLookupLength);\r\n    }\r\n\r\n    let output = this.runInput(input).slice(0);\r\n\r\n    if (this.outputLookup) {\r\n      output = lookup.toObject(this.outputLookup, output);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * trains via sigmoid\r\n   * @param input\r\n   * @returns {*}\r\n   */\r\n  _runInputSigmoid(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //sigmoid\r\n        this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  _runInputRelu(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //relu\r\n        this.outputs[layer][node] = (sum < 0 ? 0 : sum);\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  _runInputLeakyRelu(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n    let alpha = this.leakyReluAlpha;\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //leaky relu\r\n        this.outputs[layer][node] = (sum < 0 ? 0 : alpha * sum);\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  _runInputTanh(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //tanh\r\n        this.outputs[layer][node] = Math.tanh(sum);\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * Verifies network sizes are initialized\r\n   * If they are not it will initialize them based off the data set.\r\n   */\r\n  verifyIsInitialized(data) {\r\n    if (this.sizes) return;\r\n\r\n    this.sizes = [];\r\n    this.sizes.push(data[0].input.length);\r\n    if (!this.hiddenLayers) {\r\n      this.sizes.push(Math.max(3, Math.floor(data[0].input.length / 2)));\r\n    } else {\r\n      this.hiddenLayers.forEach(size => {\r\n        this.sizes.push(size);\r\n      });\r\n    }\r\n    this.sizes.push(data[0].output.length);\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param options\r\n   *    Supports all `trainDefaults` properties\r\n   *    also supports:\r\n   *       learningRate: (number),\r\n   *       momentum: (number),\r\n   *       activation: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\r\n   */\r\n  updateTrainingOptions(options) {\r\n    const trainDefaults = this.constructor.trainDefaults;\r\n    for (const p in trainDefaults) {\r\n      if (!trainDefaults.hasOwnProperty(p)) continue;\r\n      this.trainOpts[p] = options.hasOwnProperty(p)\r\n        ? options[p]\r\n        : trainDefaults[p];\r\n    }\r\n    this.validateTrainingOptions(this.trainOpts);\r\n    this.setLogMethod(options.log || this.trainOpts.log);\r\n    this.activation = options.activation || this.activation;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param options\r\n   */\r\n  validateTrainingOptions(options) {\r\n    const validations = {\r\n      iterations: (val) => { return typeof val === 'number' && val > 0; },\r\n      errorThresh: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\r\n      log: (val) => { return typeof val === 'function' || typeof val === 'boolean'; },\r\n      logPeriod: (val) => { return typeof val === 'number' && val > 0; },\r\n      learningRate: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\r\n      momentum: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\r\n      callback: (val) => { return typeof val === 'function' || val === null },\r\n      callbackPeriod: (val) => { return typeof val === 'number' && val > 0; },\r\n      timeout: (val) => { return typeof val === 'number' && val > 0 }\r\n    };\r\n    for (const p in validations) {\r\n      if (!validations.hasOwnProperty(p)) continue;\r\n      if (!options.hasOwnProperty(p)) continue;\r\n      if (!validations[p](options[p])) {\r\n        throw new Error(`[${p}, ${options[p]}] is out of normal training range, your network will probably not train.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   *  Gets JSON of trainOpts object\r\n   *    NOTE: Activation is stored directly on JSON object and not in the training options\r\n   */\r\n  getTrainOptsJSON() {\r\n    return Object.keys(this.constructor.trainDefaults)\r\n      .reduce((opts, opt) => {\r\n        if (opt === 'timeout' && this.trainOpts[opt] === Infinity) return opts;\r\n        if (opt === 'callback') return opts;\r\n        if (this.trainOpts[opt]) opts[opt] = this.trainOpts[opt];\r\n        if (opt === 'log') opts.log = typeof opts.log === 'function';\r\n        return opts;\r\n      }, {});\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param log\r\n   * if a method is passed in method is used\r\n   * if false passed in nothing is logged\r\n   * @returns error\r\n   */\r\n  setLogMethod(log) {\r\n    if (typeof log === 'function'){\r\n      this.trainOpts.log = log;\r\n    } else if (log) {\r\n      this.trainOpts.log = console.log;\r\n    } else {\r\n      this.trainOpts.log = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @returns {Number} error\r\n   */\r\n  calculateTrainingError(data) {\r\n    let sum = 0;\r\n    for (let i = 0; i < data.length; ++i) {\r\n      sum += this.trainPattern(data[i], true);\r\n    }\r\n    return sum / data.length;\r\n  }\r\n\r\n  /**\r\n   * @param data\r\n   */\r\n  trainPatterns(data) {\r\n    for (let i = 0; i < data.length; ++i) {\r\n      this.trainPattern(data[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} status { iterations: number, error: number }\r\n   * @param endTime\r\n   */\r\n  trainingTick(data, status, endTime) {\r\n    if (status.iterations >= this.trainOpts.iterations || status.error <= this.trainOpts.errorThresh || Date.now() >= endTime) {\r\n      return false;\r\n    }\r\n\r\n    status.iterations++;\r\n\r\n    if (this.trainOpts.log && (status.iterations % this.trainOpts.logPeriod === 0)) {\r\n      status.error = this.calculateTrainingError(data);\r\n      this.trainOpts.log(`iterations: ${status.iterations}, training error: ${status.error}`);\r\n    } else {\r\n      if (status.iterations % this.errorCheckInterval === 0) {\r\n        status.error = this.calculateTrainingError(data);\r\n      } else {\r\n        this.trainPatterns(data);\r\n      }\r\n    }\r\n\r\n    if (this.trainOpts.callback && (status.iterations % this.trainOpts.callbackPeriod === 0)) {\r\n      this.trainOpts.callback({\r\n        iterations: status.iterations,\r\n        error: status.error\r\n      });\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param options\r\n   * @protected\r\n   * @return {object} { data, status, endTime }\r\n   */\r\n  prepTraining(data, options) {\r\n    this.updateTrainingOptions(options);\r\n    data = this.formatData(data);\r\n    const endTime = Date.now() + this.trainOpts.timeout;\r\n\r\n    const status = {\r\n      error: 1,\r\n      iterations: 0\r\n    };\r\n\r\n    this.verifyIsInitialized(data);\r\n\r\n    return {\r\n      data,\r\n      status,\r\n      endTime\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param options\r\n   * @returns {object} {error: number, iterations: number}\r\n   */\r\n  train(data, options = {}) {\r\n    let status, endTime;\r\n    ({ data, status, endTime } = this.prepTraining(data, options));\r\n\r\n    while (this.trainingTick(data, status, endTime));\r\n    return status;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param options\r\n   * @returns {Promise}\r\n   * @resolves {{error: number, iterations: number}}\r\n   * @rejects {{trainError: string, status: {error: number, iterations: number}}\r\n   */\r\n  trainAsync(data, options = {}) {\r\n    let status, endTime;\r\n    ({ data, status, endTime } = this.prepTraining(data, options));\r\n\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const thawedTrain = new Thaw(new Array(this.trainOpts.iterations), {\r\n          delay: true,\r\n          each: () => this.trainingTick(data, status, endTime) || thawedTrain.stop(),\r\n          done: () => resolve(status)\r\n        });\r\n        thawedTrain.tick();\r\n      } catch (trainError) {\r\n        reject({trainError, status});\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} value\r\n   * @param {boolean} [logErrorRate]\r\n   */\r\n  trainPattern(value, logErrorRate) {\r\n    // forward propagate\r\n    this.runInput(value.input);\r\n\r\n    // back propagate\r\n    this.calculateDeltas(value.output);\r\n    this.adjustWeights();\r\n\r\n    if  (logErrorRate) {\r\n      return mse(this.errors[this.outputLayer]);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasSigmoid(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = error * output * (1 - output);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasRelu(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = output > 0 ? error : 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasLeakyRelu(target) {\r\n    let alpha = this.leakyReluAlpha;\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = output > 0 ? error : alpha * error;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasTanh(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = (1 - output * output) * error;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Changes weights of networks\r\n   */\r\n  adjustWeights() {\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      let incoming = this.outputs[layer - 1];\r\n\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let delta = this.deltas[layer][node];\r\n\r\n        for (let k = 0; k < incoming.length; k++) {\r\n          let change = this.changes[layer][node][k];\r\n\r\n          change = (this.trainOpts.learningRate * delta * incoming[k])\r\n            + (this.trainOpts.momentum * change);\r\n\r\n          this.changes[layer][node][k] = change;\r\n          this.weights[layer][node][k] += change;\r\n        }\r\n        this.biases[layer][node] += this.trainOpts.learningRate * delta;\r\n      }\r\n    }\r\n  }\r\n\r\n  _setupAdam() {\r\n    this.biasChangesLow = [];\r\n    this.biasChangesHigh = [];\r\n    this.changesLow = [];\r\n    this.changesHigh = [];\r\n    this.iterations = 0;\r\n\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      let size = this.sizes[layer];\r\n      if (layer > 0) {\r\n        this.biasChangesLow[layer] = zeros(size);\r\n        this.biasChangesHigh[layer] = zeros(size);\r\n        this.changesLow[layer] = new Array(size);\r\n        this.changesHigh[layer] = new Array(size);\r\n\r\n        for (let node = 0; node < size; node++) {\r\n          let prevSize = this.sizes[layer - 1];\r\n          this.changesLow[layer][node] = zeros(prevSize);\r\n          this.changesHigh[layer][node] = zeros(prevSize);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.adjustWeights = this._adjustWeightsAdam;\r\n  }\r\n\r\n  _adjustWeightsAdam() {\r\n    const trainOpts = this.trainOpts;\r\n    this.iterations++;\r\n\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      const incoming = this.outputs[layer - 1];\r\n\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        const delta = this.deltas[layer][node];\r\n\r\n        for (let k = 0; k < incoming.length; k++) {\r\n          const gradient = delta * incoming[k];\r\n          const changeLow = this.changesLow[layer][node][k] * trainOpts.beta1 + (1 - trainOpts.beta1) * gradient;\r\n          const changeHigh = this.changesHigh[layer][node][k] * trainOpts.beta2 + (1 - trainOpts.beta2) * gradient * gradient;\r\n\r\n          const momentumCorrection = changeLow / (1 - Math.pow(trainOpts.beta1, this.iterations));\r\n          const gradientCorrection = changeHigh / (1 - Math.pow(trainOpts.beta2, this.iterations));\r\n\r\n          this.changesLow[layer][node][k] = changeLow;\r\n          this.changesHigh[layer][node][k] = changeHigh;\r\n          this.weights[layer][node][k] += this.trainOpts.learningRate * momentumCorrection / (Math.sqrt(gradientCorrection) + trainOpts.epsilon);\r\n        }\r\n\r\n        const biasGradient = this.deltas[layer][node];\r\n        const biasChangeLow = this.biasChangesLow[layer][node] * trainOpts.beta1 + (1 - trainOpts.beta1) * biasGradient;\r\n        const biasChangeHigh = this.biasChangesHigh[layer][node] * trainOpts.beta2 + (1 - trainOpts.beta2) * biasGradient * biasGradient;\r\n\r\n        const biasMomentumCorrection = this.biasChangesLow[layer][node] / (1 - Math.pow(trainOpts.beta1, this.iterations));\r\n        const biasGradientCorrection = this.biasChangesHigh[layer][node] / (1 - Math.pow(trainOpts.beta2, this.iterations));\r\n\r\n        this.biasChangesLow[layer][node] = biasChangeLow;\r\n        this.biasChangesHigh[layer][node] = biasChangeHigh;\r\n        this.biases[layer][node] += trainOpts.learningRate * biasMomentumCorrection / (Math.sqrt(biasGradientCorrection) + trainOpts.epsilon);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @returns {*}\r\n   */\r\n  formatData(data) {\r\n    if (!Array.isArray(data)) { // turn stream datum into array\r\n      data = [data];\r\n    }\r\n\r\n    if (!Array.isArray(data[0].input)) {\r\n      if (this.inputLookup) {\r\n        this.inputLookupLength = Object.keys(this.inputLookup).length;\r\n      } else {\r\n        const inputLookup = new LookupTable(data, 'input');\r\n        this.inputLookup = inputLookup.table;\r\n        this.inputLookupLength = inputLookup.length;\r\n      }\r\n    }\r\n\r\n    if (!Array.isArray(data[0].output)) {\r\n      if (this.outputLookup) {\r\n        this.outputLookupLength = Object.keys(this.outputLookup).length;\r\n      } else {\r\n        const lookup = new LookupTable(data, 'output');\r\n        this.outputLookup = lookup.table;\r\n        this.outputLookupLength = lookup.length;\r\n      }\r\n    }\r\n\r\n    if (typeof this._formatInput === 'undefined') {\r\n      this._formatInput = getTypedArrayFn(data[0].input, this.inputLookup);\r\n      this._formatOutput = getTypedArrayFn(data[0].output, this.outputLookup);\r\n    }\r\n\r\n    // turn sparse hash input into arrays with 0s as filler\r\n    if (this._formatInput && this._formatOutput) {\r\n      const result = [];\r\n      for (let i = 0; i < data.length; i++) {\r\n        result.push({\r\n          input: this._formatInput(data[i].input),\r\n          output: this._formatOutput(data[i].output),\r\n        });\r\n      }\r\n      return result;\r\n    } else if (this._formatInput) {\r\n      const result = [];\r\n      for (let i = 0; i < data.length; i++) {\r\n        result.push({\r\n          input: this._formatInput(data[i].input),\r\n          output: data[i].output\r\n        });\r\n      }\r\n      return result;\r\n    } else if (this._formatOutput) {\r\n      const result = [];\r\n      for (let i = 0; i < data.length; i++) {\r\n        result.push({\r\n          input: data[i].input,\r\n          output: this._formatOutput(data[i].output)\r\n        });\r\n      }\r\n      return result;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  addFormat(data) {\r\n    this.inputLookup = lookup.addKeys(data.input, this.inputLookup);\r\n    if (this.inputLookup) {\r\n      this.inputLookupLength = Object.keys(this.inputLookup).length;\r\n    }\r\n    this.outputLookup = lookup.addKeys(data.output, this.outputLookup);\r\n    if (this.outputLookup) {\r\n      this.outputLookupLength = Object.keys(this.outputLookup).length;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @returns {\r\n   *  {\r\n   *    error: number,\r\n   *    misclasses: Array,\r\n   *  }\r\n   * }\r\n   */\r\n  test(data) {\r\n    data = this.formatData(data);\r\n    // for binary classification problems with one output node\r\n    const isBinary = data[0].output.length === 1;\r\n    // for classification problems\r\n    const misclasses = [];\r\n    // run each pattern through the trained network and collect\r\n    // error and misclassification statistics\r\n    let errorSum = 0;\r\n\r\n    if (isBinary) {\r\n      let falsePos = 0;\r\n      let falseNeg = 0;\r\n      let truePos = 0;\r\n      let trueNeg = 0;\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        const output = this.runInput(data[i].input);\r\n        const target = data[i].output;\r\n        const actual = output[0] > this.binaryThresh ? 1 : 0;\r\n        const expected = target[0];\r\n\r\n        if (actual !== expected) {\r\n          const misclass = data[i];\r\n          misclasses.push({\r\n            input: misclass.input,\r\n            output: misclass.output,\r\n            actual,\r\n            expected\r\n          });\r\n        }\r\n\r\n        if (actual === 0 && expected === 0) {\r\n          trueNeg++;\r\n        } else if (actual === 1 && expected === 1) {\r\n          truePos++;\r\n        } else if (actual === 0 && expected === 1) {\r\n          falseNeg++;\r\n        } else if (actual === 1 && expected === 0) {\r\n          falsePos++;\r\n        }\r\n\r\n        errorSum += mse(output.map((value, i) => {\r\n          return target[i] - value;\r\n        }));\r\n      }\r\n\r\n      return {\r\n        error: errorSum / data.length,\r\n        misclasses: misclasses,\r\n        total: data.length,\r\n        trueNeg: trueNeg,\r\n        truePos: truePos,\r\n        falseNeg: falseNeg,\r\n        falsePos: falsePos,\r\n        precision: truePos > 0 ? truePos / (truePos + falsePos) : 0,\r\n        recall: truePos > 0 ? truePos / (truePos + falseNeg) : 0,\r\n        accuracy: (trueNeg + truePos) / data.length\r\n      };\r\n    }\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const output = this.runInput(data[i].input);\r\n      const target = data[i].output;\r\n      const actual = output.indexOf(max(output));\r\n      const expected = target.indexOf(max(target));\r\n\r\n      if (actual !== expected) {\r\n        const misclass = data[i];\r\n        misclasses.push({\r\n          input: misclass.input,\r\n          output: misclass.output,\r\n          actual,\r\n          expected\r\n        });\r\n      }\r\n\r\n      errorSum += mse(output.map((value, i) => {\r\n        return target[i] - value;\r\n      }));\r\n    }\r\n    return {\r\n      error: errorSum / data.length,\r\n      misclasses: misclasses,\r\n      total: data.length\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns\r\n   *  {\r\n   *    layers: [\r\n   *      {\r\n   *        x: {},\r\n   *        y: {}\r\n   *      },\r\n   *      {\r\n   *        '0': {\r\n   *          bias: -0.98771313,\r\n   *          weights: {\r\n   *            x: 0.8374838,\r\n   *            y: 1.245858\r\n   *          },\r\n   *        '1': {\r\n   *          bias: 3.48192004,\r\n   *          weights: {\r\n   *            x: 1.7825821,\r\n   *            y: -2.67899\r\n   *          }\r\n   *        }\r\n   *      },\r\n   *      {\r\n   *        f: {\r\n   *          bias: 0.27205739,\r\n   *          weights: {\r\n   *            '0': 1.3161821,\r\n   *            '1': 2.00436\r\n   *          }\r\n   *        }\r\n   *      }\r\n   *    ]\r\n   *  }\r\n   */\r\n  toJSON() {\r\n    const layers = [];\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      layers[layer] = {};\r\n\r\n      let nodes;\r\n      // turn any internal arrays back into hashes for readable json\r\n      if (layer === 0 && this.inputLookup) {\r\n        nodes = Object.keys(this.inputLookup);\r\n      } else if (this.outputLookup && layer === this.outputLayer) {\r\n        nodes = Object.keys(this.outputLookup);\r\n      } else {\r\n        nodes = range(0, this.sizes[layer]);\r\n      }\r\n\r\n      for (let j = 0; j < nodes.length; j++) {\r\n        const node = nodes[j];\r\n        layers[layer][node] = {};\r\n\r\n        if (layer > 0) {\r\n          layers[layer][node].bias = this.biases[layer][j];\r\n          layers[layer][node].weights = {};\r\n          for (let k in layers[layer - 1]) {\r\n            let index = k;\r\n            if (layer === 1 && this.inputLookup) {\r\n              index = this.inputLookup[k];\r\n            }\r\n            layers[layer][node].weights[k] = this.weights[layer][j][index];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      sizes: this.sizes.slice(0),\r\n      layers,\r\n      outputLookup: this.outputLookup !== null,\r\n      inputLookup: this.inputLookup !== null,\r\n      activation: this.activation,\r\n      trainOpts: this.getTrainOptsJSON()\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param json\r\n   * @returns {NeuralNetwork}\r\n   */\r\n  fromJSON(json) {\r\n    Object.assign(this, this.constructor.defaults, json);\r\n    this.sizes = json.sizes;\r\n    this.initialize();\r\n\r\n    for (let i = 0; i <= this.outputLayer; i++) {\r\n      let layer = json.layers[i];\r\n      if (i === 0 && (!layer[0] || json.inputLookup)) {\r\n        this.inputLookup = lookup.toHash(layer);\r\n        this.inputLookupLength = Object.keys(this.inputLookup).length;\r\n      }\r\n      else if (i === this.outputLayer && (!layer[0] || json.outputLookup)) {\r\n        this.outputLookup = lookup.toHash(layer);\r\n      }\r\n      if (i > 0) {\r\n        const nodes = Object.keys(layer);\r\n        this.sizes[i] = nodes.length;\r\n        for (let j in nodes) {\r\n          if (nodes.hasOwnProperty(j)) {\r\n            const node = nodes[j];\r\n            this.biases[i][j] = layer[node].bias;\r\n            this.weights[i][j] = toArray(layer[node].weights);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (json.hasOwnProperty('trainOpts')) {\r\n      this.updateTrainingOptions(json.trainOpts);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Function}\r\n   */\r\n  toFunction() {\r\n    const activation = this.activation;\r\n    const leakyReluAlpha = this.leakyReluAlpha;\r\n    let needsVar = false;\r\n    function nodeHandle(layers, layerNumber, nodeKey) {\r\n      if (layerNumber === 0) {\r\n        return (typeof nodeKey === 'string'\r\n          ? `input['${nodeKey}']`\r\n          : `input[${nodeKey}]`);\r\n      }\r\n\r\n      const layer = layers[layerNumber];\r\n      const node = layer[nodeKey];\r\n      let result = ['(' , node.bias];\r\n      for (let w in node.weights) {\r\n        if (node.weights[w] < 0) {\r\n          result.push(`${node.weights[w]}*${nodeHandle(layers, layerNumber - 1, w)}`);\r\n        } else {\r\n          result.push(`+${node.weights[w]}*${nodeHandle(layers, layerNumber - 1, w)}`);\r\n        }\r\n      }\r\n      result.push(')');\r\n\r\n      switch (activation) {\r\n        case 'sigmoid':\r\n          return `1/(1+1/Math.exp(${result.join('')}))`;\r\n        case 'relu': {\r\n          needsVar = true;\r\n          return `((v=${result.join('')})<0?0:v)`;\r\n        }\r\n        case 'leaky-relu': {\r\n          needsVar = true;\r\n          return `((v=${result.join('')})<0?0:${leakyReluAlpha}*v)`;\r\n        }\r\n        case 'tanh':\r\n          return `Math.tanh(${result.join('')})`;\r\n        default:\r\n          throw new Error('unknown activation type ' + activation);\r\n      }\r\n    }\r\n\r\n    const layers = this.toJSON().layers;\r\n    const layersAsMath = [];\r\n    let result;\r\n    for (let i in layers[layers.length - 1]) {\r\n      layersAsMath.push(nodeHandle(layers, layers.length - 1, i));\r\n    }\r\n    if (this.outputLookup) {\r\n      result = `{${\r\n        Object.keys(this.outputLookup)\r\n          .map((key, i) => `'${key}':${layersAsMath[i]}`)\r\n        }}`;\r\n    } else {\r\n      result = `[${layersAsMath.join(',')}]`;\r\n    }\r\n\r\n    return new Function('input', `${ needsVar ? 'var v;' : '' }return ${result};`);\r\n  }\r\n}\r\n\r\n\r\nfunction getTypedArrayFn(value, table) {\r\n  if (value.buffer instanceof ArrayBuffer) {\r\n    return null;\r\n  } else if (Array.isArray(value)) {\r\n    return arrayToFloat32Array;\r\n  } else {\r\n    const length = Object.keys(table).length;\r\n    return (v) => {\r\n      const array = new Float32Array(length);\r\n      for (let p in table) {\r\n        array[table[p]] = v[p] || 0;\r\n      }\r\n      return array;\r\n    }\r\n  }\r\n}\r\n"]}