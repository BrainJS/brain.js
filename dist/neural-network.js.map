{"version":3,"sources":["../src/neural-network.js"],"names":["NeuralNetwork","iterations","errorThresh","log","logPeriod","learningRate","momentum","callback","callbackPeriod","timeout","Infinity","praxis","beta1","beta2","epsilon","leakyReluAlpha","binaryThresh","hiddenLayers","activation","options","sizes","outputLayer","biases","weights","outputs","deltas","changes","errors","errorCheckInterval","constructor","prototype","hasOwnProperty","runInput","calculateDeltas","Error","length","layer","size","Array","node","prevSize","setActivation","trainOpts","_setupAdam","_runInputSigmoid","_calculateDeltasSigmoid","_runInputRelu","_calculateDeltasRelu","_runInputLeakyRelu","_calculateDeltasLeakyRelu","_runInputTanh","_calculateDeltasTanh","input","isRunnable","inputLookup","lookup","toArray","inputLookupLength","output","slice","outputLookup","toObject","sum","k","Math","exp","alpha","tanh","data","push","max","floor","forEach","initialize","Object","keys","trainDefaults","reduce","opts","opt","value","logErrorRate","adjustWeights","target","error","incoming","delta","change","biasChangesLow","biasChangesHigh","changesLow","changesHigh","_adjustWeightsAdam","gradient","changeLow","changeHigh","momentumCorrection","pow","gradientCorrection","sqrt","biasGradient","biasChangeLow","biasChangeHigh","biasMomentumCorrection","biasGradientCorrection","isArray","LookupTable","table","outputLookupLength","_formatInput","getTypedArrayFn","_formatOutput","result","i","addKeys","formatData","isBinary","misclasses","errorSum","falsePos","falseNeg","truePos","trueNeg","actual","expected","misclass","map","total","precision","recall","accuracy","indexOf","layers","nodes","j","bias","index","getTrainOptsJSON","json","assign","defaults","toHash","updateTrainingOptions","needsVar","nodeHandle","layerNumber","nodeKey","w","join","toJSON","layersAsMath","key","Function","console","checkFns","filter","c","BaseInterface","buffer","ArrayBuffer","arrayToFloat32Array","v","array","Float32Array","p"],"mappings":"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","file":"neural-network.js","sourcesContent":["import BaseInterface from './base-interface';\r\nimport lookup from './lookup';\r\nimport max from './utilities/max';\r\nimport mse from './utilities/mse';\r\nimport randos from './utilities/randos';\r\nimport range from './utilities/range';\r\nimport toArray from './utilities/to-array';\r\nimport zeros from './utilities/zeros';\r\nimport LookupTable from './utilities/lookup-table';\r\nimport { arrayToFloat32Array } from './utilities/cast';\r\n\r\n/**\r\n * @param {object} options\r\n * @constructor\r\n */\r\nexport default class NeuralNetwork extends BaseInterface {\r\n  static get trainDefaults() {\r\n    return {\r\n      iterations: 20000,    // the maximum times to iterate the training data\r\n      errorThresh: 0.005,   // the acceptable error percentage from training data\r\n      log: false,           // true to use console.log, when a function is supplied it is used\r\n      logPeriod: 10,        // iterations between logging out\r\n      learningRate: 0.3,    // multiply's against the input and the delta then adds to momentum\r\n      momentum: 0.1,        // multiply's against the specified \"change\" then adds to learning rate for change\r\n      callback: null,       // a periodic call back that can be triggered while training\r\n      callbackPeriod: 10,   // the number of iterations through the training data between callback calls\r\n      timeout: Infinity,    // the max number of milliseconds to train for\r\n      praxis: null,\r\n      beta1: 0.9,\r\n      beta2: 0.999,\r\n      epsilon: 1e-8,\r\n    };\r\n  }\r\n\r\n  static get defaults() {\r\n    return {\r\n      leakyReluAlpha: 0.01,\r\n      binaryThresh: 0.5,\r\n      hiddenLayers: null,     // array of ints for the sizes of the hidden layers in the network\r\n      activation: 'sigmoid'  // Supported activation types ['sigmoid', 'relu', 'leaky-relu', 'tanh']\r\n    };\r\n  }\r\n\r\n  constructor(options = {}) {\r\n    super(options);\r\n\r\n    this.sizes = null;\r\n    this.outputLayer = null;\r\n    this.biases = null; // weights for bias nodes\r\n    this.weights = null;\r\n    this.outputs = null;\r\n\r\n    // state for training\r\n    this.deltas = null;\r\n    this.changes = null; // for momentum\r\n    this.errors = null;\r\n    this.errorCheckInterval = 1;\r\n    if (!this.constructor.prototype.hasOwnProperty('runInput')) {\r\n      this.runInput = null;\r\n    }\r\n    if (!this.constructor.prototype.hasOwnProperty('calculateDeltas')) {\r\n      this.calculateDeltas = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Expects this.sizes to have been set\r\n   */\r\n  initialize() {\r\n    if (!this.sizes) throw new Error ('Sizes must be set before initializing');\r\n\r\n    this.outputLayer = this.sizes.length - 1;\r\n    this.biases = []; // weights for bias nodes\r\n    this.weights = [];\r\n    this.outputs = [];\r\n\r\n    // state for training\r\n    this.deltas = [];\r\n    this.changes = []; // for momentum\r\n    this.errors = [];\r\n\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      let size = this.sizes[layer];\r\n      this.deltas[layer] = zeros(size);\r\n      this.errors[layer] = zeros(size);\r\n      this.outputs[layer] = zeros(size);\r\n\r\n      if (layer > 0) {\r\n        this.biases[layer] = randos(size);\r\n        this.weights[layer] = new Array(size);\r\n        this.changes[layer] = new Array(size);\r\n\r\n        for (let node = 0; node < size; node++) {\r\n          let prevSize = this.sizes[layer - 1];\r\n          this.weights[layer][node] = randos(prevSize);\r\n          this.changes[layer][node] = zeros(prevSize);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setActivation();\r\n    if (this.trainOpts.praxis === 'adam') {\r\n      this._setupAdam();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param activation supported inputs: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\r\n   */\r\n  setActivation(activation) {\r\n    this.activation = activation ? activation : this.activation;\r\n    switch (this.activation) {\r\n      case 'sigmoid':\r\n        this.runInput = this.runInput || this._runInputSigmoid;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasSigmoid;\r\n        break;\r\n      case 'relu':\r\n        this.runInput = this.runInput || this._runInputRelu;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasRelu;\r\n        break;\r\n      case 'leaky-relu':\r\n        this.runInput = this.runInput || this._runInputLeakyRelu;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasLeakyRelu;\r\n        break;\r\n      case 'tanh':\r\n        this.runInput = this.runInput || this._runInputTanh;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasTanh;\r\n        break;\r\n      default:\r\n        throw new Error('unknown activation ' + this.activation + ', The activation should be one of [\\'sigmoid\\', \\'relu\\', \\'leaky-relu\\', \\'tanh\\']');\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns boolean\r\n   */\r\n  get isRunnable(){\r\n    if(!this.runInput){\r\n      console.error('Activation function has not been initialized, did you run train()?');\r\n      return false;\r\n    }\r\n\r\n    const checkFns = [\r\n      'sizes',\r\n      'outputLayer',\r\n      'biases',\r\n      'weights',\r\n      'outputs',\r\n      'deltas',\r\n      'changes',\r\n      'errors',\r\n    ].filter(c => this[c] === null);\r\n\r\n    if(checkFns.length > 0){\r\n      console.error(`Some settings have not been initialized correctly, did you run train()? Found issues with: ${checkFns.join(', ')}`);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   * @returns {*}\r\n   */\r\n  run(input) {\r\n    if (!this.isRunnable) return null;\r\n    if (this.inputLookup) {\r\n      input = lookup.toArray(this.inputLookup, input, this.inputLookupLength);\r\n    }\r\n\r\n    let output = this.runInput(input).slice(0);\r\n\r\n    if (this.outputLookup) {\r\n      output = lookup.toObject(this.outputLookup, output);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * trains via sigmoid\r\n   * @param input\r\n   * @returns {*}\r\n   */\r\n  _runInputSigmoid(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //sigmoid\r\n        this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  _runInputRelu(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //relu\r\n        this.outputs[layer][node] = (sum < 0 ? 0 : sum);\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  _runInputLeakyRelu(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n    let alpha = this.leakyReluAlpha;\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //leaky relu\r\n        this.outputs[layer][node] = (sum < 0 ? 0 : alpha * sum);\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  _runInputTanh(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //tanh\r\n        this.outputs[layer][node] = Math.tanh(sum);\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * Verifies network sizes are initialized\r\n   * If they are not it will initialize them based off the data set.\r\n   */\r\n  verifyIsInitialized(data) {\r\n    if (this.sizes) return;\r\n\r\n    this.sizes = [];\r\n    this.sizes.push(data[0].input.length);\r\n    if (!this.hiddenLayers) {\r\n      this.sizes.push(Math.max(3, Math.floor(data[0].input.length / 2)));\r\n    } else {\r\n      this.hiddenLayers.forEach(size => {\r\n        this.sizes.push(size);\r\n      });\r\n    }\r\n    this.sizes.push(data[0].output.length);\r\n\r\n    this.initialize();\r\n  }\r\n\r\n  /**\r\n   *\r\n   *  Gets JSON of trainOpts object\r\n   *    NOTE: Activation is stored directly on JSON object and not in the training options\r\n   */\r\n  getTrainOptsJSON() {\r\n    return Object.keys(this.constructor.trainDefaults)\r\n      .reduce((opts, opt) => {\r\n        if (opt === 'timeout' && this.trainOpts[opt] === Infinity) return opts;\r\n        if (opt === 'callback') return opts;\r\n        if (this.trainOpts[opt]) opts[opt] = this.trainOpts[opt];\r\n        if (opt === 'log') opts.log = typeof opts.log === 'function';\r\n        return opts;\r\n      }, {});\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} value\r\n   * @param {boolean} [logErrorRate]\r\n   */\r\n  trainPattern(value, logErrorRate) {\r\n    // forward propagate\r\n    this.runInput(value.input);\r\n\r\n    // back propagate\r\n    this.calculateDeltas(value.output);\r\n    this.adjustWeights();\r\n\r\n    if  (logErrorRate) {\r\n      return mse(this.errors[this.outputLayer]);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasSigmoid(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = error * output * (1 - output);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasRelu(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = output > 0 ? error : 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasLeakyRelu(target) {\r\n    let alpha = this.leakyReluAlpha;\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = output > 0 ? error : alpha * error;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasTanh(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = (1 - output * output) * error;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Changes weights of networks\r\n   */\r\n  adjustWeights() {\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      let incoming = this.outputs[layer - 1];\r\n\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let delta = this.deltas[layer][node];\r\n\r\n        for (let k = 0; k < incoming.length; k++) {\r\n          let change = this.changes[layer][node][k];\r\n\r\n          change = (this.trainOpts.learningRate * delta * incoming[k])\r\n            + (this.trainOpts.momentum * change);\r\n\r\n          this.changes[layer][node][k] = change;\r\n          this.weights[layer][node][k] += change;\r\n        }\r\n        this.biases[layer][node] += this.trainOpts.learningRate * delta;\r\n      }\r\n    }\r\n  }\r\n\r\n  _setupAdam() {\r\n    this.biasChangesLow = [];\r\n    this.biasChangesHigh = [];\r\n    this.changesLow = [];\r\n    this.changesHigh = [];\r\n    this.iterations = 0;\r\n\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      let size = this.sizes[layer];\r\n      if (layer > 0) {\r\n        this.biasChangesLow[layer] = zeros(size);\r\n        this.biasChangesHigh[layer] = zeros(size);\r\n        this.changesLow[layer] = new Array(size);\r\n        this.changesHigh[layer] = new Array(size);\r\n\r\n        for (let node = 0; node < size; node++) {\r\n          let prevSize = this.sizes[layer - 1];\r\n          this.changesLow[layer][node] = zeros(prevSize);\r\n          this.changesHigh[layer][node] = zeros(prevSize);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.adjustWeights = this._adjustWeightsAdam;\r\n  }\r\n\r\n  _adjustWeightsAdam() {\r\n    const trainOpts = this.trainOpts;\r\n    this.iterations++;\r\n\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      const incoming = this.outputs[layer - 1];\r\n\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        const delta = this.deltas[layer][node];\r\n\r\n        for (let k = 0; k < incoming.length; k++) {\r\n          const gradient = delta * incoming[k];\r\n          const changeLow = this.changesLow[layer][node][k] * trainOpts.beta1 + (1 - trainOpts.beta1) * gradient;\r\n          const changeHigh = this.changesHigh[layer][node][k] * trainOpts.beta2 + (1 - trainOpts.beta2) * gradient * gradient;\r\n\r\n          const momentumCorrection = changeLow / (1 - Math.pow(trainOpts.beta1, this.iterations));\r\n          const gradientCorrection = changeHigh / (1 - Math.pow(trainOpts.beta2, this.iterations));\r\n\r\n          this.changesLow[layer][node][k] = changeLow;\r\n          this.changesHigh[layer][node][k] = changeHigh;\r\n          this.weights[layer][node][k] += this.trainOpts.learningRate * momentumCorrection / (Math.sqrt(gradientCorrection) + trainOpts.epsilon);\r\n        }\r\n\r\n        const biasGradient = this.deltas[layer][node];\r\n        const biasChangeLow = this.biasChangesLow[layer][node] * trainOpts.beta1 + (1 - trainOpts.beta1) * biasGradient;\r\n        const biasChangeHigh = this.biasChangesHigh[layer][node] * trainOpts.beta2 + (1 - trainOpts.beta2) * biasGradient * biasGradient;\r\n\r\n        const biasMomentumCorrection = this.biasChangesLow[layer][node] / (1 - Math.pow(trainOpts.beta1, this.iterations));\r\n        const biasGradientCorrection = this.biasChangesHigh[layer][node] / (1 - Math.pow(trainOpts.beta2, this.iterations));\r\n\r\n        this.biasChangesLow[layer][node] = biasChangeLow;\r\n        this.biasChangesHigh[layer][node] = biasChangeHigh;\r\n        this.biases[layer][node] += trainOpts.learningRate * biasMomentumCorrection / (Math.sqrt(biasGradientCorrection) + trainOpts.epsilon);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @returns {*}\r\n   */\r\n  formatData(data) {\r\n    if (!Array.isArray(data)) { // turn stream datum into array\r\n      data = [data];\r\n    }\r\n\r\n    if (!Array.isArray(data[0].input)) {\r\n      if (this.inputLookup) {\r\n        this.inputLookupLength = Object.keys(this.inputLookup).length;\r\n      } else {\r\n        const inputLookup = new LookupTable(data, 'input');\r\n        this.inputLookup = inputLookup.table;\r\n        this.inputLookupLength = inputLookup.length;\r\n      }\r\n    }\r\n\r\n    if (!Array.isArray(data[0].output)) {\r\n      if (this.outputLookup) {\r\n        this.outputLookupLength = Object.keys(this.outputLookup).length;\r\n      } else {\r\n        const lookup = new LookupTable(data, 'output');\r\n        this.outputLookup = lookup.table;\r\n        this.outputLookupLength = lookup.length;\r\n      }\r\n    }\r\n\r\n    if (typeof this._formatInput === 'undefined') {\r\n      this._formatInput = getTypedArrayFn(data[0].input, this.inputLookup);\r\n      this._formatOutput = getTypedArrayFn(data[0].output, this.outputLookup);\r\n    }\r\n\r\n    // turn sparse hash input into arrays with 0s as filler\r\n    if (this._formatInput && this._formatOutput) {\r\n      const result = [];\r\n      for (let i = 0; i < data.length; i++) {\r\n        result.push({\r\n          input: this._formatInput(data[i].input),\r\n          output: this._formatOutput(data[i].output),\r\n        });\r\n      }\r\n      return result;\r\n    } else if (this._formatInput) {\r\n      const result = [];\r\n      for (let i = 0; i < data.length; i++) {\r\n        result.push({\r\n          input: this._formatInput(data[i].input),\r\n          output: data[i].output\r\n        });\r\n      }\r\n      return result;\r\n    } else if (this._formatOutput) {\r\n      const result = [];\r\n      for (let i = 0; i < data.length; i++) {\r\n        result.push({\r\n          input: data[i].input,\r\n          output: this._formatOutput(data[i].output)\r\n        });\r\n      }\r\n      return result;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  addFormat(data) {\r\n    this.inputLookup = lookup.addKeys(data.input, this.inputLookup);\r\n    if (this.inputLookup) {\r\n      this.inputLookupLength = Object.keys(this.inputLookup).length;\r\n    }\r\n    this.outputLookup = lookup.addKeys(data.output, this.outputLookup);\r\n    if (this.outputLookup) {\r\n      this.outputLookupLength = Object.keys(this.outputLookup).length;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @returns {\r\n   *  {\r\n   *    error: number,\r\n   *    misclasses: Array,\r\n   *  }\r\n   * }\r\n   */\r\n  test(data) {\r\n    data = this.formatData(data);\r\n    // for binary classification problems with one output node\r\n    const isBinary = data[0].output.length === 1;\r\n    // for classification problems\r\n    const misclasses = [];\r\n    // run each pattern through the trained network and collect\r\n    // error and misclassification statistics\r\n    let errorSum = 0;\r\n\r\n    if (isBinary) {\r\n      let falsePos = 0;\r\n      let falseNeg = 0;\r\n      let truePos = 0;\r\n      let trueNeg = 0;\r\n\r\n      for (let i = 0; i < data.length; i++) {\r\n        const output = this.runInput(data[i].input);\r\n        const target = data[i].output;\r\n        const actual = output[0] > this.binaryThresh ? 1 : 0;\r\n        const expected = target[0];\r\n\r\n        if (actual !== expected) {\r\n          const misclass = data[i];\r\n          misclasses.push({\r\n            input: misclass.input,\r\n            output: misclass.output,\r\n            actual,\r\n            expected\r\n          });\r\n        }\r\n\r\n        if (actual === 0 && expected === 0) {\r\n          trueNeg++;\r\n        } else if (actual === 1 && expected === 1) {\r\n          truePos++;\r\n        } else if (actual === 0 && expected === 1) {\r\n          falseNeg++;\r\n        } else if (actual === 1 && expected === 0) {\r\n          falsePos++;\r\n        }\r\n\r\n        errorSum += mse(output.map((value, i) => {\r\n          return target[i] - value;\r\n        }));\r\n      }\r\n\r\n      return {\r\n        error: errorSum / data.length,\r\n        misclasses: misclasses,\r\n        total: data.length,\r\n        trueNeg: trueNeg,\r\n        truePos: truePos,\r\n        falseNeg: falseNeg,\r\n        falsePos: falsePos,\r\n        precision: truePos > 0 ? truePos / (truePos + falsePos) : 0,\r\n        recall: truePos > 0 ? truePos / (truePos + falseNeg) : 0,\r\n        accuracy: (trueNeg + truePos) / data.length\r\n      };\r\n    }\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const output = this.runInput(data[i].input);\r\n      const target = data[i].output;\r\n      const actual = output.indexOf(max(output));\r\n      const expected = target.indexOf(max(target));\r\n\r\n      if (actual !== expected) {\r\n        const misclass = data[i];\r\n        misclasses.push({\r\n          input: misclass.input,\r\n          output: misclass.output,\r\n          actual,\r\n          expected\r\n        });\r\n      }\r\n\r\n      errorSum += mse(output.map((value, i) => {\r\n        return target[i] - value;\r\n      }));\r\n    }\r\n    return {\r\n      error: errorSum / data.length,\r\n      misclasses: misclasses,\r\n      total: data.length\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns\r\n   *  {\r\n   *    layers: [\r\n   *      {\r\n   *        x: {},\r\n   *        y: {}\r\n   *      },\r\n   *      {\r\n   *        '0': {\r\n   *          bias: -0.98771313,\r\n   *          weights: {\r\n   *            x: 0.8374838,\r\n   *            y: 1.245858\r\n   *          },\r\n   *        '1': {\r\n   *          bias: 3.48192004,\r\n   *          weights: {\r\n   *            x: 1.7825821,\r\n   *            y: -2.67899\r\n   *          }\r\n   *        }\r\n   *      },\r\n   *      {\r\n   *        f: {\r\n   *          bias: 0.27205739,\r\n   *          weights: {\r\n   *            '0': 1.3161821,\r\n   *            '1': 2.00436\r\n   *          }\r\n   *        }\r\n   *      }\r\n   *    ]\r\n   *  }\r\n   */\r\n  toJSON() {\r\n    const layers = [];\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      layers[layer] = {};\r\n\r\n      let nodes;\r\n      // turn any internal arrays back into hashes for readable json\r\n      if (layer === 0 && this.inputLookup) {\r\n        nodes = Object.keys(this.inputLookup);\r\n      } else if (this.outputLookup && layer === this.outputLayer) {\r\n        nodes = Object.keys(this.outputLookup);\r\n      } else {\r\n        nodes = range(0, this.sizes[layer]);\r\n      }\r\n\r\n      for (let j = 0; j < nodes.length; j++) {\r\n        const node = nodes[j];\r\n        layers[layer][node] = {};\r\n\r\n        if (layer > 0) {\r\n          layers[layer][node].bias = this.biases[layer][j];\r\n          layers[layer][node].weights = {};\r\n          for (let k in layers[layer - 1]) {\r\n            let index = k;\r\n            if (layer === 1 && this.inputLookup) {\r\n              index = this.inputLookup[k];\r\n            }\r\n            layers[layer][node].weights[k] = this.weights[layer][j][index];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      sizes: this.sizes.slice(0),\r\n      layers,\r\n      outputLookup: this.outputLookup !== null,\r\n      inputLookup: this.inputLookup !== null,\r\n      activation: this.activation,\r\n      trainOpts: this.getTrainOptsJSON()\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param json\r\n   * @returns {NeuralNetwork}\r\n   */\r\n  fromJSON(json) {\r\n    Object.assign(this, this.constructor.defaults, json);\r\n    this.sizes = json.sizes;\r\n    this.initialize();\r\n\r\n    for (let i = 0; i <= this.outputLayer; i++) {\r\n      let layer = json.layers[i];\r\n      if (i === 0 && (!layer[0] || json.inputLookup)) {\r\n        this.inputLookup = lookup.toHash(layer);\r\n        this.inputLookupLength = Object.keys(this.inputLookup).length;\r\n      }\r\n      else if (i === this.outputLayer && (!layer[0] || json.outputLookup)) {\r\n        this.outputLookup = lookup.toHash(layer);\r\n      }\r\n      if (i > 0) {\r\n        const nodes = Object.keys(layer);\r\n        this.sizes[i] = nodes.length;\r\n        for (let j in nodes) {\r\n          if (nodes.hasOwnProperty(j)) {\r\n            const node = nodes[j];\r\n            this.biases[i][j] = layer[node].bias;\r\n            this.weights[i][j] = toArray(layer[node].weights);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (json.hasOwnProperty('trainOpts')) {\r\n      this.updateTrainingOptions(json.trainOpts);\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Function}\r\n   */\r\n  toFunction() {\r\n    const activation = this.activation;\r\n    const leakyReluAlpha = this.leakyReluAlpha;\r\n    let needsVar = false;\r\n    function nodeHandle(layers, layerNumber, nodeKey) {\r\n      if (layerNumber === 0) {\r\n        return (typeof nodeKey === 'string'\r\n          ? `input['${nodeKey}']`\r\n          : `input[${nodeKey}]`);\r\n      }\r\n\r\n      const layer = layers[layerNumber];\r\n      const node = layer[nodeKey];\r\n      let result = ['(' , node.bias];\r\n      for (let w in node.weights) {\r\n        if (node.weights[w] < 0) {\r\n          result.push(`${node.weights[w]}*${nodeHandle(layers, layerNumber - 1, w)}`);\r\n        } else {\r\n          result.push(`+${node.weights[w]}*${nodeHandle(layers, layerNumber - 1, w)}`);\r\n        }\r\n      }\r\n      result.push(')');\r\n\r\n      switch (activation) {\r\n        case 'sigmoid':\r\n          return `1/(1+1/Math.exp(${result.join('')}))`;\r\n        case 'relu': {\r\n          needsVar = true;\r\n          return `((v=${result.join('')})<0?0:v)`;\r\n        }\r\n        case 'leaky-relu': {\r\n          needsVar = true;\r\n          return `((v=${result.join('')})<0?0:${leakyReluAlpha}*v)`;\r\n        }\r\n        case 'tanh':\r\n          return `Math.tanh(${result.join('')})`;\r\n        default:\r\n          throw new Error('unknown activation type ' + activation);\r\n      }\r\n    }\r\n\r\n    const layers = this.toJSON().layers;\r\n    const layersAsMath = [];\r\n    let result;\r\n    for (let i in layers[layers.length - 1]) {\r\n      layersAsMath.push(nodeHandle(layers, layers.length - 1, i));\r\n    }\r\n    if (this.outputLookup) {\r\n      result = `{${\r\n        Object.keys(this.outputLookup)\r\n          .map((key, i) => `'${key}':${layersAsMath[i]}`)\r\n        }}`;\r\n    } else {\r\n      result = `[${layersAsMath.join(',')}]`;\r\n    }\r\n\r\n    return new Function('input', `${ needsVar ? 'var v;' : '' }return ${result};`);\r\n  }\r\n}\r\n\r\n\r\nfunction getTypedArrayFn(value, table) {\r\n  if (value.buffer instanceof ArrayBuffer) {\r\n    return null;\r\n  } else if (Array.isArray(value)) {\r\n    return arrayToFloat32Array;\r\n  } else {\r\n    const length = Object.keys(table).length;\r\n    return (v) => {\r\n      const array = new Float32Array(length);\r\n      for (let p in table) {\r\n        array[table[p]] = v[p] || 0;\r\n      }\r\n      return array;\r\n    }\r\n  }\r\n}\r\n"]}