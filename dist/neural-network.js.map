{"version":3,"sources":["../src/neural-network.js"],"names":["NeuralNetwork","options","validations","iterations","val","errorThresh","log","logPeriod","learningRate","momentum","callback","callbackPeriod","timeout","Object","keys","trainDefaults","forEach","hasOwnProperty","key","Error","Infinity","praxis","beta1","beta2","epsilon","binaryThresh","hiddenLayers","activation","assign","constructor","defaults","trainOpts","_updateTrainingOptions","sizes","outputLayer","biases","weights","outputs","deltas","changes","errors","errorCheckInterval","prototype","runInput","calculateDeltas","length","layer","size","Array","node","prevSize","setActivation","_runInputSigmoid","_calculateDeltasSigmoid","_runInputRelu","_calculateDeltasRelu","_runInputLeakyRelu","_calculateDeltasLeakyRelu","_runInputTanh","_calculateDeltasTanh","input","isRunnable","inputLookup","lookup","toArray","output","outputLookup","toHash","sum","k","Math","exp","tanh","data","push","max","floor","_initialize","opts","opt","_validateTrainingOptions","_setLogMethod","reduce","console","i","_trainPattern","status","endTime","error","Date","now","_calculateTrainingError","_trainPatterns","_formatData","_verifyIsInitialized","_prepTraining","_setupAdam","_trainingTick","Promise","resolve","reject","thawedTrain","Thaw","delay","each","stop","done","tick","trainError","target","logErrorRate","_adjustWeights","incoming","delta","change","biasChangesLow","biasChangesHigh","changesLow","changesHigh","_adjustWeightsAdam","gradient","changeLow","changeHigh","momentumCorrection","pow","gradientCorrection","sqrt","biasGradient","biasChangeLow","biasChangeHigh","biasMomentumCorrection","biasGradientCorrection","isArray","tmp","datum","Float32Array","buildLookup","map","value","array","isBinary","falsePos","falseNeg","truePos","trueNeg","misclasses","actual","expected","indexOf","misclass","stats","total","precision","recall","accuracy","layers","nodes","j","bias","index","_getTrainOptsJSON","json","lookupFromHash","needsVar","nodeHandle","layerNumber","nodeKey","result","w","join","toJSON","layersAsMath","Function","checkFns","filter","c"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA;;;;IAIqBA,a;;;;;AA2BnB;;;;;6CAKgCC,O,EAAS;AACvC,UAAMC,cAAc;AAClBC,oBAAY,oBAACC,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAxC;AAA4C,SADjD;AAElBC,qBAAa,qBAACD,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAjC,IAAsCA,MAAM,CAAnD;AAAuD,SAF7D;AAGlBE,aAAK,aAACF,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,UAAf,IAA6B,OAAOA,GAAP,KAAe,SAAnD;AAA+D,SAH7D;AAIlBG,mBAAW,mBAACH,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAxC;AAA4C,SAJhD;AAKlBI,sBAAc,sBAACJ,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAjC,IAAsCA,MAAM,CAAnD;AAAuD,SAL9D;AAMlBK,kBAAU,kBAACL,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAjC,IAAsCA,MAAM,CAAnD;AAAuD,SAN1D;AAOlBM,kBAAU,kBAACN,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,UAAf,IAA6BA,QAAQ,IAA5C;AAAkD,SAPrD;AAQlBO,wBAAgB,wBAACP,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAxC;AAA4C,SARrD;AASlBQ,iBAAS,iBAACR,GAAD,EAAS;AAAE,iBAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAAxC;AAA2C;AAT7C,OAApB;AAWAS,aAAOC,IAAP,CAAYd,cAAce,aAA1B,EAAyCC,OAAzC,CAAiD,eAAO;AACtD,YAAId,YAAYe,cAAZ,CAA2BC,GAA3B,KAAmC,CAAChB,YAAYgB,GAAZ,EAAiBjB,QAAQiB,GAAR,CAAjB,CAAxC,EAAwE;AACtE,gBAAM,IAAIC,KAAJ,OAAcD,GAAd,UAAsBjB,QAAQiB,GAAR,CAAtB,8EAAN;AACD;AACF,OAJD;AAKD;;;wBAhD0B;AACzB,aAAO;AACLf,oBAAY,KADP,EACiB;AACtBE,qBAAa,KAFR,EAEiB;AACtBC,aAAK,KAHA,EAGiB;AACtBC,mBAAW,EAJN,EAIiB;AACtBC,sBAAc,GALT,EAKiB;AACtBC,kBAAU,GANL,EAMiB;AACtBC,kBAAU,IAPL,EAOiB;AACtBC,wBAAgB,EARX,EAQiB;AACtBC,iBAASQ,QATJ,EASiB;AACtBC,gBAAQ,IAVH;AAWLC,eAAO,GAXF;AAYLC,eAAO,KAZF;AAaLC,iBAAS;AAbJ,OAAP;AAeD;;;wBAEqB;AACpB,aAAO;AACLC,sBAAc,GADT;AAELC,sBAAc,CAAC,CAAD,CAFT,EAEkB;AACvBC,oBAAY,SAHP,CAGkB;AAHlB,OAAP;AAKD;;;AA0BD,2BAA0B;AAAA,QAAd1B,OAAc,uEAAJ,EAAI;;AAAA;;AACxBY,WAAOe,MAAP,CAAc,IAAd,EAAoB,KAAKC,WAAL,CAAiBC,QAArC,EAA+C7B,OAA/C;AACA,SAAKyB,YAAL,GAAoBzB,QAAQyB,YAA5B;AACA,SAAKK,SAAL,GAAiB,EAAjB;AACA,SAAKC,sBAAL,CAA4BnB,OAAOe,MAAP,CAAc,EAAd,EAAkB,KAAKC,WAAL,CAAiBd,aAAnC,EAAkDd,OAAlD,CAA5B;;AAEA,SAAKgC,KAAL,GAAa,IAAb;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,MAAL,GAAc,IAAd,CARwB,CAQJ;AACpB,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,OAAL,GAAe,IAAf;;AAEA;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,OAAL,GAAe,IAAf,CAdwB,CAcH;AACrB,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,kBAAL,GAA0B,CAA1B;AACA,QAAI,CAAC,KAAKZ,WAAL,CAAiBa,SAAjB,CAA2BzB,cAA3B,CAA0C,UAA1C,CAAL,EAA4D;AAC1D,WAAK0B,QAAL,GAAgB,IAAhB;AACD;AACD,QAAI,CAAC,KAAKd,WAAL,CAAiBa,SAAjB,CAA2BzB,cAA3B,CAA0C,iBAA1C,CAAL,EAAmE;AACjE,WAAK2B,eAAL,GAAuB,IAAvB;AACD;AACF;;AAED;;;;;;;;kCAIc;AACZ,UAAI,CAAC,KAAKX,KAAV,EAAiB,MAAM,IAAId,KAAJ,CAAW,uCAAX,CAAN;;AAEjB,WAAKe,WAAL,GAAmB,KAAKD,KAAL,CAAWY,MAAX,GAAoB,CAAvC;AACA,WAAKV,MAAL,GAAc,EAAd,CAJY,CAIM;AAClB,WAAKC,OAAL,GAAe,EAAf;AACA,WAAKC,OAAL,GAAe,EAAf;;AAEA;AACA,WAAKC,MAAL,GAAc,EAAd;AACA,WAAKC,OAAL,GAAe,EAAf,CAVY,CAUO;AACnB,WAAKC,MAAL,GAAc,EAAd;;AAEA,WAAK,IAAIM,QAAQ,CAAjB,EAAoBA,SAAS,KAAKZ,WAAlC,EAA+CY,OAA/C,EAAwD;AACtD,YAAIC,OAAO,KAAKd,KAAL,CAAWa,KAAX,CAAX;AACA,aAAKR,MAAL,CAAYQ,KAAZ,IAAqB,qBAAMC,IAAN,CAArB;AACA,aAAKP,MAAL,CAAYM,KAAZ,IAAqB,qBAAMC,IAAN,CAArB;AACA,aAAKV,OAAL,CAAaS,KAAb,IAAsB,qBAAMC,IAAN,CAAtB;;AAEA,YAAID,QAAQ,CAAZ,EAAe;AACb,eAAKX,MAAL,CAAYW,KAAZ,IAAqB,sBAAOC,IAAP,CAArB;AACA,eAAKX,OAAL,CAAaU,KAAb,IAAsB,IAAIE,KAAJ,CAAUD,IAAV,CAAtB;AACA,eAAKR,OAAL,CAAaO,KAAb,IAAsB,IAAIE,KAAJ,CAAUD,IAAV,CAAtB;;AAEA,eAAK,IAAIE,OAAO,CAAhB,EAAmBA,OAAOF,IAA1B,EAAgCE,MAAhC,EAAwC;AACtC,gBAAIC,WAAW,KAAKjB,KAAL,CAAWa,QAAQ,CAAnB,CAAf;AACA,iBAAKV,OAAL,CAAaU,KAAb,EAAoBG,IAApB,IAA4B,sBAAOC,QAAP,CAA5B;AACA,iBAAKX,OAAL,CAAaO,KAAb,EAAoBG,IAApB,IAA4B,qBAAMC,QAAN,CAA5B;AACD;AACF;AACF;;AAED,WAAKC,aAAL;AACD;;AAED;;;;;;;kCAIcxB,U,EAAY;AACxB,WAAKA,UAAL,GAAmBA,UAAD,GAAeA,UAAf,GAA4B,KAAKA,UAAnD;AACA,cAAQ,KAAKA,UAAb;AACE,aAAK,SAAL;AACE,eAAKgB,QAAL,GAAgB,KAAKA,QAAL,IAAiB,KAAKS,gBAAtC;AACA,eAAKR,eAAL,GAAuB,KAAKA,eAAL,IAAwB,KAAKS,uBAApD;AACA;AACF,aAAK,MAAL;AACE,eAAKV,QAAL,GAAgB,KAAKA,QAAL,IAAiB,KAAKW,aAAtC;AACA,eAAKV,eAAL,GAAuB,KAAKA,eAAL,IAAwB,KAAKW,oBAApD;AACA;AACF,aAAK,YAAL;AACE,eAAKZ,QAAL,GAAgB,KAAKA,QAAL,IAAiB,KAAKa,kBAAtC;AACA,eAAKZ,eAAL,GAAuB,KAAKA,eAAL,IAAwB,KAAKa,yBAApD;AACA;AACF,aAAK,MAAL;AACE,eAAKd,QAAL,GAAgB,KAAKA,QAAL,IAAiB,KAAKe,aAAtC;AACA,eAAKd,eAAL,GAAuB,KAAKA,eAAL,IAAwB,KAAKe,oBAApD;AACA;AACF;AACE,gBAAM,IAAIxC,KAAJ,CAAU,wBAAwB,KAAKQ,UAA7B,GAA0C,qFAApD,CAAN;AAlBJ;AAoBD;;AAED;;;;;;;;;AA6BA;;;;;wBAKIiC,K,EAAO;AACT,UAAI,CAAC,KAAKC,UAAV,EAAsB,OAAO,IAAP;AACtB,UAAI,KAAKC,WAAT,EAAsB;AACpBF,gBAAQG,iBAAOC,OAAP,CAAe,KAAKF,WAApB,EAAiCF,KAAjC,CAAR;AACD;;AAED,UAAIK,sCAAa,KAAKtB,QAAL,CAAciB,KAAd,CAAb,EAAJ;;AAEA,UAAI,KAAKM,YAAT,EAAuB;AACrBD,iBAASF,iBAAOI,MAAP,CAAc,KAAKD,YAAnB,EAAiCD,MAAjC,CAAT;AACD;AACD,aAAOA,MAAP;AACD;;AAED;;;;;;;;qCAKiBL,K,EAAO;AACtB,WAAKvB,OAAL,CAAa,CAAb,IAAkBuB,KAAlB,CADsB,CACI;;AAE1B,UAAIK,SAAS,IAAb;AACA,WAAK,IAAInB,QAAQ,CAAjB,EAAoBA,SAAS,KAAKZ,WAAlC,EAA+CY,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKhB,KAAL,CAAWa,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIb,UAAU,KAAKA,OAAL,CAAaU,KAAb,EAAoBG,IAApB,CAAd;;AAEA,cAAImB,MAAM,KAAKjC,MAAL,CAAYW,KAAZ,EAAmBG,IAAnB,CAAV;AACA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIjC,QAAQS,MAA5B,EAAoCwB,GAApC,EAAyC;AACvCD,mBAAOhC,QAAQiC,CAAR,IAAaT,MAAMS,CAAN,CAApB;AACD;AACD;AACA,eAAKhC,OAAL,CAAaS,KAAb,EAAoBG,IAApB,IAA4B,KAAK,IAAIqB,KAAKC,GAAL,CAAS,CAACH,GAAV,CAAT,CAA5B;AACD;AACDH,iBAASL,QAAQ,KAAKvB,OAAL,CAAaS,KAAb,CAAjB;AACD;AACD,aAAOmB,MAAP;AACD;;;kCAEaL,K,EAAO;AACnB,WAAKvB,OAAL,CAAa,CAAb,IAAkBuB,KAAlB,CADmB,CACO;;AAE1B,UAAIK,SAAS,IAAb;AACA,WAAK,IAAInB,QAAQ,CAAjB,EAAoBA,SAAS,KAAKZ,WAAlC,EAA+CY,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKhB,KAAL,CAAWa,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIb,UAAU,KAAKA,OAAL,CAAaU,KAAb,EAAoBG,IAApB,CAAd;;AAEA,cAAImB,MAAM,KAAKjC,MAAL,CAAYW,KAAZ,EAAmBG,IAAnB,CAAV;AACA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIjC,QAAQS,MAA5B,EAAoCwB,GAApC,EAAyC;AACvCD,mBAAOhC,QAAQiC,CAAR,IAAaT,MAAMS,CAAN,CAApB;AACD;AACD;AACA,eAAKhC,OAAL,CAAaS,KAAb,EAAoBG,IAApB,IAA6BmB,MAAM,CAAN,GAAU,CAAV,GAAcA,GAA3C;AACD;AACDH,iBAASL,QAAQ,KAAKvB,OAAL,CAAaS,KAAb,CAAjB;AACD;AACD,aAAOmB,MAAP;AACD;;;uCAEkBL,K,EAAO;AACxB,WAAKvB,OAAL,CAAa,CAAb,IAAkBuB,KAAlB,CADwB,CACE;;AAE1B,UAAIK,SAAS,IAAb;AACA,WAAK,IAAInB,QAAQ,CAAjB,EAAoBA,SAAS,KAAKZ,WAAlC,EAA+CY,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKhB,KAAL,CAAWa,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIb,UAAU,KAAKA,OAAL,CAAaU,KAAb,EAAoBG,IAApB,CAAd;;AAEA,cAAImB,MAAM,KAAKjC,MAAL,CAAYW,KAAZ,EAAmBG,IAAnB,CAAV;AACA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIjC,QAAQS,MAA5B,EAAoCwB,GAApC,EAAyC;AACvCD,mBAAOhC,QAAQiC,CAAR,IAAaT,MAAMS,CAAN,CAApB;AACD;AACD;AACA,eAAKhC,OAAL,CAAaS,KAAb,EAAoBG,IAApB,IAA6BmB,MAAM,CAAN,GAAU,CAAV,GAAc,OAAOA,GAAlD;AACD;AACDH,iBAASL,QAAQ,KAAKvB,OAAL,CAAaS,KAAb,CAAjB;AACD;AACD,aAAOmB,MAAP;AACD;;;kCAEaL,K,EAAO;AACnB,WAAKvB,OAAL,CAAa,CAAb,IAAkBuB,KAAlB,CADmB,CACO;;AAE1B,UAAIK,SAAS,IAAb;AACA,WAAK,IAAInB,QAAQ,CAAjB,EAAoBA,SAAS,KAAKZ,WAAlC,EAA+CY,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKhB,KAAL,CAAWa,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIb,UAAU,KAAKA,OAAL,CAAaU,KAAb,EAAoBG,IAApB,CAAd;;AAEA,cAAImB,MAAM,KAAKjC,MAAL,CAAYW,KAAZ,EAAmBG,IAAnB,CAAV;AACA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAIjC,QAAQS,MAA5B,EAAoCwB,GAApC,EAAyC;AACvCD,mBAAOhC,QAAQiC,CAAR,IAAaT,MAAMS,CAAN,CAApB;AACD;AACD;AACA,eAAKhC,OAAL,CAAaS,KAAb,EAAoBG,IAApB,IAA4BqB,KAAKE,IAAL,CAAUJ,GAAV,CAA5B;AACD;AACDH,iBAASL,QAAQ,KAAKvB,OAAL,CAAaS,KAAb,CAAjB;AACD;AACD,aAAOmB,MAAP;AACD;;AAED;;;;;;;;;yCAMqBQ,I,EAAM;AAAA;;AACzB,UAAI,KAAKxC,KAAT,EAAgB;;AAEhB,WAAKA,KAAL,GAAa,EAAb;AACA,WAAKA,KAAL,CAAWyC,IAAX,CAAgBD,KAAK,CAAL,EAAQb,KAAR,CAAcf,MAA9B;AACA,UAAI,CAAC,KAAKnB,YAAV,EAAwB;AACtB,aAAKO,KAAL,CAAWyC,IAAX,CAAgBJ,KAAKK,GAAL,CAAS,CAAT,EAAYL,KAAKM,KAAL,CAAWH,KAAK,CAAL,EAAQb,KAAR,CAAcf,MAAd,GAAuB,CAAlC,CAAZ,CAAhB;AACD,OAFD,MAEO;AACL,aAAKnB,YAAL,CAAkBV,OAAlB,CAA0B,gBAAQ;AAChC,gBAAKiB,KAAL,CAAWyC,IAAX,CAAgB3B,IAAhB;AACD,SAFD;AAGD;AACD,WAAKd,KAAL,CAAWyC,IAAX,CAAgBD,KAAK,CAAL,EAAQR,MAAR,CAAepB,MAA/B;;AAEA,WAAKgC,WAAL;AACD;;AAED;;;;;;;;;;;;2CASuBC,I,EAAM;AAAA;;AAC3BjE,aAAOC,IAAP,CAAYd,cAAce,aAA1B,EAAyCC,OAAzC,CAAiD;AAAA,eAAO,OAAKe,SAAL,CAAegD,GAAf,IAAuBD,KAAK7D,cAAL,CAAoB8D,GAApB,CAAD,GAA6BD,KAAKC,GAAL,CAA7B,GAAyC,OAAKhD,SAAL,CAAegD,GAAf,CAAtE;AAAA,OAAjD;AACA/E,oBAAcgF,wBAAd,CAAuC,KAAKjD,SAA5C;AACA,WAAKkD,aAAL,CAAmBH,KAAKxE,GAAL,IAAY,KAAKyB,SAAL,CAAezB,GAA9C;AACA,WAAKqB,UAAL,GAAkBmD,KAAKnD,UAAL,IAAmB,KAAKA,UAA1C;AACD;;AAED;;;;;;;;wCAKoB;AAAA;;AAClB,aAAOd,OAAOC,IAAP,CAAYd,cAAce,aAA1B,EACJmE,MADI,CACG,UAACJ,IAAD,EAAOC,GAAP,EAAe;AACrB,YAAIA,QAAQ,SAAR,IAAqB,OAAKhD,SAAL,CAAegD,GAAf,MAAwB3D,QAAjD,EAA2D,OAAO0D,IAAP;AAC3D,YAAI,OAAK/C,SAAL,CAAegD,GAAf,CAAJ,EAAyBD,KAAKC,GAAL,IAAY,OAAKhD,SAAL,CAAegD,GAAf,CAAZ;AACzB,YAAIA,QAAQ,KAAZ,EAAmBD,KAAKxE,GAAL,GAAW,OAAOwE,KAAKxE,GAAZ,KAAoB,UAA/B;AACnB,eAAOwE,IAAP;AACD,OANI,EAMF,EANE,CAAP;AAOD;;AAED;;;;;;;;;;kCAOcxE,G,EAAK;AACjB,UAAI,OAAOA,GAAP,KAAe,UAAnB,EAA8B;AAC5B,aAAKyB,SAAL,CAAezB,GAAf,GAAqBA,GAArB;AACD,OAFD,MAEO,IAAIA,GAAJ,EAAS;AACd,aAAKyB,SAAL,CAAezB,GAAf,GAAqB6E,QAAQ7E,GAA7B;AACD,OAFM,MAEA;AACL,aAAKyB,SAAL,CAAezB,GAAf,GAAqB,KAArB;AACD;AACF;;AAED;;;;;;;;4CAKwBmE,I,EAAM;AAC5B,UAAIL,MAAM,CAAV;AACA,WAAK,IAAIgB,IAAI,CAAb,EAAgBA,IAAIX,KAAK5B,MAAzB,EAAiC,EAAEuC,CAAnC,EAAsC;AACpChB,eAAO,KAAKiB,aAAL,CAAmBZ,KAAKW,CAAL,EAAQxB,KAA3B,EAAkCa,KAAKW,CAAL,EAAQnB,MAA1C,EAAkD,IAAlD,CAAP;AACD;AACD,aAAOG,MAAMK,KAAK5B,MAAlB;AACD;;AAED;;;;;;;mCAIe4B,I,EAAM;AACnB,WAAK,IAAIW,IAAI,CAAb,EAAgBA,IAAIX,KAAK5B,MAAzB,EAAiC,EAAEuC,CAAnC,EAAsC;AACpC,aAAKC,aAAL,CAAmBZ,KAAKW,CAAL,EAAQxB,KAA3B,EAAkCa,KAAKW,CAAL,EAAQnB,MAA1C,EAAkD,KAAlD;AACD;AACF;;AAED;;;;;;;;;kCAMcQ,I,EAAMa,M,EAAQC,O,EAAS;AACnC,UAAID,OAAOnF,UAAP,IAAqB,KAAK4B,SAAL,CAAe5B,UAApC,IAAkDmF,OAAOE,KAAP,IAAgB,KAAKzD,SAAL,CAAe1B,WAAjF,IAAgGoF,KAAKC,GAAL,MAAcH,OAAlH,EAA2H;AACzH,eAAO,KAAP;AACD;;AAEDD,aAAOnF,UAAP;;AAEA,UAAI,KAAK4B,SAAL,CAAezB,GAAf,IAAuBgF,OAAOnF,UAAP,GAAoB,KAAK4B,SAAL,CAAexB,SAAnC,KAAiD,CAA5E,EAAgF;AAC9E+E,eAAOE,KAAP,GAAe,KAAKG,uBAAL,CAA6BlB,IAA7B,CAAf;AACA,aAAK1C,SAAL,CAAezB,GAAf,kBAAkCgF,OAAOnF,UAAzC,0BAAwEmF,OAAOE,KAA/E;AACD,OAHD,MAGO;AACL,YAAIF,OAAOnF,UAAP,GAAoB,KAAKsC,kBAAzB,KAAgD,CAApD,EAAuD;AACrD6C,iBAAOE,KAAP,GAAe,KAAKG,uBAAL,CAA6BlB,IAA7B,CAAf;AACD,SAFD,MAEO;AACL,eAAKmB,cAAL,CAAoBnB,IAApB;AACD;AACF;;AAED,UAAI,KAAK1C,SAAL,CAAerB,QAAf,IAA4B4E,OAAOnF,UAAP,GAAoB,KAAK4B,SAAL,CAAepB,cAAnC,KAAsD,CAAtF,EAA0F;AACxF,aAAKoB,SAAL,CAAerB,QAAf,CAAwBG,OAAOe,MAAP,CAAc0D,MAAd,CAAxB;AACD;AACD,aAAO,IAAP;AACD;;AAED;;;;;;;;;;kCAOcb,I,EAAMxE,O,EAAS;AAC3B,WAAK+B,sBAAL,CAA4B/B,OAA5B;AACAwE,aAAO,KAAKoB,WAAL,CAAiBpB,IAAjB,CAAP;AACA,UAAMc,UAAUE,KAAKC,GAAL,KAAa,KAAK3D,SAAL,CAAenB,OAA5C;;AAEA,UAAM0E,SAAS;AACbE,eAAO,CADM;AAEbrF,oBAAY;AAFC,OAAf;;AAKA,WAAK2F,oBAAL,CAA0BrB,IAA1B;;AAEA,aAAO;AACLA,kBADK;AAELa,sBAFK;AAGLC;AAHK,OAAP;AAKD;;AAED;;;;;;;;;0BAMMd,I,EAAoB;AAAA,UAAdxE,OAAc,uEAAJ,EAAI;;AACxB,UAAIqF,eAAJ;AAAA,UAAYC,gBAAZ;;AADwB,2BAEK,KAAKQ,aAAL,CAAmBtB,IAAnB,EAAyBxE,OAAzB,CAFL;;AAErBwE,UAFqB,kBAErBA,IAFqB;AAEfa,YAFe,kBAEfA,MAFe;AAEPC,aAFO,kBAEPA,OAFO;;;AAIxB,UAAItF,QAAQoB,MAAR,KAAmB,MAAvB,EAA+B;AAC7B,aAAK2E,UAAL;AACD;;AAED,aAAO,KAAKC,aAAL,CAAmBxB,IAAnB,EAAyBa,MAAzB,EAAiCC,OAAjC,CAAP;AACA,aAAOD,MAAP;AACD;;AAED;;;;;;;;;;;+BAQWb,I,EAAoB;AAAA;;AAAA,UAAdxE,OAAc,uEAAJ,EAAI;;AAC7B,UAAIqF,eAAJ;AAAA,UAAYC,gBAAZ;;AAD6B,2BAEA,KAAKQ,aAAL,CAAmBtB,IAAnB,EAAyBxE,OAAzB,CAFA;;AAE1BwE,UAF0B,kBAE1BA,IAF0B;AAEpBa,YAFoB,kBAEpBA,MAFoB;AAEZC,aAFY,kBAEZA,OAFY;;;AAI7B,aAAO,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAI;AACF,cAAMC,cAAc,IAAIC,cAAJ,CAAS,IAAItD,KAAJ,CAAU,OAAKjB,SAAL,CAAe5B,UAAzB,CAAT,EAA+C;AACjEoG,mBAAO,IAD0D;AAEjEC,kBAAM;AAAA,qBAAM,OAAKP,aAAL,CAAmBxB,IAAnB,EAAyBa,MAAzB,EAAiCC,OAAjC,KAA6Cc,YAAYI,IAAZ,EAAnD;AAAA,aAF2D;AAGjEC,kBAAM;AAAA,qBAAMP,QAAQb,MAAR,CAAN;AAAA;AAH2D,WAA/C,CAApB;AAKAe,sBAAYM,IAAZ;AACD,SAPD,CAOE,OAAOC,UAAP,EAAmB;AACnBR,iBAAO,EAACQ,sBAAD,EAAatB,cAAb,EAAP;AACD;AACF,OAXM,CAAP;AAYD;;AAED;;;;;;;;kCAKc1B,K,EAAOiD,M,EAAQC,Y,EAAc;;AAEzC;AACA,WAAKnE,QAAL,CAAciB,KAAd;;AAEA;AACA,WAAKhB,eAAL,CAAqBiE,MAArB;AACA,WAAKE,cAAL;;AAEA,UAAKD,YAAL,EAAmB;AACjB,eAAO,mBAAI,KAAKtE,MAAL,CAAY,KAAKN,WAAjB,CAAJ,CAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;AAED;;;;;;;4CAIwB2E,M,EAAQ;AAC9B,WAAK,IAAI/D,QAAQ,KAAKZ,WAAtB,EAAmCY,SAAS,CAA5C,EAA+CA,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKhB,KAAL,CAAWa,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIgB,SAAS,KAAK5B,OAAL,CAAaS,KAAb,EAAoBG,IAApB,CAAb;;AAEA,cAAIuC,QAAQ,CAAZ;AACA,cAAI1C,UAAU,KAAKZ,WAAnB,EAAgC;AAC9BsD,oBAAQqB,OAAO5D,IAAP,IAAegB,MAAvB;AACD,WAFD,MAGK;AACH,gBAAI3B,SAAS,KAAKA,MAAL,CAAYQ,QAAQ,CAApB,CAAb;AACA,iBAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAI/B,OAAOO,MAA3B,EAAmCwB,GAAnC,EAAwC;AACtCmB,uBAASlD,OAAO+B,CAAP,IAAY,KAAKjC,OAAL,CAAaU,QAAQ,CAArB,EAAwBuB,CAAxB,EAA2BpB,IAA3B,CAArB;AACD;AACF;AACD,eAAKT,MAAL,CAAYM,KAAZ,EAAmBG,IAAnB,IAA2BuC,KAA3B;AACA,eAAKlD,MAAL,CAAYQ,KAAZ,EAAmBG,IAAnB,IAA2BuC,QAAQvB,MAAR,IAAkB,IAAIA,MAAtB,CAA3B;AACD;AACF;AACF;;AAED;;;;;;;yCAIqB4C,M,EAAQ;AAC3B,WAAK,IAAI/D,QAAQ,KAAKZ,WAAtB,EAAmCY,SAAS,CAA5C,EAA+CA,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKhB,KAAL,CAAWa,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIgB,SAAS,KAAK5B,OAAL,CAAaS,KAAb,EAAoBG,IAApB,CAAb;;AAEA,cAAIuC,QAAQ,CAAZ;AACA,cAAI1C,UAAU,KAAKZ,WAAnB,EAAgC;AAC9BsD,oBAAQqB,OAAO5D,IAAP,IAAegB,MAAvB;AACD,WAFD,MAGK;AACH,gBAAI3B,SAAS,KAAKA,MAAL,CAAYQ,QAAQ,CAApB,CAAb;AACA,iBAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAI/B,OAAOO,MAA3B,EAAmCwB,GAAnC,EAAwC;AACtCmB,uBAASlD,OAAO+B,CAAP,IAAY,KAAKjC,OAAL,CAAaU,QAAQ,CAArB,EAAwBuB,CAAxB,EAA2BpB,IAA3B,CAArB;AACD;AACF;AACD,eAAKT,MAAL,CAAYM,KAAZ,EAAmBG,IAAnB,IAA2BuC,KAA3B;AACA,eAAKlD,MAAL,CAAYQ,KAAZ,EAAmBG,IAAnB,IAA2BgB,SAAS,CAAT,GAAauB,KAAb,GAAqB,CAAhD;AACD;AACF;AACF;;AAED;;;;;;;8CAI0BqB,M,EAAQ;AAChC,WAAK,IAAI/D,QAAQ,KAAKZ,WAAtB,EAAmCY,SAAS,CAA5C,EAA+CA,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKhB,KAAL,CAAWa,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIgB,SAAS,KAAK5B,OAAL,CAAaS,KAAb,EAAoBG,IAApB,CAAb;;AAEA,cAAIuC,QAAQ,CAAZ;AACA,cAAI1C,UAAU,KAAKZ,WAAnB,EAAgC;AAC9BsD,oBAAQqB,OAAO5D,IAAP,IAAegB,MAAvB;AACD,WAFD,MAGK;AACH,gBAAI3B,SAAS,KAAKA,MAAL,CAAYQ,QAAQ,CAApB,CAAb;AACA,iBAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAI/B,OAAOO,MAA3B,EAAmCwB,GAAnC,EAAwC;AACtCmB,uBAASlD,OAAO+B,CAAP,IAAY,KAAKjC,OAAL,CAAaU,QAAQ,CAArB,EAAwBuB,CAAxB,EAA2BpB,IAA3B,CAArB;AACD;AACF;AACD,eAAKT,MAAL,CAAYM,KAAZ,EAAmBG,IAAnB,IAA2BuC,KAA3B;AACA,eAAKlD,MAAL,CAAYQ,KAAZ,EAAmBG,IAAnB,IAA2BgB,SAAS,CAAT,GAAauB,KAAb,GAAqB,OAAOA,KAAvD;AACD;AACF;AACF;;AAED;;;;;;;yCAIqBqB,M,EAAQ;AAC3B,WAAK,IAAI/D,QAAQ,KAAKZ,WAAtB,EAAmCY,SAAS,CAA5C,EAA+CA,OAA/C,EAAwD;AACtD,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKhB,KAAL,CAAWa,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIgB,SAAS,KAAK5B,OAAL,CAAaS,KAAb,EAAoBG,IAApB,CAAb;;AAEA,cAAIuC,QAAQ,CAAZ;AACA,cAAI1C,UAAU,KAAKZ,WAAnB,EAAgC;AAC9BsD,oBAAQqB,OAAO5D,IAAP,IAAegB,MAAvB;AACD,WAFD,MAGK;AACH,gBAAI3B,SAAS,KAAKA,MAAL,CAAYQ,QAAQ,CAApB,CAAb;AACA,iBAAK,IAAIuB,IAAI,CAAb,EAAgBA,IAAI/B,OAAOO,MAA3B,EAAmCwB,GAAnC,EAAwC;AACtCmB,uBAASlD,OAAO+B,CAAP,IAAY,KAAKjC,OAAL,CAAaU,QAAQ,CAArB,EAAwBuB,CAAxB,EAA2BpB,IAA3B,CAArB;AACD;AACF;AACD,eAAKT,MAAL,CAAYM,KAAZ,EAAmBG,IAAnB,IAA2BuC,KAA3B;AACA,eAAKlD,MAAL,CAAYQ,KAAZ,EAAmBG,IAAnB,IAA2B,CAAC,IAAIgB,SAASA,MAAd,IAAwBuB,KAAnD;AACD;AACF;AACF;;AAED;;;;;;;qCAIiB;AACf,WAAK,IAAI1C,QAAQ,CAAjB,EAAoBA,SAAS,KAAKZ,WAAlC,EAA+CY,OAA/C,EAAwD;AACtD,YAAIkE,WAAW,KAAK3E,OAAL,CAAaS,QAAQ,CAArB,CAAf;;AAEA,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKhB,KAAL,CAAWa,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAIgE,QAAQ,KAAK3E,MAAL,CAAYQ,KAAZ,EAAmBG,IAAnB,CAAZ;;AAEA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAI2C,SAASnE,MAA7B,EAAqCwB,GAArC,EAA0C;AACxC,gBAAI6C,SAAS,KAAK3E,OAAL,CAAaO,KAAb,EAAoBG,IAApB,EAA0BoB,CAA1B,CAAb;;AAEA6C,qBAAU,KAAKnF,SAAL,CAAevB,YAAf,GAA8ByG,KAA9B,GAAsCD,SAAS3C,CAAT,CAAvC,GACJ,KAAKtC,SAAL,CAAetB,QAAf,GAA0ByG,MAD/B;;AAGA,iBAAK3E,OAAL,CAAaO,KAAb,EAAoBG,IAApB,EAA0BoB,CAA1B,IAA+B6C,MAA/B;AACA,iBAAK9E,OAAL,CAAaU,KAAb,EAAoBG,IAApB,EAA0BoB,CAA1B,KAAgC6C,MAAhC;AACD;AACD,eAAK/E,MAAL,CAAYW,KAAZ,EAAmBG,IAAnB,KAA4B,KAAKlB,SAAL,CAAevB,YAAf,GAA8ByG,KAA1D;AACD;AACF;AACF;;;iCAEY;AACX,WAAKE,cAAL,GAAsB,EAAtB;AACA,WAAKC,eAAL,GAAuB,EAAvB;AACA,WAAKC,UAAL,GAAkB,EAAlB;AACA,WAAKC,WAAL,GAAmB,EAAnB;AACA,WAAKnH,UAAL,GAAkB,CAAlB;;AAEA,WAAK,IAAI2C,QAAQ,CAAjB,EAAoBA,SAAS,KAAKZ,WAAlC,EAA+CY,OAA/C,EAAwD;AACtD,YAAIC,OAAO,KAAKd,KAAL,CAAWa,KAAX,CAAX;AACA,YAAIA,QAAQ,CAAZ,EAAe;AACb,eAAKqE,cAAL,CAAoBrE,KAApB,IAA6B,qBAAMC,IAAN,CAA7B;AACA,eAAKqE,eAAL,CAAqBtE,KAArB,IAA8B,qBAAMC,IAAN,CAA9B;AACA,eAAKsE,UAAL,CAAgBvE,KAAhB,IAAyB,IAAIE,KAAJ,CAAUD,IAAV,CAAzB;AACA,eAAKuE,WAAL,CAAiBxE,KAAjB,IAA0B,IAAIE,KAAJ,CAAUD,IAAV,CAA1B;;AAEA,eAAK,IAAIE,OAAO,CAAhB,EAAmBA,OAAOF,IAA1B,EAAgCE,MAAhC,EAAwC;AACtC,gBAAIC,WAAW,KAAKjB,KAAL,CAAWa,QAAQ,CAAnB,CAAf;AACA,iBAAKuE,UAAL,CAAgBvE,KAAhB,EAAuBG,IAAvB,IAA+B,qBAAMC,QAAN,CAA/B;AACA,iBAAKoE,WAAL,CAAiBxE,KAAjB,EAAwBG,IAAxB,IAAgC,qBAAMC,QAAN,CAAhC;AACD;AACF;AACF;;AAED,WAAK6D,cAAL,GAAsB,KAAKQ,kBAA3B;AACD;;;yCAEoB;AACnB,UAAMxF,YAAY,KAAKA,SAAvB;AACA,WAAK5B,UAAL;;AAEA,WAAK,IAAI2C,QAAQ,CAAjB,EAAoBA,SAAS,KAAKZ,WAAlC,EAA+CY,OAA/C,EAAwD;AACtD,YAAMkE,WAAW,KAAK3E,OAAL,CAAaS,QAAQ,CAArB,CAAjB;;AAEA,aAAK,IAAIG,OAAO,CAAhB,EAAmBA,OAAO,KAAKhB,KAAL,CAAWa,KAAX,CAA1B,EAA6CG,MAA7C,EAAqD;AACnD,cAAMgE,QAAQ,KAAK3E,MAAL,CAAYQ,KAAZ,EAAmBG,IAAnB,CAAd;;AAEA,eAAK,IAAIoB,IAAI,CAAb,EAAgBA,IAAI2C,SAASnE,MAA7B,EAAqCwB,GAArC,EAA0C;AACxC,gBAAMmD,WAAWP,QAAQD,SAAS3C,CAAT,CAAzB;AACA,gBAAMoD,YAAY,KAAKJ,UAAL,CAAgBvE,KAAhB,EAAuBG,IAAvB,EAA6BoB,CAA7B,IAAkCtC,UAAUT,KAA5C,GAAoD,CAAC,IAAIS,UAAUT,KAAf,IAAwBkG,QAA9F;AACA,gBAAME,aAAa,KAAKJ,WAAL,CAAiBxE,KAAjB,EAAwBG,IAAxB,EAA8BoB,CAA9B,IAAmCtC,UAAUR,KAA7C,GAAqD,CAAC,IAAIQ,UAAUR,KAAf,IAAwBiG,QAAxB,GAAmCA,QAA3G;;AAEA,gBAAMG,qBAAqBF,aAAa,IAAInD,KAAKsD,GAAL,CAAS7F,UAAUT,KAAnB,EAA0B,KAAKnB,UAA/B,CAAjB,CAA3B;AACA,gBAAM0H,qBAAqBH,cAAc,IAAIpD,KAAKsD,GAAL,CAAS7F,UAAUR,KAAnB,EAA0B,KAAKpB,UAA/B,CAAlB,CAA3B;;AAEA,iBAAKkH,UAAL,CAAgBvE,KAAhB,EAAuBG,IAAvB,EAA6BoB,CAA7B,IAAkCoD,SAAlC;AACA,iBAAKH,WAAL,CAAiBxE,KAAjB,EAAwBG,IAAxB,EAA8BoB,CAA9B,IAAmCqD,UAAnC;AACA,iBAAKtF,OAAL,CAAaU,KAAb,EAAoBG,IAApB,EAA0BoB,CAA1B,KAAgC,KAAKtC,SAAL,CAAevB,YAAf,GAA8BmH,kBAA9B,IAAoDrD,KAAKwD,IAAL,CAAUD,kBAAV,IAAgC9F,UAAUP,OAA9F,CAAhC;AACD;;AAED,cAAMuG,eAAe,KAAKzF,MAAL,CAAYQ,KAAZ,EAAmBG,IAAnB,CAArB;AACA,cAAM+E,gBAAgB,KAAKb,cAAL,CAAoBrE,KAApB,EAA2BG,IAA3B,IAAmClB,UAAUT,KAA7C,GAAqD,CAAC,IAAIS,UAAUT,KAAf,IAAwByG,YAAnG;AACA,cAAME,iBAAiB,KAAKb,eAAL,CAAqBtE,KAArB,EAA4BG,IAA5B,IAAoClB,UAAUR,KAA9C,GAAsD,CAAC,IAAIQ,UAAUR,KAAf,IAAwBwG,YAAxB,GAAuCA,YAApH;;AAEA,cAAMG,yBAAyB,KAAKf,cAAL,CAAoBrE,KAApB,EAA2BG,IAA3B,KAAoC,IAAIqB,KAAKsD,GAAL,CAAS7F,UAAUT,KAAnB,EAA0B,KAAKnB,UAA/B,CAAxC,CAA/B;AACA,cAAMgI,yBAAyB,KAAKf,eAAL,CAAqBtE,KAArB,EAA4BG,IAA5B,KAAqC,IAAIqB,KAAKsD,GAAL,CAAS7F,UAAUR,KAAnB,EAA0B,KAAKpB,UAA/B,CAAzC,CAA/B;;AAEA,eAAKgH,cAAL,CAAoBrE,KAApB,EAA2BG,IAA3B,IAAmC+E,aAAnC;AACA,eAAKZ,eAAL,CAAqBtE,KAArB,EAA4BG,IAA5B,IAAoCgF,cAApC;AACA,eAAK9F,MAAL,CAAYW,KAAZ,EAAmBG,IAAnB,KAA4BlB,UAAUvB,YAAV,GAAyB0H,sBAAzB,IAAmD5D,KAAKwD,IAAL,CAAUK,sBAAV,IAAoCpG,UAAUP,OAAjG,CAA5B;AACD;AACF;AACF;;AAED;;;;;;;;gCAKYiD,I,EAAM;AAAA;;AAChB,UAAI,CAACzB,MAAMoF,OAAN,CAAc3D,IAAd,CAAL,EAA0B;AAAE;AAC1B,YAAI4D,MAAM,EAAV;AACAA,YAAI3D,IAAJ,CAASD,IAAT;AACAA,eAAO4D,GAAP;AACD;AACD;AACA,UAAIC,QAAQ7D,KAAK,CAAL,EAAQb,KAApB;AACA,UAAI,CAACZ,MAAMoF,OAAN,CAAcE,KAAd,CAAD,IAAyB,EAAEA,iBAAiBC,YAAnB,CAA7B,EAA+D;AAC7D,YAAI,CAAC,KAAKzE,WAAV,EAAuB;AACrB,eAAKA,WAAL,GAAmBC,iBAAOyE,WAAP,CAAmB/D,KAAKgE,GAAL,CAAS;AAAA,mBAASC,MAAM,OAAN,CAAT;AAAA,WAAT,CAAnB,CAAnB;AACD;AACDjE,eAAOA,KAAKgE,GAAL,CAAS,iBAAS;AACvB,cAAIE,QAAQ5E,iBAAOC,OAAP,CAAe,OAAKF,WAApB,EAAiCwE,MAAM1E,KAAvC,CAAZ;AACA,iBAAO/C,OAAOe,MAAP,CAAc,EAAd,EAAkB0G,KAAlB,EAAyB,EAAE1E,OAAO+E,KAAT,EAAzB,CAAP;AACD,SAHM,EAGJ,IAHI,CAAP;AAID;;AAED,UAAI,CAAC3F,MAAMoF,OAAN,CAAc3D,KAAK,CAAL,EAAQR,MAAtB,CAAL,EAAoC;AAClC,YAAI,CAAC,KAAKC,YAAV,EAAwB;AACtB,eAAKA,YAAL,GAAoBH,iBAAOyE,WAAP,CAAmB/D,KAAKgE,GAAL,CAAS;AAAA,mBAASC,MAAM,QAAN,CAAT;AAAA,WAAT,CAAnB,CAApB;AACD;AACDjE,eAAOA,KAAKgE,GAAL,CAAS,iBAAS;AACvB,cAAIE,QAAQ5E,iBAAOC,OAAP,CAAe,OAAKE,YAApB,EAAkCoE,MAAMrE,MAAxC,CAAZ;AACA,iBAAOpD,OAAOe,MAAP,CAAc,EAAd,EAAkB0G,KAAlB,EAAyB,EAAErE,QAAQ0E,KAAV,EAAzB,CAAP;AACD,SAHM,EAGJ,IAHI,CAAP;AAID;AACD,aAAOlE,IAAP;AACD;;AAED;;;;;;;;;;;;;yBAUKA,I,EAAM;AAAA;;AACTA,aAAO,KAAKoB,WAAL,CAAiBpB,IAAjB,CAAP;;AAEA;AACA,UAAImE,WAAWnE,KAAK,CAAL,EAAQR,MAAR,CAAepB,MAAf,KAA0B,CAAzC;AACA,UAAIgG,WAAW,CAAf;AACA,UAAIC,WAAW,CAAf;AACA,UAAIC,UAAU,CAAd;AACA,UAAIC,UAAU,CAAd;;AAEA;AACA,UAAIC,aAAa,EAAjB;;AAEA;AACA;AACA,UAAI7E,MAAM,CAAV;;AAfS,iCAgBAgB,CAhBA;AAiBP,YAAInB,SAAS,OAAKtB,QAAL,CAAc8B,KAAKW,CAAL,EAAQxB,KAAtB,CAAb;AACA,YAAIiD,SAASpC,KAAKW,CAAL,EAAQnB,MAArB;;AAEA,YAAIiF,eAAJ;AAAA,YAAYC,iBAAZ;AACA,YAAIP,QAAJ,EAAc;AACZM,mBAASjF,OAAO,CAAP,IAAY,OAAKxC,YAAjB,GAAgC,CAAhC,GAAoC,CAA7C;AACA0H,qBAAWtC,OAAO,CAAP,CAAX;AACD,SAHD,MAIK;AACHqC,mBAASjF,OAAOmF,OAAP,CAAe,mBAAInF,MAAJ,CAAf,CAAT;AACAkF,qBAAWtC,OAAOuC,OAAP,CAAe,mBAAIvC,MAAJ,CAAf,CAAX;AACD;;AAED,YAAIqC,WAAWC,QAAf,EAAyB;AACvB,cAAIE,WAAW5E,KAAKW,CAAL,CAAf;AACAvE,iBAAOe,MAAP,CAAcyH,QAAd,EAAwB;AACtBH,oBAAQA,MADc;AAEtBC,sBAAUA;AAFY,WAAxB;AAIAF,qBAAWvE,IAAX,CAAgB2E,QAAhB;AACD;;AAED,YAAIT,QAAJ,EAAc;AACZ,cAAIM,WAAW,CAAX,IAAgBC,aAAa,CAAjC,EAAoC;AAClCH;AACD,WAFD,MAEO,IAAIE,WAAW,CAAX,IAAgBC,aAAa,CAAjC,EAAoC;AACzCJ;AACD,WAFM,MAEA,IAAIG,WAAW,CAAX,IAAgBC,aAAa,CAAjC,EAAoC;AACzCL;AACD,WAFM,MAEA,IAAII,WAAW,CAAX,IAAgBC,aAAa,CAAjC,EAAoC;AACzCN;AACD;AACF;;AAED,YAAIrG,SAASyB,OAAOwE,GAAP,CAAW,UAACC,KAAD,EAAQtD,CAAR,EAAc;AACpC,iBAAOyB,OAAOzB,CAAP,IAAYsD,KAAnB;AACD,SAFY,CAAb;AAGAtE,eAAO,mBAAI5B,MAAJ,CAAP;AAtDO;;AAgBT,WAAK,IAAI4C,IAAI,CAAb,EAAgBA,IAAIX,KAAK5B,MAAzB,EAAiCuC,GAAjC,EAAsC;AAAA,cAA7BA,CAA6B;AAuCrC;AACD,UAAII,QAAQpB,MAAMK,KAAK5B,MAAvB;;AAEA,UAAIyG,QAAQ;AACV9D,eAAOA,KADG;AAEVyD,oBAAYA;AAFF,OAAZ;;AAKA,UAAIL,QAAJ,EAAc;AACZ/H,eAAOe,MAAP,CAAc0H,KAAd,EAAqB;AACnBN,mBAASA,OADU;AAEnBD,mBAASA,OAFU;AAGnBD,oBAAUA,QAHS;AAInBD,oBAAUA,QAJS;AAKnBU,iBAAO9E,KAAK5B,MALO;AAMnB2G,qBAAWT,UAAU,CAAV,GAAcA,WAAWA,UAAUF,QAArB,CAAd,GAA+C,CANvC;AAOnBY,kBAAQV,UAAU,CAAV,GAAcA,WAAWA,UAAUD,QAArB,CAAd,GAA+C,CAPpC;AAQnBY,oBAAU,CAACV,UAAUD,OAAX,IAAsBtE,KAAK5B;AARlB,SAArB;AAUD;AACD,aAAOyG,KAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAoCS;AACP,UAAIK,SAAS,EAAb;AACA,WAAK,IAAI7G,QAAQ,CAAjB,EAAoBA,SAAS,KAAKZ,WAAlC,EAA+CY,OAA/C,EAAwD;AACtD6G,eAAO7G,KAAP,IAAgB,EAAhB;;AAEA,YAAI8G,cAAJ;AACA;AACA,YAAI9G,UAAU,CAAV,IAAe,KAAKgB,WAAxB,EAAqC;AACnC8F,kBAAQ/I,OAAOC,IAAP,CAAY,KAAKgD,WAAjB,CAAR;AACD,SAFD,MAGK,IAAIhB,UAAU,KAAKZ,WAAf,IAA8B,KAAKgC,YAAvC,EAAqD;AACxD0F,kBAAQ/I,OAAOC,IAAP,CAAY,KAAKoD,YAAjB,CAAR;AACD,SAFI,MAGA;AACH0F,kBAAQ,qBAAM,CAAN,EAAS,KAAK3H,KAAL,CAAWa,KAAX,CAAT,CAAR;AACD;;AAED,aAAK,IAAI+G,IAAI,CAAb,EAAgBA,IAAID,MAAM/G,MAA1B,EAAkCgH,GAAlC,EAAuC;AACrC,cAAI5G,OAAO2G,MAAMC,CAAN,CAAX;AACAF,iBAAO7G,KAAP,EAAcG,IAAd,IAAsB,EAAtB;;AAEA,cAAIH,QAAQ,CAAZ,EAAe;AACb6G,mBAAO7G,KAAP,EAAcG,IAAd,EAAoB6G,IAApB,GAA2B,KAAK3H,MAAL,CAAYW,KAAZ,EAAmB+G,CAAnB,CAA3B;AACAF,mBAAO7G,KAAP,EAAcG,IAAd,EAAoBb,OAApB,GAA8B,EAA9B;AACA,iBAAK,IAAIiC,CAAT,IAAcsF,OAAO7G,QAAQ,CAAf,CAAd,EAAiC;AAC/B,kBAAIiH,QAAQ1F,CAAZ;AACA,kBAAIvB,UAAU,CAAV,IAAe,KAAKgB,WAAxB,EAAqC;AACnCiG,wBAAQ,KAAKjG,WAAL,CAAiBO,CAAjB,CAAR;AACD;AACDsF,qBAAO7G,KAAP,EAAcG,IAAd,EAAoBb,OAApB,CAA4BiC,CAA5B,IAAiC,KAAKjC,OAAL,CAAaU,KAAb,EAAoB+G,CAApB,EAAuBE,KAAvB,CAAjC;AACD;AACF;AACF;AACF;AACD,aAAO;AACL9H,eAAO,KAAKA,KADP;AAEL0H,sBAFK;AAGLzF,sBAAa,CAAC,CAAC,KAAKA,YAHf;AAILJ,qBAAY,CAAC,CAAC,KAAKA,WAJd;AAKLnC,oBAAY,KAAKA,UALZ;AAMLI,mBAAW,KAAKiI,iBAAL;AANN,OAAP;AAQD;;AAED;;;;;;;;6BAKSC,I,EAAM;AACb,WAAKhI,KAAL,GAAagI,KAAKhI,KAAlB;AACA,WAAK4C,WAAL;;AAEA,WAAK,IAAIO,IAAI,CAAb,EAAgBA,KAAK,KAAKlD,WAA1B,EAAuCkD,GAAvC,EAA4C;AAC1C,YAAItC,QAAQmH,KAAKN,MAAL,CAAYvE,CAAZ,CAAZ;AACA,YAAIA,MAAM,CAAN,KAAY,CAACtC,MAAM,CAAN,CAAD,IAAamH,KAAKnG,WAA9B,CAAJ,EAAgD;AAC9C,eAAKA,WAAL,GAAmBC,iBAAOmG,cAAP,CAAsBpH,KAAtB,CAAnB;AACD,SAFD,MAGK,IAAIsC,MAAM,KAAKlD,WAAX,KAA2B,CAACY,MAAM,CAAN,CAAD,IAAamH,KAAK/F,YAA7C,CAAJ,EAAgE;AACnE,eAAKA,YAAL,GAAoBH,iBAAOmG,cAAP,CAAsBpH,KAAtB,CAApB;AACD;AACD,YAAIsC,IAAI,CAAR,EAAW;AACT,cAAMwE,QAAQ/I,OAAOC,IAAP,CAAYgC,KAAZ,CAAd;AACA,eAAKb,KAAL,CAAWmD,CAAX,IAAgBwE,MAAM/G,MAAtB;AACA,eAAK,IAAIgH,CAAT,IAAcD,KAAd,EAAqB;AACnB,gBAAM3G,OAAO2G,MAAMC,CAAN,CAAb;AACA,iBAAK1H,MAAL,CAAYiD,CAAZ,EAAeyE,CAAf,IAAoB/G,MAAMG,IAAN,EAAY6G,IAAhC;AACA,iBAAK1H,OAAL,CAAagD,CAAb,EAAgByE,CAAhB,IAAqB,uBAAQ/G,MAAMG,IAAN,EAAYb,OAApB,CAArB;AACD;AACF;AACF;AACD,UAAI6H,KAAKhJ,cAAL,CAAoB,WAApB,CAAJ,EAAsC;AACpC,aAAKe,sBAAL,CAA4BiI,KAAKlI,SAAjC;AACD;AACD,WAAKoB,aAAL,CAAmB,KAAKxB,UAAL,IAAmB,SAAtC;AACA,aAAO,IAAP;AACD;;AAED;;;;;;;iCAIa;AACX,UAAMA,aAAa,KAAKA,UAAxB;AACA,UAAIwI,WAAW,KAAf;AACA,eAASC,UAAT,CAAoBT,MAApB,EAA4BU,WAA5B,EAAyCC,OAAzC,EAAkD;AAChD,YAAID,gBAAgB,CAApB,EAAuB;AACrB,iBAAQ,OAAOC,OAAP,KAAmB,QAAnB,gBACMA,OADN,sBAEKA,OAFL,MAAR;AAGD;;AAED,YAAMxH,QAAQ6G,OAAOU,WAAP,CAAd;AACA,YAAMpH,OAAOH,MAAMwH,OAAN,CAAb;AACA,YAAIC,SAAS,CAAC,GAAD,EAAOtH,KAAK6G,IAAZ,CAAb;AACA,aAAK,IAAIU,CAAT,IAAcvH,KAAKb,OAAnB,EAA4B;AAC1B,cAAIa,KAAKb,OAAL,CAAaoI,CAAb,IAAkB,CAAtB,EAAyB;AACvBD,mBAAO7F,IAAP,CAAezB,KAAKb,OAAL,CAAaoI,CAAb,CAAf,SAAkCJ,WAAWT,MAAX,EAAmBU,cAAc,CAAjC,EAAoCG,CAApC,CAAlC;AACD,WAFD,MAEO;AACLD,mBAAO7F,IAAP,OAAgBzB,KAAKb,OAAL,CAAaoI,CAAb,CAAhB,SAAmCJ,WAAWT,MAAX,EAAmBU,cAAc,CAAjC,EAAoCG,CAApC,CAAnC;AACD;AACF;AACDD,eAAO7F,IAAP,CAAY,GAAZ;;AAEA,gBAAQ/C,UAAR;AACE,eAAK,SAAL;AACE,wCAA0B4I,OAAOE,IAAP,CAAY,EAAZ,CAA1B;AACF,eAAK,MAAL;AAAa;AACXN,yBAAW,IAAX;AACA,8BAAcI,OAAOE,IAAP,CAAY,EAAZ,CAAd;AACD;AACD,eAAK,YAAL;AAAmB;AACjBN,yBAAW,IAAX;AACA,8BAAcI,OAAOE,IAAP,CAAY,EAAZ,CAAd;AACD;AACD,eAAK,MAAL;AACE,kCAAoBF,OAAOE,IAAP,CAAY,EAAZ,CAApB;AACF;AACE,kBAAM,IAAItJ,KAAJ,CAAU,6BAA6BQ,UAAvC,CAAN;AAdJ;AAgBD;;AAED,UAAMgI,SAAS,KAAKe,MAAL,GAAcf,MAA7B;AACA,UAAMgB,eAAe,EAArB;AACA,UAAIJ,eAAJ;AACA,WAAK,IAAInF,CAAT,IAAcuE,OAAOA,OAAO9G,MAAP,GAAgB,CAAvB,CAAd,EAAyC;AACvC8H,qBAAajG,IAAb,CAAkB0F,WAAWT,MAAX,EAAmBA,OAAO9G,MAAP,GAAgB,CAAnC,EAAsCuC,CAAtC,CAAlB;AACD;AACD,UAAI,KAAKlB,YAAT,EAAuB;AACrBqG,uBACE1J,OAAOC,IAAP,CAAY,KAAKoD,YAAjB,EACGuE,GADH,CACO,UAACvH,GAAD,EAAMkE,CAAN;AAAA,wBAAgBlE,GAAhB,WAAwByJ,aAAavF,CAAb,CAAxB;AAAA,SADP,CADF;AAID,OALD,MAKO;AACLmF,uBAAaI,aAAaF,IAAb,CAAkB,GAAlB,CAAb;AACD;;AAED,aAAO,IAAIG,QAAJ,CAAa,OAAb,GAA0BT,WAAW,QAAX,GAAsB,EAAhD,gBAA6DI,MAA7D,OAAP;AACD;;;wBA7zBe;AAAA;;AACd,UAAG,CAAC,KAAK5H,QAAT,EAAkB;AAChBwC,gBAAQK,KAAR,CAAc,oEAAd;AACA,eAAO,KAAP;AACD;;AAED,UAAMqF,WAAW,CACf,OADe,EAEf,aAFe,EAGf,QAHe,EAIf,SAJe,EAKf,SALe,EAMf,QANe,EAOf,SAPe,EAQf,QARe,EASfC,MATe,CASR;AAAA,eAAK,OAAKC,CAAL,MAAY,IAAjB;AAAA,OATQ,CAAjB;;AAWA,UAAGF,SAAShI,MAAT,GAAkB,CAArB,EAAuB;AACrBsC,gBAAQK,KAAR,iGAA4GqF,SAASJ,IAAT,CAAc,IAAd,CAA5G;AACA,eAAO,KAAP;AACD;AACD,aAAO,IAAP;AACD;;;;;;kBAzKkBzK,a","file":"neural-network.js","sourcesContent":["import lookup from './lookup';\r\nimport max from './utilities/max';\r\nimport mse from './utilities/mse';\r\nimport randos from './utilities/randos';\r\nimport range from './utilities/range';\r\nimport toArray from './utilities/to-array';\r\nimport zeros from './utilities/zeros';\r\nimport Thaw from 'thaw.js';\r\n\r\n/**\r\n * @param {object} options\r\n * @constructor\r\n */\r\nexport default class NeuralNetwork {\r\n  static get trainDefaults() {\r\n    return {\r\n      iterations: 20000,    // the maximum times to iterate the training data\r\n      errorThresh: 0.005,   // the acceptable error percentage from training data\r\n      log: false,           // true to use console.log, when a function is supplied it is used\r\n      logPeriod: 10,        // iterations between logging out\r\n      learningRate: 0.3,    // multiply's against the input and the delta then adds to momentum\r\n      momentum: 0.1,        // multiply's against the specified \"change\" then adds to learning rate for change\r\n      callback: null,       // a periodic call back that can be triggered while training\r\n      callbackPeriod: 10,   // the number of iterations through the training data between callback calls\r\n      timeout: Infinity,    // the max number of milliseconds to train for\r\n      praxis: null,\r\n      beta1: 0.9,\r\n      beta2: 0.999,\r\n      epsilon: 1e-8,\r\n    };\r\n  }\r\n\r\n  static get defaults() {\r\n    return {\r\n      binaryThresh: 0.5,\r\n      hiddenLayers: [3],     // array of ints for the sizes of the hidden layers in the network\r\n      activation: 'sigmoid'  // Supported activation types ['sigmoid', 'relu', 'leaky-relu', 'tanh']\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param options\r\n   * @private\r\n   */\r\n  static _validateTrainingOptions(options) {\r\n    const validations = {\r\n      iterations: (val) => { return typeof val === 'number' && val > 0; },\r\n      errorThresh: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\r\n      log: (val) => { return typeof val === 'function' || typeof val === 'boolean'; },\r\n      logPeriod: (val) => { return typeof val === 'number' && val > 0; },\r\n      learningRate: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\r\n      momentum: (val) => { return typeof val === 'number' && val > 0 && val < 1; },\r\n      callback: (val) => { return typeof val === 'function' || val === null },\r\n      callbackPeriod: (val) => { return typeof val === 'number' && val > 0; },\r\n      timeout: (val) => { return typeof val === 'number' && val > 0 }\r\n    };\r\n    Object.keys(NeuralNetwork.trainDefaults).forEach(key => {\r\n      if (validations.hasOwnProperty(key) && !validations[key](options[key])) {\r\n        throw new Error(`[${key}, ${options[key]}] is out of normal training range, your network will probably not train.`);\r\n      }\r\n    });\r\n  }\r\n\r\n  constructor(options = {}) {\r\n    Object.assign(this, this.constructor.defaults, options);\r\n    this.hiddenLayers = options.hiddenLayers;\r\n    this.trainOpts = {};\r\n    this._updateTrainingOptions(Object.assign({}, this.constructor.trainDefaults, options));\r\n\r\n    this.sizes = null;\r\n    this.outputLayer = null;\r\n    this.biases = null; // weights for bias nodes\r\n    this.weights = null;\r\n    this.outputs = null;\r\n\r\n    // state for training\r\n    this.deltas = null;\r\n    this.changes = null; // for momentum\r\n    this.errors = null;\r\n    this.errorCheckInterval = 1;\r\n    if (!this.constructor.prototype.hasOwnProperty('runInput')) {\r\n      this.runInput = null;\r\n    }\r\n    if (!this.constructor.prototype.hasOwnProperty('calculateDeltas')) {\r\n      this.calculateDeltas = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Expects this.sizes to have been set\r\n   */\r\n  _initialize() {\r\n    if (!this.sizes) throw new Error ('Sizes must be set before initializing');\r\n\r\n    this.outputLayer = this.sizes.length - 1;\r\n    this.biases = []; // weights for bias nodes\r\n    this.weights = [];\r\n    this.outputs = [];\r\n\r\n    // state for training\r\n    this.deltas = [];\r\n    this.changes = []; // for momentum\r\n    this.errors = [];\r\n\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      let size = this.sizes[layer];\r\n      this.deltas[layer] = zeros(size);\r\n      this.errors[layer] = zeros(size);\r\n      this.outputs[layer] = zeros(size);\r\n\r\n      if (layer > 0) {\r\n        this.biases[layer] = randos(size);\r\n        this.weights[layer] = new Array(size);\r\n        this.changes[layer] = new Array(size);\r\n\r\n        for (let node = 0; node < size; node++) {\r\n          let prevSize = this.sizes[layer - 1];\r\n          this.weights[layer][node] = randos(prevSize);\r\n          this.changes[layer][node] = zeros(prevSize);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.setActivation();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param activation supported inputs: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\r\n   */\r\n  setActivation(activation) {\r\n    this.activation = (activation) ? activation : this.activation;\r\n    switch (this.activation) {\r\n      case 'sigmoid':\r\n        this.runInput = this.runInput || this._runInputSigmoid;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasSigmoid;\r\n        break;\r\n      case 'relu':\r\n        this.runInput = this.runInput || this._runInputRelu;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasRelu;\r\n        break;\r\n      case 'leaky-relu':\r\n        this.runInput = this.runInput || this._runInputLeakyRelu;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasLeakyRelu;\r\n        break;\r\n      case 'tanh':\r\n        this.runInput = this.runInput || this._runInputTanh;\r\n        this.calculateDeltas = this.calculateDeltas || this._calculateDeltasTanh;\r\n        break;\r\n      default:\r\n        throw new Error('unknown activation ' + this.activation + ', The activation should be one of [\\'sigmoid\\', \\'relu\\', \\'leaky-relu\\', \\'tanh\\']');\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns boolean\r\n   */\r\n  get isRunnable(){\r\n    if(!this.runInput){\r\n      console.error('Activation function has not been initialized, did you run train()?');\r\n      return false;\r\n    }\r\n\r\n    const checkFns = [\r\n      'sizes',\r\n      'outputLayer',\r\n      'biases',\r\n      'weights',\r\n      'outputs',\r\n      'deltas',\r\n      'changes',\r\n      'errors',\r\n    ].filter(c => this[c] === null);\r\n\r\n    if(checkFns.length > 0){\r\n      console.error(`Some settings have not been initialized correctly, did you run train()? Found issues with: ${checkFns.join(', ')}`);\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   * @returns {*}\r\n   */\r\n  run(input) {\r\n    if (!this.isRunnable) return null;\r\n    if (this.inputLookup) {\r\n      input = lookup.toArray(this.inputLookup, input);\r\n    }\r\n\r\n    let output = [...this.runInput(input)];\r\n\r\n    if (this.outputLookup) {\r\n      output = lookup.toHash(this.outputLookup, output);\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * trains via sigmoid\r\n   * @param input\r\n   * @returns {*}\r\n   */\r\n  _runInputSigmoid(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //sigmoid\r\n        this.outputs[layer][node] = 1 / (1 + Math.exp(-sum));\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  _runInputRelu(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //relu\r\n        this.outputs[layer][node] = (sum < 0 ? 0 : sum);\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  _runInputLeakyRelu(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //leaky relu\r\n        this.outputs[layer][node] = (sum < 0 ? 0 : 0.01 * sum);\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  _runInputTanh(input) {\r\n    this.outputs[0] = input;  // set output state of input layer\r\n\r\n    let output = null;\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let weights = this.weights[layer][node];\r\n\r\n        let sum = this.biases[layer][node];\r\n        for (let k = 0; k < weights.length; k++) {\r\n          sum += weights[k] * input[k];\r\n        }\r\n        //tanh\r\n        this.outputs[layer][node] = Math.tanh(sum);\r\n      }\r\n      output = input = this.outputs[layer];\r\n    }\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * Verifies network sizes are initilaized\r\n   * If they are not it will initialize them based off the data set.\r\n   */\r\n  _verifyIsInitialized(data) {\r\n    if (this.sizes) return;\r\n\r\n    this.sizes = [];\r\n    this.sizes.push(data[0].input.length);\r\n    if (!this.hiddenLayers) {\r\n      this.sizes.push(Math.max(3, Math.floor(data[0].input.length / 2)));\r\n    } else {\r\n      this.hiddenLayers.forEach(size => {\r\n        this.sizes.push(size);\r\n      });\r\n    }\r\n    this.sizes.push(data[0].output.length);\r\n\r\n    this._initialize();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param opts\r\n   *    Supports all `trainDefaults` properties\r\n   *    also supports:\r\n   *       learningRate: (number),\r\n   *       momentum: (number),\r\n   *       activation: 'sigmoid', 'relu', 'leaky-relu', 'tanh'\r\n   */\r\n  _updateTrainingOptions(opts) {\r\n    Object.keys(NeuralNetwork.trainDefaults).forEach(opt => this.trainOpts[opt] = (opts.hasOwnProperty(opt)) ? opts[opt] : this.trainOpts[opt]);\r\n    NeuralNetwork._validateTrainingOptions(this.trainOpts);\r\n    this._setLogMethod(opts.log || this.trainOpts.log);\r\n    this.activation = opts.activation || this.activation;\r\n  }\r\n\r\n  /**\r\n   *\r\n   *  Gets JSON of trainOpts object\r\n   *    NOTE: Activation is stored directly on JSON object and not in the training options\r\n   */\r\n  _getTrainOptsJSON() {\r\n    return Object.keys(NeuralNetwork.trainDefaults)\r\n      .reduce((opts, opt) => {\r\n        if (opt === 'timeout' && this.trainOpts[opt] === Infinity) return opts;\r\n        if (this.trainOpts[opt]) opts[opt] = this.trainOpts[opt];\r\n        if (opt === 'log') opts.log = typeof opts.log === 'function';\r\n        return opts;\r\n      }, {});\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param log\r\n   * if a method is passed in method is used\r\n   * if false passed in nothing is logged\r\n   * @returns error\r\n   */\r\n  _setLogMethod(log) {\r\n    if (typeof log === 'function'){\r\n      this.trainOpts.log = log;\r\n    } else if (log) {\r\n      this.trainOpts.log = console.log;\r\n    } else {\r\n      this.trainOpts.log = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @returns {Number} error\r\n   */\r\n  _calculateTrainingError(data) {\r\n    let sum = 0;\r\n    for (let i = 0; i < data.length; ++i) {\r\n      sum += this._trainPattern(data[i].input, data[i].output, true);\r\n    }\r\n    return sum / data.length;\r\n  }\r\n\r\n  /**\r\n   * @param data\r\n   * @private\r\n   */\r\n  _trainPatterns(data) {\r\n    for (let i = 0; i < data.length; ++i) {\r\n      this._trainPattern(data[i].input, data[i].output, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param {object} data\r\n   * @param {object} status { iterations: number, error: number }\r\n   * @param endTime\r\n   */\r\n  _trainingTick(data, status, endTime) {\r\n    if (status.iterations >= this.trainOpts.iterations || status.error <= this.trainOpts.errorThresh || Date.now() >= endTime) {\r\n      return false;\r\n    }\r\n\r\n    status.iterations++;\r\n\r\n    if (this.trainOpts.log && (status.iterations % this.trainOpts.logPeriod === 0)) {\r\n      status.error = this._calculateTrainingError(data);\r\n      this.trainOpts.log(`iterations: ${status.iterations}, training error: ${status.error}`);\r\n    } else {\r\n      if (status.iterations % this.errorCheckInterval === 0) {\r\n        status.error = this._calculateTrainingError(data);\r\n      } else {\r\n        this._trainPatterns(data);\r\n      }\r\n    }\r\n\r\n    if (this.trainOpts.callback && (status.iterations % this.trainOpts.callbackPeriod === 0)) {\r\n      this.trainOpts.callback(Object.assign(status));\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param options\r\n   * @protected\r\n   * @return { data, status, endTime }\r\n   */\r\n  _prepTraining(data, options) {\r\n    this._updateTrainingOptions(options);\r\n    data = this._formatData(data);\r\n    const endTime = Date.now() + this.trainOpts.timeout;\r\n\r\n    const status = {\r\n      error: 1,\r\n      iterations: 0\r\n    };\r\n\r\n    this._verifyIsInitialized(data);\r\n\r\n    return {\r\n      data,\r\n      status,\r\n      endTime\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param options\r\n   * @returns {{error: number, iterations: number}}\r\n   */\r\n  train(data, options = {}) {\r\n    let status, endTime;\r\n    ({ data, status, endTime } = this._prepTraining(data, options));\r\n\r\n    if (options.praxis === 'adam') {\r\n      this._setupAdam();\r\n    }\r\n\r\n    while (this._trainingTick(data, status, endTime));\r\n    return status;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @param options\r\n   * @returns {Promise}\r\n   * @resolves {{error: number, iterations: number}}\r\n   * @rejects {{trainError: string, status: {error: number, iterations: number}}\r\n   */\r\n  trainAsync(data, options = {}) {\r\n    let status, endTime;\r\n    ({ data, status, endTime } = this._prepTraining(data, options));\r\n\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        const thawedTrain = new Thaw(new Array(this.trainOpts.iterations), {\r\n          delay: true,\r\n          each: () => this._trainingTick(data, status, endTime) || thawedTrain.stop(),\r\n          done: () => resolve(status)\r\n        });\r\n        thawedTrain.tick();\r\n      } catch (trainError) {\r\n        reject({trainError, status});\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param input\r\n   * @param target\r\n   */\r\n  _trainPattern(input, target, logErrorRate) {\r\n\r\n    // forward propagate\r\n    this.runInput(input);\r\n\r\n    // back propagate\r\n    this.calculateDeltas(target);\r\n    this._adjustWeights();\r\n\r\n    if  (logErrorRate) {\r\n      return mse(this.errors[this.outputLayer]);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasSigmoid(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = error * output * (1 - output);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasRelu(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = output > 0 ? error : 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasLeakyRelu(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = output > 0 ? error : 0.01 * error;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param target\r\n   */\r\n  _calculateDeltasTanh(target) {\r\n    for (let layer = this.outputLayer; layer >= 0; layer--) {\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let output = this.outputs[layer][node];\r\n\r\n        let error = 0;\r\n        if (layer === this.outputLayer) {\r\n          error = target[node] - output;\r\n        }\r\n        else {\r\n          let deltas = this.deltas[layer + 1];\r\n          for (let k = 0; k < deltas.length; k++) {\r\n            error += deltas[k] * this.weights[layer + 1][k][node];\r\n          }\r\n        }\r\n        this.errors[layer][node] = error;\r\n        this.deltas[layer][node] = (1 - output * output) * error;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Changes weights of networks\r\n   */\r\n  _adjustWeights() {\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      let incoming = this.outputs[layer - 1];\r\n\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        let delta = this.deltas[layer][node];\r\n\r\n        for (let k = 0; k < incoming.length; k++) {\r\n          let change = this.changes[layer][node][k];\r\n\r\n          change = (this.trainOpts.learningRate * delta * incoming[k])\r\n            + (this.trainOpts.momentum * change);\r\n\r\n          this.changes[layer][node][k] = change;\r\n          this.weights[layer][node][k] += change;\r\n        }\r\n        this.biases[layer][node] += this.trainOpts.learningRate * delta;\r\n      }\r\n    }\r\n  }\r\n\r\n  _setupAdam() {\r\n    this.biasChangesLow = [];\r\n    this.biasChangesHigh = [];\r\n    this.changesLow = [];\r\n    this.changesHigh = [];\r\n    this.iterations = 0;\r\n\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      let size = this.sizes[layer];\r\n      if (layer > 0) {\r\n        this.biasChangesLow[layer] = zeros(size);\r\n        this.biasChangesHigh[layer] = zeros(size);\r\n        this.changesLow[layer] = new Array(size);\r\n        this.changesHigh[layer] = new Array(size);\r\n\r\n        for (let node = 0; node < size; node++) {\r\n          let prevSize = this.sizes[layer - 1];\r\n          this.changesLow[layer][node] = zeros(prevSize);\r\n          this.changesHigh[layer][node] = zeros(prevSize);\r\n        }\r\n      }\r\n    }\r\n\r\n    this._adjustWeights = this._adjustWeightsAdam;\r\n  }\r\n\r\n  _adjustWeightsAdam() {\r\n    const trainOpts = this.trainOpts;\r\n    this.iterations++;\r\n\r\n    for (let layer = 1; layer <= this.outputLayer; layer++) {\r\n      const incoming = this.outputs[layer - 1];\r\n\r\n      for (let node = 0; node < this.sizes[layer]; node++) {\r\n        const delta = this.deltas[layer][node];\r\n\r\n        for (let k = 0; k < incoming.length; k++) {\r\n          const gradient = delta * incoming[k];\r\n          const changeLow = this.changesLow[layer][node][k] * trainOpts.beta1 + (1 - trainOpts.beta1) * gradient;\r\n          const changeHigh = this.changesHigh[layer][node][k] * trainOpts.beta2 + (1 - trainOpts.beta2) * gradient * gradient;\r\n          \r\n          const momentumCorrection = changeLow / (1 - Math.pow(trainOpts.beta1, this.iterations));\r\n          const gradientCorrection = changeHigh / (1 - Math.pow(trainOpts.beta2, this.iterations));\r\n\r\n          this.changesLow[layer][node][k] = changeLow;\r\n          this.changesHigh[layer][node][k] = changeHigh;\r\n          this.weights[layer][node][k] += this.trainOpts.learningRate * momentumCorrection / (Math.sqrt(gradientCorrection) + trainOpts.epsilon);\r\n        }\r\n\r\n        const biasGradient = this.deltas[layer][node];\r\n        const biasChangeLow = this.biasChangesLow[layer][node] * trainOpts.beta1 + (1 - trainOpts.beta1) * biasGradient;\r\n        const biasChangeHigh = this.biasChangesHigh[layer][node] * trainOpts.beta2 + (1 - trainOpts.beta2) * biasGradient * biasGradient;\r\n\r\n        const biasMomentumCorrection = this.biasChangesLow[layer][node] / (1 - Math.pow(trainOpts.beta1, this.iterations));\r\n        const biasGradientCorrection = this.biasChangesHigh[layer][node] / (1 - Math.pow(trainOpts.beta2, this.iterations));\r\n\r\n        this.biasChangesLow[layer][node] = biasChangeLow;\r\n        this.biasChangesHigh[layer][node] = biasChangeHigh;\r\n        this.biases[layer][node] += trainOpts.learningRate * biasMomentumCorrection / (Math.sqrt(biasGradientCorrection) + trainOpts.epsilon);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @returns {*}\r\n   */\r\n  _formatData(data) {\r\n    if (!Array.isArray(data)) { // turn stream datum into array\r\n      let tmp = [];\r\n      tmp.push(data);\r\n      data = tmp;\r\n    }\r\n    // turn sparse hash input into arrays with 0s as filler\r\n    let datum = data[0].input;\r\n    if (!Array.isArray(datum) && !(datum instanceof Float32Array)) {\r\n      if (!this.inputLookup) {\r\n        this.inputLookup = lookup.buildLookup(data.map(value => value['input']));\r\n      }\r\n      data = data.map(datum => {\r\n        let array = lookup.toArray(this.inputLookup, datum.input);\r\n        return Object.assign({}, datum, { input: array });\r\n      }, this);\r\n    }\r\n\r\n    if (!Array.isArray(data[0].output)) {\r\n      if (!this.outputLookup) {\r\n        this.outputLookup = lookup.buildLookup(data.map(value => value['output']));\r\n      }\r\n      data = data.map(datum => {\r\n        let array = lookup.toArray(this.outputLookup, datum.output);\r\n        return Object.assign({}, datum, { output: array });\r\n      }, this);\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param data\r\n   * @returns {\r\n   *  {\r\n   *    error: number,\r\n   *    misclasses: Array\r\n   *  }\r\n   * }\r\n   */\r\n  test(data) {\r\n    data = this._formatData(data);\r\n\r\n    // for binary classification problems with one output node\r\n    let isBinary = data[0].output.length === 1;\r\n    let falsePos = 0;\r\n    let falseNeg = 0;\r\n    let truePos = 0;\r\n    let trueNeg = 0;\r\n\r\n    // for classification problems\r\n    let misclasses = [];\r\n\r\n    // run each pattern through the trained network and collect\r\n    // error and misclassification statistics\r\n    let sum = 0;\r\n    for (let i = 0; i < data.length; i++) {\r\n      let output = this.runInput(data[i].input);\r\n      let target = data[i].output;\r\n\r\n      let actual, expected;\r\n      if (isBinary) {\r\n        actual = output[0] > this.binaryThresh ? 1 : 0;\r\n        expected = target[0];\r\n      }\r\n      else {\r\n        actual = output.indexOf(max(output));\r\n        expected = target.indexOf(max(target));\r\n      }\r\n\r\n      if (actual !== expected) {\r\n        let misclass = data[i];\r\n        Object.assign(misclass, {\r\n          actual: actual,\r\n          expected: expected\r\n        });\r\n        misclasses.push(misclass);\r\n      }\r\n\r\n      if (isBinary) {\r\n        if (actual === 0 && expected === 0) {\r\n          trueNeg++;\r\n        } else if (actual === 1 && expected === 1) {\r\n          truePos++;\r\n        } else if (actual === 0 && expected === 1) {\r\n          falseNeg++;\r\n        } else if (actual === 1 && expected === 0) {\r\n          falsePos++;\r\n        }\r\n      }\r\n\r\n      let errors = output.map((value, i) => {\r\n        return target[i] - value;\r\n      });\r\n      sum += mse(errors);\r\n    }\r\n    let error = sum / data.length;\r\n\r\n    let stats = {\r\n      error: error,\r\n      misclasses: misclasses\r\n    };\r\n\r\n    if (isBinary) {\r\n      Object.assign(stats, {\r\n        trueNeg: trueNeg,\r\n        truePos: truePos,\r\n        falseNeg: falseNeg,\r\n        falsePos: falsePos,\r\n        total: data.length,\r\n        precision: truePos > 0 ? truePos / (truePos + falsePos) : 0,\r\n        recall: truePos > 0 ? truePos / (truePos + falseNeg) : 0,\r\n        accuracy: (trueNeg + truePos) / data.length\r\n      });\r\n    }\r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns\r\n   *  {\r\n   *    layers: [\r\n   *      {\r\n   *        x: {},\r\n   *        y: {}\r\n   *      },\r\n   *      {\r\n   *        '0': {\r\n   *          bias: -0.98771313,\r\n   *          weights: {\r\n   *            x: 0.8374838,\r\n   *            y: 1.245858\r\n   *          },\r\n   *        '1': {\r\n   *          bias: 3.48192004,\r\n   *          weights: {\r\n   *            x: 1.7825821,\r\n   *            y: -2.67899\r\n   *          }\r\n   *        }\r\n   *      },\r\n   *      {\r\n   *        f: {\r\n   *          bias: 0.27205739,\r\n   *          weights: {\r\n   *            '0': 1.3161821,\r\n   *            '1': 2.00436\r\n   *          }\r\n   *        }\r\n   *      }\r\n   *    ]\r\n   *  }\r\n   */\r\n  toJSON() {\r\n    let layers = [];\r\n    for (let layer = 0; layer <= this.outputLayer; layer++) {\r\n      layers[layer] = {};\r\n\r\n      let nodes;\r\n      // turn any internal arrays back into hashes for readable json\r\n      if (layer === 0 && this.inputLookup) {\r\n        nodes = Object.keys(this.inputLookup);\r\n      }\r\n      else if (layer === this.outputLayer && this.outputLookup) {\r\n        nodes = Object.keys(this.outputLookup);\r\n      }\r\n      else {\r\n        nodes = range(0, this.sizes[layer]);\r\n      }\r\n\r\n      for (let j = 0; j < nodes.length; j++) {\r\n        let node = nodes[j];\r\n        layers[layer][node] = {};\r\n\r\n        if (layer > 0) {\r\n          layers[layer][node].bias = this.biases[layer][j];\r\n          layers[layer][node].weights = {};\r\n          for (let k in layers[layer - 1]) {\r\n            let index = k;\r\n            if (layer === 1 && this.inputLookup) {\r\n              index = this.inputLookup[k];\r\n            }\r\n            layers[layer][node].weights[k] = this.weights[layer][j][index];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return {\r\n      sizes: this.sizes,\r\n      layers,\r\n      outputLookup:!!this.outputLookup,\r\n      inputLookup:!!this.inputLookup,\r\n      activation: this.activation,\r\n      trainOpts: this._getTrainOptsJSON()\r\n    };\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param json\r\n   * @returns {NeuralNetwork}\r\n   */\r\n  fromJSON(json) {\r\n    this.sizes = json.sizes;\r\n    this._initialize();\r\n\r\n    for (let i = 0; i <= this.outputLayer; i++) {\r\n      let layer = json.layers[i];\r\n      if (i === 0 && (!layer[0] || json.inputLookup)) {\r\n        this.inputLookup = lookup.lookupFromHash(layer);\r\n      }\r\n      else if (i === this.outputLayer && (!layer[0] || json.outputLookup)) {\r\n        this.outputLookup = lookup.lookupFromHash(layer);\r\n      }\r\n      if (i > 0) {\r\n        const nodes = Object.keys(layer);\r\n        this.sizes[i] = nodes.length;\r\n        for (let j in nodes) {\r\n          const node = nodes[j];\r\n          this.biases[i][j] = layer[node].bias;\r\n          this.weights[i][j] = toArray(layer[node].weights);\r\n        }\r\n      }\r\n    }\r\n    if (json.hasOwnProperty('trainOpts')) {\r\n      this._updateTrainingOptions(json.trainOpts);\r\n    }\r\n    this.setActivation(this.activation || 'sigmoid');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns {Function}\r\n   */\r\n  toFunction() {\r\n    const activation = this.activation;\r\n    let needsVar = false;\r\n    function nodeHandle(layers, layerNumber, nodeKey) {\r\n      if (layerNumber === 0) {\r\n        return (typeof nodeKey === 'string'\r\n          ? `input['${nodeKey}']`\r\n          : `input[${nodeKey}]`);\r\n      }\r\n\r\n      const layer = layers[layerNumber];\r\n      const node = layer[nodeKey];\r\n      let result = ['(' , node.bias];\r\n      for (let w in node.weights) {\r\n        if (node.weights[w] < 0) {\r\n          result.push(`${node.weights[w]}*${nodeHandle(layers, layerNumber - 1, w)}`);\r\n        } else {\r\n          result.push(`+${node.weights[w]}*${nodeHandle(layers, layerNumber - 1, w)}`);\r\n        }\r\n      }\r\n      result.push(')');\r\n\r\n      switch (activation) {\r\n        case 'sigmoid':\r\n          return `1/(1+1/Math.exp(${result.join('')}))`;\r\n        case 'relu': {\r\n          needsVar = true;\r\n          return `((v=${result.join('')})<0?0:v)`;\r\n        }\r\n        case 'leaky-relu': {\r\n          needsVar = true;\r\n          return `((v=${result.join('')})<0?0:0.01*v)`;\r\n        }\r\n        case 'tanh':\r\n          return `Math.tanh(${result.join('')})`;\r\n        default:\r\n          throw new Error('unknown activation type ' + activation);\r\n      }\r\n    }\r\n\r\n    const layers = this.toJSON().layers;\r\n    const layersAsMath = [];\r\n    let result;\r\n    for (let i in layers[layers.length - 1]) {\r\n      layersAsMath.push(nodeHandle(layers, layers.length - 1, i));\r\n    }\r\n    if (this.outputLookup) {\r\n      result = `{${\r\n        Object.keys(this.outputLookup)\r\n          .map((key, i) => `'${key}':${layersAsMath[i]}`)\r\n        }}`;\r\n    } else {\r\n      result = `[${layersAsMath.join(',')}]`;\r\n    }\r\n\r\n    return new Function('input', `${ needsVar ? 'var v;' : '' }return ${result};`);\r\n  }\r\n}"]}